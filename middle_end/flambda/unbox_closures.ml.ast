[
  structure_item (middle_end/flambda/unbox_closures.ml[17,1156+0]..[17,1156+42])
    Pstr_attribute "ocaml.warning"
    [
      structure_item (middle_end/flambda/unbox_closures.ml[17,1156+18]..[17,1156+41])
        Pstr_eval
        expression (middle_end/flambda/unbox_closures.ml[17,1156+18]..[17,1156+41])
          Pexp_constant PConst_string("+a-4-9-30-40-41-42-66",(middle_end/flambda/unbox_closures.ml[17,1156+19]..[17,1156+40]),None)
    ]
  structure_item (middle_end/flambda/unbox_closures.ml[18,1199+0]..[18,1199+37])
    Pstr_open Override
    module_expr (middle_end/flambda/unbox_closures.ml[18,1199+6]..[18,1199+37])
      Pmod_ident "Int_replace_polymorphic_compare" (middle_end/flambda/unbox_closures.ml[18,1199+6]..[18,1199+37])
  structure_item (middle_end/flambda/unbox_closures.ml[20,1238+0]..[20,1238+37])
    Pstr_module
    "ASA" (middle_end/flambda/unbox_closures.ml[20,1238+7]..[20,1238+10])
      module_expr (middle_end/flambda/unbox_closures.ml[20,1238+13]..[20,1238+37])
        Pmod_ident "Augment_specialised_args" (middle_end/flambda/unbox_closures.ml[20,1238+13]..[20,1238+37])
  structure_item (middle_end/flambda/unbox_closures.ml[21,1276+0]..[21,1276+33])
    Pstr_module
    "W" (middle_end/flambda/unbox_closures.ml[21,1276+7]..[21,1276+8])
      module_expr (middle_end/flambda/unbox_closures.ml[21,1276+11]..[21,1276+33])
        Pmod_ident "ASA.What_to_specialise" (middle_end/flambda/unbox_closures.ml[21,1276+11]..[21,1276+33])
  structure_item (middle_end/flambda/unbox_closures.ml[22,1310+0]..[22,1310+38])
    Pstr_module
    "E" (middle_end/flambda/unbox_closures.ml[22,1310+7]..[22,1310+8])
      module_expr (middle_end/flambda/unbox_closures.ml[22,1310+11]..[22,1310+38])
        Pmod_ident "Inline_and_simplify_aux.Env" (middle_end/flambda/unbox_closures.ml[22,1310+11]..[22,1310+38])
  structure_item (middle_end/flambda/unbox_closures.ml[24,1350+0]..[85,3997+3])
    Pstr_module
    "Transform" (middle_end/flambda/unbox_closures.ml[24,1350+7]..[24,1350+16])
      module_expr (middle_end/flambda/unbox_closures.ml[24,1350+19]..[85,3997+3])
        Pmod_structure
        [
          structure_item (middle_end/flambda/unbox_closures.ml[25,1376+2]..[25,1376+34])
            Pstr_value Nonrec
            [
              <def>
                pattern (middle_end/flambda/unbox_closures.ml[25,1376+6]..[25,1376+15])
                  Ppat_var "pass_name" (middle_end/flambda/unbox_closures.ml[25,1376+6]..[25,1376+15])
                expression (middle_end/flambda/unbox_closures.ml[25,1376+18]..[25,1376+34])
                  Pexp_constant PConst_string("unbox-closures",(middle_end/flambda/unbox_closures.ml[25,1376+19]..[25,1376+33]),None)
            ]
          structure_item (middle_end/flambda/unbox_closures.ml[27,1412+2]..[30,1544+62])
            Pstr_value Nonrec
            [
              <def>
                pattern (middle_end/flambda/unbox_closures.ml[27,1412+6]..[27,1412+18])
                  Ppat_var "precondition" (middle_end/flambda/unbox_closures.ml[27,1412+6]..[27,1412+18])
                expression (middle_end/flambda/unbox_closures.ml[27,1412+19]..[30,1544+62]) ghost
                  Pexp_fun
                  Labelled "env"
                  None
                  pattern (middle_end/flambda/unbox_closures.ml[27,1412+20]..[27,1412+23])
                    Ppat_var "env" (middle_end/flambda/unbox_closures.ml[27,1412+20]..[27,1412+23])
                  expression (middle_end/flambda/unbox_closures.ml[27,1412+24]..[30,1544+62]) ghost
                    Pexp_fun
                    Labelled "set_of_closures"
                    None
                    pattern (middle_end/flambda/unbox_closures.ml[27,1412+26]..[27,1412+67])
                      Ppat_constraint
                      pattern (middle_end/flambda/unbox_closures.ml[27,1412+26]..[27,1412+41])
                        Ppat_var "set_of_closures" (middle_end/flambda/unbox_closures.ml[27,1412+26]..[27,1412+41])
                      core_type (middle_end/flambda/unbox_closures.ml[27,1412+44]..[27,1412+67])
                        Ptyp_constr "Flambda.set_of_closures" (middle_end/flambda/unbox_closures.ml[27,1412+44]..[27,1412+67])
                        []
                    expression (middle_end/flambda/unbox_closures.ml[28,1483+4]..[30,1544+62])
                      Pexp_apply
                      expression (middle_end/flambda/unbox_closures.ml[29,1511+6]..[29,1511+8])
                        Pexp_ident "&&" (middle_end/flambda/unbox_closures.ml[29,1511+6]..[29,1511+8])
                      [
                        <arg>
                        Nolabel
                          expression (middle_end/flambda/unbox_closures.ml[28,1483+4]..[28,1483+27])
                            Pexp_apply
                            expression (middle_end/flambda/unbox_closures.ml[28,1483+4]..[28,1483+5])
                              Pexp_ident "!" (middle_end/flambda/unbox_closures.ml[28,1483+4]..[28,1483+5])
                            [
                              <arg>
                              Nolabel
                                expression (middle_end/flambda/unbox_closures.ml[28,1483+5]..[28,1483+27])
                                  Pexp_ident "Clflags.unbox_closures" (middle_end/flambda/unbox_closures.ml[28,1483+5]..[28,1483+27])
                            ]
                        <arg>
                        Nolabel
                          expression (middle_end/flambda/unbox_closures.ml[29,1511+9]..[30,1544+62])
                            Pexp_apply
                            expression (middle_end/flambda/unbox_closures.ml[30,1544+6]..[30,1544+8])
                              Pexp_ident "&&" (middle_end/flambda/unbox_closures.ml[30,1544+6]..[30,1544+8])
                            [
                              <arg>
                              Nolabel
                                expression (middle_end/flambda/unbox_closures.ml[29,1511+9]..[29,1511+32])
                                  Pexp_apply
                                  expression (middle_end/flambda/unbox_closures.ml[29,1511+9]..[29,1511+12])
                                    Pexp_ident "not" (middle_end/flambda/unbox_closures.ml[29,1511+9]..[29,1511+12])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (middle_end/flambda/unbox_closures.ml[29,1511+13]..[29,1511+32])
                                        Pexp_apply
                                        expression (middle_end/flambda/unbox_closures.ml[29,1511+14]..[29,1511+27])
                                          Pexp_ident "E.at_toplevel" (middle_end/flambda/unbox_closures.ml[29,1511+14]..[29,1511+27])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (middle_end/flambda/unbox_closures.ml[29,1511+28]..[29,1511+31])
                                              Pexp_ident "env" (middle_end/flambda/unbox_closures.ml[29,1511+28]..[29,1511+31])
                                        ]
                                  ]
                              <arg>
                              Nolabel
                                expression (middle_end/flambda/unbox_closures.ml[30,1544+9]..[30,1544+62])
                                  Pexp_apply
                                  expression (middle_end/flambda/unbox_closures.ml[30,1544+9]..[30,1544+12])
                                    Pexp_ident "not" (middle_end/flambda/unbox_closures.ml[30,1544+9]..[30,1544+12])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (middle_end/flambda/unbox_closures.ml[30,1544+13]..[30,1544+62])
                                        Pexp_apply
                                        expression (middle_end/flambda/unbox_closures.ml[30,1544+14]..[30,1544+35])
                                          Pexp_ident "Variable.Map.is_empty" (middle_end/flambda/unbox_closures.ml[30,1544+14]..[30,1544+35])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (middle_end/flambda/unbox_closures.ml[30,1544+36]..[30,1544+61])
                                              Pexp_field
                                              expression (middle_end/flambda/unbox_closures.ml[30,1544+36]..[30,1544+51])
                                                Pexp_ident "set_of_closures" (middle_end/flambda/unbox_closures.ml[30,1544+36]..[30,1544+51])
                                              "free_vars" (middle_end/flambda/unbox_closures.ml[30,1544+52]..[30,1544+61])
                                        ]
                                  ]
                            ]
                      ]
            ]
          structure_item (middle_end/flambda/unbox_closures.ml[32,1608+2]..[84,3989+7])
            Pstr_value Nonrec
            [
              <def>
                pattern (middle_end/flambda/unbox_closures.ml[32,1608+6]..[32,1608+24])
                  Ppat_var "what_to_specialise" (middle_end/flambda/unbox_closures.ml[32,1608+6]..[32,1608+24])
                expression (middle_end/flambda/unbox_closures.ml[32,1608+25]..[84,3989+7]) ghost
                  Pexp_fun
                  Labelled "env"
                  None
                  pattern (middle_end/flambda/unbox_closures.ml[32,1608+26]..[32,1608+29])
                    Ppat_var "env" (middle_end/flambda/unbox_closures.ml[32,1608+26]..[32,1608+29])
                  expression (middle_end/flambda/unbox_closures.ml[32,1608+30]..[84,3989+7]) ghost
                    Pexp_fun
                    Labelled "set_of_closures"
                    None
                    pattern (middle_end/flambda/unbox_closures.ml[32,1608+32]..[32,1608+73])
                      Ppat_constraint
                      pattern (middle_end/flambda/unbox_closures.ml[32,1608+32]..[32,1608+47])
                        Ppat_var "set_of_closures" (middle_end/flambda/unbox_closures.ml[32,1608+32]..[32,1608+47])
                      core_type (middle_end/flambda/unbox_closures.ml[32,1608+50]..[32,1608+73])
                        Ptyp_constr "Flambda.set_of_closures" (middle_end/flambda/unbox_closures.ml[32,1608+50]..[32,1608+73])
                        []
                    expression (middle_end/flambda/unbox_closures.ml[33,1685+4]..[84,3989+7])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (middle_end/flambda/unbox_closures.ml[33,1685+8]..[33,1685+26])
                            Ppat_var "what_to_specialise" (middle_end/flambda/unbox_closures.ml[33,1685+8]..[33,1685+26])
                          expression (middle_end/flambda/unbox_closures.ml[33,1685+29]..[33,1685+54])
                            Pexp_apply
                            expression (middle_end/flambda/unbox_closures.ml[33,1685+29]..[33,1685+37])
                              Pexp_ident "W.create" (middle_end/flambda/unbox_closures.ml[33,1685+29]..[33,1685+37])
                            [
                              <arg>
                              Labelled "set_of_closures"
                                expression (middle_end/flambda/unbox_closures.ml[33,1685+39]..[33,1685+54])
                                  Pexp_ident "set_of_closures" (middle_end/flambda/unbox_closures.ml[33,1685+39]..[33,1685+54])
                            ]
                      ]
                      expression (middle_end/flambda/unbox_closures.ml[34,1743+4]..[84,3989+7])
                        Pexp_ifthenelse
                        expression (middle_end/flambda/unbox_closures.ml[34,1743+7]..[34,1743+47])
                          Pexp_apply
                          expression (middle_end/flambda/unbox_closures.ml[34,1743+7]..[34,1743+10])
                            Pexp_ident "not" (middle_end/flambda/unbox_closures.ml[34,1743+7]..[34,1743+10])
                          [
                            <arg>
                            Nolabel
                              expression (middle_end/flambda/unbox_closures.ml[34,1743+11]..[34,1743+47])
                                Pexp_apply
                                expression (middle_end/flambda/unbox_closures.ml[34,1743+12]..[34,1743+24])
                                  Pexp_ident "precondition" (middle_end/flambda/unbox_closures.ml[34,1743+12]..[34,1743+24])
                                [
                                  <arg>
                                  Labelled "env"
                                    expression (middle_end/flambda/unbox_closures.ml[34,1743+26]..[34,1743+29])
                                      Pexp_ident "env" (middle_end/flambda/unbox_closures.ml[34,1743+26]..[34,1743+29])
                                  <arg>
                                  Labelled "set_of_closures"
                                    expression (middle_end/flambda/unbox_closures.ml[34,1743+31]..[34,1743+46])
                                      Pexp_ident "set_of_closures" (middle_end/flambda/unbox_closures.ml[34,1743+31]..[34,1743+46])
                                ]
                          ]
                        expression (middle_end/flambda/unbox_closures.ml[35,1796+6]..[35,1796+24])
                          Pexp_ident "what_to_specialise" (middle_end/flambda/unbox_closures.ml[35,1796+6]..[35,1796+24])
                        Some
                          expression (middle_end/flambda/unbox_closures.ml[36,1821+9]..[84,3989+7])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (middle_end/flambda/unbox_closures.ml[37,1836+10]..[37,1836+15])
                                  Ppat_var "round" (middle_end/flambda/unbox_closures.ml[37,1836+10]..[37,1836+15])
                                expression (middle_end/flambda/unbox_closures.ml[37,1836+18]..[37,1836+29])
                                  Pexp_apply
                                  expression (middle_end/flambda/unbox_closures.ml[37,1836+18]..[37,1836+25])
                                    Pexp_ident "E.round" (middle_end/flambda/unbox_closures.ml[37,1836+18]..[37,1836+25])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (middle_end/flambda/unbox_closures.ml[37,1836+26]..[37,1836+29])
                                        Pexp_ident "env" (middle_end/flambda/unbox_closures.ml[37,1836+26]..[37,1836+29])
                                  ]
                            ]
                            expression (middle_end/flambda/unbox_closures.ml[38,1869+6]..[83,3957+31])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (middle_end/flambda/unbox_closures.ml[38,1869+10]..[38,1869+26])
                                    Ppat_var "num_closure_vars" (middle_end/flambda/unbox_closures.ml[38,1869+10]..[38,1869+26])
                                  expression (middle_end/flambda/unbox_closures.ml[38,1869+29]..[38,1869+76])
                                    Pexp_apply
                                    expression (middle_end/flambda/unbox_closures.ml[38,1869+29]..[38,1869+50])
                                      Pexp_ident "Variable.Map.cardinal" (middle_end/flambda/unbox_closures.ml[38,1869+29]..[38,1869+50])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (middle_end/flambda/unbox_closures.ml[38,1869+51]..[38,1869+76])
                                          Pexp_field
                                          expression (middle_end/flambda/unbox_closures.ml[38,1869+51]..[38,1869+66])
                                            Pexp_ident "set_of_closures" (middle_end/flambda/unbox_closures.ml[38,1869+51]..[38,1869+66])
                                          "free_vars" (middle_end/flambda/unbox_closures.ml[38,1869+67]..[38,1869+76])
                                    ]
                              ]
                              expression (middle_end/flambda/unbox_closures.ml[39,1949+6]..[83,3957+31])
                                Pexp_letmodule "B" (middle_end/flambda/unbox_closures.ml[39,1949+17]..[39,1949+18])
                                module_expr (middle_end/flambda/unbox_closures.ml[39,1949+21]..[39,1949+42])
                                  Pmod_ident "Inlining_cost.Benefit" (middle_end/flambda/unbox_closures.ml[39,1949+21]..[39,1949+42])
                                expression (middle_end/flambda/unbox_closures.ml[40,1995+6]..[83,3957+31])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (middle_end/flambda/unbox_closures.ml[40,1995+10]..[40,1995+39])
                                        Ppat_var "saved_by_not_building_closure" (middle_end/flambda/unbox_closures.ml[40,1995+10]..[40,1995+39])
                                      expression (middle_end/flambda/unbox_closures.ml[43,2153+8]..[43,2153+62])
                                        Pexp_apply
                                        expression (middle_end/flambda/unbox_closures.ml[43,2153+8]..[43,2153+22])
                                          Pexp_ident "B.remove_prims" (middle_end/flambda/unbox_closures.ml[43,2153+8]..[43,2153+22])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (middle_end/flambda/unbox_closures.ml[43,2153+23]..[43,2153+45])
                                              Pexp_apply
                                              expression (middle_end/flambda/unbox_closures.ml[43,2153+24]..[43,2153+37])
                                                Pexp_ident "B.remove_call" (middle_end/flambda/unbox_closures.ml[43,2153+24]..[43,2153+37])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (middle_end/flambda/unbox_closures.ml[43,2153+38]..[43,2153+44])
                                                    Pexp_ident "B.zero" (middle_end/flambda/unbox_closures.ml[43,2153+38]..[43,2153+44])
                                              ]
                                          <arg>
                                          Nolabel
                                            expression (middle_end/flambda/unbox_closures.ml[43,2153+46]..[43,2153+62])
                                              Pexp_ident "num_closure_vars" (middle_end/flambda/unbox_closures.ml[43,2153+46]..[43,2153+62])
                                        ]
                                  ]
                                  expression (middle_end/flambda/unbox_closures.ml[45,2225+6]..[83,3957+31])
                                    Pexp_apply
                                    expression (middle_end/flambda/unbox_closures.ml[45,2225+6]..[45,2225+58])
                                      Pexp_ident "Flambda_iterators.fold_function_decls_ignoring_stubs" (middle_end/flambda/unbox_closures.ml[45,2225+6]..[45,2225+58])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (middle_end/flambda/unbox_closures.ml[45,2225+59]..[45,2225+74])
                                          Pexp_ident "set_of_closures" (middle_end/flambda/unbox_closures.ml[45,2225+59]..[45,2225+74])
                                      <arg>
                                      Labelled "init"
                                        expression (middle_end/flambda/unbox_closures.ml[46,2300+14]..[46,2300+32])
                                          Pexp_ident "what_to_specialise" (middle_end/flambda/unbox_closures.ml[46,2300+14]..[46,2300+32])
                                      <arg>
                                      Labelled "f"
                                        expression (middle_end/flambda/unbox_closures.ml[47,2333+11]..[83,3957+31])
                                          Pexp_fun
                                          Labelled "fun_var"
                                          None
                                          pattern (middle_end/flambda/unbox_closures.ml[47,2333+17]..[47,2333+24])
                                            Ppat_var "fun_var" (middle_end/flambda/unbox_closures.ml[47,2333+17]..[47,2333+24])
                                          expression (middle_end/flambda/unbox_closures.ml[47,2333+25]..[83,3957+30]) ghost
                                            Pexp_fun
                                            Labelled "function_decl"
                                            None
                                            pattern (middle_end/flambda/unbox_closures.ml[47,2333+27]..[47,2333+71])
                                              Ppat_constraint
                                              pattern (middle_end/flambda/unbox_closures.ml[47,2333+27]..[47,2333+40])
                                                Ppat_var "function_decl" (middle_end/flambda/unbox_closures.ml[47,2333+27]..[47,2333+40])
                                              core_type (middle_end/flambda/unbox_closures.ml[47,2333+43]..[47,2333+71])
                                                Ptyp_constr "Flambda.function_declaration" (middle_end/flambda/unbox_closures.ml[47,2333+43]..[47,2333+71])
                                                []
                                            expression (middle_end/flambda/unbox_closures.ml[48,2406+14]..[83,3957+30]) ghost
                                              Pexp_fun
                                              Nolabel
                                              None
                                              pattern (middle_end/flambda/unbox_closures.ml[48,2406+14]..[48,2406+32])
                                                Ppat_var "what_to_specialise" (middle_end/flambda/unbox_closures.ml[48,2406+14]..[48,2406+32])
                                              expression (middle_end/flambda/unbox_closures.ml[49,2442+10]..[83,3957+30])
                                                Pexp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (middle_end/flambda/unbox_closures.ml[49,2442+14]..[49,2442+23])
                                                      Ppat_var "body_size" (middle_end/flambda/unbox_closures.ml[49,2442+14]..[49,2442+23])
                                                    expression (middle_end/flambda/unbox_closures.ml[49,2442+26]..[49,2442+70])
                                                      Pexp_apply
                                                      expression (middle_end/flambda/unbox_closures.ml[49,2442+26]..[49,2442+51])
                                                        Pexp_ident "Inlining_cost.lambda_size" (middle_end/flambda/unbox_closures.ml[49,2442+26]..[49,2442+51])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (middle_end/flambda/unbox_closures.ml[49,2442+52]..[49,2442+70])
                                                            Pexp_field
                                                            expression (middle_end/flambda/unbox_closures.ml[49,2442+52]..[49,2442+65])
                                                              Pexp_ident "function_decl" (middle_end/flambda/unbox_closures.ml[49,2442+52]..[49,2442+65])
                                                            "body" (middle_end/flambda/unbox_closures.ml[49,2442+66]..[49,2442+70])
                                                      ]
                                                ]
                                                expression (middle_end/flambda/unbox_closures.ml[54,2782+10]..[83,3957+30])
                                                  Pexp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (middle_end/flambda/unbox_closures.ml[54,2782+14]..[54,2782+39])
                                                        Ppat_var "small_enough_to_duplicate" (middle_end/flambda/unbox_closures.ml[54,2782+14]..[54,2782+39])
                                                      expression (middle_end/flambda/unbox_closures.ml[55,2824+12]..[65,3231+26])
                                                        Pexp_letmodule "W" (middle_end/flambda/unbox_closures.ml[55,2824+23]..[55,2824+24])
                                                        module_expr (middle_end/flambda/unbox_closures.ml[55,2824+27]..[55,2824+67])
                                                          Pmod_ident "Inlining_cost.Whether_sufficient_benefit" (middle_end/flambda/unbox_closures.ml[55,2824+27]..[55,2824+67])
                                                        expression (middle_end/flambda/unbox_closures.ml[56,2895+12]..[65,3231+26])
                                                          Pexp_let Nonrec
                                                          [
                                                            <def>
                                                              pattern (middle_end/flambda/unbox_closures.ml[56,2895+16]..[56,2895+19])
                                                                Ppat_var "wsb" (middle_end/flambda/unbox_closures.ml[56,2895+16]..[56,2895+19])
                                                              expression (middle_end/flambda/unbox_closures.ml[57,2917+14]..[63,3193+22])
                                                                Pexp_apply
                                                                expression (middle_end/flambda/unbox_closures.ml[57,2917+14]..[57,2917+31])
                                                                  Pexp_ident "W.create_estimate" (middle_end/flambda/unbox_closures.ml[57,2917+14]..[57,2917+31])
                                                                [
                                                                  <arg>
                                                                  Labelled "original_size"
                                                                    expression (middle_end/flambda/unbox_closures.ml[57,2917+47]..[57,2917+48])
                                                                      Pexp_constant PConst_int (0,None)
                                                                  <arg>
                                                                  Labelled "toplevel"
                                                                    expression (middle_end/flambda/unbox_closures.ml[58,2966+26]..[58,2966+31])
                                                                      Pexp_construct "false" (middle_end/flambda/unbox_closures.ml[58,2966+26]..[58,2966+31])
                                                                      None
                                                                  <arg>
                                                                  Labelled "branch_depth"
                                                                    expression (middle_end/flambda/unbox_closures.ml[59,2998+30]..[59,2998+31])
                                                                      Pexp_constant PConst_int (0,None)
                                                                  <arg>
                                                                  Labelled "new_size"
                                                                    expression (middle_end/flambda/unbox_closures.ml[60,3030+26]..[60,3030+76])
                                                                      Pexp_apply
                                                                      expression (middle_end/flambda/unbox_closures.ml[60,3030+72]..[60,3030+73])
Pexp_ident "+" (middle_end/flambda/unbox_closures.ml[60,3030+72]..[60,3030+73])
                                                                      [
<arg>
Nolabel
  expression (middle_end/flambda/unbox_closures.ml[60,3030+27]..[60,3030+71])
    Pexp_apply
    expression (middle_end/flambda/unbox_closures.ml[60,3030+38]..[60,3030+39])
      Pexp_ident "/" (middle_end/flambda/unbox_closures.ml[60,3030+38]..[60,3030+39])
    [
      <arg>
      Nolabel
        expression (middle_end/flambda/unbox_closures.ml[60,3030+28]..[60,3030+37])
          Pexp_ident "body_size" (middle_end/flambda/unbox_closures.ml[60,3030+28]..[60,3030+37])
      <arg>
      Nolabel
        expression (middle_end/flambda/unbox_closures.ml[60,3030+40]..[60,3030+70])
          Pexp_apply
          expression (middle_end/flambda/unbox_closures.ml[60,3030+40]..[60,3030+41])
            Pexp_ident "!" (middle_end/flambda/unbox_closures.ml[60,3030+40]..[60,3030+41])
          [
            <arg>
            Nolabel
              expression (middle_end/flambda/unbox_closures.ml[60,3030+41]..[60,3030+70])
                Pexp_ident "Clflags.unbox_closures_factor" (middle_end/flambda/unbox_closures.ml[60,3030+41]..[60,3030+70])
          ]
    ]
<arg>
Nolabel
  expression (middle_end/flambda/unbox_closures.ml[60,3030+74]..[60,3030+75])
    Pexp_constant PConst_int (1,None)
                                                                      ]
                                                                  <arg>
                                                                  Labelled "benefit"
                                                                    expression (middle_end/flambda/unbox_closures.ml[61,3107+25]..[61,3107+54])
                                                                      Pexp_ident "saved_by_not_building_closure" (middle_end/flambda/unbox_closures.ml[61,3107+25]..[61,3107+54])
                                                                  <arg>
                                                                  Labelled "lifting"
                                                                    expression (middle_end/flambda/unbox_closures.ml[62,3162+25]..[62,3162+30])
                                                                      Pexp_construct "false" (middle_end/flambda/unbox_closures.ml[62,3162+25]..[62,3162+30])
                                                                      None
                                                                  <arg>
                                                                  Labelled "round"
                                                                    expression (middle_end/flambda/unbox_closures.ml[63,3193+17]..[63,3193+22])
                                                                      Pexp_ident "round" (middle_end/flambda/unbox_closures.ml[63,3193+17]..[63,3193+22])
                                                                ]
                                                          ]
                                                          expression (middle_end/flambda/unbox_closures.ml[65,3231+12]..[65,3231+26])
                                                            Pexp_apply
                                                            expression (middle_end/flambda/unbox_closures.ml[65,3231+12]..[65,3231+22])
                                                              Pexp_ident "W.evaluate" (middle_end/flambda/unbox_closures.ml[65,3231+12]..[65,3231+22])
                                                            [
                                                              <arg>
                                                              Nolabel
                                                                expression (middle_end/flambda/unbox_closures.ml[65,3231+23]..[65,3231+26])
                                                                  Pexp_ident "wsb" (middle_end/flambda/unbox_closures.ml[65,3231+23]..[65,3231+26])
                                                            ]
                                                  ]
                                                  expression (middle_end/flambda/unbox_closures.ml[67,3271+10]..[83,3957+30])
                                                    Pexp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (middle_end/flambda/unbox_closures.ml[67,3271+14]..[67,3271+32])
                                                          Ppat_var "what_to_specialise" (middle_end/flambda/unbox_closures.ml[67,3271+14]..[67,3271+32])
                                                        expression (middle_end/flambda/unbox_closures.ml[68,3306+12]..[71,3444+32])
                                                          Pexp_ifthenelse
                                                          expression (middle_end/flambda/unbox_closures.ml[68,3306+15]..[68,3306+40])
                                                            Pexp_ident "small_enough_to_duplicate" (middle_end/flambda/unbox_closures.ml[68,3306+15]..[68,3306+40])
                                                          expression (middle_end/flambda/unbox_closures.ml[69,3352+14]..[69,3352+74])
                                                            Pexp_apply
                                                            expression (middle_end/flambda/unbox_closures.ml[69,3352+14]..[69,3352+46])
                                                              Pexp_ident "W.make_direct_call_surrogate_for" (middle_end/flambda/unbox_closures.ml[69,3352+14]..[69,3352+46])
                                                            [
                                                              <arg>
                                                              Nolabel
                                                                expression (middle_end/flambda/unbox_closures.ml[69,3352+47]..[69,3352+65])
                                                                  Pexp_ident "what_to_specialise" (middle_end/flambda/unbox_closures.ml[69,3352+47]..[69,3352+65])
                                                              <arg>
                                                              Labelled "fun_var"
                                                                expression (middle_end/flambda/unbox_closures.ml[69,3352+67]..[69,3352+74])
                                                                  Pexp_ident "fun_var" (middle_end/flambda/unbox_closures.ml[69,3352+67]..[69,3352+74])
                                                            ]
                                                          Some
                                                            expression (middle_end/flambda/unbox_closures.ml[71,3444+14]..[71,3444+32])
                                                              Pexp_ident "what_to_specialise" (middle_end/flambda/unbox_closures.ml[71,3444+14]..[71,3444+32])
                                                    ]
                                                    expression (middle_end/flambda/unbox_closures.ml[73,3490+10]..[83,3957+30])
                                                      Pexp_let Nonrec
                                                      [
                                                        <def>
                                                          pattern (middle_end/flambda/unbox_closures.ml[73,3490+14]..[73,3490+34])
                                                            Ppat_var "bound_by_the_closure" (middle_end/flambda/unbox_closures.ml[73,3490+14]..[73,3490+34])
                                                          expression (middle_end/flambda/unbox_closures.ml[74,3527+12]..[76,3624+44])
                                                            Pexp_apply
                                                            expression (middle_end/flambda/unbox_closures.ml[74,3527+12]..[74,3527+56])
                                                              Pexp_ident "Flambda_utils.variables_bound_by_the_closure" (middle_end/flambda/unbox_closures.ml[74,3527+12]..[74,3527+56])
                                                            [
                                                              <arg>
                                                              Nolabel
                                                                expression (middle_end/flambda/unbox_closures.ml[75,3584+14]..[75,3584+39])
                                                                  Pexp_apply
                                                                  expression (middle_end/flambda/unbox_closures.ml[75,3584+15]..[75,3584+30])
                                                                    Pexp_ident "Closure_id.wrap" (middle_end/flambda/unbox_closures.ml[75,3584+15]..[75,3584+30])
                                                                  [
                                                                    <arg>
                                                                    Nolabel
                                                                      expression (middle_end/flambda/unbox_closures.ml[75,3584+31]..[75,3584+38])
Pexp_ident "fun_var" (middle_end/flambda/unbox_closures.ml[75,3584+31]..[75,3584+38])
                                                                  ]
                                                              <arg>
                                                              Nolabel
                                                                expression (middle_end/flambda/unbox_closures.ml[76,3624+14]..[76,3624+44])
                                                                  Pexp_field
                                                                  expression (middle_end/flambda/unbox_closures.ml[76,3624+14]..[76,3624+29])
                                                                    Pexp_ident "set_of_closures" (middle_end/flambda/unbox_closures.ml[76,3624+14]..[76,3624+29])
                                                                  "function_decls" (middle_end/flambda/unbox_closures.ml[76,3624+30]..[76,3624+44])
                                                            ]
                                                      ]
                                                      expression (middle_end/flambda/unbox_closures.ml[78,3682+10]..[83,3957+30])
                                                        Pexp_apply
                                                        expression (middle_end/flambda/unbox_closures.ml[78,3682+10]..[78,3682+27])
                                                          Pexp_ident "Variable.Set.fold" (middle_end/flambda/unbox_closures.ml[78,3682+10]..[78,3682+27])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (middle_end/flambda/unbox_closures.ml[78,3682+28]..[81,3854+69])
                                                              Pexp_fun
                                                              Nolabel
                                                              None
                                                              pattern (middle_end/flambda/unbox_closures.ml[78,3682+33]..[78,3682+47])
                                                                Ppat_var "inner_free_var" (middle_end/flambda/unbox_closures.ml[78,3682+33]..[78,3682+47])
                                                              expression (middle_end/flambda/unbox_closures.ml[78,3682+48]..[81,3854+68]) ghost
                                                                Pexp_fun
                                                                Nolabel
                                                                None
                                                                pattern (middle_end/flambda/unbox_closures.ml[78,3682+48]..[78,3682+66])
                                                                  Ppat_var "what_to_specialise" (middle_end/flambda/unbox_closures.ml[78,3682+48]..[78,3682+66])
                                                                expression (middle_end/flambda/unbox_closures.ml[79,3752+14]..[81,3854+68])
                                                                  Pexp_apply
                                                                  expression (middle_end/flambda/unbox_closures.ml[79,3752+14]..[79,3752+35])
                                                                    Pexp_ident "W.new_specialised_arg" (middle_end/flambda/unbox_closures.ml[79,3752+14]..[79,3752+35])
                                                                  [
                                                                    <arg>
                                                                    Nolabel
                                                                      expression (middle_end/flambda/unbox_closures.ml[79,3752+36]..[79,3752+54])
Pexp_ident "what_to_specialise" (middle_end/flambda/unbox_closures.ml[79,3752+36]..[79,3752+54])
                                                                    <arg>
                                                                    Labelled "fun_var"
                                                                      expression (middle_end/flambda/unbox_closures.ml[80,3807+17]..[80,3807+24])
Pexp_ident "fun_var" (middle_end/flambda/unbox_closures.ml[80,3807+17]..[80,3807+24])
                                                                    <arg>
                                                                    Labelled "group"
                                                                      expression (middle_end/flambda/unbox_closures.ml[80,3807+32]..[80,3807+46])
Pexp_ident "inner_free_var" (middle_end/flambda/unbox_closures.ml[80,3807+32]..[80,3807+46])
                                                                    <arg>
                                                                    Labelled "definition"
                                                                      expression (middle_end/flambda/unbox_closures.ml[81,3854+28]..[81,3854+68])
Pexp_construct "Existing_inner_free_var" (middle_end/flambda/unbox_closures.ml[81,3854+29]..[81,3854+52])
Some
  expression (middle_end/flambda/unbox_closures.ml[81,3854+53]..[81,3854+67])
    Pexp_ident "inner_free_var" (middle_end/flambda/unbox_closures.ml[81,3854+53]..[81,3854+67])
                                                                  ]
                                                          <arg>
                                                          Nolabel
                                                            expression (middle_end/flambda/unbox_closures.ml[82,3924+12]..[82,3924+32])
                                                              Pexp_ident "bound_by_the_closure" (middle_end/flambda/unbox_closures.ml[82,3924+12]..[82,3924+32])
                                                          <arg>
                                                          Nolabel
                                                            expression (middle_end/flambda/unbox_closures.ml[83,3957+12]..[83,3957+30])
                                                              Pexp_ident "what_to_specialise" (middle_end/flambda/unbox_closures.ml[83,3957+12]..[83,3957+30])
                                                        ]
                                    ]
            ]
        ]
  structure_item (middle_end/flambda/unbox_closures.ml[87,4002+0]..[87,4002+28])
    Pstr_include    module_expr (middle_end/flambda/unbox_closures.ml[87,4002+8]..[87,4002+28])
      Pmod_apply
      module_expr (middle_end/flambda/unbox_closures.ml[87,4002+8]..[87,4002+16])
        Pmod_ident "ASA.Make" (middle_end/flambda/unbox_closures.ml[87,4002+8]..[87,4002+16])
      module_expr (middle_end/flambda/unbox_closures.ml[87,4002+18]..[87,4002+27])
        Pmod_ident "Transform" (middle_end/flambda/unbox_closures.ml[87,4002+18]..[87,4002+27])
]

