[
  structure_item (asmcomp/reg.ml[16,1079+0]..[16,1079+8])
    Pstr_open Fresh
    module_expr (asmcomp/reg.ml[16,1079+5]..[16,1079+8])
      Pmod_ident "Cmm" (asmcomp/reg.ml[16,1079+5]..[16,1079+8])
  structure_item (asmcomp/reg.ml[18,1089+0]..[18,1089+22])
    Pstr_module
    "V" (asmcomp/reg.ml[18,1089+7]..[18,1089+8])
      module_expr (asmcomp/reg.ml[18,1089+11]..[18,1089+22])
        Pmod_ident "Backend_var" (asmcomp/reg.ml[18,1089+11]..[18,1089+22])
  structure_item (asmcomp/reg.ml[20,1113+0]..[35,1405+3])
    Pstr_module
    "Raw_name" (asmcomp/reg.ml[20,1113+7]..[20,1113+15])
      module_expr (asmcomp/reg.ml[20,1113+18]..[35,1405+3])
        Pmod_structure
        [
          structure_item (asmcomp/reg.ml[21,1138+2]..[24,1168+16])
            Pstr_type Rec
            [
              type_declaration "t" (asmcomp/reg.ml[21,1138+7]..[21,1138+8]) (asmcomp/reg.ml[21,1138+2]..[24,1168+16])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_variant
                    [
                      (asmcomp/reg.ml[22,1149+4]..[22,1149+10])
                        "Anon" (asmcomp/reg.ml[22,1149+6]..[22,1149+10])
                        []
                        None
                      (asmcomp/reg.ml[23,1160+4]..[23,1160+7])
                        "R" (asmcomp/reg.ml[23,1160+6]..[23,1160+7])
                        []
                        None
                      (asmcomp/reg.ml[24,1168+4]..[24,1168+16])
                        "Var" (asmcomp/reg.ml[24,1168+6]..[24,1168+9])
                        [
                          core_type (asmcomp/reg.ml[24,1168+13]..[24,1168+16])
                            Ptyp_constr "V.t" (asmcomp/reg.ml[24,1168+13]..[24,1168+16])
                            []
                        ]
                        None
                    ]
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          structure_item (asmcomp/reg.ml[26,1186+2]..[26,1186+35])
            Pstr_value Nonrec
            [
              <def>
                pattern (asmcomp/reg.ml[26,1186+6]..[26,1186+21])
                  Ppat_var "create_from_var" (asmcomp/reg.ml[26,1186+6]..[26,1186+21])
                expression (asmcomp/reg.ml[26,1186+22]..[26,1186+35]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (asmcomp/reg.ml[26,1186+22]..[26,1186+25])
                    Ppat_var "var" (asmcomp/reg.ml[26,1186+22]..[26,1186+25])
                  expression (asmcomp/reg.ml[26,1186+28]..[26,1186+35])
                    Pexp_construct "Var" (asmcomp/reg.ml[26,1186+28]..[26,1186+31])
                    Some
                      expression (asmcomp/reg.ml[26,1186+32]..[26,1186+35])
                        Pexp_ident "var" (asmcomp/reg.ml[26,1186+32]..[26,1186+35])
            ]
          structure_item (asmcomp/reg.ml[28,1223+2]..[34,1347+57])
            Pstr_value Nonrec
            [
              <def>
                pattern (asmcomp/reg.ml[28,1223+6]..[28,1223+15])
                  Ppat_var "to_string" (asmcomp/reg.ml[28,1223+6]..[28,1223+15])
                expression (asmcomp/reg.ml[28,1223+16]..[34,1347+57]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (asmcomp/reg.ml[28,1223+16]..[28,1223+17])
                    Ppat_var "t" (asmcomp/reg.ml[28,1223+16]..[28,1223+17])
                  expression (asmcomp/reg.ml[29,1243+4]..[34,1347+57])
                    Pexp_match
                    expression (asmcomp/reg.ml[29,1243+10]..[29,1243+11])
                      Pexp_ident "t" (asmcomp/reg.ml[29,1243+10]..[29,1243+11])
                    [
                      <case>
                        pattern (asmcomp/reg.ml[30,1260+6]..[30,1260+10])
                          Ppat_construct "Anon" (asmcomp/reg.ml[30,1260+6]..[30,1260+10])
                          None
                        expression (asmcomp/reg.ml[30,1260+14]..[30,1260+18])
                          Pexp_construct "None" (asmcomp/reg.ml[30,1260+14]..[30,1260+18])
                          None
                      <case>
                        pattern (asmcomp/reg.ml[31,1279+6]..[31,1279+7])
                          Ppat_construct "R" (asmcomp/reg.ml[31,1279+6]..[31,1279+7])
                          None
                        expression (asmcomp/reg.ml[31,1279+11]..[31,1279+19])
                          Pexp_construct "Some" (asmcomp/reg.ml[31,1279+11]..[31,1279+15])
                          Some
                            expression (asmcomp/reg.ml[31,1279+16]..[31,1279+19])
                              Pexp_constant PConst_string("R",(asmcomp/reg.ml[31,1279+17]..[31,1279+18]),None)
                      <case>
                        pattern (asmcomp/reg.ml[32,1299+6]..[32,1299+13])
                          Ppat_construct "Var" (asmcomp/reg.ml[32,1299+6]..[32,1299+9])
                          Some
                            []
                            pattern (asmcomp/reg.ml[32,1299+10]..[32,1299+13])
                              Ppat_var "var" (asmcomp/reg.ml[32,1299+10]..[32,1299+13])
                        expression (asmcomp/reg.ml[33,1316+6]..[34,1347+57])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (asmcomp/reg.ml[33,1316+10]..[33,1316+14])
                                Ppat_var "name" (asmcomp/reg.ml[33,1316+10]..[33,1316+14])
                              expression (asmcomp/reg.ml[33,1316+17]..[33,1316+27])
                                Pexp_apply
                                expression (asmcomp/reg.ml[33,1316+17]..[33,1316+23])
                                  Pexp_ident "V.name" (asmcomp/reg.ml[33,1316+17]..[33,1316+23])
                                [
                                  <arg>
                                  Nolabel
                                    expression (asmcomp/reg.ml[33,1316+24]..[33,1316+27])
                                      Pexp_ident "var" (asmcomp/reg.ml[33,1316+24]..[33,1316+27])
                                ]
                          ]
                          expression (asmcomp/reg.ml[34,1347+6]..[34,1347+57])
                            Pexp_ifthenelse
                            expression (asmcomp/reg.ml[34,1347+9]..[34,1347+32])
                              Pexp_apply
                              expression (asmcomp/reg.ml[34,1347+28]..[34,1347+30])
                                Pexp_ident "<=" (asmcomp/reg.ml[34,1347+28]..[34,1347+30])
                              [
                                <arg>
                                Nolabel
                                  expression (asmcomp/reg.ml[34,1347+9]..[34,1347+27])
                                    Pexp_apply
                                    expression (asmcomp/reg.ml[34,1347+9]..[34,1347+22])
                                      Pexp_ident "String.length" (asmcomp/reg.ml[34,1347+9]..[34,1347+22])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (asmcomp/reg.ml[34,1347+23]..[34,1347+27])
                                          Pexp_ident "name" (asmcomp/reg.ml[34,1347+23]..[34,1347+27])
                                    ]
                                <arg>
                                Nolabel
                                  expression (asmcomp/reg.ml[34,1347+31]..[34,1347+32])
                                    Pexp_constant PConst_int (0,None)
                              ]
                            expression (asmcomp/reg.ml[34,1347+38]..[34,1347+42])
                              Pexp_construct "None" (asmcomp/reg.ml[34,1347+38]..[34,1347+42])
                              None
                            Some
                              expression (asmcomp/reg.ml[34,1347+48]..[34,1347+57])
                                Pexp_construct "Some" (asmcomp/reg.ml[34,1347+48]..[34,1347+52])
                                Some
                                  expression (asmcomp/reg.ml[34,1347+53]..[34,1347+57])
                                    Pexp_ident "name" (asmcomp/reg.ml[34,1347+53]..[34,1347+57])
                    ]
            ]
        ]
  structure_item (asmcomp/reg.ml[37,1410+0]..[58,1859+19])
    Pstr_type Rec
    [
      type_declaration "t" (asmcomp/reg.ml[37,1410+5]..[37,1410+6]) (asmcomp/reg.ml[37,1410+0]..[48,1702+26])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (asmcomp/reg.ml[38,1419+4]..[38,1419+33])
                Mutable
                "raw_name" (asmcomp/reg.ml[38,1419+12]..[38,1419+20])                core_type (asmcomp/reg.ml[38,1419+22]..[38,1419+32])
                  Ptyp_constr "Raw_name.t" (asmcomp/reg.ml[38,1419+22]..[38,1419+32])
                  []
              (asmcomp/reg.ml[39,1453+4]..[39,1453+15])
                Immutable
                "stamp" (asmcomp/reg.ml[39,1453+4]..[39,1453+9])                core_type (asmcomp/reg.ml[39,1453+11]..[39,1453+14])
                  Ptyp_constr "int" (asmcomp/reg.ml[39,1453+11]..[39,1453+14])
                  []
              (asmcomp/reg.ml[40,1469+4]..[40,1469+32])
                Immutable
                "typ" (asmcomp/reg.ml[40,1469+4]..[40,1469+7])                core_type (asmcomp/reg.ml[40,1469+9]..[40,1469+31])
                  Ptyp_constr "Cmm.machtype_component" (asmcomp/reg.ml[40,1469+9]..[40,1469+31])
                  []
              (asmcomp/reg.ml[41,1502+4]..[41,1502+26])
                Mutable
                "loc" (asmcomp/reg.ml[41,1502+12]..[41,1502+15])                core_type (asmcomp/reg.ml[41,1502+17]..[41,1502+25])
                  Ptyp_constr "location" (asmcomp/reg.ml[41,1502+17]..[41,1502+25])
                  []
              (asmcomp/reg.ml[42,1529+4]..[42,1529+24])
                Mutable
                "spill" (asmcomp/reg.ml[42,1529+12]..[42,1529+17])                core_type (asmcomp/reg.ml[42,1529+19]..[42,1529+23])
                  Ptyp_constr "bool" (asmcomp/reg.ml[42,1529+19]..[42,1529+23])
                  []
              (asmcomp/reg.ml[43,1554+4]..[43,1554+29])
                Mutable
                "part" (asmcomp/reg.ml[43,1554+12]..[43,1554+16])                core_type (asmcomp/reg.ml[43,1554+18]..[43,1554+28])
                  Ptyp_constr "option" (asmcomp/reg.ml[43,1554+22]..[43,1554+28])
                  [
                    core_type (asmcomp/reg.ml[43,1554+18]..[43,1554+21])
                      Ptyp_constr "int" (asmcomp/reg.ml[43,1554+18]..[43,1554+21])
                      []
                  ]
              (asmcomp/reg.ml[44,1584+4]..[44,1584+27])
                Mutable
                "interf" (asmcomp/reg.ml[44,1584+12]..[44,1584+18])                core_type (asmcomp/reg.ml[44,1584+20]..[44,1584+26])
                  Ptyp_constr "list" (asmcomp/reg.ml[44,1584+22]..[44,1584+26])
                  [
                    core_type (asmcomp/reg.ml[44,1584+20]..[44,1584+21])
                      Ptyp_constr "t" (asmcomp/reg.ml[44,1584+20]..[44,1584+21])
                      []
                  ]
              (asmcomp/reg.ml[45,1612+4]..[45,1612+35])
                Mutable
                "prefer" (asmcomp/reg.ml[45,1612+12]..[45,1612+18])                core_type (asmcomp/reg.ml[45,1612+20]..[45,1612+34])
                  Ptyp_constr "list" (asmcomp/reg.ml[45,1612+30]..[45,1612+34])
                  [
                    core_type (asmcomp/reg.ml[45,1612+21]..[45,1612+28])
                      Ptyp_tuple
                      [
                        core_type (asmcomp/reg.ml[45,1612+21]..[45,1612+22])
                          Ptyp_constr "t" (asmcomp/reg.ml[45,1612+21]..[45,1612+22])
                          []
                        core_type (asmcomp/reg.ml[45,1612+25]..[45,1612+28])
                          Ptyp_constr "int" (asmcomp/reg.ml[45,1612+25]..[45,1612+28])
                          []
                      ]
                  ]
              (asmcomp/reg.ml[46,1648+4]..[46,1648+24])
                Mutable
                "degree" (asmcomp/reg.ml[46,1648+12]..[46,1648+18])                core_type (asmcomp/reg.ml[46,1648+20]..[46,1648+23])
                  Ptyp_constr "int" (asmcomp/reg.ml[46,1648+20]..[46,1648+23])
                  []
              (asmcomp/reg.ml[47,1673+4]..[47,1673+28])
                Mutable
                "spill_cost" (asmcomp/reg.ml[47,1673+12]..[47,1673+22])                core_type (asmcomp/reg.ml[47,1673+24]..[47,1673+27])
                  Ptyp_constr "int" (asmcomp/reg.ml[47,1673+24]..[47,1673+27])
                  []
              (asmcomp/reg.ml[48,1702+4]..[48,1702+24])
                Mutable
                "visited" (asmcomp/reg.ml[48,1702+12]..[48,1702+19])                core_type (asmcomp/reg.ml[48,1702+21]..[48,1702+24])
                  Ptyp_constr "int" (asmcomp/reg.ml[48,1702+21]..[48,1702+24])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "location" (asmcomp/reg.ml[50,1730+4]..[50,1730+12]) (asmcomp/reg.ml[50,1730+0]..[53,1772+27])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (asmcomp/reg.ml[51,1745+4]..[51,1745+11])
                "Unknown" (asmcomp/reg.ml[51,1745+4]..[51,1745+11])
                []
                None
              (asmcomp/reg.ml[52,1757+2]..[52,1757+14])
                "Reg" (asmcomp/reg.ml[52,1757+4]..[52,1757+7])
                [
                  core_type (asmcomp/reg.ml[52,1757+11]..[52,1757+14])
                    Ptyp_constr "int" (asmcomp/reg.ml[52,1757+11]..[52,1757+14])
                    []
                ]
                None
              (asmcomp/reg.ml[53,1772+2]..[53,1772+27])
                "Stack" (asmcomp/reg.ml[53,1772+4]..[53,1772+9])
                [
                  core_type (asmcomp/reg.ml[53,1772+13]..[53,1772+27])
                    Ptyp_constr "stack_location" (asmcomp/reg.ml[53,1772+13]..[53,1772+27])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "stack_location" (asmcomp/reg.ml[55,1801+4]..[55,1801+18]) (asmcomp/reg.ml[55,1801+0]..[58,1859+19])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (asmcomp/reg.ml[56,1822+4]..[56,1822+16])
                "Local" (asmcomp/reg.ml[56,1822+4]..[56,1822+9])
                [
                  core_type (asmcomp/reg.ml[56,1822+13]..[56,1822+16])
                    Ptyp_constr "int" (asmcomp/reg.ml[56,1822+13]..[56,1822+16])
                    []
                ]
                None
              (asmcomp/reg.ml[57,1839+2]..[57,1839+19])
                "Incoming" (asmcomp/reg.ml[57,1839+4]..[57,1839+12])
                [
                  core_type (asmcomp/reg.ml[57,1839+16]..[57,1839+19])
                    Ptyp_constr "int" (asmcomp/reg.ml[57,1839+16]..[57,1839+19])
                    []
                ]
                None
              (asmcomp/reg.ml[58,1859+2]..[58,1859+19])
                "Outgoing" (asmcomp/reg.ml[58,1859+4]..[58,1859+12])
                [
                  core_type (asmcomp/reg.ml[58,1859+16]..[58,1859+19])
                    Ptyp_constr "int" (asmcomp/reg.ml[58,1859+16]..[58,1859+19])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (asmcomp/reg.ml[60,1880+0]..[60,1880+12])
    Pstr_type Rec
    [
      type_declaration "reg" (asmcomp/reg.ml[60,1880+5]..[60,1880+8]) (asmcomp/reg.ml[60,1880+0]..[60,1880+12])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (asmcomp/reg.ml[60,1880+11]..[60,1880+12])
              Ptyp_constr "t" (asmcomp/reg.ml[60,1880+11]..[60,1880+12])
              []
    ]
  structure_item (asmcomp/reg.ml[62,1894+0]..[66,2076+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/reg.ml[62,1894+4]..[62,1894+9])
          Ppat_var "dummy" (asmcomp/reg.ml[62,1894+4]..[62,1894+9])
        expression (asmcomp/reg.ml[63,1906+2]..[66,2076+3])
          Pexp_record
          [
            "raw_name" (asmcomp/reg.ml[63,1906+4]..[63,1906+12])
              expression (asmcomp/reg.ml[63,1906+15]..[63,1906+28])
                Pexp_construct "Raw_name.Anon" (asmcomp/reg.ml[63,1906+15]..[63,1906+28])
                None
            "stamp" (asmcomp/reg.ml[63,1906+30]..[63,1906+35])
              expression (asmcomp/reg.ml[63,1906+38]..[63,1906+39])
                Pexp_constant PConst_int (0,None)
            "typ" (asmcomp/reg.ml[63,1906+41]..[63,1906+44])
              expression (asmcomp/reg.ml[63,1906+47]..[63,1906+50])
                Pexp_construct "Int" (asmcomp/reg.ml[63,1906+47]..[63,1906+50])
                None
            "loc" (asmcomp/reg.ml[63,1906+52]..[63,1906+55])
              expression (asmcomp/reg.ml[63,1906+58]..[63,1906+65])
                Pexp_construct "Unknown" (asmcomp/reg.ml[63,1906+58]..[63,1906+65])
                None
            "spill" (asmcomp/reg.ml[64,1973+4]..[64,1973+9])
              expression (asmcomp/reg.ml[64,1973+12]..[64,1973+17])
                Pexp_construct "false" (asmcomp/reg.ml[64,1973+12]..[64,1973+17])
                None
            "interf" (asmcomp/reg.ml[64,1973+19]..[64,1973+25])
              expression (asmcomp/reg.ml[64,1973+28]..[64,1973+30])
                Pexp_construct "[]" (asmcomp/reg.ml[64,1973+28]..[64,1973+30])
                None
            "prefer" (asmcomp/reg.ml[64,1973+32]..[64,1973+38])
              expression (asmcomp/reg.ml[64,1973+41]..[64,1973+43])
                Pexp_construct "[]" (asmcomp/reg.ml[64,1973+41]..[64,1973+43])
                None
            "degree" (asmcomp/reg.ml[64,1973+45]..[64,1973+51])
              expression (asmcomp/reg.ml[64,1973+54]..[64,1973+55])
                Pexp_constant PConst_int (0,None)
            "spill_cost" (asmcomp/reg.ml[64,1973+57]..[64,1973+67])
              expression (asmcomp/reg.ml[64,1973+70]..[64,1973+71])
                Pexp_constant PConst_int (0,None)
            "visited" (asmcomp/reg.ml[65,2046+4]..[65,2046+11])
              expression (asmcomp/reg.ml[65,2046+14]..[65,2046+15])
                Pexp_constant PConst_int (0,None)
            "part" (asmcomp/reg.ml[65,2046+17]..[65,2046+21])
              expression (asmcomp/reg.ml[65,2046+24]..[65,2046+28])
                Pexp_construct "None" (asmcomp/reg.ml[65,2046+24]..[65,2046+28])
                None
          ]
          None
    ]
  structure_item (asmcomp/reg.ml[68,2081+0]..[68,2081+21])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/reg.ml[68,2081+4]..[68,2081+13])
          Ppat_var "currstamp" (asmcomp/reg.ml[68,2081+4]..[68,2081+13])
        expression (asmcomp/reg.ml[68,2081+16]..[68,2081+21])
          Pexp_apply
          expression (asmcomp/reg.ml[68,2081+16]..[68,2081+19])
            Pexp_ident "ref" (asmcomp/reg.ml[68,2081+16]..[68,2081+19])
          [
            <arg>
            Nolabel
              expression (asmcomp/reg.ml[68,2081+20]..[68,2081+21])
                Pexp_constant PConst_int (0,None)
          ]
    ]
  structure_item (asmcomp/reg.ml[69,2103+0]..[69,2103+31])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/reg.ml[69,2103+4]..[69,2103+12])
          Ppat_var "reg_list" (asmcomp/reg.ml[69,2103+4]..[69,2103+12])
        expression (asmcomp/reg.ml[69,2103+15]..[69,2103+31])
          Pexp_apply
          expression (asmcomp/reg.ml[69,2103+15]..[69,2103+18])
            Pexp_ident "ref" (asmcomp/reg.ml[69,2103+15]..[69,2103+18])
          [
            <arg>
            Nolabel
              expression (asmcomp/reg.ml[69,2103+18]..[69,2103+31])
                Pexp_constraint
                expression (asmcomp/reg.ml[69,2103+19]..[69,2103+21])
                  Pexp_construct "[]" (asmcomp/reg.ml[69,2103+19]..[69,2103+21])
                  None
                core_type (asmcomp/reg.ml[69,2103+24]..[69,2103+30])
                  Ptyp_constr "list" (asmcomp/reg.ml[69,2103+26]..[69,2103+30])
                  [
                    core_type (asmcomp/reg.ml[69,2103+24]..[69,2103+25])
                      Ptyp_constr "t" (asmcomp/reg.ml[69,2103+24]..[69,2103+25])
                      []
                  ]
          ]
    ]
  structure_item (asmcomp/reg.ml[70,2135+0]..[70,2135+35])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/reg.ml[70,2135+4]..[70,2135+15])
          Ppat_var "hw_reg_list" (asmcomp/reg.ml[70,2135+4]..[70,2135+15])
        expression (asmcomp/reg.ml[70,2135+18]..[70,2135+35])
          Pexp_apply
          expression (asmcomp/reg.ml[70,2135+18]..[70,2135+21])
            Pexp_ident "ref" (asmcomp/reg.ml[70,2135+18]..[70,2135+21])
          [
            <arg>
            Nolabel
              expression (asmcomp/reg.ml[70,2135+22]..[70,2135+35])
                Pexp_constraint
                expression (asmcomp/reg.ml[70,2135+23]..[70,2135+25])
                  Pexp_construct "[]" (asmcomp/reg.ml[70,2135+23]..[70,2135+25])
                  None
                core_type (asmcomp/reg.ml[70,2135+28]..[70,2135+34])
                  Ptyp_constr "list" (asmcomp/reg.ml[70,2135+30]..[70,2135+34])
                  [
                    core_type (asmcomp/reg.ml[70,2135+28]..[70,2135+29])
                      Ptyp_constr "t" (asmcomp/reg.ml[70,2135+28]..[70,2135+29])
                      []
                  ]
          ]
    ]
  structure_item (asmcomp/reg.ml[72,2172+0]..[72,2172+28])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/reg.ml[72,2172+4]..[72,2172+20])
          Ppat_var "visit_generation" (asmcomp/reg.ml[72,2172+4]..[72,2172+20])
        expression (asmcomp/reg.ml[72,2172+23]..[72,2172+28])
          Pexp_apply
          expression (asmcomp/reg.ml[72,2172+23]..[72,2172+26])
            Pexp_ident "ref" (asmcomp/reg.ml[72,2172+23]..[72,2172+26])
          [
            <arg>
            Nolabel
              expression (asmcomp/reg.ml[72,2172+27]..[72,2172+28])
                Pexp_constant PConst_int (1,None)
          ]
    ]
  structure_item (asmcomp/reg.ml[75,2279+0]..[75,2279+17])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/reg.ml[75,2279+4]..[75,2279+13])
          Ppat_var "unvisited" (asmcomp/reg.ml[75,2279+4]..[75,2279+13])
        expression (asmcomp/reg.ml[75,2279+16]..[75,2279+17])
          Pexp_constant PConst_int (0,None)
    ]
  structure_item (asmcomp/reg.ml[77,2298+0]..[78,2319+32])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/reg.ml[77,2298+4]..[77,2298+16])
          Ppat_var "mark_visited" (asmcomp/reg.ml[77,2298+4]..[77,2298+16])
        expression (asmcomp/reg.ml[77,2298+17]..[78,2319+32]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (asmcomp/reg.ml[77,2298+17]..[77,2298+18])
            Ppat_var "r" (asmcomp/reg.ml[77,2298+17]..[77,2298+18])
          expression (asmcomp/reg.ml[78,2319+2]..[78,2319+32])
            Pexp_setfield
            expression (asmcomp/reg.ml[78,2319+2]..[78,2319+3])
              Pexp_ident "r" (asmcomp/reg.ml[78,2319+2]..[78,2319+3])
            "visited" (asmcomp/reg.ml[78,2319+4]..[78,2319+11])
            expression (asmcomp/reg.ml[78,2319+15]..[78,2319+32])
              Pexp_apply
              expression (asmcomp/reg.ml[78,2319+15]..[78,2319+16])
                Pexp_ident "!" (asmcomp/reg.ml[78,2319+15]..[78,2319+16])
              [
                <arg>
                Nolabel
                  expression (asmcomp/reg.ml[78,2319+16]..[78,2319+32])
                    Pexp_ident "visit_generation" (asmcomp/reg.ml[78,2319+16]..[78,2319+32])
              ]
    ]
  structure_item (asmcomp/reg.ml[80,2353+0]..[81,2372+31])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/reg.ml[80,2353+4]..[80,2353+14])
          Ppat_var "is_visited" (asmcomp/reg.ml[80,2353+4]..[80,2353+14])
        expression (asmcomp/reg.ml[80,2353+15]..[81,2372+31]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (asmcomp/reg.ml[80,2353+15]..[80,2353+16])
            Ppat_var "r" (asmcomp/reg.ml[80,2353+15]..[80,2353+16])
          expression (asmcomp/reg.ml[81,2372+2]..[81,2372+31])
            Pexp_apply
            expression (asmcomp/reg.ml[81,2372+12]..[81,2372+13])
              Pexp_ident "=" (asmcomp/reg.ml[81,2372+12]..[81,2372+13])
            [
              <arg>
              Nolabel
                expression (asmcomp/reg.ml[81,2372+2]..[81,2372+11])
                  Pexp_field
                  expression (asmcomp/reg.ml[81,2372+2]..[81,2372+3])
                    Pexp_ident "r" (asmcomp/reg.ml[81,2372+2]..[81,2372+3])
                  "visited" (asmcomp/reg.ml[81,2372+4]..[81,2372+11])
              <arg>
              Nolabel
                expression (asmcomp/reg.ml[81,2372+14]..[81,2372+31])
                  Pexp_apply
                  expression (asmcomp/reg.ml[81,2372+14]..[81,2372+15])
                    Pexp_ident "!" (asmcomp/reg.ml[81,2372+14]..[81,2372+15])
                  [
                    <arg>
                    Nolabel
                      expression (asmcomp/reg.ml[81,2372+15]..[81,2372+31])
                        Pexp_ident "visit_generation" (asmcomp/reg.ml[81,2372+15]..[81,2372+31])
                  ]
            ]
    ]
  structure_item (asmcomp/reg.ml[83,2405+0]..[84,2434+23])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/reg.ml[83,2405+4]..[83,2405+23])
          Ppat_var "clear_visited_marks" (asmcomp/reg.ml[83,2405+4]..[83,2405+23])
        expression (asmcomp/reg.ml[83,2405+24]..[84,2434+23]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (asmcomp/reg.ml[83,2405+24]..[83,2405+26])
            Ppat_construct "()" (asmcomp/reg.ml[83,2405+24]..[83,2405+26])
            None
          expression (asmcomp/reg.ml[84,2434+2]..[84,2434+23])
            Pexp_apply
            expression (asmcomp/reg.ml[84,2434+2]..[84,2434+6])
              Pexp_ident "incr" (asmcomp/reg.ml[84,2434+2]..[84,2434+6])
            [
              <arg>
              Nolabel
                expression (asmcomp/reg.ml[84,2434+7]..[84,2434+23])
                  Pexp_ident "visit_generation" (asmcomp/reg.ml[84,2434+7]..[84,2434+23])
            ]
    ]
  structure_item (asmcomp/reg.ml[87,2460+0]..[93,2739+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/reg.ml[87,2460+4]..[87,2460+10])
          Ppat_var "create" (asmcomp/reg.ml[87,2460+4]..[87,2460+10])
        expression (asmcomp/reg.ml[87,2460+11]..[93,2739+3]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (asmcomp/reg.ml[87,2460+11]..[87,2460+13])
            Ppat_var "ty" (asmcomp/reg.ml[87,2460+11]..[87,2460+13])
          expression (asmcomp/reg.ml[88,2476+2]..[93,2739+3])
            Pexp_let Nonrec
            [
              <def>
                pattern (asmcomp/reg.ml[88,2476+6]..[88,2476+7])
                  Ppat_var "r" (asmcomp/reg.ml[88,2476+6]..[88,2476+7])
                expression (asmcomp/reg.ml[88,2476+10]..[90,2624+63])
                  Pexp_record
                  [
                    "raw_name" (asmcomp/reg.ml[88,2476+12]..[88,2476+20])
                      expression (asmcomp/reg.ml[88,2476+23]..[88,2476+36])
                        Pexp_construct "Raw_name.Anon" (asmcomp/reg.ml[88,2476+23]..[88,2476+36])
                        None
                    "stamp" (asmcomp/reg.ml[88,2476+38]..[88,2476+43])
                      expression (asmcomp/reg.ml[88,2476+46]..[88,2476+56])
                        Pexp_apply
                        expression (asmcomp/reg.ml[88,2476+46]..[88,2476+47])
                          Pexp_ident "!" (asmcomp/reg.ml[88,2476+46]..[88,2476+47])
                        [
                          <arg>
                          Nolabel
                            expression (asmcomp/reg.ml[88,2476+47]..[88,2476+56])
                              Pexp_ident "currstamp" (asmcomp/reg.ml[88,2476+47]..[88,2476+56])
                        ]
                    "typ" (asmcomp/reg.ml[88,2476+58]..[88,2476+61])
                      expression (asmcomp/reg.ml[88,2476+64]..[88,2476+66])
                        Pexp_ident "ty" (asmcomp/reg.ml[88,2476+64]..[88,2476+66])
                    "loc" (asmcomp/reg.ml[89,2544+12]..[89,2544+15])
                      expression (asmcomp/reg.ml[89,2544+18]..[89,2544+25])
                        Pexp_construct "Unknown" (asmcomp/reg.ml[89,2544+18]..[89,2544+25])
                        None
                    "spill" (asmcomp/reg.ml[89,2544+27]..[89,2544+32])
                      expression (asmcomp/reg.ml[89,2544+35]..[89,2544+40])
                        Pexp_construct "false" (asmcomp/reg.ml[89,2544+35]..[89,2544+40])
                        None
                    "interf" (asmcomp/reg.ml[89,2544+42]..[89,2544+48])
                      expression (asmcomp/reg.ml[89,2544+51]..[89,2544+53])
                        Pexp_construct "[]" (asmcomp/reg.ml[89,2544+51]..[89,2544+53])
                        None
                    "prefer" (asmcomp/reg.ml[89,2544+55]..[89,2544+61])
                      expression (asmcomp/reg.ml[89,2544+64]..[89,2544+66])
                        Pexp_construct "[]" (asmcomp/reg.ml[89,2544+64]..[89,2544+66])
                        None
                    "degree" (asmcomp/reg.ml[89,2544+68]..[89,2544+74])
                      expression (asmcomp/reg.ml[89,2544+77]..[89,2544+78])
                        Pexp_constant PConst_int (0,None)
                    "spill_cost" (asmcomp/reg.ml[90,2624+12]..[90,2624+22])
                      expression (asmcomp/reg.ml[90,2624+25]..[90,2624+26])
                        Pexp_constant PConst_int (0,None)
                    "visited" (asmcomp/reg.ml[90,2624+28]..[90,2624+35])
                      expression (asmcomp/reg.ml[90,2624+38]..[90,2624+47])
                        Pexp_ident "unvisited" (asmcomp/reg.ml[90,2624+38]..[90,2624+47])
                    "part" (asmcomp/reg.ml[90,2624+49]..[90,2624+53])
                      expression (asmcomp/reg.ml[90,2624+56]..[90,2624+60])
                        Pexp_construct "None" (asmcomp/reg.ml[90,2624+56]..[90,2624+60])
                        None
                  ]
                  None
            ]
            expression (asmcomp/reg.ml[91,2691+2]..[93,2739+3])
              Pexp_sequence
              expression (asmcomp/reg.ml[91,2691+2]..[91,2691+28])
                Pexp_apply
                expression (asmcomp/reg.ml[91,2691+11]..[91,2691+13])
                  Pexp_ident ":=" (asmcomp/reg.ml[91,2691+11]..[91,2691+13])
                [
                  <arg>
                  Nolabel
                    expression (asmcomp/reg.ml[91,2691+2]..[91,2691+10])
                      Pexp_ident "reg_list" (asmcomp/reg.ml[91,2691+2]..[91,2691+10])
                  <arg>
                  Nolabel
                    expression (asmcomp/reg.ml[91,2691+14]..[91,2691+28])
                      Pexp_construct "::" (asmcomp/reg.ml[91,2691+16]..[91,2691+18])
                      Some
                        expression (asmcomp/reg.ml[91,2691+14]..[91,2691+28]) ghost
                          Pexp_tuple
                          [
                            expression (asmcomp/reg.ml[91,2691+14]..[91,2691+15])
                              Pexp_ident "r" (asmcomp/reg.ml[91,2691+14]..[91,2691+15])
                            expression (asmcomp/reg.ml[91,2691+19]..[91,2691+28])
                              Pexp_apply
                              expression (asmcomp/reg.ml[91,2691+19]..[91,2691+20])
                                Pexp_ident "!" (asmcomp/reg.ml[91,2691+19]..[91,2691+20])
                              [
                                <arg>
                                Nolabel
                                  expression (asmcomp/reg.ml[91,2691+20]..[91,2691+28])
                                    Pexp_ident "reg_list" (asmcomp/reg.ml[91,2691+20]..[91,2691+28])
                              ]
                          ]
                ]
              expression (asmcomp/reg.ml[92,2721+2]..[93,2739+3])
                Pexp_sequence
                expression (asmcomp/reg.ml[92,2721+2]..[92,2721+16])
                  Pexp_apply
                  expression (asmcomp/reg.ml[92,2721+2]..[92,2721+6])
                    Pexp_ident "incr" (asmcomp/reg.ml[92,2721+2]..[92,2721+6])
                  [
                    <arg>
                    Nolabel
                      expression (asmcomp/reg.ml[92,2721+7]..[92,2721+16])
                        Pexp_ident "currstamp" (asmcomp/reg.ml[92,2721+7]..[92,2721+16])
                  ]
                expression (asmcomp/reg.ml[93,2739+2]..[93,2739+3])
                  Pexp_ident "r" (asmcomp/reg.ml[93,2739+2]..[93,2739+3])
    ]
  structure_item (asmcomp/reg.ml[95,2744+0]..[99,2878+4])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/reg.ml[95,2744+4]..[95,2744+11])
          Ppat_var "createv" (asmcomp/reg.ml[95,2744+4]..[95,2744+11])
        expression (asmcomp/reg.ml[95,2744+12]..[99,2878+4]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (asmcomp/reg.ml[95,2744+12]..[95,2744+15])
            Ppat_var "tyv" (asmcomp/reg.ml[95,2744+12]..[95,2744+15])
          expression (asmcomp/reg.ml[96,2762+2]..[99,2878+4])
            Pexp_let Nonrec
            [
              <def>
                pattern (asmcomp/reg.ml[96,2762+6]..[96,2762+7])
                  Ppat_var "n" (asmcomp/reg.ml[96,2762+6]..[96,2762+7])
                expression (asmcomp/reg.ml[96,2762+10]..[96,2762+26])
                  Pexp_apply
                  expression (asmcomp/reg.ml[96,2762+10]..[96,2762+22])
                    Pexp_ident "Array.length" (asmcomp/reg.ml[96,2762+10]..[96,2762+22])
                  [
                    <arg>
                    Nolabel
                      expression (asmcomp/reg.ml[96,2762+23]..[96,2762+26])
                        Pexp_ident "tyv" (asmcomp/reg.ml[96,2762+23]..[96,2762+26])
                  ]
            ]
            expression (asmcomp/reg.ml[97,2792+2]..[99,2878+4])
              Pexp_let Nonrec
              [
                <def>
                  pattern (asmcomp/reg.ml[97,2792+6]..[97,2792+8])
                    Ppat_var "rv" (asmcomp/reg.ml[97,2792+6]..[97,2792+8])
                  expression (asmcomp/reg.ml[97,2792+11]..[97,2792+29])
                    Pexp_apply
                    expression (asmcomp/reg.ml[97,2792+11]..[97,2792+21])
                      Pexp_ident "Array.make" (asmcomp/reg.ml[97,2792+11]..[97,2792+21])
                    [
                      <arg>
                      Nolabel
                        expression (asmcomp/reg.ml[97,2792+22]..[97,2792+23])
                          Pexp_ident "n" (asmcomp/reg.ml[97,2792+22]..[97,2792+23])
                      <arg>
                      Nolabel
                        expression (asmcomp/reg.ml[97,2792+24]..[97,2792+29])
                          Pexp_ident "dummy" (asmcomp/reg.ml[97,2792+24]..[97,2792+29])
                    ]
              ]
              expression (asmcomp/reg.ml[98,2825+2]..[99,2878+4])
                Pexp_sequence
                expression (asmcomp/reg.ml[98,2825+2]..[98,2825+51])
                  Pexp_for Up
                  pattern (asmcomp/reg.ml[98,2825+6]..[98,2825+7])
                    Ppat_var "i" (asmcomp/reg.ml[98,2825+6]..[98,2825+7])
                  expression (asmcomp/reg.ml[98,2825+10]..[98,2825+11])
                    Pexp_constant PConst_int (0,None)
                  expression (asmcomp/reg.ml[98,2825+15]..[98,2825+18])
                    Pexp_apply
                    expression (asmcomp/reg.ml[98,2825+16]..[98,2825+17])
                      Pexp_ident "-" (asmcomp/reg.ml[98,2825+16]..[98,2825+17])
                    [
                      <arg>
                      Nolabel
                        expression (asmcomp/reg.ml[98,2825+15]..[98,2825+16])
                          Pexp_ident "n" (asmcomp/reg.ml[98,2825+15]..[98,2825+16])
                      <arg>
                      Nolabel
                        expression (asmcomp/reg.ml[98,2825+17]..[98,2825+18])
                          Pexp_constant PConst_int (1,None)
                    ]
                  expression (asmcomp/reg.ml[98,2825+22]..[98,2825+46])
                    Pexp_apply
                    expression (asmcomp/reg.ml[98,2825+22]..[98,2825+46]) ghost
                      Pexp_ident "Array.set" (asmcomp/reg.ml[98,2825+22]..[98,2825+46]) ghost
                    [
                      <arg>
                      Nolabel
                        expression (asmcomp/reg.ml[98,2825+22]..[98,2825+24])
                          Pexp_ident "rv" (asmcomp/reg.ml[98,2825+22]..[98,2825+24])
                      <arg>
                      Nolabel
                        expression (asmcomp/reg.ml[98,2825+26]..[98,2825+27])
                          Pexp_ident "i" (asmcomp/reg.ml[98,2825+26]..[98,2825+27])
                      <arg>
                      Nolabel
                        expression (asmcomp/reg.ml[98,2825+32]..[98,2825+46])
                          Pexp_apply
                          expression (asmcomp/reg.ml[98,2825+32]..[98,2825+38])
                            Pexp_ident "create" (asmcomp/reg.ml[98,2825+32]..[98,2825+38])
                          [
                            <arg>
                            Nolabel
                              expression (asmcomp/reg.ml[98,2825+39]..[98,2825+46])
                                Pexp_apply
                                expression (asmcomp/reg.ml[98,2825+39]..[98,2825+46]) ghost
                                  Pexp_ident "Array.get" (asmcomp/reg.ml[98,2825+39]..[98,2825+46]) ghost
                                [
                                  <arg>
                                  Nolabel
                                    expression (asmcomp/reg.ml[98,2825+39]..[98,2825+42])
                                      Pexp_ident "tyv" (asmcomp/reg.ml[98,2825+39]..[98,2825+42])
                                  <arg>
                                  Nolabel
                                    expression (asmcomp/reg.ml[98,2825+44]..[98,2825+45])
                                      Pexp_ident "i" (asmcomp/reg.ml[98,2825+44]..[98,2825+45])
                                ]
                          ]
                    ]
                expression (asmcomp/reg.ml[99,2878+2]..[99,2878+4])
                  Pexp_ident "rv" (asmcomp/reg.ml[99,2878+2]..[99,2878+4])
    ]
  structure_item (asmcomp/reg.ml[101,2884+0]..[105,3026+5])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/reg.ml[101,2884+4]..[101,2884+16])
          Ppat_var "createv_like" (asmcomp/reg.ml[101,2884+4]..[101,2884+16])
        expression (asmcomp/reg.ml[101,2884+17]..[105,3026+5]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (asmcomp/reg.ml[101,2884+17]..[101,2884+19])
            Ppat_var "rv" (asmcomp/reg.ml[101,2884+17]..[101,2884+19])
          expression (asmcomp/reg.ml[102,2906+2]..[105,3026+5])
            Pexp_let Nonrec
            [
              <def>
                pattern (asmcomp/reg.ml[102,2906+6]..[102,2906+7])
                  Ppat_var "n" (asmcomp/reg.ml[102,2906+6]..[102,2906+7])
                expression (asmcomp/reg.ml[102,2906+10]..[102,2906+25])
                  Pexp_apply
                  expression (asmcomp/reg.ml[102,2906+10]..[102,2906+22])
                    Pexp_ident "Array.length" (asmcomp/reg.ml[102,2906+10]..[102,2906+22])
                  [
                    <arg>
                    Nolabel
                      expression (asmcomp/reg.ml[102,2906+23]..[102,2906+25])
                        Pexp_ident "rv" (asmcomp/reg.ml[102,2906+23]..[102,2906+25])
                  ]
            ]
            expression (asmcomp/reg.ml[103,2935+2]..[105,3026+5])
              Pexp_let Nonrec
              [
                <def>
                  pattern (asmcomp/reg.ml[103,2935+6]..[103,2935+9])
                    Ppat_var "rv'" (asmcomp/reg.ml[103,2935+6]..[103,2935+9])
                  expression (asmcomp/reg.ml[103,2935+12]..[103,2935+30])
                    Pexp_apply
                    expression (asmcomp/reg.ml[103,2935+12]..[103,2935+22])
                      Pexp_ident "Array.make" (asmcomp/reg.ml[103,2935+12]..[103,2935+22])
                    [
                      <arg>
                      Nolabel
                        expression (asmcomp/reg.ml[103,2935+23]..[103,2935+24])
                          Pexp_ident "n" (asmcomp/reg.ml[103,2935+23]..[103,2935+24])
                      <arg>
                      Nolabel
                        expression (asmcomp/reg.ml[103,2935+25]..[103,2935+30])
                          Pexp_ident "dummy" (asmcomp/reg.ml[103,2935+25]..[103,2935+30])
                    ]
              ]
              expression (asmcomp/reg.ml[104,2969+2]..[105,3026+5])
                Pexp_sequence
                expression (asmcomp/reg.ml[104,2969+2]..[104,2969+55])
                  Pexp_for Up
                  pattern (asmcomp/reg.ml[104,2969+6]..[104,2969+7])
                    Ppat_var "i" (asmcomp/reg.ml[104,2969+6]..[104,2969+7])
                  expression (asmcomp/reg.ml[104,2969+10]..[104,2969+11])
                    Pexp_constant PConst_int (0,None)
                  expression (asmcomp/reg.ml[104,2969+15]..[104,2969+18])
                    Pexp_apply
                    expression (asmcomp/reg.ml[104,2969+16]..[104,2969+17])
                      Pexp_ident "-" (asmcomp/reg.ml[104,2969+16]..[104,2969+17])
                    [
                      <arg>
                      Nolabel
                        expression (asmcomp/reg.ml[104,2969+15]..[104,2969+16])
                          Pexp_ident "n" (asmcomp/reg.ml[104,2969+15]..[104,2969+16])
                      <arg>
                      Nolabel
                        expression (asmcomp/reg.ml[104,2969+17]..[104,2969+18])
                          Pexp_constant PConst_int (1,None)
                    ]
                  expression (asmcomp/reg.ml[104,2969+22]..[104,2969+50])
                    Pexp_apply
                    expression (asmcomp/reg.ml[104,2969+22]..[104,2969+50]) ghost
                      Pexp_ident "Array.set" (asmcomp/reg.ml[104,2969+22]..[104,2969+50]) ghost
                    [
                      <arg>
                      Nolabel
                        expression (asmcomp/reg.ml[104,2969+22]..[104,2969+25])
                          Pexp_ident "rv'" (asmcomp/reg.ml[104,2969+22]..[104,2969+25])
                      <arg>
                      Nolabel
                        expression (asmcomp/reg.ml[104,2969+27]..[104,2969+28])
                          Pexp_ident "i" (asmcomp/reg.ml[104,2969+27]..[104,2969+28])
                      <arg>
                      Nolabel
                        expression (asmcomp/reg.ml[104,2969+33]..[104,2969+50])
                          Pexp_apply
                          expression (asmcomp/reg.ml[104,2969+33]..[104,2969+39])
                            Pexp_ident "create" (asmcomp/reg.ml[104,2969+33]..[104,2969+39])
                          [
                            <arg>
                            Nolabel
                              expression (asmcomp/reg.ml[104,2969+40]..[104,2969+50])
                                Pexp_field
                                expression (asmcomp/reg.ml[104,2969+40]..[104,2969+46])
                                  Pexp_apply
                                  expression (asmcomp/reg.ml[104,2969+40]..[104,2969+46]) ghost
                                    Pexp_ident "Array.get" (asmcomp/reg.ml[104,2969+40]..[104,2969+46]) ghost
                                  [
                                    <arg>
                                    Nolabel
                                      expression (asmcomp/reg.ml[104,2969+40]..[104,2969+42])
                                        Pexp_ident "rv" (asmcomp/reg.ml[104,2969+40]..[104,2969+42])
                                    <arg>
                                    Nolabel
                                      expression (asmcomp/reg.ml[104,2969+44]..[104,2969+45])
                                        Pexp_ident "i" (asmcomp/reg.ml[104,2969+44]..[104,2969+45])
                                  ]
                                "typ" (asmcomp/reg.ml[104,2969+47]..[104,2969+50])
                          ]
                    ]
                expression (asmcomp/reg.ml[105,3026+2]..[105,3026+5])
                  Pexp_ident "rv'" (asmcomp/reg.ml[105,3026+2]..[105,3026+5])
    ]
  structure_item (asmcomp/reg.ml[107,3033+0]..[110,3103+4])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/reg.ml[107,3033+4]..[107,3033+9])
          Ppat_var "clone" (asmcomp/reg.ml[107,3033+4]..[107,3033+9])
        expression (asmcomp/reg.ml[107,3033+10]..[110,3103+4]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (asmcomp/reg.ml[107,3033+10]..[107,3033+11])
            Ppat_var "r" (asmcomp/reg.ml[107,3033+10]..[107,3033+11])
          expression (asmcomp/reg.ml[108,3047+2]..[110,3103+4])
            Pexp_let Nonrec
            [
              <def>
                pattern (asmcomp/reg.ml[108,3047+6]..[108,3047+8])
                  Ppat_var "nr" (asmcomp/reg.ml[108,3047+6]..[108,3047+8])
                expression (asmcomp/reg.ml[108,3047+11]..[108,3047+23])
                  Pexp_apply
                  expression (asmcomp/reg.ml[108,3047+11]..[108,3047+17])
                    Pexp_ident "create" (asmcomp/reg.ml[108,3047+11]..[108,3047+17])
                  [
                    <arg>
                    Nolabel
                      expression (asmcomp/reg.ml[108,3047+18]..[108,3047+23])
                        Pexp_field
                        expression (asmcomp/reg.ml[108,3047+18]..[108,3047+19])
                          Pexp_ident "r" (asmcomp/reg.ml[108,3047+18]..[108,3047+19])
                        "typ" (asmcomp/reg.ml[108,3047+20]..[108,3047+23])
                  ]
            ]
            expression (asmcomp/reg.ml[109,3074+2]..[110,3103+4])
              Pexp_sequence
              expression (asmcomp/reg.ml[109,3074+2]..[109,3074+27])
                Pexp_setfield
                expression (asmcomp/reg.ml[109,3074+2]..[109,3074+4])
                  Pexp_ident "nr" (asmcomp/reg.ml[109,3074+2]..[109,3074+4])
                "raw_name" (asmcomp/reg.ml[109,3074+5]..[109,3074+13])
                expression (asmcomp/reg.ml[109,3074+17]..[109,3074+27])
                  Pexp_field
                  expression (asmcomp/reg.ml[109,3074+17]..[109,3074+18])
                    Pexp_ident "r" (asmcomp/reg.ml[109,3074+17]..[109,3074+18])
                  "raw_name" (asmcomp/reg.ml[109,3074+19]..[109,3074+27])
              expression (asmcomp/reg.ml[110,3103+2]..[110,3103+4])
                Pexp_ident "nr" (asmcomp/reg.ml[110,3103+2]..[110,3103+4])
    ]
  structure_item (asmcomp/reg.ml[112,3109+0]..[118,3390+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/reg.ml[112,3109+4]..[112,3109+15])
          Ppat_var "at_location" (asmcomp/reg.ml[112,3109+4]..[112,3109+15])
        expression (asmcomp/reg.ml[112,3109+16]..[118,3390+3]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (asmcomp/reg.ml[112,3109+16]..[112,3109+18])
            Ppat_var "ty" (asmcomp/reg.ml[112,3109+16]..[112,3109+18])
          expression (asmcomp/reg.ml[112,3109+19]..[118,3390+3]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (asmcomp/reg.ml[112,3109+19]..[112,3109+22])
              Ppat_var "loc" (asmcomp/reg.ml[112,3109+19]..[112,3109+22])
            expression (asmcomp/reg.ml[113,3134+2]..[118,3390+3])
              Pexp_let Nonrec
              [
                <def>
                  pattern (asmcomp/reg.ml[113,3134+6]..[113,3134+7])
                    Ppat_var "r" (asmcomp/reg.ml[113,3134+6]..[113,3134+7])
                  expression (asmcomp/reg.ml[113,3134+10]..[115,3269+63])
                    Pexp_record
                    [
                      "raw_name" (asmcomp/reg.ml[113,3134+12]..[113,3134+20])
                        expression (asmcomp/reg.ml[113,3134+23]..[113,3134+33])
                          Pexp_construct "Raw_name.R" (asmcomp/reg.ml[113,3134+23]..[113,3134+33])
                          None
                      "stamp" (asmcomp/reg.ml[113,3134+35]..[113,3134+40])
                        expression (asmcomp/reg.ml[113,3134+43]..[113,3134+53])
                          Pexp_apply
                          expression (asmcomp/reg.ml[113,3134+43]..[113,3134+44])
                            Pexp_ident "!" (asmcomp/reg.ml[113,3134+43]..[113,3134+44])
                          [
                            <arg>
                            Nolabel
                              expression (asmcomp/reg.ml[113,3134+44]..[113,3134+53])
                                Pexp_ident "currstamp" (asmcomp/reg.ml[113,3134+44]..[113,3134+53])
                          ]
                      "typ" (asmcomp/reg.ml[113,3134+55]..[113,3134+58])
                        expression (asmcomp/reg.ml[113,3134+61]..[113,3134+63])
                          Pexp_ident "ty" (asmcomp/reg.ml[113,3134+61]..[113,3134+63])
                      "loc" (asmcomp/reg.ml[113,3134+65]..[113,3134+68]) ghost
                        expression (asmcomp/reg.ml[113,3134+65]..[113,3134+68])
                          Pexp_ident "loc" (asmcomp/reg.ml[113,3134+65]..[113,3134+68])
                      "spill" (asmcomp/reg.ml[114,3204+12]..[114,3204+17])
                        expression (asmcomp/reg.ml[114,3204+20]..[114,3204+25])
                          Pexp_construct "false" (asmcomp/reg.ml[114,3204+20]..[114,3204+25])
                          None
                      "interf" (asmcomp/reg.ml[114,3204+27]..[114,3204+33])
                        expression (asmcomp/reg.ml[114,3204+36]..[114,3204+38])
                          Pexp_construct "[]" (asmcomp/reg.ml[114,3204+36]..[114,3204+38])
                          None
                      "prefer" (asmcomp/reg.ml[114,3204+40]..[114,3204+46])
                        expression (asmcomp/reg.ml[114,3204+49]..[114,3204+51])
                          Pexp_construct "[]" (asmcomp/reg.ml[114,3204+49]..[114,3204+51])
                          None
                      "degree" (asmcomp/reg.ml[114,3204+53]..[114,3204+59])
                        expression (asmcomp/reg.ml[114,3204+62]..[114,3204+63])
                          Pexp_constant PConst_int (0,None)
                      "spill_cost" (asmcomp/reg.ml[115,3269+12]..[115,3269+22])
                        expression (asmcomp/reg.ml[115,3269+25]..[115,3269+26])
                          Pexp_constant PConst_int (0,None)
                      "visited" (asmcomp/reg.ml[115,3269+28]..[115,3269+35])
                        expression (asmcomp/reg.ml[115,3269+38]..[115,3269+47])
                          Pexp_ident "unvisited" (asmcomp/reg.ml[115,3269+38]..[115,3269+47])
                      "part" (asmcomp/reg.ml[115,3269+49]..[115,3269+53])
                        expression (asmcomp/reg.ml[115,3269+56]..[115,3269+60])
                          Pexp_construct "None" (asmcomp/reg.ml[115,3269+56]..[115,3269+60])
                          None
                    ]
                    None
              ]
              expression (asmcomp/reg.ml[116,3336+2]..[118,3390+3])
                Pexp_sequence
                expression (asmcomp/reg.ml[116,3336+2]..[116,3336+34])
                  Pexp_apply
                  expression (asmcomp/reg.ml[116,3336+14]..[116,3336+16])
                    Pexp_ident ":=" (asmcomp/reg.ml[116,3336+14]..[116,3336+16])
                  [
                    <arg>
                    Nolabel
                      expression (asmcomp/reg.ml[116,3336+2]..[116,3336+13])
                        Pexp_ident "hw_reg_list" (asmcomp/reg.ml[116,3336+2]..[116,3336+13])
                    <arg>
                    Nolabel
                      expression (asmcomp/reg.ml[116,3336+17]..[116,3336+34])
                        Pexp_construct "::" (asmcomp/reg.ml[116,3336+19]..[116,3336+21])
                        Some
                          expression (asmcomp/reg.ml[116,3336+17]..[116,3336+34]) ghost
                            Pexp_tuple
                            [
                              expression (asmcomp/reg.ml[116,3336+17]..[116,3336+18])
                                Pexp_ident "r" (asmcomp/reg.ml[116,3336+17]..[116,3336+18])
                              expression (asmcomp/reg.ml[116,3336+22]..[116,3336+34])
                                Pexp_apply
                                expression (asmcomp/reg.ml[116,3336+22]..[116,3336+23])
                                  Pexp_ident "!" (asmcomp/reg.ml[116,3336+22]..[116,3336+23])
                                [
                                  <arg>
                                  Nolabel
                                    expression (asmcomp/reg.ml[116,3336+23]..[116,3336+34])
                                      Pexp_ident "hw_reg_list" (asmcomp/reg.ml[116,3336+23]..[116,3336+34])
                                ]
                            ]
                  ]
                expression (asmcomp/reg.ml[117,3372+2]..[118,3390+3])
                  Pexp_sequence
                  expression (asmcomp/reg.ml[117,3372+2]..[117,3372+16])
                    Pexp_apply
                    expression (asmcomp/reg.ml[117,3372+2]..[117,3372+6])
                      Pexp_ident "incr" (asmcomp/reg.ml[117,3372+2]..[117,3372+6])
                    [
                      <arg>
                      Nolabel
                        expression (asmcomp/reg.ml[117,3372+7]..[117,3372+16])
                          Pexp_ident "currstamp" (asmcomp/reg.ml[117,3372+7]..[117,3372+16])
                    ]
                  expression (asmcomp/reg.ml[118,3390+2]..[118,3390+3])
                    Pexp_ident "r" (asmcomp/reg.ml[118,3390+2]..[118,3390+3])
    ]
  structure_item (asmcomp/reg.ml[120,3395+0]..[121,3409+31])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/reg.ml[120,3395+4]..[120,3395+8])
          Ppat_var "typv" (asmcomp/reg.ml[120,3395+4]..[120,3395+8])
        expression (asmcomp/reg.ml[120,3395+9]..[121,3409+31]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (asmcomp/reg.ml[120,3395+9]..[120,3395+11])
            Ppat_var "rv" (asmcomp/reg.ml[120,3395+9]..[120,3395+11])
          expression (asmcomp/reg.ml[121,3409+2]..[121,3409+31])
            Pexp_apply
            expression (asmcomp/reg.ml[121,3409+2]..[121,3409+11])
              Pexp_ident "Array.map" (asmcomp/reg.ml[121,3409+2]..[121,3409+11])
            [
              <arg>
              Nolabel
                expression (asmcomp/reg.ml[121,3409+12]..[121,3409+28])
                  Pexp_fun
                  Nolabel
                  None
                  pattern (asmcomp/reg.ml[121,3409+17]..[121,3409+18])
                    Ppat_var "r" (asmcomp/reg.ml[121,3409+17]..[121,3409+18])
                  expression (asmcomp/reg.ml[121,3409+22]..[121,3409+27])
                    Pexp_field
                    expression (asmcomp/reg.ml[121,3409+22]..[121,3409+23])
                      Pexp_ident "r" (asmcomp/reg.ml[121,3409+22]..[121,3409+23])
                    "typ" (asmcomp/reg.ml[121,3409+24]..[121,3409+27])
              <arg>
              Nolabel
                expression (asmcomp/reg.ml[121,3409+29]..[121,3409+31])
                  Pexp_ident "rv" (asmcomp/reg.ml[121,3409+29]..[121,3409+31])
            ]
    ]
  structure_item (asmcomp/reg.ml[123,3442+0]..[126,3520+27])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/reg.ml[123,3442+4]..[123,3442+13])
          Ppat_var "anonymous" (asmcomp/reg.ml[123,3442+4]..[123,3442+13])
        expression (asmcomp/reg.ml[123,3442+14]..[126,3520+27]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (asmcomp/reg.ml[123,3442+14]..[123,3442+15])
            Ppat_var "t" (asmcomp/reg.ml[123,3442+14]..[123,3442+15])
          expression (asmcomp/reg.ml[124,3460+2]..[126,3520+27])
            Pexp_match
            expression (asmcomp/reg.ml[124,3460+8]..[124,3460+37])
              Pexp_apply
              expression (asmcomp/reg.ml[124,3460+8]..[124,3460+26])
                Pexp_ident "Raw_name.to_string" (asmcomp/reg.ml[124,3460+8]..[124,3460+26])
              [
                <arg>
                Nolabel
                  expression (asmcomp/reg.ml[124,3460+27]..[124,3460+37])
                    Pexp_field
                    expression (asmcomp/reg.ml[124,3460+27]..[124,3460+28])
                      Pexp_ident "t" (asmcomp/reg.ml[124,3460+27]..[124,3460+28])
                    "raw_name" (asmcomp/reg.ml[124,3460+29]..[124,3460+37])
              ]
            [
              <case>
                pattern (asmcomp/reg.ml[125,3503+4]..[125,3503+8])
                  Ppat_construct "None" (asmcomp/reg.ml[125,3503+4]..[125,3503+8])
                  None
                expression (asmcomp/reg.ml[125,3503+12]..[125,3503+16])
                  Pexp_construct "true" (asmcomp/reg.ml[125,3503+12]..[125,3503+16])
                  None
              <case>
                pattern (asmcomp/reg.ml[126,3520+4]..[126,3520+18])
                  Ppat_construct "Some" (asmcomp/reg.ml[126,3520+4]..[126,3520+8])
                  Some
                    []
                    pattern (asmcomp/reg.ml[126,3520+9]..[126,3520+18])
                      Ppat_var "_raw_name" (asmcomp/reg.ml[126,3520+9]..[126,3520+18])
                expression (asmcomp/reg.ml[126,3520+22]..[126,3520+27])
                  Pexp_construct "false" (asmcomp/reg.ml[126,3520+22]..[126,3520+27])
                  None
            ]
    ]
  structure_item (asmcomp/reg.ml[128,3549+0]..[140,3800+58])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/reg.ml[128,3549+4]..[128,3549+8])
          Ppat_var "name" (asmcomp/reg.ml[128,3549+4]..[128,3549+8])
        expression (asmcomp/reg.ml[128,3549+9]..[140,3800+58]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (asmcomp/reg.ml[128,3549+9]..[128,3549+10])
            Ppat_var "t" (asmcomp/reg.ml[128,3549+9]..[128,3549+10])
          expression (asmcomp/reg.ml[129,3562+2]..[140,3800+58])
            Pexp_match
            expression (asmcomp/reg.ml[129,3562+8]..[129,3562+37])
              Pexp_apply
              expression (asmcomp/reg.ml[129,3562+8]..[129,3562+26])
                Pexp_ident "Raw_name.to_string" (asmcomp/reg.ml[129,3562+8]..[129,3562+26])
              [
                <arg>
                Nolabel
                  expression (asmcomp/reg.ml[129,3562+27]..[129,3562+37])
                    Pexp_field
                    expression (asmcomp/reg.ml[129,3562+27]..[129,3562+28])
                      Pexp_ident "t" (asmcomp/reg.ml[129,3562+27]..[129,3562+28])
                    "raw_name" (asmcomp/reg.ml[129,3562+29]..[129,3562+37])
              ]
            [
              <case>
                pattern (asmcomp/reg.ml[130,3605+4]..[130,3605+8])
                  Ppat_construct "None" (asmcomp/reg.ml[130,3605+4]..[130,3605+8])
                  None
                expression (asmcomp/reg.ml[130,3605+12]..[130,3605+14])
                  Pexp_constant PConst_string("",(asmcomp/reg.ml[130,3605+13]..[130,3605+13]),None)
              <case>
                pattern (asmcomp/reg.ml[131,3620+4]..[131,3620+17])
                  Ppat_construct "Some" (asmcomp/reg.ml[131,3620+4]..[131,3620+8])
                  Some
                    []
                    pattern (asmcomp/reg.ml[131,3620+9]..[131,3620+17])
                      Ppat_var "raw_name" (asmcomp/reg.ml[131,3620+9]..[131,3620+17])
                expression (asmcomp/reg.ml[132,3641+4]..[140,3800+58])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (asmcomp/reg.ml[132,3641+8]..[132,3641+20])
                        Ppat_var "with_spilled" (asmcomp/reg.ml[132,3641+8]..[132,3641+20])
                      expression (asmcomp/reg.ml[133,3664+6]..[136,3727+16])
                        Pexp_ifthenelse
                        expression (asmcomp/reg.ml[133,3664+9]..[133,3664+16])
                          Pexp_field
                          expression (asmcomp/reg.ml[133,3664+9]..[133,3664+10])
                            Pexp_ident "t" (asmcomp/reg.ml[133,3664+9]..[133,3664+10])
                          "spill" (asmcomp/reg.ml[133,3664+11]..[133,3664+16])
                        expression (asmcomp/reg.ml[134,3686+8]..[134,3686+29])
                          Pexp_apply
                          expression (asmcomp/reg.ml[134,3686+19]..[134,3686+20])
                            Pexp_ident "^" (asmcomp/reg.ml[134,3686+19]..[134,3686+20])
                          [
                            <arg>
                            Nolabel
                              expression (asmcomp/reg.ml[134,3686+8]..[134,3686+18])
                                Pexp_constant PConst_string("spilled-",(asmcomp/reg.ml[134,3686+9]..[134,3686+17]),None)
                            <arg>
                            Nolabel
                              expression (asmcomp/reg.ml[134,3686+21]..[134,3686+29])
                                Pexp_ident "raw_name" (asmcomp/reg.ml[134,3686+21]..[134,3686+29])
                          ]
                        Some
                          expression (asmcomp/reg.ml[136,3727+8]..[136,3727+16])
                            Pexp_ident "raw_name" (asmcomp/reg.ml[136,3727+8]..[136,3727+16])
                  ]
                  expression (asmcomp/reg.ml[138,3751+4]..[140,3800+58])
                    Pexp_match
                    expression (asmcomp/reg.ml[138,3751+10]..[138,3751+16])
                      Pexp_field
                      expression (asmcomp/reg.ml[138,3751+10]..[138,3751+11])
                        Pexp_ident "t" (asmcomp/reg.ml[138,3751+10]..[138,3751+11])
                      "part" (asmcomp/reg.ml[138,3751+12]..[138,3751+16])
                    [
                      <case>
                        pattern (asmcomp/reg.ml[139,3773+6]..[139,3773+10])
                          Ppat_construct "None" (asmcomp/reg.ml[139,3773+6]..[139,3773+10])
                          None
                        expression (asmcomp/reg.ml[139,3773+14]..[139,3773+26])
                          Pexp_ident "with_spilled" (asmcomp/reg.ml[139,3773+14]..[139,3773+26])
                      <case>
                        pattern (asmcomp/reg.ml[140,3800+6]..[140,3800+15])
                          Ppat_construct "Some" (asmcomp/reg.ml[140,3800+6]..[140,3800+10])
                          Some
                            []
                            pattern (asmcomp/reg.ml[140,3800+11]..[140,3800+15])
                              Ppat_var "part" (asmcomp/reg.ml[140,3800+11]..[140,3800+15])
                        expression (asmcomp/reg.ml[140,3800+19]..[140,3800+58])
                          Pexp_apply
                          expression (asmcomp/reg.ml[140,3800+32]..[140,3800+33])
                            Pexp_ident "^" (asmcomp/reg.ml[140,3800+32]..[140,3800+33])
                          [
                            <arg>
                            Nolabel
                              expression (asmcomp/reg.ml[140,3800+19]..[140,3800+31])
                                Pexp_ident "with_spilled" (asmcomp/reg.ml[140,3800+19]..[140,3800+31])
                            <arg>
                            Nolabel
                              expression (asmcomp/reg.ml[140,3800+34]..[140,3800+58])
                                Pexp_apply
                                expression (asmcomp/reg.ml[140,3800+38]..[140,3800+39])
                                  Pexp_ident "^" (asmcomp/reg.ml[140,3800+38]..[140,3800+39])
                                [
                                  <arg>
                                  Nolabel
                                    expression (asmcomp/reg.ml[140,3800+34]..[140,3800+37])
                                      Pexp_constant PConst_string("#",(asmcomp/reg.ml[140,3800+35]..[140,3800+36]),None)
                                  <arg>
                                  Nolabel
                                    expression (asmcomp/reg.ml[140,3800+40]..[140,3800+58])
                                      Pexp_apply
                                      expression (asmcomp/reg.ml[140,3800+40]..[140,3800+53])
                                        Pexp_ident "Int.to_string" (asmcomp/reg.ml[140,3800+40]..[140,3800+53])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (asmcomp/reg.ml[140,3800+54]..[140,3800+58])
                                            Pexp_ident "part" (asmcomp/reg.ml[140,3800+54]..[140,3800+58])
                                      ]
                                ]
                          ]
                    ]
            ]
    ]
  structure_item (asmcomp/reg.ml[142,3860+0]..[142,3860+38])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/reg.ml[142,3860+4]..[142,3860+27])
          Ppat_var "first_virtual_reg_stamp" (asmcomp/reg.ml[142,3860+4]..[142,3860+27])
        expression (asmcomp/reg.ml[142,3860+30]..[142,3860+38])
          Pexp_apply
          expression (asmcomp/reg.ml[142,3860+30]..[142,3860+33])
            Pexp_ident "ref" (asmcomp/reg.ml[142,3860+30]..[142,3860+33])
          [
            <arg>
            Nolabel
              expression (asmcomp/reg.ml[142,3860+34]..[142,3860+38])
                Pexp_constant PConst_int (-1,None)
          ]
    ]
  structure_item (asmcomp/reg.ml[144,3900+0]..[157,4434+27])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/reg.ml[144,3900+4]..[144,3900+9])
          Ppat_var "reset" (asmcomp/reg.ml[144,3900+4]..[144,3900+9])
        expression (asmcomp/reg.ml[144,3900+9]..[157,4434+27]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (asmcomp/reg.ml[144,3900+9]..[144,3900+11])
            Ppat_construct "()" (asmcomp/reg.ml[144,3900+9]..[144,3900+11])
            None
          expression (asmcomp/reg.ml[149,4148+2]..[157,4434+27])
            Pexp_sequence
            expression (asmcomp/reg.ml[149,4148+2]..[152,4305+5])
              Pexp_ifthenelse
              expression (asmcomp/reg.ml[149,4148+5]..[149,4148+34])
                Pexp_apply
                expression (asmcomp/reg.ml[149,4148+30]..[149,4148+31])
                  Pexp_ident "=" (asmcomp/reg.ml[149,4148+30]..[149,4148+31])
                [
                  <arg>
                  Nolabel
                    expression (asmcomp/reg.ml[149,4148+5]..[149,4148+29])
                      Pexp_apply
                      expression (asmcomp/reg.ml[149,4148+5]..[149,4148+6])
                        Pexp_ident "!" (asmcomp/reg.ml[149,4148+5]..[149,4148+6])
                      [
                        <arg>
                        Nolabel
                          expression (asmcomp/reg.ml[149,4148+6]..[149,4148+29])
                            Pexp_ident "first_virtual_reg_stamp" (asmcomp/reg.ml[149,4148+6]..[149,4148+29])
                      ]
                  <arg>
                  Nolabel
                    expression (asmcomp/reg.ml[149,4148+32]..[149,4148+34])
                      Pexp_constant PConst_int (-1,None)
                ]
              expression (asmcomp/reg.ml[149,4148+40]..[152,4305+5])
                Pexp_sequence
                expression (asmcomp/reg.ml[150,4194+4]..[150,4194+41])
                  Pexp_apply
                  expression (asmcomp/reg.ml[150,4194+28]..[150,4194+30])
                    Pexp_ident ":=" (asmcomp/reg.ml[150,4194+28]..[150,4194+30])
                  [
                    <arg>
                    Nolabel
                      expression (asmcomp/reg.ml[150,4194+4]..[150,4194+27])
                        Pexp_ident "first_virtual_reg_stamp" (asmcomp/reg.ml[150,4194+4]..[150,4194+27])
                    <arg>
                    Nolabel
                      expression (asmcomp/reg.ml[150,4194+31]..[150,4194+41])
                        Pexp_apply
                        expression (asmcomp/reg.ml[150,4194+31]..[150,4194+32])
                          Pexp_ident "!" (asmcomp/reg.ml[150,4194+31]..[150,4194+32])
                        [
                          <arg>
                          Nolabel
                            expression (asmcomp/reg.ml[150,4194+32]..[150,4194+41])
                              Pexp_ident "currstamp" (asmcomp/reg.ml[150,4194+32]..[150,4194+41])
                        ]
                  ]
                expression (asmcomp/reg.ml[151,4237+4]..[151,4237+27])
                  Pexp_assert
                  expression (asmcomp/reg.ml[151,4237+11]..[151,4237+27])
                    Pexp_apply
                    expression (asmcomp/reg.ml[151,4237+22]..[151,4237+23])
                      Pexp_ident "=" (asmcomp/reg.ml[151,4237+22]..[151,4237+23])
                    [
                      <arg>
                      Nolabel
                        expression (asmcomp/reg.ml[151,4237+12]..[151,4237+21])
                          Pexp_apply
                          expression (asmcomp/reg.ml[151,4237+12]..[151,4237+13])
                            Pexp_ident "!" (asmcomp/reg.ml[151,4237+12]..[151,4237+13])
                          [
                            <arg>
                            Nolabel
                              expression (asmcomp/reg.ml[151,4237+13]..[151,4237+21])
                                Pexp_ident "reg_list" (asmcomp/reg.ml[151,4237+13]..[151,4237+21])
                          ]
                      <arg>
                      Nolabel
                        expression (asmcomp/reg.ml[151,4237+24]..[151,4237+26])
                          Pexp_construct "[]" (asmcomp/reg.ml[151,4237+24]..[151,4237+26])
                          None
                    ]
              None
            expression (asmcomp/reg.ml[153,4312+2]..[157,4434+27])
              Pexp_sequence
              expression (asmcomp/reg.ml[153,4312+2]..[153,4312+39])
                Pexp_apply
                expression (asmcomp/reg.ml[153,4312+12]..[153,4312+14])
                  Pexp_ident ":=" (asmcomp/reg.ml[153,4312+12]..[153,4312+14])
                [
                  <arg>
                  Nolabel
                    expression (asmcomp/reg.ml[153,4312+2]..[153,4312+11])
                      Pexp_ident "currstamp" (asmcomp/reg.ml[153,4312+2]..[153,4312+11])
                  <arg>
                  Nolabel
                    expression (asmcomp/reg.ml[153,4312+15]..[153,4312+39])
                      Pexp_apply
                      expression (asmcomp/reg.ml[153,4312+15]..[153,4312+16])
                        Pexp_ident "!" (asmcomp/reg.ml[153,4312+15]..[153,4312+16])
                      [
                        <arg>
                        Nolabel
                          expression (asmcomp/reg.ml[153,4312+16]..[153,4312+39])
                            Pexp_ident "first_virtual_reg_stamp" (asmcomp/reg.ml[153,4312+16]..[153,4312+39])
                      ]
                ]
              expression (asmcomp/reg.ml[154,4353+2]..[157,4434+27])
                Pexp_sequence
                expression (asmcomp/reg.ml[154,4353+2]..[154,4353+16])
                  Pexp_apply
                  expression (asmcomp/reg.ml[154,4353+11]..[154,4353+13])
                    Pexp_ident ":=" (asmcomp/reg.ml[154,4353+11]..[154,4353+13])
                  [
                    <arg>
                    Nolabel
                      expression (asmcomp/reg.ml[154,4353+2]..[154,4353+10])
                        Pexp_ident "reg_list" (asmcomp/reg.ml[154,4353+2]..[154,4353+10])
                    <arg>
                    Nolabel
                      expression (asmcomp/reg.ml[154,4353+14]..[154,4353+16])
                        Pexp_construct "[]" (asmcomp/reg.ml[154,4353+14]..[154,4353+16])
                        None
                  ]
                expression (asmcomp/reg.ml[155,4371+2]..[157,4434+27])
                  Pexp_sequence
                  expression (asmcomp/reg.ml[155,4371+2]..[155,4371+23])
                    Pexp_apply
                    expression (asmcomp/reg.ml[155,4371+19]..[155,4371+21])
                      Pexp_ident ":=" (asmcomp/reg.ml[155,4371+19]..[155,4371+21])
                    [
                      <arg>
                      Nolabel
                        expression (asmcomp/reg.ml[155,4371+2]..[155,4371+18])
                          Pexp_ident "visit_generation" (asmcomp/reg.ml[155,4371+2]..[155,4371+18])
                      <arg>
                      Nolabel
                        expression (asmcomp/reg.ml[155,4371+22]..[155,4371+23])
                          Pexp_constant PConst_int (1,None)
                    ]
                  expression (asmcomp/reg.ml[156,4396+2]..[157,4434+27])
                    Pexp_apply
                    expression (asmcomp/reg.ml[156,4396+15]..[156,4396+17])
                      Pexp_ident "|>" (asmcomp/reg.ml[156,4396+15]..[156,4396+17])
                    [
                      <arg>
                      Nolabel
                        expression (asmcomp/reg.ml[156,4396+2]..[156,4396+14])
                          Pexp_apply
                          expression (asmcomp/reg.ml[156,4396+2]..[156,4396+3])
                            Pexp_ident "!" (asmcomp/reg.ml[156,4396+2]..[156,4396+3])
                          [
                            <arg>
                            Nolabel
                              expression (asmcomp/reg.ml[156,4396+3]..[156,4396+14])
                                Pexp_ident "hw_reg_list" (asmcomp/reg.ml[156,4396+3]..[156,4396+14])
                          ]
                      <arg>
                      Nolabel
                        expression (asmcomp/reg.ml[156,4396+18]..[157,4434+27])
                          Pexp_apply
                          expression (asmcomp/reg.ml[156,4396+18]..[156,4396+27])
                            Pexp_ident "List.iter" (asmcomp/reg.ml[156,4396+18]..[156,4396+27])
                          [
                            <arg>
                            Nolabel
                              expression (asmcomp/reg.ml[156,4396+28]..[157,4434+27])
                                Pexp_fun
                                Nolabel
                                None
                                pattern (asmcomp/reg.ml[156,4396+33]..[156,4396+34])
                                  Ppat_var "r" (asmcomp/reg.ml[156,4396+33]..[156,4396+34])
                                expression (asmcomp/reg.ml[157,4434+4]..[157,4434+26])
                                  Pexp_setfield
                                  expression (asmcomp/reg.ml[157,4434+4]..[157,4434+5])
                                    Pexp_ident "r" (asmcomp/reg.ml[157,4434+4]..[157,4434+5])
                                  "visited" (asmcomp/reg.ml[157,4434+6]..[157,4434+13])
                                  expression (asmcomp/reg.ml[157,4434+17]..[157,4434+26])
                                    Pexp_ident "unvisited" (asmcomp/reg.ml[157,4434+17]..[157,4434+26])
                          ]
                    ]
    ]
  structure_item (asmcomp/reg.ml[159,4463+0]..[159,4463+31])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/reg.ml[159,4463+4]..[159,4463+17])
          Ppat_var "all_registers" (asmcomp/reg.ml[159,4463+4]..[159,4463+17])
        expression (asmcomp/reg.ml[159,4463+17]..[159,4463+31]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (asmcomp/reg.ml[159,4463+17]..[159,4463+19])
            Ppat_construct "()" (asmcomp/reg.ml[159,4463+17]..[159,4463+19])
            None
          expression (asmcomp/reg.ml[159,4463+22]..[159,4463+31])
            Pexp_apply
            expression (asmcomp/reg.ml[159,4463+22]..[159,4463+23])
              Pexp_ident "!" (asmcomp/reg.ml[159,4463+22]..[159,4463+23])
            [
              <arg>
              Nolabel
                expression (asmcomp/reg.ml[159,4463+23]..[159,4463+31])
                  Pexp_ident "reg_list" (asmcomp/reg.ml[159,4463+23]..[159,4463+31])
            ]
    ]
  structure_item (asmcomp/reg.ml[160,4495+0]..[160,4495+32])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/reg.ml[160,4495+4]..[160,4495+17])
          Ppat_var "num_registers" (asmcomp/reg.ml[160,4495+4]..[160,4495+17])
        expression (asmcomp/reg.ml[160,4495+17]..[160,4495+32]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (asmcomp/reg.ml[160,4495+17]..[160,4495+19])
            Ppat_construct "()" (asmcomp/reg.ml[160,4495+17]..[160,4495+19])
            None
          expression (asmcomp/reg.ml[160,4495+22]..[160,4495+32])
            Pexp_apply
            expression (asmcomp/reg.ml[160,4495+22]..[160,4495+23])
              Pexp_ident "!" (asmcomp/reg.ml[160,4495+22]..[160,4495+23])
            [
              <arg>
              Nolabel
                expression (asmcomp/reg.ml[160,4495+23]..[160,4495+32])
                  Pexp_ident "currstamp" (asmcomp/reg.ml[160,4495+23]..[160,4495+32])
            ]
    ]
  structure_item (asmcomp/reg.ml[162,4529+0]..[170,4755+24])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/reg.ml[162,4529+4]..[162,4529+14])
          Ppat_var "reinit_reg" (asmcomp/reg.ml[162,4529+4]..[162,4529+14])
        expression (asmcomp/reg.ml[162,4529+15]..[170,4755+24]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (asmcomp/reg.ml[162,4529+15]..[162,4529+16])
            Ppat_var "r" (asmcomp/reg.ml[162,4529+15]..[162,4529+16])
          expression (asmcomp/reg.ml[163,4548+2]..[170,4755+24])
            Pexp_sequence
            expression (asmcomp/reg.ml[163,4548+2]..[163,4548+18])
              Pexp_setfield
              expression (asmcomp/reg.ml[163,4548+2]..[163,4548+3])
                Pexp_ident "r" (asmcomp/reg.ml[163,4548+2]..[163,4548+3])
              "loc" (asmcomp/reg.ml[163,4548+4]..[163,4548+7])
              expression (asmcomp/reg.ml[163,4548+11]..[163,4548+18])
                Pexp_construct "Unknown" (asmcomp/reg.ml[163,4548+11]..[163,4548+18])
                None
            expression (asmcomp/reg.ml[164,4568+2]..[170,4755+24])
              Pexp_sequence
              expression (asmcomp/reg.ml[164,4568+2]..[164,4568+16])
                Pexp_setfield
                expression (asmcomp/reg.ml[164,4568+2]..[164,4568+3])
                  Pexp_ident "r" (asmcomp/reg.ml[164,4568+2]..[164,4568+3])
                "interf" (asmcomp/reg.ml[164,4568+4]..[164,4568+10])
                expression (asmcomp/reg.ml[164,4568+14]..[164,4568+16])
                  Pexp_construct "[]" (asmcomp/reg.ml[164,4568+14]..[164,4568+16])
                  None
              expression (asmcomp/reg.ml[165,4586+2]..[170,4755+24])
                Pexp_sequence
                expression (asmcomp/reg.ml[165,4586+2]..[165,4586+16])
                  Pexp_setfield
                  expression (asmcomp/reg.ml[165,4586+2]..[165,4586+3])
                    Pexp_ident "r" (asmcomp/reg.ml[165,4586+2]..[165,4586+3])
                  "prefer" (asmcomp/reg.ml[165,4586+4]..[165,4586+10])
                  expression (asmcomp/reg.ml[165,4586+14]..[165,4586+16])
                    Pexp_construct "[]" (asmcomp/reg.ml[165,4586+14]..[165,4586+16])
                    None
                expression (asmcomp/reg.ml[166,4604+2]..[170,4755+24])
                  Pexp_sequence
                  expression (asmcomp/reg.ml[166,4604+2]..[166,4604+15])
                    Pexp_setfield
                    expression (asmcomp/reg.ml[166,4604+2]..[166,4604+3])
                      Pexp_ident "r" (asmcomp/reg.ml[166,4604+2]..[166,4604+3])
                    "degree" (asmcomp/reg.ml[166,4604+4]..[166,4604+10])
                    expression (asmcomp/reg.ml[166,4604+14]..[166,4604+15])
                      Pexp_constant PConst_int (0,None)
                  expression (asmcomp/reg.ml[168,4697+2]..[170,4755+24])
                    Pexp_ifthenelse
                    expression (asmcomp/reg.ml[168,4697+5]..[168,4697+27])
                      Pexp_apply
                      expression (asmcomp/reg.ml[168,4697+18]..[168,4697+20])
                        Pexp_ident ">=" (asmcomp/reg.ml[168,4697+18]..[168,4697+20])
                      [
                        <arg>
                        Nolabel
                          expression (asmcomp/reg.ml[168,4697+5]..[168,4697+17])
                            Pexp_field
                            expression (asmcomp/reg.ml[168,4697+5]..[168,4697+6])
                              Pexp_ident "r" (asmcomp/reg.ml[168,4697+5]..[168,4697+6])
                            "spill_cost" (asmcomp/reg.ml[168,4697+7]..[168,4697+17])
                        <arg>
                        Nolabel
                          expression (asmcomp/reg.ml[168,4697+21]..[168,4697+27])
                            Pexp_constant PConst_int (100000,None)
                      ]
                    expression (asmcomp/reg.ml[169,4725+7]..[169,4725+29])
                      Pexp_setfield
                      expression (asmcomp/reg.ml[169,4725+7]..[169,4725+8])
                        Pexp_ident "r" (asmcomp/reg.ml[169,4725+7]..[169,4725+8])
                      "spill_cost" (asmcomp/reg.ml[169,4725+9]..[169,4725+19])
                      expression (asmcomp/reg.ml[169,4725+23]..[169,4725+29])
                        Pexp_constant PConst_int (100000,None)
                    Some
                      expression (asmcomp/reg.ml[170,4755+7]..[170,4755+24])
                        Pexp_setfield
                        expression (asmcomp/reg.ml[170,4755+7]..[170,4755+8])
                          Pexp_ident "r" (asmcomp/reg.ml[170,4755+7]..[170,4755+8])
                        "spill_cost" (asmcomp/reg.ml[170,4755+9]..[170,4755+19])
                        expression (asmcomp/reg.ml[170,4755+23]..[170,4755+24])
                          Pexp_constant PConst_int (0,None)
    ]
  structure_item (asmcomp/reg.ml[172,4781+0]..[173,4796+32])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/reg.ml[172,4781+4]..[172,4781+10])
          Ppat_var "reinit" (asmcomp/reg.ml[172,4781+4]..[172,4781+10])
        expression (asmcomp/reg.ml[172,4781+10]..[173,4796+32]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (asmcomp/reg.ml[172,4781+10]..[172,4781+12])
            Ppat_construct "()" (asmcomp/reg.ml[172,4781+10]..[172,4781+12])
            None
          expression (asmcomp/reg.ml[173,4796+2]..[173,4796+32])
            Pexp_apply
            expression (asmcomp/reg.ml[173,4796+2]..[173,4796+11])
              Pexp_ident "List.iter" (asmcomp/reg.ml[173,4796+2]..[173,4796+11])
            [
              <arg>
              Nolabel
                expression (asmcomp/reg.ml[173,4796+12]..[173,4796+22])
                  Pexp_ident "reinit_reg" (asmcomp/reg.ml[173,4796+12]..[173,4796+22])
              <arg>
              Nolabel
                expression (asmcomp/reg.ml[173,4796+23]..[173,4796+32])
                  Pexp_apply
                  expression (asmcomp/reg.ml[173,4796+23]..[173,4796+24])
                    Pexp_ident "!" (asmcomp/reg.ml[173,4796+23]..[173,4796+24])
                  [
                    <arg>
                    Nolabel
                      expression (asmcomp/reg.ml[173,4796+24]..[173,4796+32])
                        Pexp_ident "reg_list" (asmcomp/reg.ml[173,4796+24]..[173,4796+32])
                  ]
            ]
    ]
  structure_item (asmcomp/reg.ml[175,4830+0]..[179,4918+5])
    Pstr_module
    "RegOrder" (asmcomp/reg.ml[175,4830+7]..[175,4830+15])
      module_expr (asmcomp/reg.ml[176,4848+2]..[179,4918+5])
        Pmod_structure
        [
          structure_item (asmcomp/reg.ml[177,4857+4]..[177,4857+16])
            Pstr_type Rec
            [
              type_declaration "t" (asmcomp/reg.ml[177,4857+9]..[177,4857+10]) (asmcomp/reg.ml[177,4857+4]..[177,4857+16])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  Some
                    core_type (asmcomp/reg.ml[177,4857+13]..[177,4857+16])
                      Ptyp_constr "reg" (asmcomp/reg.ml[177,4857+13]..[177,4857+16])
                      []
            ]
          structure_item (asmcomp/reg.ml[178,4874+4]..[178,4874+43])
            Pstr_value Nonrec
            [
              <def>
                pattern (asmcomp/reg.ml[178,4874+8]..[178,4874+15])
                  Ppat_var "compare" (asmcomp/reg.ml[178,4874+8]..[178,4874+15])
                expression (asmcomp/reg.ml[178,4874+16]..[178,4874+43]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (asmcomp/reg.ml[178,4874+16]..[178,4874+18])
                    Ppat_var "r1" (asmcomp/reg.ml[178,4874+16]..[178,4874+18])
                  expression (asmcomp/reg.ml[178,4874+19]..[178,4874+43]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (asmcomp/reg.ml[178,4874+19]..[178,4874+21])
                      Ppat_var "r2" (asmcomp/reg.ml[178,4874+19]..[178,4874+21])
                    expression (asmcomp/reg.ml[178,4874+24]..[178,4874+43])
                      Pexp_apply
                      expression (asmcomp/reg.ml[178,4874+33]..[178,4874+34])
                        Pexp_ident "-" (asmcomp/reg.ml[178,4874+33]..[178,4874+34])
                      [
                        <arg>
                        Nolabel
                          expression (asmcomp/reg.ml[178,4874+24]..[178,4874+32])
                            Pexp_field
                            expression (asmcomp/reg.ml[178,4874+24]..[178,4874+26])
                              Pexp_ident "r1" (asmcomp/reg.ml[178,4874+24]..[178,4874+26])
                            "stamp" (asmcomp/reg.ml[178,4874+27]..[178,4874+32])
                        <arg>
                        Nolabel
                          expression (asmcomp/reg.ml[178,4874+35]..[178,4874+43])
                            Pexp_field
                            expression (asmcomp/reg.ml[178,4874+35]..[178,4874+37])
                              Pexp_ident "r2" (asmcomp/reg.ml[178,4874+35]..[178,4874+37])
                            "stamp" (asmcomp/reg.ml[178,4874+38]..[178,4874+43])
                      ]
            ]
        ]
  structure_item (asmcomp/reg.ml[181,4925+0]..[181,4925+31])
    Pstr_module
    "Set" (asmcomp/reg.ml[181,4925+7]..[181,4925+10])
      module_expr (asmcomp/reg.ml[181,4925+13]..[181,4925+31])
        Pmod_apply
        module_expr (asmcomp/reg.ml[181,4925+13]..[181,4925+21])
          Pmod_ident "Set.Make" (asmcomp/reg.ml[181,4925+13]..[181,4925+21])
        module_expr (asmcomp/reg.ml[181,4925+22]..[181,4925+30])
          Pmod_ident "RegOrder" (asmcomp/reg.ml[181,4925+22]..[181,4925+30])
  structure_item (asmcomp/reg.ml[182,4957+0]..[182,4957+31])
    Pstr_module
    "Map" (asmcomp/reg.ml[182,4957+7]..[182,4957+10])
      module_expr (asmcomp/reg.ml[182,4957+13]..[182,4957+31])
        Pmod_apply
        module_expr (asmcomp/reg.ml[182,4957+13]..[182,4957+21])
          Pmod_ident "Map.Make" (asmcomp/reg.ml[182,4957+13]..[182,4957+21])
        module_expr (asmcomp/reg.ml[182,4957+22]..[182,4957+30])
          Pmod_ident "RegOrder" (asmcomp/reg.ml[182,4957+22]..[182,4957+30])
  structure_item (asmcomp/reg.ml[184,4990+0]..[190,5169+21])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/reg.ml[184,4990+4]..[184,4990+17])
          Ppat_var "add_set_array" (asmcomp/reg.ml[184,4990+4]..[184,4990+17])
        expression (asmcomp/reg.ml[184,4990+18]..[190,5169+21]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (asmcomp/reg.ml[184,4990+18]..[184,4990+19])
            Ppat_var "s" (asmcomp/reg.ml[184,4990+18]..[184,4990+19])
          expression (asmcomp/reg.ml[184,4990+20]..[190,5169+21]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (asmcomp/reg.ml[184,4990+20]..[184,4990+21])
              Ppat_var "v" (asmcomp/reg.ml[184,4990+20]..[184,4990+21])
            expression (asmcomp/reg.ml[185,5014+2]..[190,5169+21])
              Pexp_match
              expression (asmcomp/reg.ml[185,5014+8]..[185,5014+22])
                Pexp_apply
                expression (asmcomp/reg.ml[185,5014+8]..[185,5014+20])
                  Pexp_ident "Array.length" (asmcomp/reg.ml[185,5014+8]..[185,5014+20])
                [
                  <arg>
                  Nolabel
                    expression (asmcomp/reg.ml[185,5014+21]..[185,5014+22])
                      Pexp_ident "v" (asmcomp/reg.ml[185,5014+21]..[185,5014+22])
                ]
              [
                <case>
                  pattern (asmcomp/reg.ml[186,5042+4]..[186,5042+5])
                    Ppat_constant PConst_int (0,None)
                  expression (asmcomp/reg.ml[186,5042+9]..[186,5042+10])
                    Pexp_ident "s" (asmcomp/reg.ml[186,5042+9]..[186,5042+10])
                <case>
                  pattern (asmcomp/reg.ml[187,5053+4]..[187,5053+5])
                    Ppat_constant PConst_int (1,None)
                  expression (asmcomp/reg.ml[187,5053+9]..[187,5053+24])
                    Pexp_apply
                    expression (asmcomp/reg.ml[187,5053+9]..[187,5053+16])
                      Pexp_ident "Set.add" (asmcomp/reg.ml[187,5053+9]..[187,5053+16])
                    [
                      <arg>
                      Nolabel
                        expression (asmcomp/reg.ml[187,5053+17]..[187,5053+22])
                          Pexp_apply
                          expression (asmcomp/reg.ml[187,5053+17]..[187,5053+22]) ghost
                            Pexp_ident "Array.get" (asmcomp/reg.ml[187,5053+17]..[187,5053+22]) ghost
                          [
                            <arg>
                            Nolabel
                              expression (asmcomp/reg.ml[187,5053+17]..[187,5053+18])
                                Pexp_ident "v" (asmcomp/reg.ml[187,5053+17]..[187,5053+18])
                            <arg>
                            Nolabel
                              expression (asmcomp/reg.ml[187,5053+20]..[187,5053+21])
                                Pexp_constant PConst_int (0,None)
                          ]
                      <arg>
                      Nolabel
                        expression (asmcomp/reg.ml[187,5053+23]..[187,5053+24])
                          Pexp_ident "s" (asmcomp/reg.ml[187,5053+23]..[187,5053+24])
                    ]
                <case>
                  pattern (asmcomp/reg.ml[188,5078+4]..[188,5078+5])
                    Ppat_var "n" (asmcomp/reg.ml[188,5078+4]..[188,5078+5])
                  expression (asmcomp/reg.ml[188,5078+9]..[190,5169+21])
                    Pexp_let Rec
                    [
                      <def>
                        pattern (asmcomp/reg.ml[188,5078+17]..[188,5078+24])
                          Ppat_var "add_all" (asmcomp/reg.ml[188,5078+17]..[188,5078+24])
                        expression (asmcomp/reg.ml[188,5078+25]..[189,5107+61]) ghost
                          Pexp_fun
                          Nolabel
                          None
                          pattern (asmcomp/reg.ml[188,5078+25]..[188,5078+26])
                            Ppat_var "i" (asmcomp/reg.ml[188,5078+25]..[188,5078+26])
                          expression (asmcomp/reg.ml[189,5107+11]..[189,5107+61])
                            Pexp_ifthenelse
                            expression (asmcomp/reg.ml[189,5107+14]..[189,5107+20])
                              Pexp_apply
                              expression (asmcomp/reg.ml[189,5107+16]..[189,5107+18])
                                Pexp_ident ">=" (asmcomp/reg.ml[189,5107+16]..[189,5107+18])
                              [
                                <arg>
                                Nolabel
                                  expression (asmcomp/reg.ml[189,5107+14]..[189,5107+15])
                                    Pexp_ident "i" (asmcomp/reg.ml[189,5107+14]..[189,5107+15])
                                <arg>
                                Nolabel
                                  expression (asmcomp/reg.ml[189,5107+19]..[189,5107+20])
                                    Pexp_ident "n" (asmcomp/reg.ml[189,5107+19]..[189,5107+20])
                              ]
                            expression (asmcomp/reg.ml[189,5107+26]..[189,5107+27])
                              Pexp_ident "s" (asmcomp/reg.ml[189,5107+26]..[189,5107+27])
                            Some
                              expression (asmcomp/reg.ml[189,5107+33]..[189,5107+61])
                                Pexp_apply
                                expression (asmcomp/reg.ml[189,5107+33]..[189,5107+40])
                                  Pexp_ident "Set.add" (asmcomp/reg.ml[189,5107+33]..[189,5107+40])
                                [
                                  <arg>
                                  Nolabel
                                    expression (asmcomp/reg.ml[189,5107+41]..[189,5107+46])
                                      Pexp_apply
                                      expression (asmcomp/reg.ml[189,5107+41]..[189,5107+46]) ghost
                                        Pexp_ident "Array.get" (asmcomp/reg.ml[189,5107+41]..[189,5107+46]) ghost
                                      [
                                        <arg>
                                        Nolabel
                                          expression (asmcomp/reg.ml[189,5107+41]..[189,5107+42])
                                            Pexp_ident "v" (asmcomp/reg.ml[189,5107+41]..[189,5107+42])
                                        <arg>
                                        Nolabel
                                          expression (asmcomp/reg.ml[189,5107+44]..[189,5107+45])
                                            Pexp_ident "i" (asmcomp/reg.ml[189,5107+44]..[189,5107+45])
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (asmcomp/reg.ml[189,5107+47]..[189,5107+61])
                                      Pexp_apply
                                      expression (asmcomp/reg.ml[189,5107+48]..[189,5107+55])
                                        Pexp_ident "add_all" (asmcomp/reg.ml[189,5107+48]..[189,5107+55])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (asmcomp/reg.ml[189,5107+55]..[189,5107+60])
                                            Pexp_apply
                                            expression (asmcomp/reg.ml[189,5107+57]..[189,5107+58])
                                              Pexp_ident "+" (asmcomp/reg.ml[189,5107+57]..[189,5107+58])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (asmcomp/reg.ml[189,5107+56]..[189,5107+57])
                                                  Pexp_ident "i" (asmcomp/reg.ml[189,5107+56]..[189,5107+57])
                                              <arg>
                                              Nolabel
                                                expression (asmcomp/reg.ml[189,5107+58]..[189,5107+59])
                                                  Pexp_constant PConst_int (1,None)
                                            ]
                                      ]
                                ]
                    ]
                    expression (asmcomp/reg.ml[190,5169+12]..[190,5169+21])
                      Pexp_apply
                      expression (asmcomp/reg.ml[190,5169+12]..[190,5169+19])
                        Pexp_ident "add_all" (asmcomp/reg.ml[190,5169+12]..[190,5169+19])
                      [
                        <arg>
                        Nolabel
                          expression (asmcomp/reg.ml[190,5169+20]..[190,5169+21])
                            Pexp_constant PConst_int (0,None)
                      ]
              ]
    ]
  structure_item (asmcomp/reg.ml[192,5192+0]..[198,5384+24])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/reg.ml[192,5192+4]..[192,5192+18])
          Ppat_var "diff_set_array" (asmcomp/reg.ml[192,5192+4]..[192,5192+18])
        expression (asmcomp/reg.ml[192,5192+19]..[198,5384+24]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (asmcomp/reg.ml[192,5192+19]..[192,5192+20])
            Ppat_var "s" (asmcomp/reg.ml[192,5192+19]..[192,5192+20])
          expression (asmcomp/reg.ml[192,5192+21]..[198,5384+24]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (asmcomp/reg.ml[192,5192+21]..[192,5192+22])
              Ppat_var "v" (asmcomp/reg.ml[192,5192+21]..[192,5192+22])
            expression (asmcomp/reg.ml[193,5217+2]..[198,5384+24])
              Pexp_match
              expression (asmcomp/reg.ml[193,5217+8]..[193,5217+22])
                Pexp_apply
                expression (asmcomp/reg.ml[193,5217+8]..[193,5217+20])
                  Pexp_ident "Array.length" (asmcomp/reg.ml[193,5217+8]..[193,5217+20])
                [
                  <arg>
                  Nolabel
                    expression (asmcomp/reg.ml[193,5217+21]..[193,5217+22])
                      Pexp_ident "v" (asmcomp/reg.ml[193,5217+21]..[193,5217+22])
                ]
              [
                <case>
                  pattern (asmcomp/reg.ml[194,5245+4]..[194,5245+5])
                    Ppat_constant PConst_int (0,None)
                  expression (asmcomp/reg.ml[194,5245+9]..[194,5245+10])
                    Pexp_ident "s" (asmcomp/reg.ml[194,5245+9]..[194,5245+10])
                <case>
                  pattern (asmcomp/reg.ml[195,5256+4]..[195,5256+5])
                    Ppat_constant PConst_int (1,None)
                  expression (asmcomp/reg.ml[195,5256+9]..[195,5256+27])
                    Pexp_apply
                    expression (asmcomp/reg.ml[195,5256+9]..[195,5256+19])
                      Pexp_ident "Set.remove" (asmcomp/reg.ml[195,5256+9]..[195,5256+19])
                    [
                      <arg>
                      Nolabel
                        expression (asmcomp/reg.ml[195,5256+20]..[195,5256+25])
                          Pexp_apply
                          expression (asmcomp/reg.ml[195,5256+20]..[195,5256+25]) ghost
                            Pexp_ident "Array.get" (asmcomp/reg.ml[195,5256+20]..[195,5256+25]) ghost
                          [
                            <arg>
                            Nolabel
                              expression (asmcomp/reg.ml[195,5256+20]..[195,5256+21])
                                Pexp_ident "v" (asmcomp/reg.ml[195,5256+20]..[195,5256+21])
                            <arg>
                            Nolabel
                              expression (asmcomp/reg.ml[195,5256+23]..[195,5256+24])
                                Pexp_constant PConst_int (0,None)
                          ]
                      <arg>
                      Nolabel
                        expression (asmcomp/reg.ml[195,5256+26]..[195,5256+27])
                          Pexp_ident "s" (asmcomp/reg.ml[195,5256+26]..[195,5256+27])
                    ]
                <case>
                  pattern (asmcomp/reg.ml[196,5284+4]..[196,5284+5])
                    Ppat_var "n" (asmcomp/reg.ml[196,5284+4]..[196,5284+5])
                  expression (asmcomp/reg.ml[196,5284+9]..[198,5384+24])
                    Pexp_let Rec
                    [
                      <def>
                        pattern (asmcomp/reg.ml[196,5284+17]..[196,5284+27])
                          Ppat_var "remove_all" (asmcomp/reg.ml[196,5284+17]..[196,5284+27])
                        expression (asmcomp/reg.ml[196,5284+28]..[197,5316+67]) ghost
                          Pexp_fun
                          Nolabel
                          None
                          pattern (asmcomp/reg.ml[196,5284+28]..[196,5284+29])
                            Ppat_var "i" (asmcomp/reg.ml[196,5284+28]..[196,5284+29])
                          expression (asmcomp/reg.ml[197,5316+11]..[197,5316+67])
                            Pexp_ifthenelse
                            expression (asmcomp/reg.ml[197,5316+14]..[197,5316+20])
                              Pexp_apply
                              expression (asmcomp/reg.ml[197,5316+16]..[197,5316+18])
                                Pexp_ident ">=" (asmcomp/reg.ml[197,5316+16]..[197,5316+18])
                              [
                                <arg>
                                Nolabel
                                  expression (asmcomp/reg.ml[197,5316+14]..[197,5316+15])
                                    Pexp_ident "i" (asmcomp/reg.ml[197,5316+14]..[197,5316+15])
                                <arg>
                                Nolabel
                                  expression (asmcomp/reg.ml[197,5316+19]..[197,5316+20])
                                    Pexp_ident "n" (asmcomp/reg.ml[197,5316+19]..[197,5316+20])
                              ]
                            expression (asmcomp/reg.ml[197,5316+26]..[197,5316+27])
                              Pexp_ident "s" (asmcomp/reg.ml[197,5316+26]..[197,5316+27])
                            Some
                              expression (asmcomp/reg.ml[197,5316+33]..[197,5316+67])
                                Pexp_apply
                                expression (asmcomp/reg.ml[197,5316+33]..[197,5316+43])
                                  Pexp_ident "Set.remove" (asmcomp/reg.ml[197,5316+33]..[197,5316+43])
                                [
                                  <arg>
                                  Nolabel
                                    expression (asmcomp/reg.ml[197,5316+44]..[197,5316+49])
                                      Pexp_apply
                                      expression (asmcomp/reg.ml[197,5316+44]..[197,5316+49]) ghost
                                        Pexp_ident "Array.get" (asmcomp/reg.ml[197,5316+44]..[197,5316+49]) ghost
                                      [
                                        <arg>
                                        Nolabel
                                          expression (asmcomp/reg.ml[197,5316+44]..[197,5316+45])
                                            Pexp_ident "v" (asmcomp/reg.ml[197,5316+44]..[197,5316+45])
                                        <arg>
                                        Nolabel
                                          expression (asmcomp/reg.ml[197,5316+47]..[197,5316+48])
                                            Pexp_ident "i" (asmcomp/reg.ml[197,5316+47]..[197,5316+48])
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (asmcomp/reg.ml[197,5316+50]..[197,5316+67])
                                      Pexp_apply
                                      expression (asmcomp/reg.ml[197,5316+51]..[197,5316+61])
                                        Pexp_ident "remove_all" (asmcomp/reg.ml[197,5316+51]..[197,5316+61])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (asmcomp/reg.ml[197,5316+61]..[197,5316+66])
                                            Pexp_apply
                                            expression (asmcomp/reg.ml[197,5316+63]..[197,5316+64])
                                              Pexp_ident "+" (asmcomp/reg.ml[197,5316+63]..[197,5316+64])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (asmcomp/reg.ml[197,5316+62]..[197,5316+63])
                                                  Pexp_ident "i" (asmcomp/reg.ml[197,5316+62]..[197,5316+63])
                                              <arg>
                                              Nolabel
                                                expression (asmcomp/reg.ml[197,5316+64]..[197,5316+65])
                                                  Pexp_constant PConst_int (1,None)
                                            ]
                                      ]
                                ]
                    ]
                    expression (asmcomp/reg.ml[198,5384+12]..[198,5384+24])
                      Pexp_apply
                      expression (asmcomp/reg.ml[198,5384+12]..[198,5384+22])
                        Pexp_ident "remove_all" (asmcomp/reg.ml[198,5384+12]..[198,5384+22])
                      [
                        <arg>
                        Nolabel
                          expression (asmcomp/reg.ml[198,5384+23]..[198,5384+24])
                            Pexp_constant PConst_int (0,None)
                      ]
              ]
    ]
  structure_item (asmcomp/reg.ml[200,5410+0]..[210,5742+23])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/reg.ml[200,5410+4]..[200,5410+19])
          Ppat_var "inter_set_array" (asmcomp/reg.ml[200,5410+4]..[200,5410+19])
        expression (asmcomp/reg.ml[200,5410+20]..[210,5742+23]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (asmcomp/reg.ml[200,5410+20]..[200,5410+21])
            Ppat_var "s" (asmcomp/reg.ml[200,5410+20]..[200,5410+21])
          expression (asmcomp/reg.ml[200,5410+22]..[210,5742+23]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (asmcomp/reg.ml[200,5410+22]..[200,5410+23])
              Ppat_var "v" (asmcomp/reg.ml[200,5410+22]..[200,5410+23])
            expression (asmcomp/reg.ml[201,5436+2]..[210,5742+23])
              Pexp_match
              expression (asmcomp/reg.ml[201,5436+8]..[201,5436+22])
                Pexp_apply
                expression (asmcomp/reg.ml[201,5436+8]..[201,5436+20])
                  Pexp_ident "Array.length" (asmcomp/reg.ml[201,5436+8]..[201,5436+20])
                [
                  <arg>
                  Nolabel
                    expression (asmcomp/reg.ml[201,5436+21]..[201,5436+22])
                      Pexp_ident "v" (asmcomp/reg.ml[201,5436+21]..[201,5436+22])
                ]
              [
                <case>
                  pattern (asmcomp/reg.ml[202,5464+4]..[202,5464+5])
                    Ppat_constant PConst_int (0,None)
                  expression (asmcomp/reg.ml[202,5464+9]..[202,5464+18])
                    Pexp_ident "Set.empty" (asmcomp/reg.ml[202,5464+9]..[202,5464+18])
                <case>
                  pattern (asmcomp/reg.ml[203,5483+4]..[203,5483+5])
                    Ppat_constant PConst_int (1,None)
                  expression (asmcomp/reg.ml[203,5483+9]..[205,5549+23])
                    Pexp_ifthenelse
                    expression (asmcomp/reg.ml[203,5483+12]..[203,5483+27])
                      Pexp_apply
                      expression (asmcomp/reg.ml[203,5483+12]..[203,5483+19])
                        Pexp_ident "Set.mem" (asmcomp/reg.ml[203,5483+12]..[203,5483+19])
                      [
                        <arg>
                        Nolabel
                          expression (asmcomp/reg.ml[203,5483+20]..[203,5483+25])
                            Pexp_apply
                            expression (asmcomp/reg.ml[203,5483+20]..[203,5483+25]) ghost
                              Pexp_ident "Array.get" (asmcomp/reg.ml[203,5483+20]..[203,5483+25]) ghost
                            [
                              <arg>
                              Nolabel
                                expression (asmcomp/reg.ml[203,5483+20]..[203,5483+21])
                                  Pexp_ident "v" (asmcomp/reg.ml[203,5483+20]..[203,5483+21])
                              <arg>
                              Nolabel
                                expression (asmcomp/reg.ml[203,5483+23]..[203,5483+24])
                                  Pexp_constant PConst_int (0,None)
                            ]
                        <arg>
                        Nolabel
                          expression (asmcomp/reg.ml[203,5483+26]..[203,5483+27])
                            Pexp_ident "s" (asmcomp/reg.ml[203,5483+26]..[203,5483+27])
                      ]
                    expression (asmcomp/reg.ml[204,5511+14]..[204,5511+37])
                      Pexp_apply
                      expression (asmcomp/reg.ml[204,5511+14]..[204,5511+21])
                        Pexp_ident "Set.add" (asmcomp/reg.ml[204,5511+14]..[204,5511+21])
                      [
                        <arg>
                        Nolabel
                          expression (asmcomp/reg.ml[204,5511+22]..[204,5511+27])
                            Pexp_apply
                            expression (asmcomp/reg.ml[204,5511+22]..[204,5511+27]) ghost
                              Pexp_ident "Array.get" (asmcomp/reg.ml[204,5511+22]..[204,5511+27]) ghost
                            [
                              <arg>
                              Nolabel
                                expression (asmcomp/reg.ml[204,5511+22]..[204,5511+23])
                                  Pexp_ident "v" (asmcomp/reg.ml[204,5511+22]..[204,5511+23])
                              <arg>
                              Nolabel
                                expression (asmcomp/reg.ml[204,5511+25]..[204,5511+26])
                                  Pexp_constant PConst_int (0,None)
                            ]
                        <arg>
                        Nolabel
                          expression (asmcomp/reg.ml[204,5511+28]..[204,5511+37])
                            Pexp_ident "Set.empty" (asmcomp/reg.ml[204,5511+28]..[204,5511+37])
                      ]
                    Some
                      expression (asmcomp/reg.ml[205,5549+14]..[205,5549+23])
                        Pexp_ident "Set.empty" (asmcomp/reg.ml[205,5549+14]..[205,5549+23])
                <case>
                  pattern (asmcomp/reg.ml[206,5573+4]..[206,5573+5])
                    Ppat_var "n" (asmcomp/reg.ml[206,5573+4]..[206,5573+5])
                  expression (asmcomp/reg.ml[206,5573+9]..[210,5742+23])
                    Pexp_let Rec
                    [
                      <def>
                        pattern (asmcomp/reg.ml[206,5573+17]..[206,5573+26])
                          Ppat_var "inter_all" (asmcomp/reg.ml[206,5573+17]..[206,5573+26])
                        expression (asmcomp/reg.ml[206,5573+27]..[209,5711+30]) ghost
                          Pexp_fun
                          Nolabel
                          None
                          pattern (asmcomp/reg.ml[206,5573+27]..[206,5573+28])
                            Ppat_var "i" (asmcomp/reg.ml[206,5573+27]..[206,5573+28])
                          expression (asmcomp/reg.ml[207,5604+11]..[209,5711+30])
                            Pexp_ifthenelse
                            expression (asmcomp/reg.ml[207,5604+14]..[207,5604+20])
                              Pexp_apply
                              expression (asmcomp/reg.ml[207,5604+16]..[207,5604+18])
                                Pexp_ident ">=" (asmcomp/reg.ml[207,5604+16]..[207,5604+18])
                              [
                                <arg>
                                Nolabel
                                  expression (asmcomp/reg.ml[207,5604+14]..[207,5604+15])
                                    Pexp_ident "i" (asmcomp/reg.ml[207,5604+14]..[207,5604+15])
                                <arg>
                                Nolabel
                                  expression (asmcomp/reg.ml[207,5604+19]..[207,5604+20])
                                    Pexp_ident "n" (asmcomp/reg.ml[207,5604+19]..[207,5604+20])
                              ]
                            expression (asmcomp/reg.ml[207,5604+26]..[207,5604+35])
                              Pexp_ident "Set.empty" (asmcomp/reg.ml[207,5604+26]..[207,5604+35])
                            Some
                              expression (asmcomp/reg.ml[208,5640+16]..[209,5711+30])
                                Pexp_ifthenelse
                                expression (asmcomp/reg.ml[208,5640+19]..[208,5640+34])
                                  Pexp_apply
                                  expression (asmcomp/reg.ml[208,5640+19]..[208,5640+26])
                                    Pexp_ident "Set.mem" (asmcomp/reg.ml[208,5640+19]..[208,5640+26])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (asmcomp/reg.ml[208,5640+27]..[208,5640+32])
                                        Pexp_apply
                                        expression (asmcomp/reg.ml[208,5640+27]..[208,5640+32]) ghost
                                          Pexp_ident "Array.get" (asmcomp/reg.ml[208,5640+27]..[208,5640+32]) ghost
                                        [
                                          <arg>
                                          Nolabel
                                            expression (asmcomp/reg.ml[208,5640+27]..[208,5640+28])
                                              Pexp_ident "v" (asmcomp/reg.ml[208,5640+27]..[208,5640+28])
                                          <arg>
                                          Nolabel
                                            expression (asmcomp/reg.ml[208,5640+30]..[208,5640+31])
                                              Pexp_ident "i" (asmcomp/reg.ml[208,5640+30]..[208,5640+31])
                                        ]
                                    <arg>
                                    Nolabel
                                      expression (asmcomp/reg.ml[208,5640+33]..[208,5640+34])
                                        Pexp_ident "s" (asmcomp/reg.ml[208,5640+33]..[208,5640+34])
                                  ]
                                expression (asmcomp/reg.ml[208,5640+40]..[208,5640+70])
                                  Pexp_apply
                                  expression (asmcomp/reg.ml[208,5640+40]..[208,5640+47])
                                    Pexp_ident "Set.add" (asmcomp/reg.ml[208,5640+40]..[208,5640+47])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (asmcomp/reg.ml[208,5640+48]..[208,5640+53])
                                        Pexp_apply
                                        expression (asmcomp/reg.ml[208,5640+48]..[208,5640+53]) ghost
                                          Pexp_ident "Array.get" (asmcomp/reg.ml[208,5640+48]..[208,5640+53]) ghost
                                        [
                                          <arg>
                                          Nolabel
                                            expression (asmcomp/reg.ml[208,5640+48]..[208,5640+49])
                                              Pexp_ident "v" (asmcomp/reg.ml[208,5640+48]..[208,5640+49])
                                          <arg>
                                          Nolabel
                                            expression (asmcomp/reg.ml[208,5640+51]..[208,5640+52])
                                              Pexp_ident "i" (asmcomp/reg.ml[208,5640+51]..[208,5640+52])
                                        ]
                                    <arg>
                                    Nolabel
                                      expression (asmcomp/reg.ml[208,5640+54]..[208,5640+70])
                                        Pexp_apply
                                        expression (asmcomp/reg.ml[208,5640+55]..[208,5640+64])
                                          Pexp_ident "inter_all" (asmcomp/reg.ml[208,5640+55]..[208,5640+64])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (asmcomp/reg.ml[208,5640+64]..[208,5640+69])
                                              Pexp_apply
                                              expression (asmcomp/reg.ml[208,5640+66]..[208,5640+67])
                                                Pexp_ident "+" (asmcomp/reg.ml[208,5640+66]..[208,5640+67])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (asmcomp/reg.ml[208,5640+65]..[208,5640+66])
                                                    Pexp_ident "i" (asmcomp/reg.ml[208,5640+65]..[208,5640+66])
                                                <arg>
                                                Nolabel
                                                  expression (asmcomp/reg.ml[208,5640+67]..[208,5640+68])
                                                    Pexp_constant PConst_int (1,None)
                                              ]
                                        ]
                                  ]
                                Some
                                  expression (asmcomp/reg.ml[209,5711+16]..[209,5711+30])
                                    Pexp_apply
                                    expression (asmcomp/reg.ml[209,5711+16]..[209,5711+25])
                                      Pexp_ident "inter_all" (asmcomp/reg.ml[209,5711+16]..[209,5711+25])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (asmcomp/reg.ml[209,5711+25]..[209,5711+30])
                                          Pexp_apply
                                          expression (asmcomp/reg.ml[209,5711+27]..[209,5711+28])
                                            Pexp_ident "+" (asmcomp/reg.ml[209,5711+27]..[209,5711+28])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (asmcomp/reg.ml[209,5711+26]..[209,5711+27])
                                                Pexp_ident "i" (asmcomp/reg.ml[209,5711+26]..[209,5711+27])
                                            <arg>
                                            Nolabel
                                              expression (asmcomp/reg.ml[209,5711+28]..[209,5711+29])
                                                Pexp_constant PConst_int (1,None)
                                          ]
                                    ]
                    ]
                    expression (asmcomp/reg.ml[210,5742+12]..[210,5742+23])
                      Pexp_apply
                      expression (asmcomp/reg.ml[210,5742+12]..[210,5742+21])
                        Pexp_ident "inter_all" (asmcomp/reg.ml[210,5742+12]..[210,5742+21])
                      [
                        <arg>
                        Nolabel
                          expression (asmcomp/reg.ml[210,5742+22]..[210,5742+23])
                            Pexp_constant PConst_int (0,None)
                      ]
              ]
    ]
  structure_item (asmcomp/reg.ml[212,5767+0]..[220,6015+26])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/reg.ml[212,5767+4]..[212,5767+22])
          Ppat_var "disjoint_set_array" (asmcomp/reg.ml[212,5767+4]..[212,5767+22])
        expression (asmcomp/reg.ml[212,5767+23]..[220,6015+26]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (asmcomp/reg.ml[212,5767+23]..[212,5767+24])
            Ppat_var "s" (asmcomp/reg.ml[212,5767+23]..[212,5767+24])
          expression (asmcomp/reg.ml[212,5767+25]..[220,6015+26]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (asmcomp/reg.ml[212,5767+25]..[212,5767+26])
              Ppat_var "v" (asmcomp/reg.ml[212,5767+25]..[212,5767+26])
            expression (asmcomp/reg.ml[213,5796+2]..[220,6015+26])
              Pexp_match
              expression (asmcomp/reg.ml[213,5796+8]..[213,5796+22])
                Pexp_apply
                expression (asmcomp/reg.ml[213,5796+8]..[213,5796+20])
                  Pexp_ident "Array.length" (asmcomp/reg.ml[213,5796+8]..[213,5796+20])
                [
                  <arg>
                  Nolabel
                    expression (asmcomp/reg.ml[213,5796+21]..[213,5796+22])
                      Pexp_ident "v" (asmcomp/reg.ml[213,5796+21]..[213,5796+22])
                ]
              [
                <case>
                  pattern (asmcomp/reg.ml[214,5824+4]..[214,5824+5])
                    Ppat_constant PConst_int (0,None)
                  expression (asmcomp/reg.ml[214,5824+9]..[214,5824+13])
                    Pexp_construct "true" (asmcomp/reg.ml[214,5824+9]..[214,5824+13])
                    None
                <case>
                  pattern (asmcomp/reg.ml[215,5838+4]..[215,5838+5])
                    Ppat_constant PConst_int (1,None)
                  expression (asmcomp/reg.ml[215,5838+9]..[215,5838+30])
                    Pexp_apply
                    expression (asmcomp/reg.ml[215,5838+9]..[215,5838+12])
                      Pexp_ident "not" (asmcomp/reg.ml[215,5838+9]..[215,5838+12])
                    [
                      <arg>
                      Nolabel
                        expression (asmcomp/reg.ml[215,5838+13]..[215,5838+30])
                          Pexp_apply
                          expression (asmcomp/reg.ml[215,5838+14]..[215,5838+21])
                            Pexp_ident "Set.mem" (asmcomp/reg.ml[215,5838+14]..[215,5838+21])
                          [
                            <arg>
                            Nolabel
                              expression (asmcomp/reg.ml[215,5838+22]..[215,5838+27])
                                Pexp_apply
                                expression (asmcomp/reg.ml[215,5838+22]..[215,5838+27]) ghost
                                  Pexp_ident "Array.get" (asmcomp/reg.ml[215,5838+22]..[215,5838+27]) ghost
                                [
                                  <arg>
                                  Nolabel
                                    expression (asmcomp/reg.ml[215,5838+22]..[215,5838+23])
                                      Pexp_ident "v" (asmcomp/reg.ml[215,5838+22]..[215,5838+23])
                                  <arg>
                                  Nolabel
                                    expression (asmcomp/reg.ml[215,5838+25]..[215,5838+26])
                                      Pexp_constant PConst_int (0,None)
                                ]
                            <arg>
                            Nolabel
                              expression (asmcomp/reg.ml[215,5838+28]..[215,5838+29])
                                Pexp_ident "s" (asmcomp/reg.ml[215,5838+28]..[215,5838+29])
                          ]
                    ]
                <case>
                  pattern (asmcomp/reg.ml[216,5869+4]..[216,5869+5])
                    Ppat_var "n" (asmcomp/reg.ml[216,5869+4]..[216,5869+5])
                  expression (asmcomp/reg.ml[216,5869+9]..[220,6015+26])
                    Pexp_let Rec
                    [
                      <def>
                        pattern (asmcomp/reg.ml[216,5869+17]..[216,5869+29])
                          Ppat_var "disjoint_all" (asmcomp/reg.ml[216,5869+17]..[216,5869+29])
                        expression (asmcomp/reg.ml[216,5869+30]..[219,5980+34]) ghost
                          Pexp_fun
                          Nolabel
                          None
                          pattern (asmcomp/reg.ml[216,5869+30]..[216,5869+31])
                            Ppat_var "i" (asmcomp/reg.ml[216,5869+30]..[216,5869+31])
                          expression (asmcomp/reg.ml[217,5903+11]..[219,5980+34])
                            Pexp_ifthenelse
                            expression (asmcomp/reg.ml[217,5903+14]..[217,5903+20])
                              Pexp_apply
                              expression (asmcomp/reg.ml[217,5903+16]..[217,5903+18])
                                Pexp_ident ">=" (asmcomp/reg.ml[217,5903+16]..[217,5903+18])
                              [
                                <arg>
                                Nolabel
                                  expression (asmcomp/reg.ml[217,5903+14]..[217,5903+15])
                                    Pexp_ident "i" (asmcomp/reg.ml[217,5903+14]..[217,5903+15])
                                <arg>
                                Nolabel
                                  expression (asmcomp/reg.ml[217,5903+19]..[217,5903+20])
                                    Pexp_ident "n" (asmcomp/reg.ml[217,5903+19]..[217,5903+20])
                              ]
                            expression (asmcomp/reg.ml[217,5903+26]..[217,5903+30])
                              Pexp_construct "true" (asmcomp/reg.ml[217,5903+26]..[217,5903+30])
                              None
                            Some
                              expression (asmcomp/reg.ml[218,5934+16]..[219,5980+34])
                                Pexp_ifthenelse
                                expression (asmcomp/reg.ml[218,5934+19]..[218,5934+34])
                                  Pexp_apply
                                  expression (asmcomp/reg.ml[218,5934+19]..[218,5934+26])
                                    Pexp_ident "Set.mem" (asmcomp/reg.ml[218,5934+19]..[218,5934+26])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (asmcomp/reg.ml[218,5934+27]..[218,5934+32])
                                        Pexp_apply
                                        expression (asmcomp/reg.ml[218,5934+27]..[218,5934+32]) ghost
                                          Pexp_ident "Array.get" (asmcomp/reg.ml[218,5934+27]..[218,5934+32]) ghost
                                        [
                                          <arg>
                                          Nolabel
                                            expression (asmcomp/reg.ml[218,5934+27]..[218,5934+28])
                                              Pexp_ident "v" (asmcomp/reg.ml[218,5934+27]..[218,5934+28])
                                          <arg>
                                          Nolabel
                                            expression (asmcomp/reg.ml[218,5934+30]..[218,5934+31])
                                              Pexp_ident "i" (asmcomp/reg.ml[218,5934+30]..[218,5934+31])
                                        ]
                                    <arg>
                                    Nolabel
                                      expression (asmcomp/reg.ml[218,5934+33]..[218,5934+34])
                                        Pexp_ident "s" (asmcomp/reg.ml[218,5934+33]..[218,5934+34])
                                  ]
                                expression (asmcomp/reg.ml[218,5934+40]..[218,5934+45])
                                  Pexp_construct "false" (asmcomp/reg.ml[218,5934+40]..[218,5934+45])
                                  None
                                Some
                                  expression (asmcomp/reg.ml[219,5980+16]..[219,5980+34])
                                    Pexp_apply
                                    expression (asmcomp/reg.ml[219,5980+16]..[219,5980+28])
                                      Pexp_ident "disjoint_all" (asmcomp/reg.ml[219,5980+16]..[219,5980+28])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (asmcomp/reg.ml[219,5980+29]..[219,5980+34])
                                          Pexp_apply
                                          expression (asmcomp/reg.ml[219,5980+31]..[219,5980+32])
                                            Pexp_ident "+" (asmcomp/reg.ml[219,5980+31]..[219,5980+32])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (asmcomp/reg.ml[219,5980+30]..[219,5980+31])
                                                Pexp_ident "i" (asmcomp/reg.ml[219,5980+30]..[219,5980+31])
                                            <arg>
                                            Nolabel
                                              expression (asmcomp/reg.ml[219,5980+32]..[219,5980+33])
                                                Pexp_constant PConst_int (1,None)
                                          ]
                                    ]
                    ]
                    expression (asmcomp/reg.ml[220,6015+12]..[220,6015+26])
                      Pexp_apply
                      expression (asmcomp/reg.ml[220,6015+12]..[220,6015+24])
                        Pexp_ident "disjoint_all" (asmcomp/reg.ml[220,6015+12]..[220,6015+24])
                      [
                        <arg>
                        Nolabel
                          expression (asmcomp/reg.ml[220,6015+25]..[220,6015+26])
                            Pexp_constant PConst_int (0,None)
                      ]
              ]
    ]
  structure_item (asmcomp/reg.ml[222,6043+0]..[228,6243+21])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/reg.ml[222,6043+4]..[222,6043+16])
          Ppat_var "set_of_array" (asmcomp/reg.ml[222,6043+4]..[222,6043+16])
        expression (asmcomp/reg.ml[222,6043+17]..[228,6243+21]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (asmcomp/reg.ml[222,6043+17]..[222,6043+18])
            Ppat_var "v" (asmcomp/reg.ml[222,6043+17]..[222,6043+18])
          expression (asmcomp/reg.ml[223,6064+2]..[228,6243+21])
            Pexp_match
            expression (asmcomp/reg.ml[223,6064+8]..[223,6064+22])
              Pexp_apply
              expression (asmcomp/reg.ml[223,6064+8]..[223,6064+20])
                Pexp_ident "Array.length" (asmcomp/reg.ml[223,6064+8]..[223,6064+20])
              [
                <arg>
                Nolabel
                  expression (asmcomp/reg.ml[223,6064+21]..[223,6064+22])
                    Pexp_ident "v" (asmcomp/reg.ml[223,6064+21]..[223,6064+22])
              ]
            [
              <case>
                pattern (asmcomp/reg.ml[224,6092+4]..[224,6092+5])
                  Ppat_constant PConst_int (0,None)
                expression (asmcomp/reg.ml[224,6092+9]..[224,6092+18])
                  Pexp_ident "Set.empty" (asmcomp/reg.ml[224,6092+9]..[224,6092+18])
              <case>
                pattern (asmcomp/reg.ml[225,6111+4]..[225,6111+5])
                  Ppat_constant PConst_int (1,None)
                expression (asmcomp/reg.ml[225,6111+9]..[225,6111+32])
                  Pexp_apply
                  expression (asmcomp/reg.ml[225,6111+9]..[225,6111+16])
                    Pexp_ident "Set.add" (asmcomp/reg.ml[225,6111+9]..[225,6111+16])
                  [
                    <arg>
                    Nolabel
                      expression (asmcomp/reg.ml[225,6111+17]..[225,6111+22])
                        Pexp_apply
                        expression (asmcomp/reg.ml[225,6111+17]..[225,6111+22]) ghost
                          Pexp_ident "Array.get" (asmcomp/reg.ml[225,6111+17]..[225,6111+22]) ghost
                        [
                          <arg>
                          Nolabel
                            expression (asmcomp/reg.ml[225,6111+17]..[225,6111+18])
                              Pexp_ident "v" (asmcomp/reg.ml[225,6111+17]..[225,6111+18])
                          <arg>
                          Nolabel
                            expression (asmcomp/reg.ml[225,6111+20]..[225,6111+21])
                              Pexp_constant PConst_int (0,None)
                        ]
                    <arg>
                    Nolabel
                      expression (asmcomp/reg.ml[225,6111+23]..[225,6111+32])
                        Pexp_ident "Set.empty" (asmcomp/reg.ml[225,6111+23]..[225,6111+32])
                  ]
              <case>
                pattern (asmcomp/reg.ml[226,6144+4]..[226,6144+5])
                  Ppat_var "n" (asmcomp/reg.ml[226,6144+4]..[226,6144+5])
                expression (asmcomp/reg.ml[226,6144+9]..[228,6243+21])
                  Pexp_let Rec
                  [
                    <def>
                      pattern (asmcomp/reg.ml[226,6144+17]..[226,6144+24])
                        Ppat_var "add_all" (asmcomp/reg.ml[226,6144+17]..[226,6144+24])
                      expression (asmcomp/reg.ml[226,6144+25]..[227,6173+69]) ghost
                        Pexp_fun
                        Nolabel
                        None
                        pattern (asmcomp/reg.ml[226,6144+25]..[226,6144+26])
                          Ppat_var "i" (asmcomp/reg.ml[226,6144+25]..[226,6144+26])
                        expression (asmcomp/reg.ml[227,6173+11]..[227,6173+69])
                          Pexp_ifthenelse
                          expression (asmcomp/reg.ml[227,6173+14]..[227,6173+20])
                            Pexp_apply
                            expression (asmcomp/reg.ml[227,6173+16]..[227,6173+18])
                              Pexp_ident ">=" (asmcomp/reg.ml[227,6173+16]..[227,6173+18])
                            [
                              <arg>
                              Nolabel
                                expression (asmcomp/reg.ml[227,6173+14]..[227,6173+15])
                                  Pexp_ident "i" (asmcomp/reg.ml[227,6173+14]..[227,6173+15])
                              <arg>
                              Nolabel
                                expression (asmcomp/reg.ml[227,6173+19]..[227,6173+20])
                                  Pexp_ident "n" (asmcomp/reg.ml[227,6173+19]..[227,6173+20])
                            ]
                          expression (asmcomp/reg.ml[227,6173+26]..[227,6173+35])
                            Pexp_ident "Set.empty" (asmcomp/reg.ml[227,6173+26]..[227,6173+35])
                          Some
                            expression (asmcomp/reg.ml[227,6173+41]..[227,6173+69])
                              Pexp_apply
                              expression (asmcomp/reg.ml[227,6173+41]..[227,6173+48])
                                Pexp_ident "Set.add" (asmcomp/reg.ml[227,6173+41]..[227,6173+48])
                              [
                                <arg>
                                Nolabel
                                  expression (asmcomp/reg.ml[227,6173+49]..[227,6173+54])
                                    Pexp_apply
                                    expression (asmcomp/reg.ml[227,6173+49]..[227,6173+54]) ghost
                                      Pexp_ident "Array.get" (asmcomp/reg.ml[227,6173+49]..[227,6173+54]) ghost
                                    [
                                      <arg>
                                      Nolabel
                                        expression (asmcomp/reg.ml[227,6173+49]..[227,6173+50])
                                          Pexp_ident "v" (asmcomp/reg.ml[227,6173+49]..[227,6173+50])
                                      <arg>
                                      Nolabel
                                        expression (asmcomp/reg.ml[227,6173+52]..[227,6173+53])
                                          Pexp_ident "i" (asmcomp/reg.ml[227,6173+52]..[227,6173+53])
                                    ]
                                <arg>
                                Nolabel
                                  expression (asmcomp/reg.ml[227,6173+55]..[227,6173+69])
                                    Pexp_apply
                                    expression (asmcomp/reg.ml[227,6173+56]..[227,6173+63])
                                      Pexp_ident "add_all" (asmcomp/reg.ml[227,6173+56]..[227,6173+63])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (asmcomp/reg.ml[227,6173+63]..[227,6173+68])
                                          Pexp_apply
                                          expression (asmcomp/reg.ml[227,6173+65]..[227,6173+66])
                                            Pexp_ident "+" (asmcomp/reg.ml[227,6173+65]..[227,6173+66])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (asmcomp/reg.ml[227,6173+64]..[227,6173+65])
                                                Pexp_ident "i" (asmcomp/reg.ml[227,6173+64]..[227,6173+65])
                                            <arg>
                                            Nolabel
                                              expression (asmcomp/reg.ml[227,6173+66]..[227,6173+67])
                                                Pexp_constant PConst_int (1,None)
                                          ]
                                    ]
                              ]
                  ]
                  expression (asmcomp/reg.ml[228,6243+12]..[228,6243+21])
                    Pexp_apply
                    expression (asmcomp/reg.ml[228,6243+12]..[228,6243+19])
                      Pexp_ident "add_all" (asmcomp/reg.ml[228,6243+12]..[228,6243+19])
                    [
                      <arg>
                      Nolabel
                        expression (asmcomp/reg.ml[228,6243+20]..[228,6243+21])
                          Pexp_constant PConst_int (0,None)
                    ]
            ]
    ]
]

