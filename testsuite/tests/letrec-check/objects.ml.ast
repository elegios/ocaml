[
  structure_item (testsuite/tests/letrec-check/objects.ml[5,24+0]..[5,24+20])
    Pstr_class
    [
      class_declaration (testsuite/tests/letrec-check/objects.ml[5,24+0]..[5,24+20])
        pci_virt = Concrete
        pci_params =
          []
        pci_name = "c" (testsuite/tests/letrec-check/objects.ml[5,24+6]..[5,24+7])
        pci_expr =
          class_expr (testsuite/tests/letrec-check/objects.ml[5,24+10]..[5,24+20])
            Pcl_structure
            class_structure
              pattern (testsuite/tests/letrec-check/objects.ml[5,24+16]..[5,24+16]) ghost
                Ppat_any
              []
    ]
  structure_item (testsuite/tests/letrec-check/objects.ml[6,45+0]..[6,45+27])
    Pstr_value Rec
    [
      <def>
        pattern (testsuite/tests/letrec-check/objects.ml[6,45+8]..[6,45+9])
          Ppat_var "x" (testsuite/tests/letrec-check/objects.ml[6,45+8]..[6,45+9])
        expression (testsuite/tests/letrec-check/objects.ml[6,45+12]..[6,45+27])
          Pexp_fun
          Nolabel
          None
          pattern (testsuite/tests/letrec-check/objects.ml[6,45+16]..[6,45+18])
            Ppat_construct "()" (testsuite/tests/letrec-check/objects.ml[6,45+16]..[6,45+18])
            None
          expression (testsuite/tests/letrec-check/objects.ml[6,45+22]..[6,45+27])
            Pexp_new "c" (testsuite/tests/letrec-check/objects.ml[6,45+26]..[6,45+27])
    ]
  structure_item (testsuite/tests/letrec-check/objects.ml[7,75+0]..[10,135+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/letrec-check/objects.ml[7,75+9]..[10,135+2])
        Pstr_eval
        expression (testsuite/tests/letrec-check/objects.ml[7,75+9]..[10,135+2])
          Pexp_constant PConst_string ("\nclass c : object  end\nval x : unit -> c = <fun>\n",(testsuite/tests/letrec-check/objects.ml[7,75+11]..[10,135+0]),Some "")
    ]
  structure_item (testsuite/tests/letrec-check/objects.ml[12,142+0]..[12,142+22])
    Pstr_class
    [
      class_declaration (testsuite/tests/letrec-check/objects.ml[12,142+0]..[12,142+22])
        pci_virt = Concrete
        pci_params =
          []
        pci_name = "c" (testsuite/tests/letrec-check/objects.ml[12,142+6]..[12,142+7])
        pci_expr =
          class_expr (testsuite/tests/letrec-check/objects.ml[12,142+8]..[12,142+22])
            Pcl_fun
            Nolabel
            None
            pattern (testsuite/tests/letrec-check/objects.ml[12,142+8]..[12,142+9])
              Ppat_any
            class_expr (testsuite/tests/letrec-check/objects.ml[12,142+12]..[12,142+22])
              Pcl_structure
              class_structure
                pattern (testsuite/tests/letrec-check/objects.ml[12,142+18]..[12,142+18]) ghost
                  Ppat_any
                []
    ]
  structure_item (testsuite/tests/letrec-check/objects.ml[13,165+0]..[13,165+19])
    Pstr_value Rec
    [
      <def>
        pattern (testsuite/tests/letrec-check/objects.ml[13,165+8]..[13,165+9])
          Ppat_var "x" (testsuite/tests/letrec-check/objects.ml[13,165+8]..[13,165+9])
        expression (testsuite/tests/letrec-check/objects.ml[13,165+12]..[13,165+19])
          Pexp_apply
          expression (testsuite/tests/letrec-check/objects.ml[13,165+12]..[13,165+17])
            Pexp_new "c" (testsuite/tests/letrec-check/objects.ml[13,165+16]..[13,165+17])
          [
            <arg>
            Nolabel
              expression (testsuite/tests/letrec-check/objects.ml[13,165+18]..[13,165+19])
                Pexp_ident "x" (testsuite/tests/letrec-check/objects.ml[13,165+18]..[13,165+19])
          ]
    ]
  structure_item (testsuite/tests/letrec-check/objects.ml[14,187+0]..[20,381+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/letrec-check/objects.ml[14,187+9]..[20,381+2])
        Pstr_eval
        expression (testsuite/tests/letrec-check/objects.ml[14,187+9]..[20,381+2])
          Pexp_constant PConst_string ("\nclass c : 'a -> object  end\nLine 2, characters 12-19:\n2 | let rec x = new c x;;\n                ^^^^^^^\nError: This kind of expression is not allowed as right-hand side of `let rec'\n",(testsuite/tests/letrec-check/objects.ml[14,187+11]..[20,381+0]),Some "")
    ]
  structure_item (testsuite/tests/letrec-check/objects.ml[22,388+0]..[22,388+48])
    Pstr_value Rec
    [
      <def>
        pattern (testsuite/tests/letrec-check/objects.ml[22,388+8]..[22,388+9])
          Ppat_var "x" (testsuite/tests/letrec-check/objects.ml[22,388+8]..[22,388+9])
        expression (testsuite/tests/letrec-check/objects.ml[22,388+12]..[22,388+15])
          Pexp_send "m"
          expression (testsuite/tests/letrec-check/objects.ml[22,388+12]..[22,388+13])
            Pexp_ident "y" (testsuite/tests/letrec-check/objects.ml[22,388+12]..[22,388+13])
      <def>
        pattern (testsuite/tests/letrec-check/objects.ml[22,388+20]..[22,388+21])
          Ppat_var "y" (testsuite/tests/letrec-check/objects.ml[22,388+20]..[22,388+21])
        expression (testsuite/tests/letrec-check/objects.ml[22,388+24]..[22,388+48])
          Pexp_object
          class_structure
            pattern (testsuite/tests/letrec-check/objects.ml[22,388+30]..[22,388+30]) ghost
              Ppat_any
            [
              class_field (testsuite/tests/letrec-check/objects.ml[22,388+31]..[22,388+44])
                Pcf_method Public
                  "m" (testsuite/tests/letrec-check/objects.ml[22,388+38]..[22,388+39])
                  Concrete Fresh
                  expression (testsuite/tests/letrec-check/objects.ml[22,388+42]..[22,388+44]) ghost
                    Pexp_poly
                    expression (testsuite/tests/letrec-check/objects.ml[22,388+42]..[22,388+44])
                      Pexp_construct "()" (testsuite/tests/letrec-check/objects.ml[22,388+42]..[22,388+44])
                      None
                    None
            ]
    ]
  structure_item (testsuite/tests/letrec-check/objects.ml[23,439+0]..[28,630+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/letrec-check/objects.ml[23,439+9]..[28,630+2])
        Pstr_eval
        expression (testsuite/tests/letrec-check/objects.ml[23,439+9]..[28,630+2])
          Pexp_constant PConst_string ("\nLine 1, characters 12-15:\n1 | let rec x = y#m and y = object method m = () end;;\n                ^^^\nError: This kind of expression is not allowed as right-hand side of `let rec'\n",(testsuite/tests/letrec-check/objects.ml[23,439+11]..[28,630+0]),Some "")
    ]
  structure_item (testsuite/tests/letrec-check/objects.ml[30,637+0]..[30,637+44])
    Pstr_value Rec
    [
      <def>
        pattern (testsuite/tests/letrec-check/objects.ml[30,637+8]..[30,637+9])
          Ppat_var "x" (testsuite/tests/letrec-check/objects.ml[30,637+8]..[30,637+9])
        expression (testsuite/tests/letrec-check/objects.ml[30,637+12]..[30,637+44])
          Pexp_apply
          expression (testsuite/tests/letrec-check/objects.ml[30,637+12]..[30,637+42])
            Pexp_send "m"
            expression (testsuite/tests/letrec-check/objects.ml[30,637+12]..[30,637+40])
              Pexp_object
              class_structure
                pattern (testsuite/tests/letrec-check/objects.ml[30,637+19]..[30,637+19]) ghost
                  Ppat_any
                [
                  class_field (testsuite/tests/letrec-check/objects.ml[30,637+20]..[30,637+35])
                    Pcf_method Public
                      "m" (testsuite/tests/letrec-check/objects.ml[30,637+27]..[30,637+28])
                      Concrete Fresh
                      expression (testsuite/tests/letrec-check/objects.ml[30,637+29]..[30,637+35]) ghost
                        Pexp_poly
                        expression (testsuite/tests/letrec-check/objects.ml[30,637+29]..[30,637+35]) ghost
                          Pexp_fun
                          Nolabel
                          None
                          pattern (testsuite/tests/letrec-check/objects.ml[30,637+29]..[30,637+30])
                            Ppat_any
                          expression (testsuite/tests/letrec-check/objects.ml[30,637+33]..[30,637+35])
                            Pexp_construct "()" (testsuite/tests/letrec-check/objects.ml[30,637+33]..[30,637+35])
                            None
                        None
                ]
          [
            <arg>
            Nolabel
              expression (testsuite/tests/letrec-check/objects.ml[30,637+43]..[30,637+44])
                Pexp_ident "x" (testsuite/tests/letrec-check/objects.ml[30,637+43]..[30,637+44])
          ]
    ]
  structure_item (testsuite/tests/letrec-check/objects.ml[31,684+0]..[36,900+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/letrec-check/objects.ml[31,684+9]..[36,900+2])
        Pstr_eval
        expression (testsuite/tests/letrec-check/objects.ml[31,684+9]..[36,900+2])
          Pexp_constant PConst_string ("\nLine 1, characters 12-44:\n1 | let rec x = (object method m _ = () end)#m x;;\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This kind of expression is not allowed as right-hand side of `let rec'\n",(testsuite/tests/letrec-check/objects.ml[31,684+11]..[36,900+0]),Some "")
    ]
  structure_item (testsuite/tests/letrec-check/objects.ml[38,907+0]..[38,907+68])
    Pstr_value Rec
    [
      <def>
        pattern (testsuite/tests/letrec-check/objects.ml[38,907+8]..[38,907+9])
          Ppat_var "x" (testsuite/tests/letrec-check/objects.ml[38,907+8]..[38,907+9])
        expression (testsuite/tests/letrec-check/objects.ml[38,907+12]..[38,907+58])
          Pexp_object
          class_structure
            pattern (testsuite/tests/letrec-check/objects.ml[38,907+18]..[38,907+18]) ghost
              Ppat_any
            [
              class_field (testsuite/tests/letrec-check/objects.ml[38,907+19]..[38,907+36])
                Pcf_val Mutable
                  "v" (testsuite/tests/letrec-check/objects.ml[38,907+31]..[38,907+32])
                  Concrete Fresh
                  expression (testsuite/tests/letrec-check/objects.ml[38,907+35]..[38,907+36])
                    Pexp_constant PConst_int (0,None)
              class_field (testsuite/tests/letrec-check/objects.ml[38,907+37]..[38,907+54])
                Pcf_method Public
                  "m" (testsuite/tests/letrec-check/objects.ml[38,907+44]..[38,907+45])
                  Concrete Fresh
                  expression (testsuite/tests/letrec-check/objects.ml[38,907+48]..[38,907+54]) ghost
                    Pexp_poly
                    expression (testsuite/tests/letrec-check/objects.ml[38,907+48]..[38,907+54])
                      Pexp_setinstvar "v" (testsuite/tests/letrec-check/objects.ml[38,907+48]..[38,907+49])
                      expression (testsuite/tests/letrec-check/objects.ml[38,907+53]..[38,907+54])
                        Pexp_ident "y" (testsuite/tests/letrec-check/objects.ml[38,907+53]..[38,907+54])
                    None
            ]
      <def>
        pattern (testsuite/tests/letrec-check/objects.ml[38,907+63]..[38,907+64])
          Ppat_var "y" (testsuite/tests/letrec-check/objects.ml[38,907+63]..[38,907+64])
        expression (testsuite/tests/letrec-check/objects.ml[38,907+67]..[38,907+68])
          Pexp_constant PConst_int (1,None)
    ]
  structure_item (testsuite/tests/letrec-check/objects.ml[39,978+0]..[44,1232+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/letrec-check/objects.ml[39,978+9]..[44,1232+2])
        Pstr_eval
        expression (testsuite/tests/letrec-check/objects.ml[39,978+9]..[44,1232+2])
          Pexp_constant PConst_string ("\nLine 1, characters 12-58:\n1 | let rec x = object val mutable v = 0 method m = v <- y end and y = 1;;\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This kind of expression is not allowed as right-hand side of `let rec'\n",(testsuite/tests/letrec-check/objects.ml[39,978+11]..[44,1232+0]),Some "")
    ]
  structure_item (testsuite/tests/letrec-check/objects.ml[46,1239+0]..[46,1239+35])
    Pstr_value Rec
    [
      <def>
        pattern (testsuite/tests/letrec-check/objects.ml[46,1239+8]..[46,1239+9])
          Ppat_var "x" (testsuite/tests/letrec-check/objects.ml[46,1239+8]..[46,1239+9])
        expression (testsuite/tests/letrec-check/objects.ml[46,1239+12]..[46,1239+35])
          Pexp_object
          class_structure
            pattern (testsuite/tests/letrec-check/objects.ml[46,1239+18]..[46,1239+18]) ghost
              Ppat_any
            [
              class_field (testsuite/tests/letrec-check/objects.ml[46,1239+19]..[46,1239+31])
                Pcf_method Public
                  "m" (testsuite/tests/letrec-check/objects.ml[46,1239+26]..[46,1239+27])
                  Concrete Fresh
                  expression (testsuite/tests/letrec-check/objects.ml[46,1239+30]..[46,1239+31]) ghost
                    Pexp_poly
                    expression (testsuite/tests/letrec-check/objects.ml[46,1239+30]..[46,1239+31])
                      Pexp_ident "x" (testsuite/tests/letrec-check/objects.ml[46,1239+30]..[46,1239+31])
                    None
            ]
    ]
  structure_item (testsuite/tests/letrec-check/objects.ml[47,1277+0]..[52,1475+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/letrec-check/objects.ml[47,1277+9]..[52,1475+2])
        Pstr_eval
        expression (testsuite/tests/letrec-check/objects.ml[47,1277+9]..[52,1475+2])
          Pexp_constant PConst_string ("\nLine 1, characters 12-35:\n1 | let rec x = object method m = x end;;\n                ^^^^^^^^^^^^^^^^^^^^^^^\nError: This kind of expression is not allowed as right-hand side of `let rec'\n",(testsuite/tests/letrec-check/objects.ml[47,1277+11]..[52,1475+0]),Some "")
    ]
  structure_item (testsuite/tests/letrec-check/objects.ml[54,1482+0]..[54,1482+42])
    Pstr_value Rec
    [
      <def>
        pattern (testsuite/tests/letrec-check/objects.ml[54,1482+8]..[54,1482+9])
          Ppat_var "x" (testsuite/tests/letrec-check/objects.ml[54,1482+8]..[54,1482+9])
        expression (testsuite/tests/letrec-check/objects.ml[54,1482+12]..[54,1482+42])
          Pexp_object
          class_structure
            pattern (testsuite/tests/letrec-check/objects.ml[54,1482+18]..[54,1482+18]) ghost
              Ppat_any
            [
              class_field (testsuite/tests/letrec-check/objects.ml[54,1482+19]..[54,1482+38])
                Pcf_method Public
                  "m" (testsuite/tests/letrec-check/objects.ml[54,1482+26]..[54,1482+27])
                  Concrete Fresh
                  expression (testsuite/tests/letrec-check/objects.ml[54,1482+30]..[54,1482+38]) ghost
                    Pexp_poly
                    expression (testsuite/tests/letrec-check/objects.ml[54,1482+30]..[54,1482+38])
                      Pexp_apply
                      expression (testsuite/tests/letrec-check/objects.ml[54,1482+30]..[54,1482+36])
                        Pexp_ident "ignore" (testsuite/tests/letrec-check/objects.ml[54,1482+30]..[54,1482+36])
                      [
                        <arg>
                        Nolabel
                          expression (testsuite/tests/letrec-check/objects.ml[54,1482+37]..[54,1482+38])
                            Pexp_ident "x" (testsuite/tests/letrec-check/objects.ml[54,1482+37]..[54,1482+38])
                      ]
                    None
            ]
    ]
  structure_item (testsuite/tests/letrec-check/objects.ml[55,1527+0]..[60,1739+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/letrec-check/objects.ml[55,1527+9]..[60,1739+2])
        Pstr_eval
        expression (testsuite/tests/letrec-check/objects.ml[55,1527+9]..[60,1739+2])
          Pexp_constant PConst_string ("\nLine 1, characters 12-42:\n1 | let rec x = object method m = ignore x end;;\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nError: This kind of expression is not allowed as right-hand side of `let rec'\n",(testsuite/tests/letrec-check/objects.ml[55,1527+11]..[60,1739+0]),Some "")
    ]
]

