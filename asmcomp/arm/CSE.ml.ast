[
  structure_item (asmcomp/arm/CSE.ml[18,1098+0]..[18,1098+9])
    Pstr_open Fresh
    module_expr (asmcomp/arm/CSE.ml[18,1098+5]..[18,1098+9])
      Pmod_ident "Arch" (asmcomp/arm/CSE.ml[18,1098+5]..[18,1098+9])
  structure_item (asmcomp/arm/CSE.ml[19,1108+0]..[19,1108+9])
    Pstr_open Fresh
    module_expr (asmcomp/arm/CSE.ml[19,1108+5]..[19,1108+9])
      Pmod_ident "Mach" (asmcomp/arm/CSE.ml[19,1108+5]..[19,1108+9])
  structure_item (asmcomp/arm/CSE.ml[20,1118+0]..[20,1118+11])
    Pstr_open Fresh
    module_expr (asmcomp/arm/CSE.ml[20,1118+5]..[20,1118+11])
      Pmod_ident "CSEgen" (asmcomp/arm/CSE.ml[20,1118+5]..[20,1118+11])
  structure_item (asmcomp/arm/CSE.ml[22,1131+0]..[37,1450+3])
    Pstr_class
    [
      class_declaration (asmcomp/arm/CSE.ml[22,1131+0]..[37,1450+3])
        pci_virt = Concrete
        pci_params =
          []
        pci_name = "cse" (asmcomp/arm/CSE.ml[22,1131+6]..[22,1131+9])
        pci_expr =
          class_expr (asmcomp/arm/CSE.ml[22,1131+12]..[37,1450+3])
            Pcl_structure
            class_structure
              pattern (asmcomp/arm/CSE.ml[22,1131+18]..[22,1131+18]) ghost
                Ppat_any
              [
                class_field (asmcomp/arm/CSE.ml[24,1151+0]..[24,1151+28])
                  Pcf_inherit Fresh
                    class_expr (asmcomp/arm/CSE.ml[24,1151+8]..[24,1151+19])
                      Pcl_constr "cse_generic" (asmcomp/arm/CSE.ml[24,1151+8]..[24,1151+19])
                      []
                    Some
                      "super" (asmcomp/arm/CSE.ml[24,1151+23]..[24,1151+28])
                class_field (asmcomp/arm/CSE.ml[26,1181+0]..[30,1307+36])
                  Pcf_method Public
                    "class_of_operation" (asmcomp/arm/CSE.ml[26,1181+8]..[26,1181+26])
                    Concrete Override
                    expression (asmcomp/arm/CSE.ml[26,1181+27]..[30,1307+36]) ghost
                      Pexp_poly
                      expression (asmcomp/arm/CSE.ml[26,1181+27]..[30,1307+36]) ghost
                        Pexp_fun
                        Nolabel
                        None
                        pattern (asmcomp/arm/CSE.ml[26,1181+27]..[26,1181+29])
                          Ppat_var "op" (asmcomp/arm/CSE.ml[26,1181+27]..[26,1181+29])
                        expression (asmcomp/arm/CSE.ml[27,1213+2]..[30,1307+36])
                          Pexp_match
                          expression (asmcomp/arm/CSE.ml[27,1213+8]..[27,1213+10])
                            Pexp_ident "op" (asmcomp/arm/CSE.ml[27,1213+8]..[27,1213+10])
                          [
                            <case>
                              pattern (asmcomp/arm/CSE.ml[28,1229+4]..[28,1229+33])
                                Ppat_construct "Ispecific" (asmcomp/arm/CSE.ml[28,1229+4]..[28,1229+13])
                                Some
                                  []
                                  pattern (asmcomp/arm/CSE.ml[28,1229+13]..[28,1229+33])
                                    Ppat_construct "Ishiftcheckbound" (asmcomp/arm/CSE.ml[28,1229+14]..[28,1229+30])
                                    Some
                                      []
                                      pattern (asmcomp/arm/CSE.ml[28,1229+31]..[28,1229+32])
                                        Ppat_any
                              expression (asmcomp/arm/CSE.ml[28,1229+37]..[28,1229+50])
                                Pexp_construct "Op_checkbound" (asmcomp/arm/CSE.ml[28,1229+37]..[28,1229+50])
                                None
                            <case>
                              pattern (asmcomp/arm/CSE.ml[29,1280+4]..[29,1280+15])
                                Ppat_construct "Ispecific" (asmcomp/arm/CSE.ml[29,1280+4]..[29,1280+13])
                                Some
                                  []
                                  pattern (asmcomp/arm/CSE.ml[29,1280+14]..[29,1280+15])
                                    Ppat_any
                              expression (asmcomp/arm/CSE.ml[29,1280+19]..[29,1280+26])
                                Pexp_construct "Op_pure" (asmcomp/arm/CSE.ml[29,1280+19]..[29,1280+26])
                                None
                            <case>
                              pattern (asmcomp/arm/CSE.ml[30,1307+4]..[30,1307+5])
                                Ppat_any
                              expression (asmcomp/arm/CSE.ml[30,1307+9]..[30,1307+36])
                                Pexp_apply
                                expression (asmcomp/arm/CSE.ml[30,1307+9]..[30,1307+33])
                                  Pexp_send "class_of_operation"
                                  expression (asmcomp/arm/CSE.ml[30,1307+9]..[30,1307+14])
                                    Pexp_ident "super" (asmcomp/arm/CSE.ml[30,1307+9]..[30,1307+14])
                                [
                                  <arg>
                                  Nolabel
                                    expression (asmcomp/arm/CSE.ml[30,1307+34]..[30,1307+36])
                                      Pexp_ident "op" (asmcomp/arm/CSE.ml[30,1307+34]..[30,1307+36])
                                ]
                          ]
                      None
                class_field (asmcomp/arm/CSE.ml[32,1345+0]..[35,1434+14])
                  Pcf_method Public
                    "is_cheap_operation" (asmcomp/arm/CSE.ml[32,1345+8]..[32,1345+26])
                    Concrete Override
                    expression (asmcomp/arm/CSE.ml[32,1345+27]..[35,1434+14]) ghost
                      Pexp_poly
                      expression (asmcomp/arm/CSE.ml[32,1345+27]..[35,1434+14]) ghost
                        Pexp_fun
                        Nolabel
                        None
                        pattern (asmcomp/arm/CSE.ml[32,1345+27]..[32,1345+29])
                          Ppat_var "op" (asmcomp/arm/CSE.ml[32,1345+27]..[32,1345+29])
                        expression (asmcomp/arm/CSE.ml[33,1377+2]..[35,1434+14])
                          Pexp_match
                          expression (asmcomp/arm/CSE.ml[33,1377+8]..[33,1377+10])
                            Pexp_ident "op" (asmcomp/arm/CSE.ml[33,1377+8]..[33,1377+10])
                          [
                            <case>
                              pattern (asmcomp/arm/CSE.ml[34,1393+4]..[34,1393+16])
                                Ppat_construct "Iconst_int" (asmcomp/arm/CSE.ml[34,1393+4]..[34,1393+14])
                                Some
                                  []
                                  pattern (asmcomp/arm/CSE.ml[34,1393+15]..[34,1393+16])
                                    Ppat_var "n" (asmcomp/arm/CSE.ml[34,1393+15]..[34,1393+16])
                              expression (asmcomp/arm/CSE.ml[34,1393+20]..[34,1393+40])
                                Pexp_apply
                                expression (asmcomp/arm/CSE.ml[34,1393+30]..[34,1393+32])
                                  Pexp_ident "&&" (asmcomp/arm/CSE.ml[34,1393+30]..[34,1393+32])
                                [
                                  <arg>
                                  Nolabel
                                    expression (asmcomp/arm/CSE.ml[34,1393+20]..[34,1393+29])
                                      Pexp_apply
                                      expression (asmcomp/arm/CSE.ml[34,1393+22]..[34,1393+24])
                                        Pexp_ident "<=" (asmcomp/arm/CSE.ml[34,1393+22]..[34,1393+24])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (asmcomp/arm/CSE.ml[34,1393+20]..[34,1393+21])
                                            Pexp_ident "n" (asmcomp/arm/CSE.ml[34,1393+20]..[34,1393+21])
                                        <arg>
                                        Nolabel
                                          expression (asmcomp/arm/CSE.ml[34,1393+25]..[34,1393+29])
                                            Pexp_constant PConst_int (255,Some n)
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (asmcomp/arm/CSE.ml[34,1393+33]..[34,1393+40])
                                      Pexp_apply
                                      expression (asmcomp/arm/CSE.ml[34,1393+35]..[34,1393+37])
                                        Pexp_ident ">=" (asmcomp/arm/CSE.ml[34,1393+35]..[34,1393+37])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (asmcomp/arm/CSE.ml[34,1393+33]..[34,1393+34])
                                            Pexp_ident "n" (asmcomp/arm/CSE.ml[34,1393+33]..[34,1393+34])
                                        <arg>
                                        Nolabel
                                          expression (asmcomp/arm/CSE.ml[34,1393+38]..[34,1393+40])
                                            Pexp_constant PConst_int (0,Some n)
                                      ]
                                ]
                            <case>
                              pattern (asmcomp/arm/CSE.ml[35,1434+4]..[35,1434+5])
                                Ppat_any
                              expression (asmcomp/arm/CSE.ml[35,1434+9]..[35,1434+14])
                                Pexp_construct "false" (asmcomp/arm/CSE.ml[35,1434+9]..[35,1434+14])
                                None
                          ]
                      None
              ]
    ]
  structure_item (asmcomp/arm/CSE.ml[39,1455+0]..[40,1471+21])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/arm/CSE.ml[39,1455+4]..[39,1455+11])
          Ppat_var "fundecl" (asmcomp/arm/CSE.ml[39,1455+4]..[39,1455+11])
        expression (asmcomp/arm/CSE.ml[39,1455+12]..[40,1471+21]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (asmcomp/arm/CSE.ml[39,1455+12]..[39,1455+13])
            Ppat_var "f" (asmcomp/arm/CSE.ml[39,1455+12]..[39,1455+13])
          expression (asmcomp/arm/CSE.ml[40,1471+2]..[40,1471+21])
            Pexp_apply
            expression (asmcomp/arm/CSE.ml[40,1471+2]..[40,1471+19])
              Pexp_send "fundecl"
              expression (asmcomp/arm/CSE.ml[40,1471+2]..[40,1471+11])
                Pexp_new "cse" (asmcomp/arm/CSE.ml[40,1471+7]..[40,1471+10])
            [
              <arg>
              Nolabel
                expression (asmcomp/arm/CSE.ml[40,1471+20]..[40,1471+21])
                  Pexp_ident "f" (asmcomp/arm/CSE.ml[40,1471+20]..[40,1471+21])
            ]
    ]
]

