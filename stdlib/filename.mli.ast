[
  signature_item (stdlib/filename.mli[16,1079+0]..[16,1079+32])
    Psig_attribute "ocaml.text"
    [
      structure_item (stdlib/filename.mli[16,1079+0]..[16,1079+32])
        Pstr_eval
        expression (stdlib/filename.mli[16,1079+0]..[16,1079+32])
          Pexp_constant PConst_string(" Operations on file names. ",(stdlib/filename.mli[16,1079+0]..[16,1079+32]),None)
    ]
  signature_item (stdlib/filename.mli[18,1113+0]..[18,1113+29])
    Psig_value
    value_description "current_dir_name" (stdlib/filename.mli[18,1113+4]..[18,1113+20]) (stdlib/filename.mli[18,1113+0]..[18,1113+29])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/filename.mli[19,1143+0]..[19,1143+74])
            Pstr_eval
            expression (stdlib/filename.mli[19,1143+0]..[19,1143+74])
              Pexp_constant PConst_string(" The conventional name for the current directory (e.g. [.] in Unix). ",(stdlib/filename.mli[19,1143+0]..[19,1143+74]),None)
        ]
      core_type (stdlib/filename.mli[18,1113+23]..[18,1113+29])
        Ptyp_constr "string" (stdlib/filename.mli[18,1113+23]..[18,1113+29])
        []
      []
  signature_item (stdlib/filename.mli[21,1219+0]..[21,1219+28])
    Psig_value
    value_description "parent_dir_name" (stdlib/filename.mli[21,1219+4]..[21,1219+19]) (stdlib/filename.mli[21,1219+0]..[21,1219+28])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/filename.mli[22,1248+0]..[23,1314+26])
            Pstr_eval
            expression (stdlib/filename.mli[22,1248+0]..[23,1314+26])
              Pexp_constant PConst_string(" The conventional name for the parent of the current directory\n   (e.g. [..] in Unix). ",(stdlib/filename.mli[22,1248+0]..[23,1314+26]),None)
        ]
      core_type (stdlib/filename.mli[21,1219+22]..[21,1219+28])
        Ptyp_constr "string" (stdlib/filename.mli[21,1219+22]..[21,1219+28])
        []
      []
  signature_item (stdlib/filename.mli[25,1342+0]..[25,1342+20])
    Psig_value
    value_description "dir_sep" (stdlib/filename.mli[25,1342+4]..[25,1342+11]) (stdlib/filename.mli[25,1342+0]..[25,1342+20])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/filename.mli[26,1363+0]..[26,1363+64])
            Pstr_eval
            expression (stdlib/filename.mli[26,1363+0]..[26,1363+64])
              Pexp_constant PConst_string(" The directory separator (e.g. [/] in Unix). @since 3.11.2 ",(stdlib/filename.mli[26,1363+0]..[26,1363+64]),None)
        ]
      core_type (stdlib/filename.mli[25,1342+14]..[25,1342+20])
        Ptyp_constr "string" (stdlib/filename.mli[25,1342+14]..[25,1342+20])
        []
      []
  signature_item (stdlib/filename.mli[28,1429+0]..[28,1429+39])
    Psig_value
    value_description "concat" (stdlib/filename.mli[28,1429+4]..[28,1429+10]) (stdlib/filename.mli[28,1429+0]..[28,1429+39])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/filename.mli[29,1469+0]..[30,1532+32])
            Pstr_eval
            expression (stdlib/filename.mli[29,1469+0]..[30,1532+32])
              Pexp_constant PConst_string(" [concat dir file] returns a file name that designates file\n   [file] in directory [dir]. ",(stdlib/filename.mli[29,1469+0]..[30,1532+32]),None)
        ]
      core_type (stdlib/filename.mli[28,1429+13]..[28,1429+39])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/filename.mli[28,1429+13]..[28,1429+19])
          Ptyp_constr "string" (stdlib/filename.mli[28,1429+13]..[28,1429+19])
          []
        core_type (stdlib/filename.mli[28,1429+23]..[28,1429+39])
          Ptyp_arrow
          Nolabel
          core_type (stdlib/filename.mli[28,1429+23]..[28,1429+29])
            Ptyp_constr "string" (stdlib/filename.mli[28,1429+23]..[28,1429+29])
            []
          core_type (stdlib/filename.mli[28,1429+33]..[28,1429+39])
            Ptyp_constr "string" (stdlib/filename.mli[28,1429+33]..[28,1429+39])
            []
      []
  signature_item (stdlib/filename.mli[32,1566+0]..[32,1566+32])
    Psig_value
    value_description "is_relative" (stdlib/filename.mli[32,1566+4]..[32,1566+15]) (stdlib/filename.mli[32,1566+0]..[32,1566+32])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/filename.mli[33,1599+0]..[35,1723+16])
            Pstr_eval
            expression (stdlib/filename.mli[33,1599+0]..[35,1723+16])
              Pexp_constant PConst_string(" Return [true] if the file name is relative to the current\n   directory, [false] if it is absolute (i.e. in Unix, starts\n   with [/]). ",(stdlib/filename.mli[33,1599+0]..[35,1723+16]),None)
        ]
      core_type (stdlib/filename.mli[32,1566+18]..[32,1566+32])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/filename.mli[32,1566+18]..[32,1566+24])
          Ptyp_constr "string" (stdlib/filename.mli[32,1566+18]..[32,1566+24])
          []
        core_type (stdlib/filename.mli[32,1566+28]..[32,1566+32])
          Ptyp_constr "bool" (stdlib/filename.mli[32,1566+28]..[32,1566+32])
          []
      []
  signature_item (stdlib/filename.mli[37,1741+0]..[37,1741+32])
    Psig_value
    value_description "is_implicit" (stdlib/filename.mli[37,1741+4]..[37,1741+15]) (stdlib/filename.mli[37,1741+0]..[37,1741+32])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/filename.mli[38,1774+0]..[41,1971+53])
            Pstr_eval
            expression (stdlib/filename.mli[38,1774+0]..[41,1971+53])
              Pexp_constant PConst_string(" Return [true] if the file name is relative and does not start\n   with an explicit reference to the current directory ([./] or\n   [../] in Unix), [false] if it starts with an explicit reference\n   to the root directory or the current directory. ",(stdlib/filename.mli[38,1774+0]..[41,1971+53]),None)
        ]
      core_type (stdlib/filename.mli[37,1741+18]..[37,1741+32])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/filename.mli[37,1741+18]..[37,1741+24])
          Ptyp_constr "string" (stdlib/filename.mli[37,1741+18]..[37,1741+24])
          []
        core_type (stdlib/filename.mli[37,1741+28]..[37,1741+32])
          Ptyp_constr "bool" (stdlib/filename.mli[37,1741+28]..[37,1741+32])
          []
      []
  signature_item (stdlib/filename.mli[43,2026+0]..[43,2026+43])
    Psig_value
    value_description "check_suffix" (stdlib/filename.mli[43,2026+4]..[43,2026+16]) (stdlib/filename.mli[43,2026+0]..[43,2026+43])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/filename.mli[44,2070+0]..[50,2370+42])
            Pstr_eval
            expression (stdlib/filename.mli[44,2070+0]..[50,2370+42])
              Pexp_constant PConst_string(" [check_suffix name suff] returns [true] if the filename [name]\n    ends with the suffix [suff].\n\n    Under Windows ports (including Cygwin), comparison is\n    case-insensitive, relying on [String.lowercase_ascii].  Note that\n    this does not match exactly the interpretation of case-insensitive\n    filename equivalence from Windows.  ",(stdlib/filename.mli[44,2070+0]..[50,2370+42]),None)
        ]
      core_type (stdlib/filename.mli[43,2026+19]..[43,2026+43])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/filename.mli[43,2026+19]..[43,2026+25])
          Ptyp_constr "string" (stdlib/filename.mli[43,2026+19]..[43,2026+25])
          []
        core_type (stdlib/filename.mli[43,2026+29]..[43,2026+43])
          Ptyp_arrow
          Nolabel
          core_type (stdlib/filename.mli[43,2026+29]..[43,2026+35])
            Ptyp_constr "string" (stdlib/filename.mli[43,2026+29]..[43,2026+35])
            []
          core_type (stdlib/filename.mli[43,2026+39]..[43,2026+43])
            Ptyp_constr "bool" (stdlib/filename.mli[43,2026+39]..[43,2026+43])
            []
      []
  signature_item (stdlib/filename.mli[52,2414+0]..[52,2414+44])
    Psig_value
    value_description "chop_suffix" (stdlib/filename.mli[52,2414+4]..[52,2414+15]) (stdlib/filename.mli[52,2414+0]..[52,2414+44])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/filename.mli[53,2459+0]..[56,2618+2])
            Pstr_eval
            expression (stdlib/filename.mli[53,2459+0]..[56,2618+2])
              Pexp_constant PConst_string(" [chop_suffix name suff] removes the suffix [suff] from\n    the filename [name].\n    @raise Invalid_argument if [name] does not end with the suffix [suff].\n",(stdlib/filename.mli[53,2459+0]..[56,2618+2]),None)
        ]
      core_type (stdlib/filename.mli[52,2414+18]..[52,2414+44])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/filename.mli[52,2414+18]..[52,2414+24])
          Ptyp_constr "string" (stdlib/filename.mli[52,2414+18]..[52,2414+24])
          []
        core_type (stdlib/filename.mli[52,2414+28]..[52,2414+44])
          Ptyp_arrow
          Nolabel
          core_type (stdlib/filename.mli[52,2414+28]..[52,2414+34])
            Ptyp_constr "string" (stdlib/filename.mli[52,2414+28]..[52,2414+34])
            []
          core_type (stdlib/filename.mli[52,2414+38]..[52,2414+44])
            Ptyp_constr "string" (stdlib/filename.mli[52,2414+38]..[52,2414+44])
            []
      []
  signature_item (stdlib/filename.mli[58,2622+0]..[58,2622+61])
    Psig_value
    value_description "chop_suffix_opt" (stdlib/filename.mli[58,2622+4]..[58,2622+19]) (stdlib/filename.mli[58,2622+0]..[58,2622+61])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/filename.mli[59,2684+0]..[69,3103+2])
            Pstr_eval
            expression (stdlib/filename.mli[59,2684+0]..[69,3103+2])
              Pexp_constant PConst_string(" [chop_suffix_opt ~suffix filename] removes the suffix from\n    the [filename] if possible, or returns [None] if the\n    filename does not end with the suffix.\n\n    Under Windows ports (including Cygwin), comparison is\n    case-insensitive, relying on [String.lowercase_ascii].  Note that\n    this does not match exactly the interpretation of case-insensitive\n    filename equivalence from Windows.\n\n    @since 4.08\n",(stdlib/filename.mli[59,2684+0]..[69,3103+2]),None)
        ]
      core_type (stdlib/filename.mli[58,2622+21]..[58,2622+61])
        Ptyp_arrow
        Labelled "suffix"
        core_type (stdlib/filename.mli[58,2622+28]..[58,2622+34])
          Ptyp_constr "string" (stdlib/filename.mli[58,2622+28]..[58,2622+34])
          []
        core_type (stdlib/filename.mli[58,2622+38]..[58,2622+61])
          Ptyp_arrow
          Nolabel
          core_type (stdlib/filename.mli[58,2622+38]..[58,2622+44])
            Ptyp_constr "string" (stdlib/filename.mli[58,2622+38]..[58,2622+44])
            []
          core_type (stdlib/filename.mli[58,2622+48]..[58,2622+61])
            Ptyp_constr "option" (stdlib/filename.mli[58,2622+55]..[58,2622+61])
            [
              core_type (stdlib/filename.mli[58,2622+48]..[58,2622+54])
                Ptyp_constr "string" (stdlib/filename.mli[58,2622+48]..[58,2622+54])
                []
            ]
      []
  signature_item (stdlib/filename.mli[72,3108+0]..[72,3108+32])
    Psig_value
    value_description "extension" (stdlib/filename.mli[72,3108+4]..[72,3108+13]) (stdlib/filename.mli[72,3108+0]..[72,3108+32])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/filename.mli[73,3141+0]..[85,3517+2])
            Pstr_eval
            expression (stdlib/filename.mli[73,3141+0]..[85,3517+2])
              Pexp_constant PConst_string(" [extension name] is the shortest suffix [ext] of [name0] where:\n\n    - [name0] is the longest suffix of [name] that does not\n      contain a directory separator;\n    - [ext] starts with a period;\n    - [ext] is preceded by at least one non-period character\n      in [name0].\n\n    If such a suffix does not exist, [extension name] is the empty\n    string.\n\n    @since 4.04\n",(stdlib/filename.mli[73,3141+0]..[85,3517+2]),None)
        ]
      core_type (stdlib/filename.mli[72,3108+16]..[72,3108+32])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/filename.mli[72,3108+16]..[72,3108+22])
          Ptyp_constr "string" (stdlib/filename.mli[72,3108+16]..[72,3108+22])
          []
        core_type (stdlib/filename.mli[72,3108+26]..[72,3108+32])
          Ptyp_constr "string" (stdlib/filename.mli[72,3108+26]..[72,3108+32])
          []
      []
  signature_item (stdlib/filename.mli[87,3521+0]..[87,3521+39])
    Psig_value
    value_description "remove_extension" (stdlib/filename.mli[87,3521+4]..[87,3521+20]) (stdlib/filename.mli[87,3521+0]..[87,3521+39])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/filename.mli[88,3561+0]..[97,3848+2])
            Pstr_eval
            expression (stdlib/filename.mli[88,3561+0]..[97,3848+2])
              Pexp_constant PConst_string(" Return the given file name without its extension, as defined\n    in {!Filename.extension}. If the extension is empty, the function\n    returns the given file name.\n\n    The following invariant holds for any file name [s]:\n\n    [remove_extension s ^ extension s = s]\n\n    @since 4.04\n",(stdlib/filename.mli[88,3561+0]..[97,3848+2]),None)
        ]
      core_type (stdlib/filename.mli[87,3521+23]..[87,3521+39])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/filename.mli[87,3521+23]..[87,3521+29])
          Ptyp_constr "string" (stdlib/filename.mli[87,3521+23]..[87,3521+29])
          []
        core_type (stdlib/filename.mli[87,3521+33]..[87,3521+39])
          Ptyp_constr "string" (stdlib/filename.mli[87,3521+33]..[87,3521+39])
          []
      []
  signature_item (stdlib/filename.mli[99,3852+0]..[99,3852+37])
    Psig_value
    value_description "chop_extension" (stdlib/filename.mli[99,3852+4]..[99,3852+18]) (stdlib/filename.mli[99,3852+0]..[99,3852+37])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/filename.mli[100,3890+0]..[101,3961+48])
            Pstr_eval
            expression (stdlib/filename.mli[100,3890+0]..[101,3961+48])
              Pexp_constant PConst_string(" Same as {!Filename.remove_extension}, but raise [Invalid_argument]\n    if the given name has an empty extension. ",(stdlib/filename.mli[100,3890+0]..[101,3961+48]),None)
        ]
      core_type (stdlib/filename.mli[99,3852+21]..[99,3852+37])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/filename.mli[99,3852+21]..[99,3852+27])
          Ptyp_constr "string" (stdlib/filename.mli[99,3852+21]..[99,3852+27])
          []
        core_type (stdlib/filename.mli[99,3852+31]..[99,3852+37])
          Ptyp_constr "string" (stdlib/filename.mli[99,3852+31]..[99,3852+37])
          []
      []
  signature_item (stdlib/filename.mli[104,4012+0]..[104,4012+31])
    Psig_value
    value_description "basename" (stdlib/filename.mli[104,4012+4]..[104,4012+12]) (stdlib/filename.mli[104,4012+0]..[104,4012+31])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/filename.mli[105,4044+0]..[113,4533+25])
            Pstr_eval
            expression (stdlib/filename.mli[105,4044+0]..[113,4533+25])
              Pexp_constant PConst_string(" Split a file name into directory name / base file name.\n   If [name] is a valid file name, then [concat (dirname name) (basename name)]\n   returns a file name which is equivalent to [name]. Moreover,\n   after setting the current directory to [dirname name] (with {!Sys.chdir}),\n   references to [basename name] (which is a relative file name)\n   designate the same file as [name] before the call to {!Sys.chdir}.\n\n   This function conforms to the specification of POSIX.1-2008 for the\n   [basename] utility. ",(stdlib/filename.mli[105,4044+0]..[113,4533+25]),None)
        ]
      core_type (stdlib/filename.mli[104,4012+15]..[104,4012+31])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/filename.mli[104,4012+15]..[104,4012+21])
          Ptyp_constr "string" (stdlib/filename.mli[104,4012+15]..[104,4012+21])
          []
        core_type (stdlib/filename.mli[104,4012+25]..[104,4012+31])
          Ptyp_constr "string" (stdlib/filename.mli[104,4012+25]..[104,4012+31])
          []
      []
  signature_item (stdlib/filename.mli[115,4560+0]..[115,4560+30])
    Psig_value
    value_description "dirname" (stdlib/filename.mli[115,4560+4]..[115,4560+11]) (stdlib/filename.mli[115,4560+0]..[115,4560+30])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/filename.mli[116,4591+0]..[118,4692+24])
            Pstr_eval
            expression (stdlib/filename.mli[116,4591+0]..[118,4692+24])
              Pexp_constant PConst_string(" See {!Filename.basename}.\n   This function conforms to the specification of POSIX.1-2008 for the\n   [dirname] utility. ",(stdlib/filename.mli[116,4591+0]..[118,4692+24]),None)
        ]
      core_type (stdlib/filename.mli[115,4560+14]..[115,4560+30])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/filename.mli[115,4560+14]..[115,4560+20])
          Ptyp_constr "string" (stdlib/filename.mli[115,4560+14]..[115,4560+20])
          []
        core_type (stdlib/filename.mli[115,4560+24]..[115,4560+30])
          Ptyp_constr "string" (stdlib/filename.mli[115,4560+24]..[115,4560+30])
          []
      []
  signature_item (stdlib/filename.mli[120,4718+0]..[120,4718+17])
    Psig_value
    value_description "null" (stdlib/filename.mli[120,4718+4]..[120,4718+8]) (stdlib/filename.mli[120,4718+0]..[120,4718+17])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/filename.mli[121,4736+0]..[124,4892+20])
            Pstr_eval
            expression (stdlib/filename.mli[121,4736+0]..[124,4892+20])
              Pexp_constant PConst_string(" [null] is [\"/dev/null\"] on POSIX and [\"NUL\"] on Windows. It represents a\n    file on the OS that discards all writes and returns end of file on reads.\n\n    @since 4.10.0 ",(stdlib/filename.mli[121,4736+0]..[124,4892+20]),None)
        ]
      core_type (stdlib/filename.mli[120,4718+11]..[120,4718+17])
        Ptyp_constr "string" (stdlib/filename.mli[120,4718+11]..[120,4718+17])
        []
      []
  signature_item (stdlib/filename.mli[126,4914+0]..[126,4914+63])
    Psig_value
    value_description "temp_file" (stdlib/filename.mli[126,4914+4]..[126,4914+13]) (stdlib/filename.mli[126,4914+0]..[126,4914+63])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/filename.mli[127,4978+0]..[139,5690+2])
            Pstr_eval
            expression (stdlib/filename.mli[127,4978+0]..[139,5690+2])
              Pexp_constant PConst_string(" [temp_file prefix suffix] returns the name of a\n   fresh temporary file in the temporary directory.\n   The base name of the temporary file is formed by concatenating\n   [prefix], then a suitably chosen integer number, then [suffix].\n   The optional argument [temp_dir] indicates the temporary directory\n   to use, defaulting to the current result of {!Filename.get_temp_dir_name}.\n   The temporary file is created empty, with permissions [0o600]\n   (readable and writable only by the file owner).  The file is\n   guaranteed to be different from any other file that existed when\n   [temp_file] was called.\n   @raise Sys_error if the file could not be created.\n   @before 3.11.2 no ?temp_dir optional argument\n",(stdlib/filename.mli[127,4978+0]..[139,5690+2]),None)
        ]
      core_type (stdlib/filename.mli[126,4914+16]..[126,4914+63])
        Ptyp_arrow
        Optional "temp_dir"
        core_type (stdlib/filename.mli[126,4914+27]..[126,4914+33])
          Ptyp_constr "string" (stdlib/filename.mli[126,4914+27]..[126,4914+33])
          []
        core_type (stdlib/filename.mli[126,4914+37]..[126,4914+63])
          Ptyp_arrow
          Nolabel
          core_type (stdlib/filename.mli[126,4914+37]..[126,4914+43])
            Ptyp_constr "string" (stdlib/filename.mli[126,4914+37]..[126,4914+43])
            []
          core_type (stdlib/filename.mli[126,4914+47]..[126,4914+63])
            Ptyp_arrow
            Nolabel
            core_type (stdlib/filename.mli[126,4914+47]..[126,4914+53])
              Ptyp_constr "string" (stdlib/filename.mli[126,4914+47]..[126,4914+53])
              []
            core_type (stdlib/filename.mli[126,4914+57]..[126,4914+63])
              Ptyp_constr "string" (stdlib/filename.mli[126,4914+57]..[126,4914+63])
              []
      []
  signature_item (stdlib/filename.mli[141,5694+0]..[143,5792+36])
    Psig_value
    value_description "open_temp_file" (stdlib/filename.mli[141,5694+4]..[141,5694+18]) (stdlib/filename.mli[141,5694+0]..[143,5792+36])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/filename.mli[144,5829+0]..[158,6660+2])
            Pstr_eval
            expression (stdlib/filename.mli[144,5829+0]..[158,6660+2])
              Pexp_constant PConst_string(" Same as {!Filename.temp_file}, but returns both the name of a fresh\n   temporary file, and an output channel opened (atomically) on\n   this file.  This function is more secure than [temp_file]: there\n   is no risk that the temporary file will be modified (e.g. replaced\n   by a symbolic link) before the program opens it.  The optional argument\n   [mode] is a list of additional flags to control the opening of the file.\n   It can contain one or several of [Open_append], [Open_binary],\n   and [Open_text].  The default is [[Open_text]] (open in text mode). The\n   file is created with permissions [perms] (defaults to readable and\n   writable only by the file owner, [0o600]).\n\n   @raise Sys_error if the file could not be opened.\n   @before 4.03.0 no ?perms optional argument\n   @before 3.11.2 no ?temp_dir optional argument\n",(stdlib/filename.mli[144,5829+0]..[158,6660+2]),None)
        ]
      core_type (stdlib/filename.mli[142,5715+6]..[143,5792+36])
        Ptyp_arrow
        Optional "mode"
        core_type (stdlib/filename.mli[142,5715+13]..[142,5715+27])
          Ptyp_constr "list" (stdlib/filename.mli[142,5715+23]..[142,5715+27])
          [
            core_type (stdlib/filename.mli[142,5715+13]..[142,5715+22])
              Ptyp_constr "open_flag" (stdlib/filename.mli[142,5715+13]..[142,5715+22])
              []
          ]
        core_type (stdlib/filename.mli[142,5715+31]..[143,5792+36])
          Ptyp_arrow
          Optional "perms"
          core_type (stdlib/filename.mli[142,5715+39]..[142,5715+42])
            Ptyp_constr "int" (stdlib/filename.mli[142,5715+39]..[142,5715+42])
            []
          core_type (stdlib/filename.mli[142,5715+46]..[143,5792+36])
            Ptyp_arrow
            Optional "temp_dir"
            core_type (stdlib/filename.mli[142,5715+57]..[142,5715+63])
              Ptyp_constr "string" (stdlib/filename.mli[142,5715+57]..[142,5715+63])
              []
            core_type (stdlib/filename.mli[142,5715+67]..[143,5792+36])
              Ptyp_arrow
              Nolabel
              core_type (stdlib/filename.mli[142,5715+67]..[142,5715+73])
                Ptyp_constr "string" (stdlib/filename.mli[142,5715+67]..[142,5715+73])
                []
              core_type (stdlib/filename.mli[143,5792+6]..[143,5792+36])
                Ptyp_arrow
                Nolabel
                core_type (stdlib/filename.mli[143,5792+6]..[143,5792+12])
                  Ptyp_constr "string" (stdlib/filename.mli[143,5792+6]..[143,5792+12])
                  []
                core_type (stdlib/filename.mli[143,5792+16]..[143,5792+36])
                  Ptyp_tuple
                  [
                    core_type (stdlib/filename.mli[143,5792+16]..[143,5792+22])
                      Ptyp_constr "string" (stdlib/filename.mli[143,5792+16]..[143,5792+22])
                      []
                    core_type (stdlib/filename.mli[143,5792+25]..[143,5792+36])
                      Ptyp_constr "out_channel" (stdlib/filename.mli[143,5792+25]..[143,5792+36])
                      []
                  ]
      []
  signature_item (stdlib/filename.mli[160,6664+0]..[160,6664+38])
    Psig_value
    value_description "get_temp_dir_name" (stdlib/filename.mli[160,6664+4]..[160,6664+21]) (stdlib/filename.mli[160,6664+0]..[160,6664+38])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/filename.mli[161,6703+0]..[168,7051+2])
            Pstr_eval
            expression (stdlib/filename.mli[161,6703+0]..[168,7051+2])
              Pexp_constant PConst_string(" The name of the temporary directory:\n    Under Unix, the value of the [TMPDIR] environment variable, or \"/tmp\"\n    if the variable is not set.\n    Under Windows, the value of the [TEMP] environment variable, or \".\"\n    if the variable is not set.\n    The temporary directory can be changed with {!Filename.set_temp_dir_name}.\n    @since 4.00.0\n",(stdlib/filename.mli[161,6703+0]..[168,7051+2]),None)
        ]
      core_type (stdlib/filename.mli[160,6664+24]..[160,6664+38])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/filename.mli[160,6664+24]..[160,6664+28])
          Ptyp_constr "unit" (stdlib/filename.mli[160,6664+24]..[160,6664+28])
          []
        core_type (stdlib/filename.mli[160,6664+32]..[160,6664+38])
          Ptyp_constr "string" (stdlib/filename.mli[160,6664+32]..[160,6664+38])
          []
      []
  signature_item (stdlib/filename.mli[170,7055+0]..[170,7055+38])
    Psig_value
    value_description "set_temp_dir_name" (stdlib/filename.mli[170,7055+4]..[170,7055+21]) (stdlib/filename.mli[170,7055+0]..[170,7055+38])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/filename.mli[171,7094+0]..[174,7259+2])
            Pstr_eval
            expression (stdlib/filename.mli[171,7094+0]..[174,7259+2])
              Pexp_constant PConst_string(" Change the temporary directory returned by {!Filename.get_temp_dir_name}\n    and used by {!Filename.temp_file} and {!Filename.open_temp_file}.\n    @since 4.00.0\n",(stdlib/filename.mli[171,7094+0]..[174,7259+2]),None)
        ]
      core_type (stdlib/filename.mli[170,7055+24]..[170,7055+38])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/filename.mli[170,7055+24]..[170,7055+30])
          Ptyp_constr "string" (stdlib/filename.mli[170,7055+24]..[170,7055+30])
          []
        core_type (stdlib/filename.mli[170,7055+34]..[170,7055+38])
          Ptyp_constr "unit" (stdlib/filename.mli[170,7055+34]..[170,7055+38])
          []
      []
  signature_item (stdlib/filename.mli[176,7263+0]..[177,7290+63])
    Psig_value
    value_description "temp_dir_name" (stdlib/filename.mli[176,7263+4]..[176,7263+17]) (stdlib/filename.mli[176,7263+0]..[177,7290+63])
      attribute "ocaml.deprecated"
        [
          structure_item (stdlib/filename.mli[177,7290+22]..[177,7290+62])
            Pstr_eval
            expression (stdlib/filename.mli[177,7290+22]..[177,7290+62])
              Pexp_constant PConst_string("Use Filename.get_temp_dir_name instead",(stdlib/filename.mli[177,7290+23]..[177,7290+61]),None)
        ]
      attribute "ocaml.doc"
        [
          structure_item (stdlib/filename.mli[178,7354+0]..[185,7701+2])
            Pstr_eval
            expression (stdlib/filename.mli[178,7354+0]..[185,7701+2])
              Pexp_constant PConst_string(" The name of the initial temporary directory:\n    Under Unix, the value of the [TMPDIR] environment variable, or \"/tmp\"\n    if the variable is not set.\n    Under Windows, the value of the [TEMP] environment variable, or \".\"\n    if the variable is not set.\n    @deprecated You should use {!Filename.get_temp_dir_name} instead.\n    @since 3.09.1\n",(stdlib/filename.mli[178,7354+0]..[185,7701+2]),None)
        ]
      core_type (stdlib/filename.mli[176,7263+20]..[176,7263+26])
        Ptyp_constr "string" (stdlib/filename.mli[176,7263+20]..[176,7263+26])
        []
      []
  signature_item (stdlib/filename.mli[187,7705+0]..[187,7705+28])
    Psig_value
    value_description "quote" (stdlib/filename.mli[187,7705+4]..[187,7705+9]) (stdlib/filename.mli[187,7705+0]..[187,7705+28])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/filename.mli[188,7734+0]..[193,8004+3])
            Pstr_eval
            expression (stdlib/filename.mli[188,7734+0]..[193,8004+3])
              Pexp_constant PConst_string(" Return a quoted version of a file name, suitable for use as\n    one argument in a command line, escaping all meta-characters.\n    Warning: under Windows, the output is only suitable for use\n    with programs that follow the standard Windows quoting\n    conventions.\n ",(stdlib/filename.mli[188,7734+0]..[193,8004+3]),None)
        ]
      core_type (stdlib/filename.mli[187,7705+12]..[187,7705+28])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/filename.mli[187,7705+12]..[187,7705+18])
          Ptyp_constr "string" (stdlib/filename.mli[187,7705+12]..[187,7705+18])
          []
        core_type (stdlib/filename.mli[187,7705+22]..[187,7705+28])
          Ptyp_constr "string" (stdlib/filename.mli[187,7705+22]..[187,7705+28])
          []
      []
  signature_item (stdlib/filename.mli[195,8009+0]..[197,8096+38])
    Psig_value
    value_description "quote_command" (stdlib/filename.mli[195,8009+4]..[195,8009+17]) (stdlib/filename.mli[195,8009+0]..[197,8096+38])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/filename.mli[198,8135+0]..[225,9622+2])
            Pstr_eval
            expression (stdlib/filename.mli[198,8135+0]..[225,9622+2])
              Pexp_constant PConst_string(" [quote_command cmd args] returns a quoted command line, suitable\n    for use as an argument to {!Sys.command}, {!Unix.system}, and the\n    {!Unix.open_process} functions.\n\n    The string [cmd] is the command to call.  The list [args] is\n    the list of arguments to pass to this command.  It can be empty.\n\n    The optional arguments [?stdin] and [?stdout] and [?stderr] are\n    file names used to redirect the standard input, the standard\n    output, or the standard error of the command.\n    If [~stdin:f] is given, a redirection [< f] is performed and the\n    standard input of the command reads from file [f].\n    If [~stdout:f] is given, a redirection [> f] is performed and the\n    standard output of the command is written to file [f].\n    If [~stderr:f] is given, a redirection [2> f] is performed and the\n    standard error of the command is written to file [f].\n    If both [~stdout:f] and [~stderr:f] are given, with the exact\n    same file name [f], a [2>&1] redirection is performed so that the\n    standard output and the standard error of the command are interleaved\n    and redirected to the same file [f].\n\n    Under Unix and Cygwin, the command, the arguments, and the redirections\n    if any are quoted using {!Filename.quote}, then concatenated.\n    Under Win32, additional quoting is performed as required by the\n    [cmd.exe] shell that is called by {!Sys.command}.\n    @raise Failure if the command cannot be escaped on the current platform.\n    @since 4.10.0\n",(stdlib/filename.mli[198,8135+0]..[225,9622+2]),None)
        ]
      core_type (stdlib/filename.mli[196,8029+7]..[197,8096+38])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/filename.mli[196,8029+7]..[196,8029+13])
          Ptyp_constr "string" (stdlib/filename.mli[196,8029+7]..[196,8029+13])
          []
        core_type (stdlib/filename.mli[196,8029+17]..[197,8096+38])
          Ptyp_arrow
          Optional "stdin"
          core_type (stdlib/filename.mli[196,8029+24]..[196,8029+30])
            Ptyp_constr "string" (stdlib/filename.mli[196,8029+24]..[196,8029+30])
            []
          core_type (stdlib/filename.mli[196,8029+34]..[197,8096+38])
            Ptyp_arrow
            Optional "stdout"
            core_type (stdlib/filename.mli[196,8029+42]..[196,8029+48])
              Ptyp_constr "string" (stdlib/filename.mli[196,8029+42]..[196,8029+48])
              []
            core_type (stdlib/filename.mli[196,8029+52]..[197,8096+38])
              Ptyp_arrow
              Optional "stderr"
              core_type (stdlib/filename.mli[196,8029+60]..[196,8029+66])
                Ptyp_constr "string" (stdlib/filename.mli[196,8029+60]..[196,8029+66])
                []
              core_type (stdlib/filename.mli[197,8096+17]..[197,8096+38])
                Ptyp_arrow
                Nolabel
                core_type (stdlib/filename.mli[197,8096+17]..[197,8096+28])
                  Ptyp_constr "list" (stdlib/filename.mli[197,8096+24]..[197,8096+28])
                  [
                    core_type (stdlib/filename.mli[197,8096+17]..[197,8096+23])
                      Ptyp_constr "string" (stdlib/filename.mli[197,8096+17]..[197,8096+23])
                      []
                  ]
                core_type (stdlib/filename.mli[197,8096+32]..[197,8096+38])
                  Ptyp_constr "string" (stdlib/filename.mli[197,8096+32]..[197,8096+38])
                  []
      []
]

