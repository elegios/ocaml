[
  signature_item (stdlib/seq.mli[16,1079+0]..[24,1419+2])
    Psig_attribute "ocaml.text"
    [
      structure_item (stdlib/seq.mli[16,1079+0]..[24,1419+2])
        Pstr_eval
        expression (stdlib/seq.mli[16,1079+0]..[24,1419+2])
          Pexp_constant PConst_string(" Sequences (functional iterators).\n\n    The type ['a Seq.t] is a {b delayed list}, i.e. a list where some\n    evaluation is needed to access the next element. This makes it possible\n    to build infinite sequences, to build sequences as we traverse them, and\n    to transform them in a lazy fashion rather than upfront.\n\n    @since 4.07\n",(stdlib/seq.mli[16,1079+0]..[24,1419+2]),None)
    ]
  signature_item (stdlib/seq.mli[26,1423+0]..[34,1705+21])
    Psig_type Rec
    [
      type_declaration "t" (stdlib/seq.mli[26,1423+8]..[26,1423+9]) (stdlib/seq.mli[26,1423+0]..[26,1423+27])
        attribute "ocaml.doc"
          [
            structure_item (stdlib/seq.mli[27,1451+0]..[30,1660+20])
              Pstr_eval
              expression (stdlib/seq.mli[27,1451+0]..[30,1660+20])
                Pexp_constant PConst_string(" The type of delayed lists containing elements of type ['a].\n    Note that the concrete list node ['a node] is delayed under a closure,\n    not a [lazy] block, which means it might be recomputed every time\n    we access it. ",(stdlib/seq.mli[27,1451+0]..[30,1660+20]),None)
          ]
        ptype_params =
          [
            core_type (stdlib/seq.mli[26,1423+5]..[26,1423+7])
              Ptyp_var a
          ]
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (stdlib/seq.mli[26,1423+12]..[26,1423+27])
              Ptyp_arrow
              Nolabel
              core_type (stdlib/seq.mli[26,1423+12]..[26,1423+16])
                Ptyp_constr "unit" (stdlib/seq.mli[26,1423+12]..[26,1423+16])
                []
              core_type (stdlib/seq.mli[26,1423+20]..[26,1423+27])
                Ptyp_constr "node" (stdlib/seq.mli[26,1423+23]..[26,1423+27])
                [
                  core_type (stdlib/seq.mli[26,1423+20]..[26,1423+22])
                    Ptyp_var a
                ]
      type_declaration "node" (stdlib/seq.mli[32,1682+8]..[32,1682+12]) (stdlib/seq.mli[32,1682+0]..[34,1705+21])
        attribute "ocaml.doc"
          [
            structure_item (stdlib/seq.mli[35,1732+0]..[36,1803+26])
              Pstr_eval
              expression (stdlib/seq.mli[35,1732+0]..[36,1803+26])
                Pexp_constant PConst_string(" A fully-evaluated list node, either empty or containing an element\n    and a delayed tail. ",(stdlib/seq.mli[35,1732+0]..[36,1803+26]),None)
          ]
        ptype_params =
          [
            core_type (stdlib/seq.mli[32,1682+5]..[32,1682+7])
              Ptyp_var a
          ]
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (stdlib/seq.mli[33,1697+2]..[33,1697+7])
                "Nil" (stdlib/seq.mli[33,1697+4]..[33,1697+7])
                []
                None
              (stdlib/seq.mli[34,1705+2]..[34,1705+21])
                "Cons" (stdlib/seq.mli[34,1705+4]..[34,1705+8])
                [
                  core_type (stdlib/seq.mli[34,1705+12]..[34,1705+14])
                    Ptyp_var a
                  core_type (stdlib/seq.mli[34,1705+17]..[34,1705+21])
                    Ptyp_constr "t" (stdlib/seq.mli[34,1705+20]..[34,1705+21])
                    [
                      core_type (stdlib/seq.mli[34,1705+17]..[34,1705+19])
                        Ptyp_var a
                    ]
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  signature_item (stdlib/seq.mli[38,1831+0]..[38,1831+16])
    Psig_value
    value_description "empty" (stdlib/seq.mli[38,1831+4]..[38,1831+9]) (stdlib/seq.mli[38,1831+0]..[38,1831+16])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/seq.mli[39,1848+0]..[39,1848+50])
            Pstr_eval
            expression (stdlib/seq.mli[39,1848+0]..[39,1848+50])
              Pexp_constant PConst_string(" The empty sequence, containing no elements. ",(stdlib/seq.mli[39,1848+0]..[39,1848+50]),None)
        ]
      core_type (stdlib/seq.mli[38,1831+12]..[38,1831+16])
        Ptyp_constr "t" (stdlib/seq.mli[38,1831+15]..[38,1831+16])
        [
          core_type (stdlib/seq.mli[38,1831+12]..[38,1831+14])
            Ptyp_var a
        ]
      []
  signature_item (stdlib/seq.mli[41,1900+0]..[41,1900+23])
    Psig_value
    value_description "return" (stdlib/seq.mli[41,1900+4]..[41,1900+10]) (stdlib/seq.mli[41,1900+0]..[41,1900+23])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/seq.mli[42,1924+0]..[42,1924+64])
            Pstr_eval
            expression (stdlib/seq.mli[42,1924+0]..[42,1924+64])
              Pexp_constant PConst_string(" The singleton sequence containing only the given element. ",(stdlib/seq.mli[42,1924+0]..[42,1924+64]),None)
        ]
      core_type (stdlib/seq.mli[41,1900+13]..[41,1900+23])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/seq.mli[41,1900+13]..[41,1900+15])
          Ptyp_var a
        core_type (stdlib/seq.mli[41,1900+19]..[41,1900+23])
          Ptyp_constr "t" (stdlib/seq.mli[41,1900+22]..[41,1900+23])
          [
            core_type (stdlib/seq.mli[41,1900+19]..[41,1900+21])
              Ptyp_var a
          ]
      []
  signature_item (stdlib/seq.mli[44,1990+0]..[44,1990+29])
    Psig_value
    value_description "cons" (stdlib/seq.mli[44,1990+4]..[44,1990+8]) (stdlib/seq.mli[44,1990+0]..[44,1990+29])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/seq.mli[45,2020+0]..[46,2091+36])
            Pstr_eval
            expression (stdlib/seq.mli[45,2020+0]..[46,2091+36])
              Pexp_constant PConst_string(" [cons x xs] is the sequence containing the element [x] followed by\n    the sequence [xs] @since 4.11 ",(stdlib/seq.mli[45,2020+0]..[46,2091+36]),None)
        ]
      core_type (stdlib/seq.mli[44,1990+11]..[44,1990+29])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/seq.mli[44,1990+11]..[44,1990+13])
          Ptyp_var a
        core_type (stdlib/seq.mli[44,1990+17]..[44,1990+29])
          Ptyp_arrow
          Nolabel
          core_type (stdlib/seq.mli[44,1990+17]..[44,1990+21])
            Ptyp_constr "t" (stdlib/seq.mli[44,1990+20]..[44,1990+21])
            [
              core_type (stdlib/seq.mli[44,1990+17]..[44,1990+19])
                Ptyp_var a
            ]
          core_type (stdlib/seq.mli[44,1990+25]..[44,1990+29])
            Ptyp_constr "t" (stdlib/seq.mli[44,1990+28]..[44,1990+29])
            [
              core_type (stdlib/seq.mli[44,1990+25]..[44,1990+27])
                Ptyp_var a
            ]
      []
  signature_item (stdlib/seq.mli[48,2129+0]..[48,2129+33])
    Psig_value
    value_description "append" (stdlib/seq.mli[48,2129+4]..[48,2129+10]) (stdlib/seq.mli[48,2129+0]..[48,2129+33])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/seq.mli[49,2163+0]..[50,2233+18])
            Pstr_eval
            expression (stdlib/seq.mli[49,2163+0]..[50,2233+18])
              Pexp_constant PConst_string(" [append xs ys] is the sequence [xs] followed by the sequence [ys]\n    @since 4.11 ",(stdlib/seq.mli[49,2163+0]..[50,2233+18]),None)
        ]
      core_type (stdlib/seq.mli[48,2129+13]..[48,2129+33])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/seq.mli[48,2129+13]..[48,2129+17])
          Ptyp_constr "t" (stdlib/seq.mli[48,2129+16]..[48,2129+17])
          [
            core_type (stdlib/seq.mli[48,2129+13]..[48,2129+15])
              Ptyp_var a
          ]
        core_type (stdlib/seq.mli[48,2129+21]..[48,2129+33])
          Ptyp_arrow
          Nolabel
          core_type (stdlib/seq.mli[48,2129+21]..[48,2129+25])
            Ptyp_constr "t" (stdlib/seq.mli[48,2129+24]..[48,2129+25])
            [
              core_type (stdlib/seq.mli[48,2129+21]..[48,2129+23])
                Ptyp_var a
            ]
          core_type (stdlib/seq.mli[48,2129+29]..[48,2129+33])
            Ptyp_constr "t" (stdlib/seq.mli[48,2129+32]..[48,2129+33])
            [
              core_type (stdlib/seq.mli[48,2129+29]..[48,2129+31])
                Ptyp_var a
            ]
      []
  signature_item (stdlib/seq.mli[52,2253+0]..[52,2253+36])
    Psig_value
    value_description "map" (stdlib/seq.mli[52,2253+4]..[52,2253+7]) (stdlib/seq.mli[52,2253+0]..[52,2253+36])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/seq.mli[53,2290+0]..[57,2475+62])
            Pstr_eval
            expression (stdlib/seq.mli[53,2290+0]..[57,2475+62])
              Pexp_constant PConst_string(" [map f seq] returns a new sequence whose elements are the elements of\n    [seq], transformed by [f].\n    This transformation is lazy, it only applies when the result is traversed.\n\n    If [seq = [1;2;3]], then [map f seq = [f 1; f 2; f 3]]. ",(stdlib/seq.mli[53,2290+0]..[57,2475+62]),None)
        ]
      core_type (stdlib/seq.mli[52,2253+10]..[52,2253+36])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/seq.mli[52,2253+11]..[52,2253+19])
          Ptyp_arrow
          Nolabel
          core_type (stdlib/seq.mli[52,2253+11]..[52,2253+13])
            Ptyp_var a
          core_type (stdlib/seq.mli[52,2253+17]..[52,2253+19])
            Ptyp_var b
        core_type (stdlib/seq.mli[52,2253+24]..[52,2253+36])
          Ptyp_arrow
          Nolabel
          core_type (stdlib/seq.mli[52,2253+24]..[52,2253+28])
            Ptyp_constr "t" (stdlib/seq.mli[52,2253+27]..[52,2253+28])
            [
              core_type (stdlib/seq.mli[52,2253+24]..[52,2253+26])
                Ptyp_var a
            ]
          core_type (stdlib/seq.mli[52,2253+32]..[52,2253+36])
            Ptyp_constr "t" (stdlib/seq.mli[52,2253+35]..[52,2253+36])
            [
              core_type (stdlib/seq.mli[52,2253+32]..[52,2253+34])
                Ptyp_var b
            ]
      []
  signature_item (stdlib/seq.mli[59,2539+0]..[59,2539+41])
    Psig_value
    value_description "filter" (stdlib/seq.mli[59,2539+4]..[59,2539+10]) (stdlib/seq.mli[59,2539+0]..[59,2539+41])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/seq.mli[60,2581+0]..[63,2736+17])
            Pstr_eval
            expression (stdlib/seq.mli[60,2581+0]..[63,2736+17])
              Pexp_constant PConst_string(" Remove from the sequence the elements that do not satisfy the\n    given predicate.\n    This transformation is lazy, it only applies when the result is\n    traversed. ",(stdlib/seq.mli[60,2581+0]..[63,2736+17]),None)
        ]
      core_type (stdlib/seq.mli[59,2539+13]..[59,2539+41])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/seq.mli[59,2539+14]..[59,2539+24])
          Ptyp_arrow
          Nolabel
          core_type (stdlib/seq.mli[59,2539+14]..[59,2539+16])
            Ptyp_var a
          core_type (stdlib/seq.mli[59,2539+20]..[59,2539+24])
            Ptyp_constr "bool" (stdlib/seq.mli[59,2539+20]..[59,2539+24])
            []
        core_type (stdlib/seq.mli[59,2539+29]..[59,2539+41])
          Ptyp_arrow
          Nolabel
          core_type (stdlib/seq.mli[59,2539+29]..[59,2539+33])
            Ptyp_constr "t" (stdlib/seq.mli[59,2539+32]..[59,2539+33])
            [
              core_type (stdlib/seq.mli[59,2539+29]..[59,2539+31])
                Ptyp_var a
            ]
          core_type (stdlib/seq.mli[59,2539+37]..[59,2539+41])
            Ptyp_constr "t" (stdlib/seq.mli[59,2539+40]..[59,2539+41])
            [
              core_type (stdlib/seq.mli[59,2539+37]..[59,2539+39])
                Ptyp_var a
            ]
      []
  signature_item (stdlib/seq.mli[65,2755+0]..[65,2755+50])
    Psig_value
    value_description "filter_map" (stdlib/seq.mli[65,2755+4]..[65,2755+14]) (stdlib/seq.mli[65,2755+0]..[65,2755+50])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/seq.mli[66,2806+0]..[69,2996+17])
            Pstr_eval
            expression (stdlib/seq.mli[66,2806+0]..[69,2996+17])
              Pexp_constant PConst_string(" Apply the function to every element; if [f x = None] then [x] is dropped;\n    if [f x = Some y] then [y] is returned.\n    This transformation is lazy, it only applies when the result is\n    traversed. ",(stdlib/seq.mli[66,2806+0]..[69,2996+17]),None)
        ]
      core_type (stdlib/seq.mli[65,2755+17]..[65,2755+50])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/seq.mli[65,2755+18]..[65,2755+33])
          Ptyp_arrow
          Nolabel
          core_type (stdlib/seq.mli[65,2755+18]..[65,2755+20])
            Ptyp_var a
          core_type (stdlib/seq.mli[65,2755+24]..[65,2755+33])
            Ptyp_constr "option" (stdlib/seq.mli[65,2755+27]..[65,2755+33])
            [
              core_type (stdlib/seq.mli[65,2755+24]..[65,2755+26])
                Ptyp_var b
            ]
        core_type (stdlib/seq.mli[65,2755+38]..[65,2755+50])
          Ptyp_arrow
          Nolabel
          core_type (stdlib/seq.mli[65,2755+38]..[65,2755+42])
            Ptyp_constr "t" (stdlib/seq.mli[65,2755+41]..[65,2755+42])
            [
              core_type (stdlib/seq.mli[65,2755+38]..[65,2755+40])
                Ptyp_var a
            ]
          core_type (stdlib/seq.mli[65,2755+46]..[65,2755+50])
            Ptyp_constr "t" (stdlib/seq.mli[65,2755+49]..[65,2755+50])
            [
              core_type (stdlib/seq.mli[65,2755+46]..[65,2755+48])
                Ptyp_var b
            ]
      []
  signature_item (stdlib/seq.mli[71,3015+0]..[71,3015+27])
    Psig_value
    value_description "concat" (stdlib/seq.mli[71,3015+4]..[71,3015+10]) (stdlib/seq.mli[71,3015+0]..[71,3015+27])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/seq.mli[72,3043+0]..[75,3101+3])
            Pstr_eval
            expression (stdlib/seq.mli[72,3043+0]..[75,3101+3])
              Pexp_constant PConst_string(" concatenate a sequence of sequences.\n\n    @since 4.13\n ",(stdlib/seq.mli[72,3043+0]..[75,3101+3]),None)
        ]
      core_type (stdlib/seq.mli[71,3015+13]..[71,3015+27])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/seq.mli[71,3015+13]..[71,3015+19])
          Ptyp_constr "t" (stdlib/seq.mli[71,3015+18]..[71,3015+19])
          [
            core_type (stdlib/seq.mli[71,3015+13]..[71,3015+17])
              Ptyp_constr "t" (stdlib/seq.mli[71,3015+16]..[71,3015+17])
              [
                core_type (stdlib/seq.mli[71,3015+13]..[71,3015+15])
                  Ptyp_var a
              ]
          ]
        core_type (stdlib/seq.mli[71,3015+23]..[71,3015+27])
          Ptyp_constr "t" (stdlib/seq.mli[71,3015+26]..[71,3015+27])
          [
            core_type (stdlib/seq.mli[71,3015+23]..[71,3015+25])
              Ptyp_var a
          ]
      []
  signature_item (stdlib/seq.mli[77,3106+0]..[77,3106+43])
    Psig_value
    value_description "flat_map" (stdlib/seq.mli[77,3106+4]..[77,3106+12]) (stdlib/seq.mli[77,3106+0]..[77,3106+43])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/seq.mli[78,3150+0]..[81,3316+17])
            Pstr_eval
            expression (stdlib/seq.mli[78,3150+0]..[81,3316+17])
              Pexp_constant PConst_string(" Map each element to a subsequence, then return each element of this\n    sub-sequence in turn.\n    This transformation is lazy, it only applies when the result is\n    traversed. ",(stdlib/seq.mli[78,3150+0]..[81,3316+17]),None)
        ]
      core_type (stdlib/seq.mli[77,3106+15]..[77,3106+43])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/seq.mli[77,3106+16]..[77,3106+26])
          Ptyp_arrow
          Nolabel
          core_type (stdlib/seq.mli[77,3106+16]..[77,3106+18])
            Ptyp_var a
          core_type (stdlib/seq.mli[77,3106+22]..[77,3106+26])
            Ptyp_constr "t" (stdlib/seq.mli[77,3106+25]..[77,3106+26])
            [
              core_type (stdlib/seq.mli[77,3106+22]..[77,3106+24])
                Ptyp_var b
            ]
        core_type (stdlib/seq.mli[77,3106+31]..[77,3106+43])
          Ptyp_arrow
          Nolabel
          core_type (stdlib/seq.mli[77,3106+31]..[77,3106+35])
            Ptyp_constr "t" (stdlib/seq.mli[77,3106+34]..[77,3106+35])
            [
              core_type (stdlib/seq.mli[77,3106+31]..[77,3106+33])
                Ptyp_var a
            ]
          core_type (stdlib/seq.mli[77,3106+39]..[77,3106+43])
            Ptyp_constr "t" (stdlib/seq.mli[77,3106+42]..[77,3106+43])
            [
              core_type (stdlib/seq.mli[77,3106+39]..[77,3106+41])
                Ptyp_var b
            ]
      []
  signature_item (stdlib/seq.mli[83,3335+0]..[83,3335+45])
    Psig_value
    value_description "concat_map" (stdlib/seq.mli[83,3335+4]..[83,3335+14]) (stdlib/seq.mli[83,3335+0]..[83,3335+45])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/seq.mli[84,3381+0]..[87,3425+2])
            Pstr_eval
            expression (stdlib/seq.mli[84,3381+0]..[87,3425+2])
              Pexp_constant PConst_string(" Alias for {!flat_map}.\n\n    @since 4.13\n",(stdlib/seq.mli[84,3381+0]..[87,3425+2]),None)
        ]
      core_type (stdlib/seq.mli[83,3335+17]..[83,3335+45])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/seq.mli[83,3335+18]..[83,3335+28])
          Ptyp_arrow
          Nolabel
          core_type (stdlib/seq.mli[83,3335+18]..[83,3335+20])
            Ptyp_var a
          core_type (stdlib/seq.mli[83,3335+24]..[83,3335+28])
            Ptyp_constr "t" (stdlib/seq.mli[83,3335+27]..[83,3335+28])
            [
              core_type (stdlib/seq.mli[83,3335+24]..[83,3335+26])
                Ptyp_var b
            ]
        core_type (stdlib/seq.mli[83,3335+33]..[83,3335+45])
          Ptyp_arrow
          Nolabel
          core_type (stdlib/seq.mli[83,3335+33]..[83,3335+37])
            Ptyp_constr "t" (stdlib/seq.mli[83,3335+36]..[83,3335+37])
            [
              core_type (stdlib/seq.mli[83,3335+33]..[83,3335+35])
                Ptyp_var a
            ]
          core_type (stdlib/seq.mli[83,3335+41]..[83,3335+45])
            Ptyp_constr "t" (stdlib/seq.mli[83,3335+44]..[83,3335+45])
            [
              core_type (stdlib/seq.mli[83,3335+41]..[83,3335+43])
                Ptyp_var b
            ]
      []
  signature_item (stdlib/seq.mli[89,3429+0]..[89,3429+52])
    Psig_value
    value_description "fold_left" (stdlib/seq.mli[89,3429+4]..[89,3429+13]) (stdlib/seq.mli[89,3429+0]..[89,3429+52])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/seq.mli[90,3482+0]..[95,3691+33])
            Pstr_eval
            expression (stdlib/seq.mli[90,3482+0]..[95,3691+33])
              Pexp_constant PConst_string(" Traverse the sequence from left to right, combining each element with the\n    accumulator using the given function.\n    The traversal happens immediately and will not terminate on infinite\n    sequences.\n\n    Also see {!List.fold_left} ",(stdlib/seq.mli[90,3482+0]..[95,3691+33]),None)
        ]
      core_type (stdlib/seq.mli[89,3429+16]..[89,3429+52])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/seq.mli[89,3429+17]..[89,3429+31])
          Ptyp_arrow
          Nolabel
          core_type (stdlib/seq.mli[89,3429+17]..[89,3429+19])
            Ptyp_var a
          core_type (stdlib/seq.mli[89,3429+23]..[89,3429+31])
            Ptyp_arrow
            Nolabel
            core_type (stdlib/seq.mli[89,3429+23]..[89,3429+25])
              Ptyp_var b
            core_type (stdlib/seq.mli[89,3429+29]..[89,3429+31])
              Ptyp_var a
        core_type (stdlib/seq.mli[89,3429+36]..[89,3429+52])
          Ptyp_arrow
          Nolabel
          core_type (stdlib/seq.mli[89,3429+36]..[89,3429+38])
            Ptyp_var a
          core_type (stdlib/seq.mli[89,3429+42]..[89,3429+52])
            Ptyp_arrow
            Nolabel
            core_type (stdlib/seq.mli[89,3429+42]..[89,3429+46])
              Ptyp_constr "t" (stdlib/seq.mli[89,3429+45]..[89,3429+46])
              [
                core_type (stdlib/seq.mli[89,3429+42]..[89,3429+44])
                  Ptyp_var b
              ]
            core_type (stdlib/seq.mli[89,3429+50]..[89,3429+52])
              Ptyp_var a
      []
  signature_item (stdlib/seq.mli[97,3726+0]..[97,3726+39])
    Psig_value
    value_description "iter" (stdlib/seq.mli[97,3726+4]..[97,3726+8]) (stdlib/seq.mli[97,3726+0]..[97,3726+39])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/seq.mli[98,3766+0]..[100,3920+17])
            Pstr_eval
            expression (stdlib/seq.mli[98,3766+0]..[100,3920+17])
              Pexp_constant PConst_string(" Iterate on the sequence, calling the (imperative) function on every element.\n    The traversal happens immediately and will not terminate on infinite\n    sequences. ",(stdlib/seq.mli[98,3766+0]..[100,3920+17]),None)
        ]
      core_type (stdlib/seq.mli[97,3726+11]..[97,3726+39])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/seq.mli[97,3726+12]..[97,3726+22])
          Ptyp_arrow
          Nolabel
          core_type (stdlib/seq.mli[97,3726+12]..[97,3726+14])
            Ptyp_var a
          core_type (stdlib/seq.mli[97,3726+18]..[97,3726+22])
            Ptyp_constr "unit" (stdlib/seq.mli[97,3726+18]..[97,3726+22])
            []
        core_type (stdlib/seq.mli[97,3726+27]..[97,3726+39])
          Ptyp_arrow
          Nolabel
          core_type (stdlib/seq.mli[97,3726+27]..[97,3726+31])
            Ptyp_constr "t" (stdlib/seq.mli[97,3726+30]..[97,3726+31])
            [
              core_type (stdlib/seq.mli[97,3726+27]..[97,3726+29])
                Ptyp_var a
            ]
          core_type (stdlib/seq.mli[97,3726+35]..[97,3726+39])
            Ptyp_constr "unit" (stdlib/seq.mli[97,3726+35]..[97,3726+39])
            []
      []
  signature_item (stdlib/seq.mli[102,3939+0]..[102,3939+51])
    Psig_value
    value_description "unfold" (stdlib/seq.mli[102,3939+4]..[102,3939+10]) (stdlib/seq.mli[102,3939+0]..[102,3939+51])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/seq.mli[103,3991+0]..[109,4295+18])
            Pstr_eval
            expression (stdlib/seq.mli[103,3991+0]..[109,4295+18])
              Pexp_constant PConst_string(" Build a sequence from a step function and an initial value.\n    [unfold f u] returns [empty] if [f u] returns [None],\n    or [fun () -> Cons (x, unfold f y)] if [f u] returns [Some (x, y)].\n\n    For example, [unfold (function [] -> None | h::t -> Some (h,t)) l]\n    is equivalent to [List.to_seq l].\n    @since 4.11 ",(stdlib/seq.mli[103,3991+0]..[109,4295+18]),None)
        ]
      core_type (stdlib/seq.mli[102,3939+13]..[102,3939+51])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/seq.mli[102,3939+14]..[102,3939+36])
          Ptyp_arrow
          Nolabel
          core_type (stdlib/seq.mli[102,3939+14]..[102,3939+16])
            Ptyp_var b
          core_type (stdlib/seq.mli[102,3939+20]..[102,3939+36])
            Ptyp_constr "option" (stdlib/seq.mli[102,3939+30]..[102,3939+36])
            [
              core_type (stdlib/seq.mli[102,3939+21]..[102,3939+28])
                Ptyp_tuple
                [
                  core_type (stdlib/seq.mli[102,3939+21]..[102,3939+23])
                    Ptyp_var a
                  core_type (stdlib/seq.mli[102,3939+26]..[102,3939+28])
                    Ptyp_var b
                ]
            ]
        core_type (stdlib/seq.mli[102,3939+41]..[102,3939+51])
          Ptyp_arrow
          Nolabel
          core_type (stdlib/seq.mli[102,3939+41]..[102,3939+43])
            Ptyp_var b
          core_type (stdlib/seq.mli[102,3939+47]..[102,3939+51])
            Ptyp_constr "t" (stdlib/seq.mli[102,3939+50]..[102,3939+51])
            [
              core_type (stdlib/seq.mli[102,3939+47]..[102,3939+49])
                Ptyp_var a
            ]
      []
]

