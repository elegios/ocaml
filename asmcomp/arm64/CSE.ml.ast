[
  structure_item (asmcomp/arm64/CSE.ml[18,1100+0]..[18,1100+9])
    Pstr_open Fresh
    module_expr (asmcomp/arm64/CSE.ml[18,1100+5]..[18,1100+9])
      Pmod_ident "Arch" (asmcomp/arm64/CSE.ml[18,1100+5]..[18,1100+9])
  structure_item (asmcomp/arm64/CSE.ml[19,1110+0]..[19,1110+9])
    Pstr_open Fresh
    module_expr (asmcomp/arm64/CSE.ml[19,1110+5]..[19,1110+9])
      Pmod_ident "Mach" (asmcomp/arm64/CSE.ml[19,1110+5]..[19,1110+9])
  structure_item (asmcomp/arm64/CSE.ml[20,1120+0]..[20,1120+11])
    Pstr_open Fresh
    module_expr (asmcomp/arm64/CSE.ml[20,1120+5]..[20,1120+11])
      Pmod_ident "CSEgen" (asmcomp/arm64/CSE.ml[20,1120+5]..[20,1120+11])
  structure_item (asmcomp/arm64/CSE.ml[22,1133+0]..[37,1454+3])
    Pstr_class
    [
      class_declaration (asmcomp/arm64/CSE.ml[22,1133+0]..[37,1454+3])
        pci_virt = Concrete
        pci_params =
          []
        pci_name = "cse" (asmcomp/arm64/CSE.ml[22,1133+6]..[22,1133+9])
        pci_expr =
          class_expr (asmcomp/arm64/CSE.ml[22,1133+12]..[37,1454+3])
            Pcl_structure
            class_structure
              pattern (asmcomp/arm64/CSE.ml[22,1133+18]..[22,1133+18]) ghost
                Ppat_any
              [
                class_field (asmcomp/arm64/CSE.ml[24,1153+0]..[24,1153+28])
                  Pcf_inherit Fresh
                    class_expr (asmcomp/arm64/CSE.ml[24,1153+8]..[24,1153+19])
                      Pcl_constr "cse_generic" (asmcomp/arm64/CSE.ml[24,1153+8]..[24,1153+19])
                      []
                    Some
                      "super" (asmcomp/arm64/CSE.ml[24,1153+23]..[24,1153+28])
                class_field (asmcomp/arm64/CSE.ml[26,1183+0]..[30,1309+36])
                  Pcf_method Public
                    "class_of_operation" (asmcomp/arm64/CSE.ml[26,1183+8]..[26,1183+26])
                    Concrete Override
                    expression (asmcomp/arm64/CSE.ml[26,1183+27]..[30,1309+36]) ghost
                      Pexp_poly
                      expression (asmcomp/arm64/CSE.ml[26,1183+27]..[30,1309+36]) ghost
                        Pexp_fun
                        Nolabel
                        None
                        pattern (asmcomp/arm64/CSE.ml[26,1183+27]..[26,1183+29])
                          Ppat_var "op" (asmcomp/arm64/CSE.ml[26,1183+27]..[26,1183+29])
                        expression (asmcomp/arm64/CSE.ml[27,1215+2]..[30,1309+36])
                          Pexp_match
                          expression (asmcomp/arm64/CSE.ml[27,1215+8]..[27,1215+10])
                            Pexp_ident "op" (asmcomp/arm64/CSE.ml[27,1215+8]..[27,1215+10])
                          [
                            <case>
                              pattern (asmcomp/arm64/CSE.ml[28,1231+4]..[28,1231+33])
                                Ppat_construct "Ispecific" (asmcomp/arm64/CSE.ml[28,1231+4]..[28,1231+13])
                                Some
                                  []
                                  pattern (asmcomp/arm64/CSE.ml[28,1231+13]..[28,1231+33])
                                    Ppat_construct "Ishiftcheckbound" (asmcomp/arm64/CSE.ml[28,1231+14]..[28,1231+30])
                                    Some
                                      []
                                      pattern (asmcomp/arm64/CSE.ml[28,1231+31]..[28,1231+32])
                                        Ppat_any
                              expression (asmcomp/arm64/CSE.ml[28,1231+37]..[28,1231+50])
                                Pexp_construct "Op_checkbound" (asmcomp/arm64/CSE.ml[28,1231+37]..[28,1231+50])
                                None
                            <case>
                              pattern (asmcomp/arm64/CSE.ml[29,1282+4]..[29,1282+15])
                                Ppat_construct "Ispecific" (asmcomp/arm64/CSE.ml[29,1282+4]..[29,1282+13])
                                Some
                                  []
                                  pattern (asmcomp/arm64/CSE.ml[29,1282+14]..[29,1282+15])
                                    Ppat_any
                              expression (asmcomp/arm64/CSE.ml[29,1282+19]..[29,1282+26])
                                Pexp_construct "Op_pure" (asmcomp/arm64/CSE.ml[29,1282+19]..[29,1282+26])
                                None
                            <case>
                              pattern (asmcomp/arm64/CSE.ml[30,1309+4]..[30,1309+5])
                                Ppat_any
                              expression (asmcomp/arm64/CSE.ml[30,1309+9]..[30,1309+36])
                                Pexp_apply
                                expression (asmcomp/arm64/CSE.ml[30,1309+9]..[30,1309+33])
                                  Pexp_send "class_of_operation"
                                  expression (asmcomp/arm64/CSE.ml[30,1309+9]..[30,1309+14])
                                    Pexp_ident "super" (asmcomp/arm64/CSE.ml[30,1309+9]..[30,1309+14])
                                [
                                  <arg>
                                  Nolabel
                                    expression (asmcomp/arm64/CSE.ml[30,1309+34]..[30,1309+36])
                                      Pexp_ident "op" (asmcomp/arm64/CSE.ml[30,1309+34]..[30,1309+36])
                                ]
                          ]
                      None
                class_field (asmcomp/arm64/CSE.ml[32,1347+0]..[35,1438+14])
                  Pcf_method Public
                    "is_cheap_operation" (asmcomp/arm64/CSE.ml[32,1347+8]..[32,1347+26])
                    Concrete Override
                    expression (asmcomp/arm64/CSE.ml[32,1347+27]..[35,1438+14]) ghost
                      Pexp_poly
                      expression (asmcomp/arm64/CSE.ml[32,1347+27]..[35,1438+14]) ghost
                        Pexp_fun
                        Nolabel
                        None
                        pattern (asmcomp/arm64/CSE.ml[32,1347+27]..[32,1347+29])
                          Ppat_var "op" (asmcomp/arm64/CSE.ml[32,1347+27]..[32,1347+29])
                        expression (asmcomp/arm64/CSE.ml[33,1379+2]..[35,1438+14])
                          Pexp_match
                          expression (asmcomp/arm64/CSE.ml[33,1379+8]..[33,1379+10])
                            Pexp_ident "op" (asmcomp/arm64/CSE.ml[33,1379+8]..[33,1379+10])
                          [
                            <case>
                              pattern (asmcomp/arm64/CSE.ml[34,1395+4]..[34,1395+16])
                                Ppat_construct "Iconst_int" (asmcomp/arm64/CSE.ml[34,1395+4]..[34,1395+14])
                                Some
                                  []
                                  pattern (asmcomp/arm64/CSE.ml[34,1395+15]..[34,1395+16])
                                    Ppat_var "n" (asmcomp/arm64/CSE.ml[34,1395+15]..[34,1395+16])
                              expression (asmcomp/arm64/CSE.ml[34,1395+20]..[34,1395+42])
                                Pexp_apply
                                expression (asmcomp/arm64/CSE.ml[34,1395+32]..[34,1395+34])
                                  Pexp_ident "&&" (asmcomp/arm64/CSE.ml[34,1395+32]..[34,1395+34])
                                [
                                  <arg>
                                  Nolabel
                                    expression (asmcomp/arm64/CSE.ml[34,1395+20]..[34,1395+31])
                                      Pexp_apply
                                      expression (asmcomp/arm64/CSE.ml[34,1395+22]..[34,1395+24])
                                        Pexp_ident "<=" (asmcomp/arm64/CSE.ml[34,1395+22]..[34,1395+24])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (asmcomp/arm64/CSE.ml[34,1395+20]..[34,1395+21])
                                            Pexp_ident "n" (asmcomp/arm64/CSE.ml[34,1395+20]..[34,1395+21])
                                        <arg>
                                        Nolabel
                                          expression (asmcomp/arm64/CSE.ml[34,1395+25]..[34,1395+31])
                                            Pexp_constant PConst_int (65535,Some n)
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (asmcomp/arm64/CSE.ml[34,1395+35]..[34,1395+42])
                                      Pexp_apply
                                      expression (asmcomp/arm64/CSE.ml[34,1395+37]..[34,1395+39])
                                        Pexp_ident ">=" (asmcomp/arm64/CSE.ml[34,1395+37]..[34,1395+39])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (asmcomp/arm64/CSE.ml[34,1395+35]..[34,1395+36])
                                            Pexp_ident "n" (asmcomp/arm64/CSE.ml[34,1395+35]..[34,1395+36])
                                        <arg>
                                        Nolabel
                                          expression (asmcomp/arm64/CSE.ml[34,1395+40]..[34,1395+42])
                                            Pexp_constant PConst_int (0,Some n)
                                      ]
                                ]
                            <case>
                              pattern (asmcomp/arm64/CSE.ml[35,1438+4]..[35,1438+5])
                                Ppat_any
                              expression (asmcomp/arm64/CSE.ml[35,1438+9]..[35,1438+14])
                                Pexp_construct "false" (asmcomp/arm64/CSE.ml[35,1438+9]..[35,1438+14])
                                None
                          ]
                      None
              ]
    ]
  structure_item (asmcomp/arm64/CSE.ml[39,1459+0]..[40,1475+21])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/arm64/CSE.ml[39,1459+4]..[39,1459+11])
          Ppat_var "fundecl" (asmcomp/arm64/CSE.ml[39,1459+4]..[39,1459+11])
        expression (asmcomp/arm64/CSE.ml[39,1459+12]..[40,1475+21]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (asmcomp/arm64/CSE.ml[39,1459+12]..[39,1459+13])
            Ppat_var "f" (asmcomp/arm64/CSE.ml[39,1459+12]..[39,1459+13])
          expression (asmcomp/arm64/CSE.ml[40,1475+2]..[40,1475+21])
            Pexp_apply
            expression (asmcomp/arm64/CSE.ml[40,1475+2]..[40,1475+19])
              Pexp_send "fundecl"
              expression (asmcomp/arm64/CSE.ml[40,1475+2]..[40,1475+11])
                Pexp_new "cse" (asmcomp/arm64/CSE.ml[40,1475+7]..[40,1475+10])
            [
              <arg>
              Nolabel
                expression (asmcomp/arm64/CSE.ml[40,1475+20]..[40,1475+21])
                  Pexp_ident "f" (asmcomp/arm64/CSE.ml[40,1475+20]..[40,1475+21])
            ]
    ]
]

