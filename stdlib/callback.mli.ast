[
  signature_item (stdlib/callback.mli[16,1079+0]..[21,1330+2])
    Psig_attribute "ocaml.text"
    [
      structure_item (stdlib/callback.mli[16,1079+0]..[21,1330+2])
        Pstr_eval
        expression (stdlib/callback.mli[16,1079+0]..[21,1330+2])
          Pexp_constant PConst_string(" Registering OCaml values with the C runtime.\n\n   This module allows OCaml values to be registered with the C runtime\n   under a symbolic name, so that C code can later call back registered\n   OCaml functions, or raise registered OCaml exceptions.\n",(stdlib/callback.mli[16,1079+0]..[21,1330+2]),None)
    ]
  signature_item (stdlib/callback.mli[23,1334+0]..[23,1334+35])
    Psig_value
    value_description "register" (stdlib/callback.mli[23,1334+4]..[23,1334+12]) (stdlib/callback.mli[23,1334+0]..[23,1334+35])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/callback.mli[24,1370+0]..[26,1487+39])
            Pstr_eval
            expression (stdlib/callback.mli[24,1370+0]..[26,1487+39])
              Pexp_constant PConst_string(" [Callback.register n v] registers the value [v] under\n   the name [n]. C code can later retrieve a handle to [v]\n   by calling [caml_named_value(n)]. ",(stdlib/callback.mli[24,1370+0]..[26,1487+39]),None)
        ]
      core_type (stdlib/callback.mli[23,1334+15]..[23,1334+35])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/callback.mli[23,1334+15]..[23,1334+21])
          Ptyp_constr "string" (stdlib/callback.mli[23,1334+15]..[23,1334+21])
          []
        core_type (stdlib/callback.mli[23,1334+25]..[23,1334+35])
          Ptyp_arrow
          Nolabel
          core_type (stdlib/callback.mli[23,1334+25]..[23,1334+27])
            Ptyp_var a
          core_type (stdlib/callback.mli[23,1334+31]..[23,1334+35])
            Ptyp_constr "unit" (stdlib/callback.mli[23,1334+31]..[23,1334+35])
            []
      []
  signature_item (stdlib/callback.mli[28,1528+0]..[28,1528+46])
    Psig_value
    value_description "register_exception" (stdlib/callback.mli[28,1528+4]..[28,1528+22]) (stdlib/callback.mli[28,1528+0]..[28,1528+46])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/callback.mli[29,1575+0]..[34,1872+46])
            Pstr_eval
            expression (stdlib/callback.mli[29,1575+0]..[34,1872+46])
              Pexp_constant PConst_string(" [Callback.register_exception n exn] registers the\n   exception contained in the exception value [exn]\n   under the name [n]. C code can later retrieve a handle to\n   the exception by calling [caml_named_value(n)]. The exception\n   value thus obtained is suitable for passing as first argument\n   to [raise_constant] or [raise_with_arg]. ",(stdlib/callback.mli[29,1575+0]..[34,1872+46]),None)
        ]
      core_type (stdlib/callback.mli[28,1528+25]..[28,1528+46])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/callback.mli[28,1528+25]..[28,1528+31])
          Ptyp_constr "string" (stdlib/callback.mli[28,1528+25]..[28,1528+31])
          []
        core_type (stdlib/callback.mli[28,1528+35]..[28,1528+46])
          Ptyp_arrow
          Nolabel
          core_type (stdlib/callback.mli[28,1528+35]..[28,1528+38])
            Ptyp_constr "exn" (stdlib/callback.mli[28,1528+35]..[28,1528+38])
            []
          core_type (stdlib/callback.mli[28,1528+42]..[28,1528+46])
            Ptyp_constr "unit" (stdlib/callback.mli[28,1528+42]..[28,1528+46])
            []
      []
]

