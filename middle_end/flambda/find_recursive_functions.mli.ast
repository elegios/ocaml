[
  signature_item (middle_end/flambda/find_recursive_functions.mli[17,1156+0]..[17,1156+39])
    Psig_attribute "ocaml.warning"
    [
      structure_item (middle_end/flambda/find_recursive_functions.mli[17,1156+18]..[17,1156+38])
        Pstr_eval
        expression (middle_end/flambda/find_recursive_functions.mli[17,1156+18]..[17,1156+38])
          Pexp_constant PConst_string("+a-4-9-30-40-41-42",(middle_end/flambda/find_recursive_functions.mli[17,1156+19]..[17,1156+37]),None)
    ]
  signature_item (middle_end/flambda/find_recursive_functions.mli[19,1197+0]..[28,1544+2])
    Psig_attribute "ocaml.text"
    [
      structure_item (middle_end/flambda/find_recursive_functions.mli[19,1197+0]..[28,1544+2])
        Pstr_eval
        expression (middle_end/flambda/find_recursive_functions.mli[19,1197+0]..[28,1544+2])
          Pexp_constant PConst_string(" \"Recursive functions\" are those functions [f] that might call either:\n    - themselves, or\n    - another function that in turn might call [f].\n\n    For example in the following simultaneous definition of [f] [g] and [h],\n    [f] and [g] are recursive functions, but not [h]:\n      [let rec f x = g x\n       and g x = f x\n       and h x = g x]\n",(middle_end/flambda/find_recursive_functions.mli[19,1197+0]..[28,1544+2]),None)
    ]
  signature_item (middle_end/flambda/find_recursive_functions.mli[34,1731+0]..[37,1832+19])
    Psig_value
    value_description "in_function_declarations" (middle_end/flambda/find_recursive_functions.mli[34,1731+4]..[34,1731+28]) (middle_end/flambda/find_recursive_functions.mli[34,1731+0]..[37,1832+19])
      attribute "ocaml.doc"
        [
          structure_item (middle_end/flambda/find_recursive_functions.mli[30,1548+0]..[33,1728+2])
            Pstr_eval
            expression (middle_end/flambda/find_recursive_functions.mli[30,1548+0]..[33,1728+2])
              Pexp_constant PConst_string(" Determine the recursive functions, if any, bound by the given set of\n    function declarations.\n    This is only intended to be used by [Flambda.create_function_declarations].\n",(middle_end/flambda/find_recursive_functions.mli[30,1548+0]..[33,1728+2]),None)
        ]
      core_type (middle_end/flambda/find_recursive_functions.mli[35,1760+5]..[37,1832+19])
        Ptyp_arrow
        Nolabel
        core_type (middle_end/flambda/find_recursive_functions.mli[35,1760+5]..[35,1760+34])
          Ptyp_constr "Flambda.function_declarations" (middle_end/flambda/find_recursive_functions.mli[35,1760+5]..[35,1760+34])
          []
        core_type (middle_end/flambda/find_recursive_functions.mli[36,1795+5]..[37,1832+19])
          Ptyp_arrow
          Labelled "backend"
          core_type (middle_end/flambda/find_recursive_functions.mli[36,1795+13]..[36,1795+36])
            Ptyp_package "Backend_intf.S" (middle_end/flambda/find_recursive_functions.mli[36,1795+21]..[36,1795+35])
            []
          core_type (middle_end/flambda/find_recursive_functions.mli[37,1832+5]..[37,1832+19])
            Ptyp_constr "Variable.Set.t" (middle_end/flambda/find_recursive_functions.mli[37,1832+5]..[37,1832+19])
            []
      []
]

