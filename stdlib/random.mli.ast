[
  signature_item (stdlib/random.mli[16,1079+0]..[16,1079+46])
    Psig_attribute "ocaml.text"
    [
      structure_item (stdlib/random.mli[16,1079+0]..[16,1079+46])
        Pstr_eval
        expression (stdlib/random.mli[16,1079+0]..[16,1079+46])
          Pexp_constant PConst_string(" Pseudo-random number generators (PRNG). ",(stdlib/random.mli[16,1079+0]..[16,1079+46]),None)
    ]
  signature_item (stdlib/random.mli[18,1127+0]..[18,1127+26])
    Psig_attribute "ocaml.text"
    [
      structure_item (stdlib/random.mli[18,1127+0]..[18,1127+26])
        Pstr_eval
        expression (stdlib/random.mli[18,1127+0]..[18,1127+26])
          Pexp_constant PConst_string(" {1 Basic functions} ",(stdlib/random.mli[18,1127+0]..[18,1127+26]),None)
    ]
  signature_item (stdlib/random.mli[20,1155+0]..[20,1155+22])
    Psig_value
    value_description "init" (stdlib/random.mli[20,1155+4]..[20,1155+8]) (stdlib/random.mli[20,1155+0]..[20,1155+22])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/random.mli[21,1178+0]..[22,1238+69])
            Pstr_eval
            expression (stdlib/random.mli[21,1178+0]..[22,1238+69])
              Pexp_constant PConst_string(" Initialize the generator, using the argument as a seed.\n     The same seed will always yield the same sequence of numbers. ",(stdlib/random.mli[21,1178+0]..[22,1238+69]),None)
        ]
      core_type (stdlib/random.mli[20,1155+11]..[20,1155+22])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/random.mli[20,1155+11]..[20,1155+14])
          Ptyp_constr "int" (stdlib/random.mli[20,1155+11]..[20,1155+14])
          []
        core_type (stdlib/random.mli[20,1155+18]..[20,1155+22])
          Ptyp_constr "unit" (stdlib/random.mli[20,1155+18]..[20,1155+22])
          []
      []
  signature_item (stdlib/random.mli[24,1309+0]..[24,1309+33])
    Psig_value
    value_description "full_init" (stdlib/random.mli[24,1309+4]..[24,1309+13]) (stdlib/random.mli[24,1309+0]..[24,1309+33])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/random.mli[25,1343+0]..[25,1343+58])
            Pstr_eval
            expression (stdlib/random.mli[25,1343+0]..[25,1343+58])
              Pexp_constant PConst_string(" Same as {!Random.init} but takes more data as seed. ",(stdlib/random.mli[25,1343+0]..[25,1343+58]),None)
        ]
      core_type (stdlib/random.mli[24,1309+16]..[24,1309+33])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/random.mli[24,1309+16]..[24,1309+25])
          Ptyp_constr "array" (stdlib/random.mli[24,1309+20]..[24,1309+25])
          [
            core_type (stdlib/random.mli[24,1309+16]..[24,1309+19])
              Ptyp_constr "int" (stdlib/random.mli[24,1309+16]..[24,1309+19])
              []
          ]
        core_type (stdlib/random.mli[24,1309+29]..[24,1309+33])
          Ptyp_constr "unit" (stdlib/random.mli[24,1309+29]..[24,1309+33])
          []
      []
  signature_item (stdlib/random.mli[27,1403+0]..[27,1403+28])
    Psig_value
    value_description "self_init" (stdlib/random.mli[27,1403+4]..[27,1403+13]) (stdlib/random.mli[27,1403+0]..[27,1403+28])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/random.mli[28,1432+0]..[32,1683+45])
            Pstr_eval
            expression (stdlib/random.mli[28,1432+0]..[32,1683+45])
              Pexp_constant PConst_string(" Initialize the generator with a random seed chosen\n   in a system-dependent way.  If [/dev/urandom] is available on\n   the host machine, it is used to provide a highly random initial\n   seed.  Otherwise, a less random seed is computed from system\n   parameters (current time, process IDs). ",(stdlib/random.mli[28,1432+0]..[32,1683+45]),None)
        ]
      core_type (stdlib/random.mli[27,1403+16]..[27,1403+28])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/random.mli[27,1403+16]..[27,1403+20])
          Ptyp_constr "unit" (stdlib/random.mli[27,1403+16]..[27,1403+20])
          []
        core_type (stdlib/random.mli[27,1403+24]..[27,1403+28])
          Ptyp_constr "unit" (stdlib/random.mli[27,1403+24]..[27,1403+28])
          []
      []
  signature_item (stdlib/random.mli[34,1730+0]..[34,1730+22])
    Psig_value
    value_description "bits" (stdlib/random.mli[34,1730+4]..[34,1730+8]) (stdlib/random.mli[34,1730+0]..[34,1730+22])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/random.mli[35,1753+0]..[38,1908+2])
            Pstr_eval
            expression (stdlib/random.mli[35,1753+0]..[38,1908+2])
              Pexp_constant PConst_string(" Return 30 random bits in a nonnegative integer.\n    @before 3.12.0 used a different algorithm (affects all the following\n                   functions)\n",(stdlib/random.mli[35,1753+0]..[38,1908+2]),None)
        ]
      core_type (stdlib/random.mli[34,1730+11]..[34,1730+22])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/random.mli[34,1730+11]..[34,1730+15])
          Ptyp_constr "unit" (stdlib/random.mli[34,1730+11]..[34,1730+15])
          []
        core_type (stdlib/random.mli[34,1730+19]..[34,1730+22])
          Ptyp_constr "int" (stdlib/random.mli[34,1730+19]..[34,1730+22])
          []
      []
  signature_item (stdlib/random.mli[40,1912+0]..[40,1912+20])
    Psig_value
    value_description "int" (stdlib/random.mli[40,1912+4]..[40,1912+7]) (stdlib/random.mli[40,1912+0]..[40,1912+20])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/random.mli[41,1933+0]..[43,2074+20])
            Pstr_eval
            expression (stdlib/random.mli[41,1933+0]..[43,2074+20])
              Pexp_constant PConst_string(" [Random.int bound] returns a random integer between 0 (inclusive)\n     and [bound] (exclusive).  [bound] must be greater than 0 and less\n     than 2{^30}. ",(stdlib/random.mli[41,1933+0]..[43,2074+20]),None)
        ]
      core_type (stdlib/random.mli[40,1912+10]..[40,1912+20])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/random.mli[40,1912+10]..[40,1912+13])
          Ptyp_constr "int" (stdlib/random.mli[40,1912+10]..[40,1912+13])
          []
        core_type (stdlib/random.mli[40,1912+17]..[40,1912+20])
          Ptyp_constr "int" (stdlib/random.mli[40,1912+17]..[40,1912+20])
          []
      []
  signature_item (stdlib/random.mli[45,2096+0]..[45,2096+25])
    Psig_value
    value_description "full_int" (stdlib/random.mli[45,2096+4]..[45,2096+12]) (stdlib/random.mli[45,2096+0]..[45,2096+25])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/random.mli[46,2122+0]..[54,2564+20])
            Pstr_eval
            expression (stdlib/random.mli[46,2122+0]..[54,2564+20])
              Pexp_constant PConst_string(" [Random.full_int bound] returns a random integer between 0 (inclusive)\n     and [bound] (exclusive). [bound] may be any positive integer.\n\n     If [bound] is less than 2{^30}, [Random.full_int bound] is equal to\n     {!Random.int}[ bound]. If [bound] is greater than 2{^30} (on 64-bit systems\n     or non-standard environments, such as JavaScript), [Random.full_int]\n     returns a value, where {!Random.int} raises {!Invalid_argument}.\n\n    @since 4.13.0 ",(stdlib/random.mli[46,2122+0]..[54,2564+20]),None)
        ]
      core_type (stdlib/random.mli[45,2096+15]..[45,2096+25])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/random.mli[45,2096+15]..[45,2096+18])
          Ptyp_constr "int" (stdlib/random.mli[45,2096+15]..[45,2096+18])
          []
        core_type (stdlib/random.mli[45,2096+22]..[45,2096+25])
          Ptyp_constr "int" (stdlib/random.mli[45,2096+22]..[45,2096+25])
          []
      []
  signature_item (stdlib/random.mli[56,2586+0]..[56,2586+30])
    Psig_value
    value_description "int32" (stdlib/random.mli[56,2586+4]..[56,2586+9]) (stdlib/random.mli[56,2586+0]..[56,2586+30])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/random.mli[57,2617+0]..[58,2689+65])
            Pstr_eval
            expression (stdlib/random.mli[57,2617+0]..[58,2689+65])
              Pexp_constant PConst_string(" [Random.int32 bound] returns a random integer between 0 (inclusive)\n     and [bound] (exclusive).  [bound] must be greater than 0. ",(stdlib/random.mli[57,2617+0]..[58,2689+65]),None)
        ]
      core_type (stdlib/random.mli[56,2586+12]..[56,2586+30])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/random.mli[56,2586+12]..[56,2586+19])
          Ptyp_constr "Int32.t" (stdlib/random.mli[56,2586+12]..[56,2586+19])
          []
        core_type (stdlib/random.mli[56,2586+23]..[56,2586+30])
          Ptyp_constr "Int32.t" (stdlib/random.mli[56,2586+23]..[56,2586+30])
          []
      []
  signature_item (stdlib/random.mli[60,2756+0]..[60,2756+42])
    Psig_value
    value_description "nativeint" (stdlib/random.mli[60,2756+4]..[60,2756+13]) (stdlib/random.mli[60,2756+0]..[60,2756+42])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/random.mli[61,2799+0]..[62,2875+65])
            Pstr_eval
            expression (stdlib/random.mli[61,2799+0]..[62,2875+65])
              Pexp_constant PConst_string(" [Random.nativeint bound] returns a random integer between 0 (inclusive)\n     and [bound] (exclusive).  [bound] must be greater than 0. ",(stdlib/random.mli[61,2799+0]..[62,2875+65]),None)
        ]
      core_type (stdlib/random.mli[60,2756+16]..[60,2756+42])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/random.mli[60,2756+16]..[60,2756+27])
          Ptyp_constr "Nativeint.t" (stdlib/random.mli[60,2756+16]..[60,2756+27])
          []
        core_type (stdlib/random.mli[60,2756+31]..[60,2756+42])
          Ptyp_constr "Nativeint.t" (stdlib/random.mli[60,2756+31]..[60,2756+42])
          []
      []
  signature_item (stdlib/random.mli[64,2942+0]..[64,2942+30])
    Psig_value
    value_description "int64" (stdlib/random.mli[64,2942+4]..[64,2942+9]) (stdlib/random.mli[64,2942+0]..[64,2942+30])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/random.mli[65,2973+0]..[66,3045+65])
            Pstr_eval
            expression (stdlib/random.mli[65,2973+0]..[66,3045+65])
              Pexp_constant PConst_string(" [Random.int64 bound] returns a random integer between 0 (inclusive)\n     and [bound] (exclusive).  [bound] must be greater than 0. ",(stdlib/random.mli[65,2973+0]..[66,3045+65]),None)
        ]
      core_type (stdlib/random.mli[64,2942+12]..[64,2942+30])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/random.mli[64,2942+12]..[64,2942+19])
          Ptyp_constr "Int64.t" (stdlib/random.mli[64,2942+12]..[64,2942+19])
          []
        core_type (stdlib/random.mli[64,2942+23]..[64,2942+30])
          Ptyp_constr "Int64.t" (stdlib/random.mli[64,2942+23]..[64,2942+30])
          []
      []
  signature_item (stdlib/random.mli[68,3112+0]..[68,3112+26])
    Psig_value
    value_description "float" (stdlib/random.mli[68,3112+4]..[68,3112+9]) (stdlib/random.mli[68,3112+0]..[68,3112+26])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/random.mli[69,3139+0]..[72,3319+22])
            Pstr_eval
            expression (stdlib/random.mli[69,3139+0]..[72,3319+22])
              Pexp_constant PConst_string(" [Random.float bound] returns a random floating-point number\n   between 0 and [bound] (inclusive).  If [bound] is\n   negative, the result is negative or zero.  If [bound] is 0,\n   the result is 0. ",(stdlib/random.mli[69,3139+0]..[72,3319+22]),None)
        ]
      core_type (stdlib/random.mli[68,3112+12]..[68,3112+26])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/random.mli[68,3112+12]..[68,3112+17])
          Ptyp_constr "float" (stdlib/random.mli[68,3112+12]..[68,3112+17])
          []
        core_type (stdlib/random.mli[68,3112+21]..[68,3112+26])
          Ptyp_constr "float" (stdlib/random.mli[68,3112+21]..[68,3112+26])
          []
      []
  signature_item (stdlib/random.mli[74,3343+0]..[74,3343+23])
    Psig_value
    value_description "bool" (stdlib/random.mli[74,3343+4]..[74,3343+8]) (stdlib/random.mli[74,3343+0]..[74,3343+23])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/random.mli[75,3367+0]..[75,3367+76])
            Pstr_eval
            expression (stdlib/random.mli[75,3367+0]..[75,3367+76])
              Pexp_constant PConst_string(" [Random.bool ()] returns [true] or [false] with probability 0.5 each. ",(stdlib/random.mli[75,3367+0]..[75,3367+76]),None)
        ]
      core_type (stdlib/random.mli[74,3343+11]..[74,3343+23])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/random.mli[74,3343+11]..[74,3343+15])
          Ptyp_constr "unit" (stdlib/random.mli[74,3343+11]..[74,3343+15])
          []
        core_type (stdlib/random.mli[74,3343+19]..[74,3343+23])
          Ptyp_constr "bool" (stdlib/random.mli[74,3343+19]..[74,3343+23])
          []
      []
  signature_item (stdlib/random.mli[77,3445+0]..[77,3445+28])
    Psig_value
    value_description "bits32" (stdlib/random.mli[77,3445+4]..[77,3445+10]) (stdlib/random.mli[77,3445+0]..[77,3445+28])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/random.mli[78,3474+0]..[80,3585+20])
            Pstr_eval
            expression (stdlib/random.mli[78,3474+0]..[80,3585+20])
              Pexp_constant PConst_string(" [Random.bits32 ()] returns 32 random bits as an integer between\n    {!Int32.min_int} and {!Int32.max_int}.\n    @since 4.14.0 ",(stdlib/random.mli[78,3474+0]..[80,3585+20]),None)
        ]
      core_type (stdlib/random.mli[77,3445+13]..[77,3445+28])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/random.mli[77,3445+13]..[77,3445+17])
          Ptyp_constr "unit" (stdlib/random.mli[77,3445+13]..[77,3445+17])
          []
        core_type (stdlib/random.mli[77,3445+21]..[77,3445+28])
          Ptyp_constr "Int32.t" (stdlib/random.mli[77,3445+21]..[77,3445+28])
          []
      []
  signature_item (stdlib/random.mli[82,3607+0]..[82,3607+28])
    Psig_value
    value_description "bits64" (stdlib/random.mli[82,3607+4]..[82,3607+10]) (stdlib/random.mli[82,3607+0]..[82,3607+28])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/random.mli[83,3636+0]..[85,3747+20])
            Pstr_eval
            expression (stdlib/random.mli[83,3636+0]..[85,3747+20])
              Pexp_constant PConst_string(" [Random.bits64 ()] returns 64 random bits as an integer between\n    {!Int64.min_int} and {!Int64.max_int}.\n    @since 4.14.0 ",(stdlib/random.mli[83,3636+0]..[85,3747+20]),None)
        ]
      core_type (stdlib/random.mli[82,3607+13]..[82,3607+28])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/random.mli[82,3607+13]..[82,3607+17])
          Ptyp_constr "unit" (stdlib/random.mli[82,3607+13]..[82,3607+17])
          []
        core_type (stdlib/random.mli[82,3607+21]..[82,3607+28])
          Ptyp_constr "Int64.t" (stdlib/random.mli[82,3607+21]..[82,3607+28])
          []
      []
  signature_item (stdlib/random.mli[87,3769+0]..[87,3769+36])
    Psig_value
    value_description "nativebits" (stdlib/random.mli[87,3769+4]..[87,3769+14]) (stdlib/random.mli[87,3769+0]..[87,3769+36])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/random.mli[88,3806+0]..[91,3984+20])
            Pstr_eval
            expression (stdlib/random.mli[88,3806+0]..[91,3984+20])
              Pexp_constant PConst_string(" [Random.nativebits ()] returns 32 or 64 random bits (depending on\n    the bit width of the platform) as an integer between\n    {!Nativeint.min_int} and {!Nativeint.max_int}.\n    @since 4.14.0 ",(stdlib/random.mli[88,3806+0]..[91,3984+20]),None)
        ]
      core_type (stdlib/random.mli[87,3769+17]..[87,3769+36])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/random.mli[87,3769+17]..[87,3769+21])
          Ptyp_constr "unit" (stdlib/random.mli[87,3769+17]..[87,3769+21])
          []
        core_type (stdlib/random.mli[87,3769+25]..[87,3769+36])
          Ptyp_constr "Nativeint.t" (stdlib/random.mli[87,3769+25]..[87,3769+36])
          []
      []
  signature_item (stdlib/random.mli[93,4006+0]..[93,4006+29])
    Psig_attribute "ocaml.text"
    [
      structure_item (stdlib/random.mli[93,4006+0]..[93,4006+29])
        Pstr_eval
        expression (stdlib/random.mli[93,4006+0]..[93,4006+29])
          Pexp_constant PConst_string(" {1 Advanced functions} ",(stdlib/random.mli[93,4006+0]..[93,4006+29]),None)
    ]
  signature_item (stdlib/random.mli[95,4037+0]..[100,4299+2])
    Psig_attribute "ocaml.text"
    [
      structure_item (stdlib/random.mli[95,4037+0]..[100,4299+2])
        Pstr_eval
        expression (stdlib/random.mli[95,4037+0]..[100,4299+2])
          Pexp_constant PConst_string(" The functions from module {!State} manipulate the current state\n    of the random generator explicitly.\n    This allows using one or several deterministic PRNGs,\n    even in a multi-threaded program, without interference from\n    other parts of the program.\n",(stdlib/random.mli[95,4037+0]..[100,4299+2]),None)
    ]
  signature_item (stdlib/random.mli[102,4303+0]..[130,5165+3])
    Psig_module "State" (stdlib/random.mli[102,4303+7]..[102,4303+12])
    module_type (stdlib/random.mli[102,4303+15]..[130,5165+3])
      Pmty_signature
      [
        signature_item (stdlib/random.mli[103,4322+2]..[103,4322+8])
          Psig_type Rec
          [
            type_declaration "t" (stdlib/random.mli[103,4322+7]..[103,4322+8]) (stdlib/random.mli[103,4322+2]..[103,4322+8])
              attribute "ocaml.doc"
                [
                  structure_item (stdlib/random.mli[104,4331+2]..[104,4331+33])
                    Pstr_eval
                    expression (stdlib/random.mli[104,4331+2]..[104,4331+33])
                      Pexp_constant PConst_string(" The type of PRNG states. ",(stdlib/random.mli[104,4331+2]..[104,4331+33]),None)
                ]
              ptype_params =
                []
              ptype_cstrs =
                []
              ptype_kind =
                Ptype_abstract
              ptype_private = Public
              ptype_manifest =
                None
          ]
        signature_item (stdlib/random.mli[106,4366+2]..[106,4366+27])
          Psig_value
          value_description "make" (stdlib/random.mli[106,4366+6]..[106,4366+10]) (stdlib/random.mli[106,4366+2]..[106,4366+27])
            attribute "ocaml.doc"
              [
                structure_item (stdlib/random.mli[107,4394+2]..[107,4394+66])
                  Pstr_eval
                  expression (stdlib/random.mli[107,4394+2]..[107,4394+66])
                    Pexp_constant PConst_string(" Create a new state and initialize it with the given seed. ",(stdlib/random.mli[107,4394+2]..[107,4394+66]),None)
              ]
            core_type (stdlib/random.mli[106,4366+13]..[106,4366+27])
              Ptyp_arrow
              Nolabel
              core_type (stdlib/random.mli[106,4366+13]..[106,4366+22])
                Ptyp_constr "array" (stdlib/random.mli[106,4366+17]..[106,4366+22])
                [
                  core_type (stdlib/random.mli[106,4366+13]..[106,4366+16])
                    Ptyp_constr "int" (stdlib/random.mli[106,4366+13]..[106,4366+16])
                    []
                ]
              core_type (stdlib/random.mli[106,4366+26]..[106,4366+27])
                Ptyp_constr "t" (stdlib/random.mli[106,4366+26]..[106,4366+27])
                []
            []
        signature_item (stdlib/random.mli[109,4462+2]..[109,4462+32])
          Psig_value
          value_description "make_self_init" (stdlib/random.mli[109,4462+6]..[109,4462+20]) (stdlib/random.mli[109,4462+2]..[109,4462+32])
            attribute "ocaml.doc"
              [
                structure_item (stdlib/random.mli[110,4495+2]..[111,4562+26])
                  Pstr_eval
                  expression (stdlib/random.mli[110,4495+2]..[111,4562+26])
                    Pexp_constant PConst_string(" Create a new state and initialize it with a system-dependent\n      low-entropy seed. ",(stdlib/random.mli[110,4495+2]..[111,4562+26]),None)
              ]
            core_type (stdlib/random.mli[109,4462+23]..[109,4462+32])
              Ptyp_arrow
              Nolabel
              core_type (stdlib/random.mli[109,4462+23]..[109,4462+27])
                Ptyp_constr "unit" (stdlib/random.mli[109,4462+23]..[109,4462+27])
                []
              core_type (stdlib/random.mli[109,4462+31]..[109,4462+32])
                Ptyp_constr "t" (stdlib/random.mli[109,4462+31]..[109,4462+32])
                []
            []
        signature_item (stdlib/random.mli[113,4590+2]..[113,4590+19])
          Psig_value
          value_description "copy" (stdlib/random.mli[113,4590+6]..[113,4590+10]) (stdlib/random.mli[113,4590+2]..[113,4590+19])
            attribute "ocaml.doc"
              [
                structure_item (stdlib/random.mli[114,4610+2]..[114,4610+42])
                  Pstr_eval
                  expression (stdlib/random.mli[114,4610+2]..[114,4610+42])
                    Pexp_constant PConst_string(" Return a copy of the given state. ",(stdlib/random.mli[114,4610+2]..[114,4610+42]),None)
              ]
            core_type (stdlib/random.mli[113,4590+13]..[113,4590+19])
              Ptyp_arrow
              Nolabel
              core_type (stdlib/random.mli[113,4590+13]..[113,4590+14])
                Ptyp_constr "t" (stdlib/random.mli[113,4590+13]..[113,4590+14])
                []
              core_type (stdlib/random.mli[113,4590+18]..[113,4590+19])
                Ptyp_constr "t" (stdlib/random.mli[113,4590+18]..[113,4590+19])
                []
            []
        signature_item (stdlib/random.mli[116,4654+2]..[116,4654+21])
          Psig_value
          value_description "bits" (stdlib/random.mli[116,4654+6]..[116,4654+10]) (stdlib/random.mli[116,4654+2]..[116,4654+21])
            core_type (stdlib/random.mli[116,4654+13]..[116,4654+21])
              Ptyp_arrow
              Nolabel
              core_type (stdlib/random.mli[116,4654+13]..[116,4654+14])
                Ptyp_constr "t" (stdlib/random.mli[116,4654+13]..[116,4654+14])
                []
              core_type (stdlib/random.mli[116,4654+18]..[116,4654+21])
                Ptyp_constr "int" (stdlib/random.mli[116,4654+18]..[116,4654+21])
                []
            []
        signature_item (stdlib/random.mli[117,4676+2]..[117,4676+27])
          Psig_value
          value_description "int" (stdlib/random.mli[117,4676+6]..[117,4676+9]) (stdlib/random.mli[117,4676+2]..[117,4676+27])
            core_type (stdlib/random.mli[117,4676+12]..[117,4676+27])
              Ptyp_arrow
              Nolabel
              core_type (stdlib/random.mli[117,4676+12]..[117,4676+13])
                Ptyp_constr "t" (stdlib/random.mli[117,4676+12]..[117,4676+13])
                []
              core_type (stdlib/random.mli[117,4676+17]..[117,4676+27])
                Ptyp_arrow
                Nolabel
                core_type (stdlib/random.mli[117,4676+17]..[117,4676+20])
                  Ptyp_constr "int" (stdlib/random.mli[117,4676+17]..[117,4676+20])
                  []
                core_type (stdlib/random.mli[117,4676+24]..[117,4676+27])
                  Ptyp_constr "int" (stdlib/random.mli[117,4676+24]..[117,4676+27])
                  []
            []
        signature_item (stdlib/random.mli[118,4704+2]..[118,4704+32])
          Psig_value
          value_description "full_int" (stdlib/random.mli[118,4704+6]..[118,4704+14]) (stdlib/random.mli[118,4704+2]..[118,4704+32])
            core_type (stdlib/random.mli[118,4704+17]..[118,4704+32])
              Ptyp_arrow
              Nolabel
              core_type (stdlib/random.mli[118,4704+17]..[118,4704+18])
                Ptyp_constr "t" (stdlib/random.mli[118,4704+17]..[118,4704+18])
                []
              core_type (stdlib/random.mli[118,4704+22]..[118,4704+32])
                Ptyp_arrow
                Nolabel
                core_type (stdlib/random.mli[118,4704+22]..[118,4704+25])
                  Ptyp_constr "int" (stdlib/random.mli[118,4704+22]..[118,4704+25])
                  []
                core_type (stdlib/random.mli[118,4704+29]..[118,4704+32])
                  Ptyp_constr "int" (stdlib/random.mli[118,4704+29]..[118,4704+32])
                  []
            []
        signature_item (stdlib/random.mli[119,4737+2]..[119,4737+37])
          Psig_value
          value_description "int32" (stdlib/random.mli[119,4737+6]..[119,4737+11]) (stdlib/random.mli[119,4737+2]..[119,4737+37])
            core_type (stdlib/random.mli[119,4737+14]..[119,4737+37])
              Ptyp_arrow
              Nolabel
              core_type (stdlib/random.mli[119,4737+14]..[119,4737+15])
                Ptyp_constr "t" (stdlib/random.mli[119,4737+14]..[119,4737+15])
                []
              core_type (stdlib/random.mli[119,4737+19]..[119,4737+37])
                Ptyp_arrow
                Nolabel
                core_type (stdlib/random.mli[119,4737+19]..[119,4737+26])
                  Ptyp_constr "Int32.t" (stdlib/random.mli[119,4737+19]..[119,4737+26])
                  []
                core_type (stdlib/random.mli[119,4737+30]..[119,4737+37])
                  Ptyp_constr "Int32.t" (stdlib/random.mli[119,4737+30]..[119,4737+37])
                  []
            []
        signature_item (stdlib/random.mli[120,4775+2]..[120,4775+49])
          Psig_value
          value_description "nativeint" (stdlib/random.mli[120,4775+6]..[120,4775+15]) (stdlib/random.mli[120,4775+2]..[120,4775+49])
            core_type (stdlib/random.mli[120,4775+18]..[120,4775+49])
              Ptyp_arrow
              Nolabel
              core_type (stdlib/random.mli[120,4775+18]..[120,4775+19])
                Ptyp_constr "t" (stdlib/random.mli[120,4775+18]..[120,4775+19])
                []
              core_type (stdlib/random.mli[120,4775+23]..[120,4775+49])
                Ptyp_arrow
                Nolabel
                core_type (stdlib/random.mli[120,4775+23]..[120,4775+34])
                  Ptyp_constr "Nativeint.t" (stdlib/random.mli[120,4775+23]..[120,4775+34])
                  []
                core_type (stdlib/random.mli[120,4775+38]..[120,4775+49])
                  Ptyp_constr "Nativeint.t" (stdlib/random.mli[120,4775+38]..[120,4775+49])
                  []
            []
        signature_item (stdlib/random.mli[121,4825+2]..[121,4825+37])
          Psig_value
          value_description "int64" (stdlib/random.mli[121,4825+6]..[121,4825+11]) (stdlib/random.mli[121,4825+2]..[121,4825+37])
            core_type (stdlib/random.mli[121,4825+14]..[121,4825+37])
              Ptyp_arrow
              Nolabel
              core_type (stdlib/random.mli[121,4825+14]..[121,4825+15])
                Ptyp_constr "t" (stdlib/random.mli[121,4825+14]..[121,4825+15])
                []
              core_type (stdlib/random.mli[121,4825+19]..[121,4825+37])
                Ptyp_arrow
                Nolabel
                core_type (stdlib/random.mli[121,4825+19]..[121,4825+26])
                  Ptyp_constr "Int64.t" (stdlib/random.mli[121,4825+19]..[121,4825+26])
                  []
                core_type (stdlib/random.mli[121,4825+30]..[121,4825+37])
                  Ptyp_constr "Int64.t" (stdlib/random.mli[121,4825+30]..[121,4825+37])
                  []
            []
        signature_item (stdlib/random.mli[122,4863+2]..[122,4863+33])
          Psig_value
          value_description "float" (stdlib/random.mli[122,4863+6]..[122,4863+11]) (stdlib/random.mli[122,4863+2]..[122,4863+33])
            core_type (stdlib/random.mli[122,4863+14]..[122,4863+33])
              Ptyp_arrow
              Nolabel
              core_type (stdlib/random.mli[122,4863+14]..[122,4863+15])
                Ptyp_constr "t" (stdlib/random.mli[122,4863+14]..[122,4863+15])
                []
              core_type (stdlib/random.mli[122,4863+19]..[122,4863+33])
                Ptyp_arrow
                Nolabel
                core_type (stdlib/random.mli[122,4863+19]..[122,4863+24])
                  Ptyp_constr "float" (stdlib/random.mli[122,4863+19]..[122,4863+24])
                  []
                core_type (stdlib/random.mli[122,4863+28]..[122,4863+33])
                  Ptyp_constr "float" (stdlib/random.mli[122,4863+28]..[122,4863+33])
                  []
            []
        signature_item (stdlib/random.mli[123,4897+2]..[123,4897+22])
          Psig_value
          value_description "bool" (stdlib/random.mli[123,4897+6]..[123,4897+10]) (stdlib/random.mli[123,4897+2]..[123,4897+22])
            core_type (stdlib/random.mli[123,4897+13]..[123,4897+22])
              Ptyp_arrow
              Nolabel
              core_type (stdlib/random.mli[123,4897+13]..[123,4897+14])
                Ptyp_constr "t" (stdlib/random.mli[123,4897+13]..[123,4897+14])
                []
              core_type (stdlib/random.mli[123,4897+18]..[123,4897+22])
                Ptyp_constr "bool" (stdlib/random.mli[123,4897+18]..[123,4897+22])
                []
            []
        signature_item (stdlib/random.mli[124,4920+2]..[124,4920+27])
          Psig_value
          value_description "bits32" (stdlib/random.mli[124,4920+6]..[124,4920+12]) (stdlib/random.mli[124,4920+2]..[124,4920+27])
            core_type (stdlib/random.mli[124,4920+15]..[124,4920+27])
              Ptyp_arrow
              Nolabel
              core_type (stdlib/random.mli[124,4920+15]..[124,4920+16])
                Ptyp_constr "t" (stdlib/random.mli[124,4920+15]..[124,4920+16])
                []
              core_type (stdlib/random.mli[124,4920+20]..[124,4920+27])
                Ptyp_constr "Int32.t" (stdlib/random.mli[124,4920+20]..[124,4920+27])
                []
            []
        signature_item (stdlib/random.mli[125,4948+2]..[125,4948+27])
          Psig_value
          value_description "bits64" (stdlib/random.mli[125,4948+6]..[125,4948+12]) (stdlib/random.mli[125,4948+2]..[125,4948+27])
            core_type (stdlib/random.mli[125,4948+15]..[125,4948+27])
              Ptyp_arrow
              Nolabel
              core_type (stdlib/random.mli[125,4948+15]..[125,4948+16])
                Ptyp_constr "t" (stdlib/random.mli[125,4948+15]..[125,4948+16])
                []
              core_type (stdlib/random.mli[125,4948+20]..[125,4948+27])
                Ptyp_constr "Int64.t" (stdlib/random.mli[125,4948+20]..[125,4948+27])
                []
            []
        signature_item (stdlib/random.mli[126,4976+2]..[126,4976+35])
          Psig_value
          value_description "nativebits" (stdlib/random.mli[126,4976+6]..[126,4976+16]) (stdlib/random.mli[126,4976+2]..[126,4976+35])
            attribute "ocaml.doc"
              [
                structure_item (stdlib/random.mli[127,5012+2]..[129,5160+4])
                  Pstr_eval
                  expression (stdlib/random.mli[127,5012+2]..[129,5160+4])
                    Pexp_constant PConst_string(" These functions are the same as the basic functions, except that they\n      use (and update) the given PRNG state instead of the default one.\n  ",(stdlib/random.mli[127,5012+2]..[129,5160+4]),None)
              ]
            core_type (stdlib/random.mli[126,4976+19]..[126,4976+35])
              Ptyp_arrow
              Nolabel
              core_type (stdlib/random.mli[126,4976+19]..[126,4976+20])
                Ptyp_constr "t" (stdlib/random.mli[126,4976+19]..[126,4976+20])
                []
              core_type (stdlib/random.mli[126,4976+24]..[126,4976+35])
                Ptyp_constr "Nativeint.t" (stdlib/random.mli[126,4976+24]..[126,4976+35])
                []
            []
      ]
  signature_item (stdlib/random.mli[133,5171+0]..[133,5171+31])
    Psig_value
    value_description "get_state" (stdlib/random.mli[133,5171+4]..[133,5171+13]) (stdlib/random.mli[133,5171+0]..[133,5171+31])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/random.mli[134,5203+0]..[134,5203+77])
            Pstr_eval
            expression (stdlib/random.mli[134,5203+0]..[134,5203+77])
              Pexp_constant PConst_string(" Return the current state of the generator used by the basic functions. ",(stdlib/random.mli[134,5203+0]..[134,5203+77]),None)
        ]
      core_type (stdlib/random.mli[133,5171+16]..[133,5171+31])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/random.mli[133,5171+16]..[133,5171+20])
          Ptyp_constr "unit" (stdlib/random.mli[133,5171+16]..[133,5171+20])
          []
        core_type (stdlib/random.mli[133,5171+24]..[133,5171+31])
          Ptyp_constr "State.t" (stdlib/random.mli[133,5171+24]..[133,5171+31])
          []
      []
  signature_item (stdlib/random.mli[136,5282+0]..[136,5282+31])
    Psig_value
    value_description "set_state" (stdlib/random.mli[136,5282+4]..[136,5282+13]) (stdlib/random.mli[136,5282+0]..[136,5282+31])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/random.mli[137,5314+0]..[137,5314+66])
            Pstr_eval
            expression (stdlib/random.mli[137,5314+0]..[137,5314+66])
              Pexp_constant PConst_string(" Set the state of the generator used by the basic functions. ",(stdlib/random.mli[137,5314+0]..[137,5314+66]),None)
        ]
      core_type (stdlib/random.mli[136,5282+16]..[136,5282+31])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/random.mli[136,5282+16]..[136,5282+23])
          Ptyp_constr "State.t" (stdlib/random.mli[136,5282+16]..[136,5282+23])
          []
        core_type (stdlib/random.mli[136,5282+27]..[136,5282+31])
          Ptyp_constr "unit" (stdlib/random.mli[136,5282+27]..[136,5282+31])
          []
      []
]

