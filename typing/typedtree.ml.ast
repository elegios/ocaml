[
  structure_item (typing/typedtree.ml[18,1120+0]..[18,1120+13])
    Pstr_open Fresh
    module_expr (typing/typedtree.ml[18,1120+5]..[18,1120+13])
      Pmod_ident "Asttypes" (typing/typedtree.ml[18,1120+5]..[18,1120+13])
  structure_item (typing/typedtree.ml[19,1134+0]..[19,1134+10])
    Pstr_open Fresh
    module_expr (typing/typedtree.ml[19,1134+5]..[19,1134+10])
      Pmod_ident "Types" (typing/typedtree.ml[19,1134+5]..[19,1134+10])
  structure_item (typing/typedtree.ml[23,1193+0]..[23,1193+30])
    Pstr_type Rec
    [
      type_declaration "partial" (typing/typedtree.ml[23,1193+5]..[23,1193+12]) (typing/typedtree.ml[23,1193+0]..[23,1193+30])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (typing/typedtree.ml[23,1193+15]..[23,1193+22])
                "Partial" (typing/typedtree.ml[23,1193+15]..[23,1193+22])
                []
                None
              (typing/typedtree.ml[23,1193+23]..[23,1193+30])
                "Total" (typing/typedtree.ml[23,1193+25]..[23,1193+30])
                []
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (typing/typedtree.ml[25,1225+0]..[25,1225+36])
    Pstr_type Rec
    [
      type_declaration "attribute" (typing/typedtree.ml[25,1225+5]..[25,1225+14]) (typing/typedtree.ml[25,1225+0]..[25,1225+36])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (typing/typedtree.ml[25,1225+17]..[25,1225+36])
              Ptyp_constr "Parsetree.attribute" (typing/typedtree.ml[25,1225+17]..[25,1225+36])
              []
    ]
  structure_item (typing/typedtree.ml[26,1262+0]..[26,1262+32])
    Pstr_type Rec
    [
      type_declaration "attributes" (typing/typedtree.ml[26,1262+5]..[26,1262+15]) (typing/typedtree.ml[26,1262+0]..[26,1262+32])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (typing/typedtree.ml[26,1262+18]..[26,1262+32])
              Ptyp_constr "list" (typing/typedtree.ml[26,1262+28]..[26,1262+32])
              [
                core_type (typing/typedtree.ml[26,1262+18]..[26,1262+27])
                  Ptyp_constr "attribute" (typing/typedtree.ml[26,1262+18]..[26,1262+27])
                  []
              ]
    ]
  structure_item (typing/typedtree.ml[28,1296+0]..[28,1296+26])
    Pstr_type Rec
    [
      type_declaration "value" (typing/typedtree.ml[28,1296+5]..[28,1296+10]) (typing/typedtree.ml[28,1296+0]..[28,1296+26])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (typing/typedtree.ml[28,1296+13]..[28,1296+26])
                "Value_pattern" (typing/typedtree.ml[28,1296+13]..[28,1296+26])
                []
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (typing/typedtree.ml[29,1323+0]..[29,1323+38])
    Pstr_type Rec
    [
      type_declaration "computation" (typing/typedtree.ml[29,1323+5]..[29,1323+16]) (typing/typedtree.ml[29,1323+0]..[29,1323+38])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (typing/typedtree.ml[29,1323+19]..[29,1323+38])
                "Computation_pattern" (typing/typedtree.ml[29,1323+19]..[29,1323+38])
                []
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (typing/typedtree.ml[31,1363+0]..[33,1422+44])
    Pstr_type Rec
    [
      type_declaration "pattern_category" (typing/typedtree.ml[31,1363+7]..[31,1363+23]) (typing/typedtree.ml[31,1363+0]..[33,1422+44])
        ptype_params =
          [
            core_type (typing/typedtree.ml[31,1363+5]..[31,1363+6])
              Ptyp_any
          ]
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (typing/typedtree.ml[32,1389+0]..[32,1389+32])
                "Value" (typing/typedtree.ml[32,1389+2]..[32,1389+7])
                []
                Some
                  core_type (typing/typedtree.ml[32,1389+10]..[32,1389+32])
                    Ptyp_constr "pattern_category" (typing/typedtree.ml[32,1389+16]..[32,1389+32])
                    [
                      core_type (typing/typedtree.ml[32,1389+10]..[32,1389+15])
                        Ptyp_constr "value" (typing/typedtree.ml[32,1389+10]..[32,1389+15])
                        []
                    ]
              (typing/typedtree.ml[33,1422+0]..[33,1422+44])
                "Computation" (typing/typedtree.ml[33,1422+2]..[33,1422+13])
                []
                Some
                  core_type (typing/typedtree.ml[33,1422+16]..[33,1422+44])
                    Ptyp_constr "pattern_category" (typing/typedtree.ml[33,1422+28]..[33,1422+44])
                    [
                      core_type (typing/typedtree.ml[33,1422+16]..[33,1422+27])
                        Ptyp_constr "computation" (typing/typedtree.ml[33,1422+16]..[33,1422+27])
                        []
                    ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (typing/typedtree.ml[35,1468+0]..[621,18210+4])
    Pstr_type Rec
    [
      type_declaration "pattern" (typing/typedtree.ml[35,1468+5]..[35,1468+12]) (typing/typedtree.ml[35,1468+0]..[35,1468+36])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (typing/typedtree.ml[35,1468+15]..[35,1468+36])
              Ptyp_constr "general_pattern" (typing/typedtree.ml[35,1468+21]..[35,1468+36])
              [
                core_type (typing/typedtree.ml[35,1468+15]..[35,1468+20])
                  Ptyp_constr "value" (typing/typedtree.ml[35,1468+15]..[35,1468+20])
                  []
              ]
      type_declaration "general_pattern" (typing/typedtree.ml[36,1505+7]..[36,1505+22]) (typing/typedtree.ml[36,1505+0]..[36,1505+53])
        ptype_params =
          [
            core_type (typing/typedtree.ml[36,1505+4]..[36,1505+6])
              Ptyp_var k
          ]
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (typing/typedtree.ml[36,1505+25]..[36,1505+53])
              Ptyp_constr "pattern_data" (typing/typedtree.ml[36,1505+41]..[36,1505+53])
              [
                core_type (typing/typedtree.ml[36,1505+25]..[36,1505+40])
                  Ptyp_constr "pattern_desc" (typing/typedtree.ml[36,1505+28]..[36,1505+40])
                  [
                    core_type (typing/typedtree.ml[36,1505+25]..[36,1505+27])
                      Ptyp_var k
                  ]
              ]
      type_declaration "pattern_data" (typing/typedtree.ml[38,1560+7]..[38,1560+19]) (typing/typedtree.ml[38,1560+0]..[45,1770+4])
        ptype_params =
          [
            core_type (typing/typedtree.ml[38,1560+4]..[38,1560+6])
              Ptyp_var a
          ]
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (typing/typedtree.ml[39,1582+4]..[39,1582+17])
                Immutable
                "pat_desc" (typing/typedtree.ml[39,1582+4]..[39,1582+12])                core_type (typing/typedtree.ml[39,1582+14]..[39,1582+16])
                  Ptyp_var a
              (typing/typedtree.ml[40,1600+4]..[40,1600+24])
                Immutable
                "pat_loc" (typing/typedtree.ml[40,1600+4]..[40,1600+11])                core_type (typing/typedtree.ml[40,1600+13]..[40,1600+23])
                  Ptyp_constr "Location.t" (typing/typedtree.ml[40,1600+13]..[40,1600+23])
                  []
              (typing/typedtree.ml[41,1625+4]..[41,1625+63])
                Immutable
                "pat_extra" (typing/typedtree.ml[41,1625+4]..[41,1625+13])                core_type (typing/typedtree.ml[41,1625+16]..[41,1625+62])
                  Ptyp_constr "list" (typing/typedtree.ml[41,1625+58]..[41,1625+62])
                  [
                    core_type (typing/typedtree.ml[41,1625+17]..[41,1625+56])
                      Ptyp_tuple
                      [
                        core_type (typing/typedtree.ml[41,1625+17]..[41,1625+26])
                          Ptyp_constr "pat_extra" (typing/typedtree.ml[41,1625+17]..[41,1625+26])
                          []
                        core_type (typing/typedtree.ml[41,1625+29]..[41,1625+39])
                          Ptyp_constr "Location.t" (typing/typedtree.ml[41,1625+29]..[41,1625+39])
                          []
                        core_type (typing/typedtree.ml[41,1625+42]..[41,1625+56])
                          Ptyp_constr "list" (typing/typedtree.ml[41,1625+52]..[41,1625+56])
                          [
                            core_type (typing/typedtree.ml[41,1625+42]..[41,1625+51])
                              Ptyp_constr "attribute" (typing/typedtree.ml[41,1625+42]..[41,1625+51])
                              []
                          ]
                      ]
                  ]
              (typing/typedtree.ml[42,1689+4]..[42,1689+24])
                Immutable
                "pat_type" (typing/typedtree.ml[42,1689+4]..[42,1689+12])                core_type (typing/typedtree.ml[42,1689+14]..[42,1689+23])
                  Ptyp_constr "type_expr" (typing/typedtree.ml[42,1689+14]..[42,1689+23])
                  []
              (typing/typedtree.ml[43,1714+4]..[43,1714+19])
                Immutable
                "pat_env" (typing/typedtree.ml[43,1714+4]..[43,1714+11])                core_type (typing/typedtree.ml[43,1714+13]..[43,1714+18])
                  Ptyp_constr "Env.t" (typing/typedtree.ml[43,1714+13]..[43,1714+18])
                  []
              (typing/typedtree.ml[44,1734+4]..[44,1734+35])
                Immutable
                "pat_attributes" (typing/typedtree.ml[44,1734+4]..[44,1734+18])                core_type (typing/typedtree.ml[44,1734+20]..[44,1734+34])
                  Ptyp_constr "list" (typing/typedtree.ml[44,1734+30]..[44,1734+34])
                  [
                    core_type (typing/typedtree.ml[44,1734+20]..[44,1734+29])
                      Ptyp_constr "attribute" (typing/typedtree.ml[44,1734+20]..[44,1734+29])
                      []
                  ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "pat_extra" (typing/typedtree.ml[47,1776+4]..[47,1776+13]) (typing/typedtree.ml[47,1776+0]..[51,1917+15])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (typing/typedtree.ml[48,1792+2]..[48,1792+32])
                "Tpat_constraint" (typing/typedtree.ml[48,1792+4]..[48,1792+19])
                [
                  core_type (typing/typedtree.ml[48,1792+23]..[48,1792+32])
                    Ptyp_constr "core_type" (typing/typedtree.ml[48,1792+23]..[48,1792+32])
                    []
                ]
                None
              (typing/typedtree.ml[49,1825+2]..[49,1825+41])
                "Tpat_type" (typing/typedtree.ml[49,1825+4]..[49,1825+13])
                [
                  core_type (typing/typedtree.ml[49,1825+17]..[49,1825+23])
                    Ptyp_constr "Path.t" (typing/typedtree.ml[49,1825+17]..[49,1825+23])
                    []
                  core_type (typing/typedtree.ml[49,1825+26]..[49,1825+41])
                    Ptyp_constr "loc" (typing/typedtree.ml[49,1825+38]..[49,1825+41])
                    [
                      core_type (typing/typedtree.ml[49,1825+26]..[49,1825+37])
                        Ptyp_constr "Longident.t" (typing/typedtree.ml[49,1825+26]..[49,1825+37])
                        []
                    ]
                ]
                None
              (typing/typedtree.ml[50,1867+2]..[50,1867+49])
                "Tpat_open" (typing/typedtree.ml[50,1867+4]..[50,1867+13])
                [
                  core_type (typing/typedtree.ml[50,1867+17]..[50,1867+23])
                    Ptyp_constr "Path.t" (typing/typedtree.ml[50,1867+17]..[50,1867+23])
                    []
                  core_type (typing/typedtree.ml[50,1867+26]..[50,1867+41])
                    Ptyp_constr "loc" (typing/typedtree.ml[50,1867+38]..[50,1867+41])
                    [
                      core_type (typing/typedtree.ml[50,1867+26]..[50,1867+37])
                        Ptyp_constr "Longident.t" (typing/typedtree.ml[50,1867+26]..[50,1867+37])
                        []
                    ]
                  core_type (typing/typedtree.ml[50,1867+44]..[50,1867+49])
                    Ptyp_constr "Env.t" (typing/typedtree.ml[50,1867+44]..[50,1867+49])
                    []
                ]
                None
              (typing/typedtree.ml[51,1917+2]..[51,1917+15])
                "Tpat_unpack" (typing/typedtree.ml[51,1917+4]..[51,1917+15])
                []
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "pattern_desc" (typing/typedtree.ml[53,1934+7]..[53,1934+19]) (typing/typedtree.ml[53,1934+0]..[80,3098+21])
        ptype_params =
          [
            core_type (typing/typedtree.ml[53,1934+4]..[53,1934+6])
              Ptyp_var k
          ]
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (typing/typedtree.ml[55,1979+2]..[55,1979+33])
                "Tpat_any" (typing/typedtree.ml[55,1979+4]..[55,1979+12])
                []
                Some
                  core_type (typing/typedtree.ml[55,1979+15]..[55,1979+33])
                    Ptyp_constr "pattern_desc" (typing/typedtree.ml[55,1979+21]..[55,1979+33])
                    [
                      core_type (typing/typedtree.ml[55,1979+15]..[55,1979+20])
                        Ptyp_constr "value" (typing/typedtree.ml[55,1979+15]..[55,1979+20])
                        []
                    ]
              (typing/typedtree.ml[56,2013+2]..[56,2013+57])
                "Tpat_var" (typing/typedtree.ml[56,2013+4]..[56,2013+12])
                [
                  core_type (typing/typedtree.ml[56,2013+15]..[56,2013+22])
                    Ptyp_constr "Ident.t" (typing/typedtree.ml[56,2013+15]..[56,2013+22])
                    []
                  core_type (typing/typedtree.ml[56,2013+25]..[56,2013+35])
                    Ptyp_constr "loc" (typing/typedtree.ml[56,2013+32]..[56,2013+35])
                    [
                      core_type (typing/typedtree.ml[56,2013+25]..[56,2013+31])
                        Ptyp_constr "string" (typing/typedtree.ml[56,2013+25]..[56,2013+31])
                        []
                    ]
                ]
                Some
                  core_type (typing/typedtree.ml[56,2013+39]..[56,2013+57])
                    Ptyp_constr "pattern_desc" (typing/typedtree.ml[56,2013+45]..[56,2013+57])
                    [
                      core_type (typing/typedtree.ml[56,2013+39]..[56,2013+44])
                        Ptyp_constr "value" (typing/typedtree.ml[56,2013+39]..[56,2013+44])
                        []
                    ]
              (typing/typedtree.ml[57,2071+2]..[58,2088+72])
                "Tpat_alias" (typing/typedtree.ml[57,2071+4]..[57,2071+14])
                [
                  core_type (typing/typedtree.ml[58,2088+6]..[58,2088+27])
                    Ptyp_constr "general_pattern" (typing/typedtree.ml[58,2088+12]..[58,2088+27])
                    [
                      core_type (typing/typedtree.ml[58,2088+6]..[58,2088+11])
                        Ptyp_constr "value" (typing/typedtree.ml[58,2088+6]..[58,2088+11])
                        []
                    ]
                  core_type (typing/typedtree.ml[58,2088+30]..[58,2088+37])
                    Ptyp_constr "Ident.t" (typing/typedtree.ml[58,2088+30]..[58,2088+37])
                    []
                  core_type (typing/typedtree.ml[58,2088+40]..[58,2088+50])
                    Ptyp_constr "loc" (typing/typedtree.ml[58,2088+47]..[58,2088+50])
                    [
                      core_type (typing/typedtree.ml[58,2088+40]..[58,2088+46])
                        Ptyp_constr "string" (typing/typedtree.ml[58,2088+40]..[58,2088+46])
                        []
                    ]
                ]
                Some
                  core_type (typing/typedtree.ml[58,2088+54]..[58,2088+72])
                    Ptyp_constr "pattern_desc" (typing/typedtree.ml[58,2088+60]..[58,2088+72])
                    [
                      core_type (typing/typedtree.ml[58,2088+54]..[58,2088+59])
                        Ptyp_constr "value" (typing/typedtree.ml[58,2088+54]..[58,2088+59])
                        []
                    ]
              (typing/typedtree.ml[59,2161+2]..[59,2161+50])
                "Tpat_constant" (typing/typedtree.ml[59,2161+4]..[59,2161+17])
                [
                  core_type (typing/typedtree.ml[59,2161+20]..[59,2161+28])
                    Ptyp_constr "constant" (typing/typedtree.ml[59,2161+20]..[59,2161+28])
                    []
                ]
                Some
                  core_type (typing/typedtree.ml[59,2161+32]..[59,2161+50])
                    Ptyp_constr "pattern_desc" (typing/typedtree.ml[59,2161+38]..[59,2161+50])
                    [
                      core_type (typing/typedtree.ml[59,2161+32]..[59,2161+37])
                        Ptyp_constr "value" (typing/typedtree.ml[59,2161+32]..[59,2161+37])
                        []
                    ]
              (typing/typedtree.ml[60,2212+2]..[60,2212+65])
                "Tpat_tuple" (typing/typedtree.ml[60,2212+4]..[60,2212+14])
                [
                  core_type (typing/typedtree.ml[60,2212+17]..[60,2212+43])
                    Ptyp_constr "list" (typing/typedtree.ml[60,2212+39]..[60,2212+43])
                    [
                      core_type (typing/typedtree.ml[60,2212+17]..[60,2212+38])
                        Ptyp_constr "general_pattern" (typing/typedtree.ml[60,2212+23]..[60,2212+38])
                        [
                          core_type (typing/typedtree.ml[60,2212+17]..[60,2212+22])
                            Ptyp_constr "value" (typing/typedtree.ml[60,2212+17]..[60,2212+22])
                            []
                        ]
                    ]
                ]
                Some
                  core_type (typing/typedtree.ml[60,2212+47]..[60,2212+65])
                    Ptyp_constr "pattern_desc" (typing/typedtree.ml[60,2212+53]..[60,2212+65])
                    [
                      core_type (typing/typedtree.ml[60,2212+47]..[60,2212+52])
                        Ptyp_constr "value" (typing/typedtree.ml[60,2212+47]..[60,2212+52])
                        []
                    ]
              (typing/typedtree.ml[61,2278+2]..[64,2425+24])
                "Tpat_construct" (typing/typedtree.ml[61,2278+4]..[61,2278+18])
                [
                  core_type (typing/typedtree.ml[62,2299+6]..[62,2299+21])
                    Ptyp_constr "loc" (typing/typedtree.ml[62,2299+18]..[62,2299+21])
                    [
                      core_type (typing/typedtree.ml[62,2299+6]..[62,2299+17])
                        Ptyp_constr "Longident.t" (typing/typedtree.ml[62,2299+6]..[62,2299+17])
                        []
                    ]
                  core_type (typing/typedtree.ml[62,2299+24]..[62,2299+47])
                    Ptyp_constr "constructor_description" (typing/typedtree.ml[62,2299+24]..[62,2299+47])
                    []
                  core_type (typing/typedtree.ml[62,2299+50]..[62,2299+76])
                    Ptyp_constr "list" (typing/typedtree.ml[62,2299+72]..[62,2299+76])
                    [
                      core_type (typing/typedtree.ml[62,2299+50]..[62,2299+71])
                        Ptyp_constr "general_pattern" (typing/typedtree.ml[62,2299+56]..[62,2299+71])
                        [
                          core_type (typing/typedtree.ml[62,2299+50]..[62,2299+55])
                            Ptyp_constr "value" (typing/typedtree.ml[62,2299+50]..[62,2299+55])
                            []
                        ]
                    ]
                  core_type (typing/typedtree.ml[63,2376+8]..[63,2376+45])
                    Ptyp_constr "option" (typing/typedtree.ml[63,2376+39]..[63,2376+45])
                    [
                      core_type (typing/typedtree.ml[63,2376+9]..[63,2376+37])
                        Ptyp_tuple
                        [
                          core_type (typing/typedtree.ml[63,2376+9]..[63,2376+25])
                            Ptyp_constr "list" (typing/typedtree.ml[63,2376+21]..[63,2376+25])
                            [
                              core_type (typing/typedtree.ml[63,2376+9]..[63,2376+20])
                                Ptyp_constr "loc" (typing/typedtree.ml[63,2376+17]..[63,2376+20])
                                [
                                  core_type (typing/typedtree.ml[63,2376+9]..[63,2376+16])
                                    Ptyp_constr "Ident.t" (typing/typedtree.ml[63,2376+9]..[63,2376+16])
                                    []
                                ]
                            ]
                          core_type (typing/typedtree.ml[63,2376+28]..[63,2376+37])
                            Ptyp_constr "core_type" (typing/typedtree.ml[63,2376+28]..[63,2376+37])
                            []
                        ]
                    ]
                ]
                Some
                  core_type (typing/typedtree.ml[64,2425+6]..[64,2425+24])
                    Ptyp_constr "pattern_desc" (typing/typedtree.ml[64,2425+12]..[64,2425+24])
                    [
                      core_type (typing/typedtree.ml[64,2425+6]..[64,2425+11])
                        Ptyp_constr "value" (typing/typedtree.ml[64,2425+6]..[64,2425+11])
                        []
                    ]
              (typing/typedtree.ml[65,2450+2]..[67,2530+24])
                "Tpat_variant" (typing/typedtree.ml[65,2450+4]..[65,2450+16])
                [
                  core_type (typing/typedtree.ml[66,2469+6]..[66,2469+11])
                    Ptyp_constr "label" (typing/typedtree.ml[66,2469+6]..[66,2469+11])
                    []
                  core_type (typing/typedtree.ml[66,2469+14]..[66,2469+42])
                    Ptyp_constr "option" (typing/typedtree.ml[66,2469+36]..[66,2469+42])
                    [
                      core_type (typing/typedtree.ml[66,2469+14]..[66,2469+35])
                        Ptyp_constr "general_pattern" (typing/typedtree.ml[66,2469+20]..[66,2469+35])
                        [
                          core_type (typing/typedtree.ml[66,2469+14]..[66,2469+19])
                            Ptyp_constr "value" (typing/typedtree.ml[66,2469+14]..[66,2469+19])
                            []
                        ]
                    ]
                  core_type (typing/typedtree.ml[66,2469+45]..[66,2469+57])
                    Ptyp_constr "ref" (typing/typedtree.ml[66,2469+54]..[66,2469+57])
                    [
                      core_type (typing/typedtree.ml[66,2469+45]..[66,2469+53])
                        Ptyp_constr "row_desc" (typing/typedtree.ml[66,2469+45]..[66,2469+53])
                        []
                    ]
                ]
                Some
                  core_type (typing/typedtree.ml[67,2530+6]..[67,2530+24])
                    Ptyp_constr "pattern_desc" (typing/typedtree.ml[67,2530+12]..[67,2530+24])
                    [
                      core_type (typing/typedtree.ml[67,2530+6]..[67,2530+11])
                        Ptyp_constr "value" (typing/typedtree.ml[67,2530+6]..[67,2530+11])
                        []
                    ]
              (typing/typedtree.ml[68,2555+2]..[71,2671+24])
                "Tpat_record" (typing/typedtree.ml[68,2555+4]..[68,2555+15])
                [
                  core_type (typing/typedtree.ml[69,2573+6]..[69,2573+72])
                    Ptyp_constr "list" (typing/typedtree.ml[69,2573+68]..[69,2573+72])
                    [
                      core_type (typing/typedtree.ml[69,2573+7]..[69,2573+66])
                        Ptyp_tuple
                        [
                          core_type (typing/typedtree.ml[69,2573+7]..[69,2573+22])
                            Ptyp_constr "loc" (typing/typedtree.ml[69,2573+19]..[69,2573+22])
                            [
                              core_type (typing/typedtree.ml[69,2573+7]..[69,2573+18])
                                Ptyp_constr "Longident.t" (typing/typedtree.ml[69,2573+7]..[69,2573+18])
                                []
                            ]
                          core_type (typing/typedtree.ml[69,2573+25]..[69,2573+42])
                            Ptyp_constr "label_description" (typing/typedtree.ml[69,2573+25]..[69,2573+42])
                            []
                          core_type (typing/typedtree.ml[69,2573+45]..[69,2573+66])
                            Ptyp_constr "general_pattern" (typing/typedtree.ml[69,2573+51]..[69,2573+66])
                            [
                              core_type (typing/typedtree.ml[69,2573+45]..[69,2573+50])
                                Ptyp_constr "value" (typing/typedtree.ml[69,2573+45]..[69,2573+50])
                                []
                            ]
                        ]
                    ]
                  core_type (typing/typedtree.ml[70,2648+8]..[70,2648+19])
                    Ptyp_constr "closed_flag" (typing/typedtree.ml[70,2648+8]..[70,2648+19])
                    []
                ]
                Some
                  core_type (typing/typedtree.ml[71,2671+6]..[71,2671+24])
                    Ptyp_constr "pattern_desc" (typing/typedtree.ml[71,2671+12]..[71,2671+24])
                    [
                      core_type (typing/typedtree.ml[71,2671+6]..[71,2671+11])
                        Ptyp_constr "value" (typing/typedtree.ml[71,2671+6]..[71,2671+11])
                        []
                    ]
              (typing/typedtree.ml[72,2696+2]..[72,2696+65])
                "Tpat_array" (typing/typedtree.ml[72,2696+4]..[72,2696+14])
                [
                  core_type (typing/typedtree.ml[72,2696+17]..[72,2696+43])
                    Ptyp_constr "list" (typing/typedtree.ml[72,2696+39]..[72,2696+43])
                    [
                      core_type (typing/typedtree.ml[72,2696+17]..[72,2696+38])
                        Ptyp_constr "general_pattern" (typing/typedtree.ml[72,2696+23]..[72,2696+38])
                        [
                          core_type (typing/typedtree.ml[72,2696+17]..[72,2696+22])
                            Ptyp_constr "value" (typing/typedtree.ml[72,2696+17]..[72,2696+22])
                            []
                        ]
                    ]
                ]
                Some
                  core_type (typing/typedtree.ml[72,2696+47]..[72,2696+65])
                    Ptyp_constr "pattern_desc" (typing/typedtree.ml[72,2696+53]..[72,2696+65])
                    [
                      core_type (typing/typedtree.ml[72,2696+47]..[72,2696+52])
                        Ptyp_constr "value" (typing/typedtree.ml[72,2696+47]..[72,2696+52])
                        []
                    ]
              (typing/typedtree.ml[73,2762+2]..[73,2762+59])
                "Tpat_lazy" (typing/typedtree.ml[73,2762+4]..[73,2762+13])
                [
                  core_type (typing/typedtree.ml[73,2762+16]..[73,2762+37])
                    Ptyp_constr "general_pattern" (typing/typedtree.ml[73,2762+22]..[73,2762+37])
                    [
                      core_type (typing/typedtree.ml[73,2762+16]..[73,2762+21])
                        Ptyp_constr "value" (typing/typedtree.ml[73,2762+16]..[73,2762+21])
                        []
                    ]
                ]
                Some
                  core_type (typing/typedtree.ml[73,2762+41]..[73,2762+59])
                    Ptyp_constr "pattern_desc" (typing/typedtree.ml[73,2762+47]..[73,2762+59])
                    [
                      core_type (typing/typedtree.ml[73,2762+41]..[73,2762+46])
                        Ptyp_constr "value" (typing/typedtree.ml[73,2762+41]..[73,2762+46])
                        []
                    ]
              (typing/typedtree.ml[75,2851+2]..[75,2851+64])
                "Tpat_value" (typing/typedtree.ml[75,2851+4]..[75,2851+14])
                [
                  core_type (typing/typedtree.ml[75,2851+17]..[75,2851+36])
                    Ptyp_constr "tpat_value_argument" (typing/typedtree.ml[75,2851+17]..[75,2851+36])
                    []
                ]
                Some
                  core_type (typing/typedtree.ml[75,2851+40]..[75,2851+64])
                    Ptyp_constr "pattern_desc" (typing/typedtree.ml[75,2851+52]..[75,2851+64])
                    [
                      core_type (typing/typedtree.ml[75,2851+40]..[75,2851+51])
                        Ptyp_constr "computation" (typing/typedtree.ml[75,2851+40]..[75,2851+51])
                        []
                    ]
              (typing/typedtree.ml[76,2916+2]..[76,2916+70])
                "Tpat_exception" (typing/typedtree.ml[76,2916+4]..[76,2916+18])
                [
                  core_type (typing/typedtree.ml[76,2916+21]..[76,2916+42])
                    Ptyp_constr "general_pattern" (typing/typedtree.ml[76,2916+27]..[76,2916+42])
                    [
                      core_type (typing/typedtree.ml[76,2916+21]..[76,2916+26])
                        Ptyp_constr "value" (typing/typedtree.ml[76,2916+21]..[76,2916+26])
                        []
                    ]
                ]
                Some
                  core_type (typing/typedtree.ml[76,2916+46]..[76,2916+70])
                    Ptyp_constr "pattern_desc" (typing/typedtree.ml[76,2916+58]..[76,2916+70])
                    [
                      core_type (typing/typedtree.ml[76,2916+46]..[76,2916+57])
                        Ptyp_constr "computation" (typing/typedtree.ml[76,2916+46]..[76,2916+57])
                        []
                    ]
              (typing/typedtree.ml[78,3017+2]..[80,3098+21])
                "Tpat_or" (typing/typedtree.ml[78,3017+4]..[78,3017+11])
                [
                  core_type (typing/typedtree.ml[79,3031+6]..[79,3031+24])
                    Ptyp_constr "general_pattern" (typing/typedtree.ml[79,3031+9]..[79,3031+24])
                    [
                      core_type (typing/typedtree.ml[79,3031+6]..[79,3031+8])
                        Ptyp_var k
                    ]
                  core_type (typing/typedtree.ml[79,3031+27]..[79,3031+45])
                    Ptyp_constr "general_pattern" (typing/typedtree.ml[79,3031+30]..[79,3031+45])
                    [
                      core_type (typing/typedtree.ml[79,3031+27]..[79,3031+29])
                        Ptyp_var k
                    ]
                  core_type (typing/typedtree.ml[79,3031+48]..[79,3031+63])
                    Ptyp_constr "option" (typing/typedtree.ml[79,3031+57]..[79,3031+63])
                    [
                      core_type (typing/typedtree.ml[79,3031+48]..[79,3031+56])
                        Ptyp_constr "row_desc" (typing/typedtree.ml[79,3031+48]..[79,3031+56])
                        []
                    ]
                ]
                Some
                  core_type (typing/typedtree.ml[80,3098+6]..[80,3098+21])
                    Ptyp_constr "pattern_desc" (typing/typedtree.ml[80,3098+9]..[80,3098+21])
                    [
                      core_type (typing/typedtree.ml[80,3098+6]..[80,3098+8])
                        Ptyp_var k
                    ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "tpat_value_argument" (typing/typedtree.ml[82,3121+4]..[82,3121+23]) (typing/typedtree.ml[82,3121+0]..[82,3121+47])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (typing/typedtree.ml[82,3121+26]..[82,3121+47])
              Ptyp_constr "general_pattern" (typing/typedtree.ml[82,3121+32]..[82,3121+47])
              [
                core_type (typing/typedtree.ml[82,3121+26]..[82,3121+31])
                  Ptyp_constr "value" (typing/typedtree.ml[82,3121+26]..[82,3121+31])
                  []
              ]
      type_declaration "expression" (typing/typedtree.ml[84,3170+4]..[84,3170+14]) (typing/typedtree.ml[84,3170+0]..[91,3387+4])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (typing/typedtree.ml[85,3187+4]..[85,3187+30])
                Immutable
                "exp_desc" (typing/typedtree.ml[85,3187+4]..[85,3187+12])                core_type (typing/typedtree.ml[85,3187+14]..[85,3187+29])
                  Ptyp_constr "expression_desc" (typing/typedtree.ml[85,3187+14]..[85,3187+29])
                  []
              (typing/typedtree.ml[86,3218+4]..[86,3218+24])
                Immutable
                "exp_loc" (typing/typedtree.ml[86,3218+4]..[86,3218+11])                core_type (typing/typedtree.ml[86,3218+13]..[86,3218+23])
                  Ptyp_constr "Location.t" (typing/typedtree.ml[86,3218+13]..[86,3218+23])
                  []
              (typing/typedtree.ml[87,3243+4]..[87,3243+62])
                Immutable
                "exp_extra" (typing/typedtree.ml[87,3243+4]..[87,3243+13])                core_type (typing/typedtree.ml[87,3243+15]..[87,3243+61])
                  Ptyp_constr "list" (typing/typedtree.ml[87,3243+57]..[87,3243+61])
                  [
                    core_type (typing/typedtree.ml[87,3243+16]..[87,3243+55])
                      Ptyp_tuple
                      [
                        core_type (typing/typedtree.ml[87,3243+16]..[87,3243+25])
                          Ptyp_constr "exp_extra" (typing/typedtree.ml[87,3243+16]..[87,3243+25])
                          []
                        core_type (typing/typedtree.ml[87,3243+28]..[87,3243+38])
                          Ptyp_constr "Location.t" (typing/typedtree.ml[87,3243+28]..[87,3243+38])
                          []
                        core_type (typing/typedtree.ml[87,3243+41]..[87,3243+55])
                          Ptyp_constr "list" (typing/typedtree.ml[87,3243+51]..[87,3243+55])
                          [
                            core_type (typing/typedtree.ml[87,3243+41]..[87,3243+50])
                              Ptyp_constr "attribute" (typing/typedtree.ml[87,3243+41]..[87,3243+50])
                              []
                          ]
                      ]
                  ]
              (typing/typedtree.ml[88,3306+4]..[88,3306+24])
                Immutable
                "exp_type" (typing/typedtree.ml[88,3306+4]..[88,3306+12])                core_type (typing/typedtree.ml[88,3306+14]..[88,3306+23])
                  Ptyp_constr "type_expr" (typing/typedtree.ml[88,3306+14]..[88,3306+23])
                  []
              (typing/typedtree.ml[89,3331+4]..[89,3331+19])
                Immutable
                "exp_env" (typing/typedtree.ml[89,3331+4]..[89,3331+11])                core_type (typing/typedtree.ml[89,3331+13]..[89,3331+18])
                  Ptyp_constr "Env.t" (typing/typedtree.ml[89,3331+13]..[89,3331+18])
                  []
              (typing/typedtree.ml[90,3351+4]..[90,3351+35])
                Immutable
                "exp_attributes" (typing/typedtree.ml[90,3351+4]..[90,3351+18])                core_type (typing/typedtree.ml[90,3351+20]..[90,3351+34])
                  Ptyp_constr "list" (typing/typedtree.ml[90,3351+30]..[90,3351+34])
                  [
                    core_type (typing/typedtree.ml[90,3351+20]..[90,3351+29])
                      Ptyp_constr "attribute" (typing/typedtree.ml[90,3351+20]..[90,3351+29])
                      []
                  ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "exp_extra" (typing/typedtree.ml[93,3393+4]..[93,3393+13]) (typing/typedtree.ml[93,3393+0]..[97,3524+26])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (typing/typedtree.ml[94,3409+2]..[94,3409+32])
                "Texp_constraint" (typing/typedtree.ml[94,3409+4]..[94,3409+19])
                [
                  core_type (typing/typedtree.ml[94,3409+23]..[94,3409+32])
                    Ptyp_constr "core_type" (typing/typedtree.ml[94,3409+23]..[94,3409+32])
                    []
                ]
                None
              (typing/typedtree.ml[95,3442+2]..[95,3442+47])
                "Texp_coerce" (typing/typedtree.ml[95,3442+4]..[95,3442+15])
                [
                  core_type (typing/typedtree.ml[95,3442+19]..[95,3442+35])
                    Ptyp_constr "option" (typing/typedtree.ml[95,3442+29]..[95,3442+35])
                    [
                      core_type (typing/typedtree.ml[95,3442+19]..[95,3442+28])
                        Ptyp_constr "core_type" (typing/typedtree.ml[95,3442+19]..[95,3442+28])
                        []
                    ]
                  core_type (typing/typedtree.ml[95,3442+38]..[95,3442+47])
                    Ptyp_constr "core_type" (typing/typedtree.ml[95,3442+38]..[95,3442+47])
                    []
                ]
                None
              (typing/typedtree.ml[96,3490+2]..[96,3490+33])
                "Texp_poly" (typing/typedtree.ml[96,3490+4]..[96,3490+13])
                [
                  core_type (typing/typedtree.ml[96,3490+17]..[96,3490+33])
                    Ptyp_constr "option" (typing/typedtree.ml[96,3490+27]..[96,3490+33])
                    [
                      core_type (typing/typedtree.ml[96,3490+17]..[96,3490+26])
                        Ptyp_constr "core_type" (typing/typedtree.ml[96,3490+17]..[96,3490+26])
                        []
                    ]
                ]
                None
              (typing/typedtree.ml[97,3524+2]..[97,3524+26])
                "Texp_newtype" (typing/typedtree.ml[97,3524+4]..[97,3524+16])
                [
                  core_type (typing/typedtree.ml[97,3524+20]..[97,3524+26])
                    Ptyp_constr "string" (typing/typedtree.ml[97,3524+20]..[97,3524+26])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "expression_desc" (typing/typedtree.ml[99,3552+4]..[99,3552+19]) (typing/typedtree.ml[99,3552+0]..[149,5690+46])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (typing/typedtree.ml[100,3574+4]..[100,3574+68])
                "Texp_ident" (typing/typedtree.ml[100,3574+4]..[100,3574+14])
                [
                  core_type (typing/typedtree.ml[100,3574+18]..[100,3574+24])
                    Ptyp_constr "Path.t" (typing/typedtree.ml[100,3574+18]..[100,3574+24])
                    []
                  core_type (typing/typedtree.ml[100,3574+27]..[100,3574+42])
                    Ptyp_constr "loc" (typing/typedtree.ml[100,3574+39]..[100,3574+42])
                    [
                      core_type (typing/typedtree.ml[100,3574+27]..[100,3574+38])
                        Ptyp_constr "Longident.t" (typing/typedtree.ml[100,3574+27]..[100,3574+38])
                        []
                    ]
                  core_type (typing/typedtree.ml[100,3574+45]..[100,3574+68])
                    Ptyp_constr "Types.value_description" (typing/typedtree.ml[100,3574+45]..[100,3574+68])
                    []
                ]
                None
              (typing/typedtree.ml[101,3643+2]..[101,3643+29])
                "Texp_constant" (typing/typedtree.ml[101,3643+4]..[101,3643+17])
                [
                  core_type (typing/typedtree.ml[101,3643+21]..[101,3643+29])
                    Ptyp_constr "constant" (typing/typedtree.ml[101,3643+21]..[101,3643+29])
                    []
                ]
                None
              (typing/typedtree.ml[102,3673+2]..[102,3673+58])
                "Texp_let" (typing/typedtree.ml[102,3673+4]..[102,3673+12])
                [
                  core_type (typing/typedtree.ml[102,3673+16]..[102,3673+24])
                    Ptyp_constr "rec_flag" (typing/typedtree.ml[102,3673+16]..[102,3673+24])
                    []
                  core_type (typing/typedtree.ml[102,3673+27]..[102,3673+45])
                    Ptyp_constr "list" (typing/typedtree.ml[102,3673+41]..[102,3673+45])
                    [
                      core_type (typing/typedtree.ml[102,3673+27]..[102,3673+40])
                        Ptyp_constr "value_binding" (typing/typedtree.ml[102,3673+27]..[102,3673+40])
                        []
                    ]
                  core_type (typing/typedtree.ml[102,3673+48]..[102,3673+58])
                    Ptyp_constr "expression" (typing/typedtree.ml[102,3673+48]..[102,3673+58])
                    []
                ]
                None
              (typing/typedtree.ml[103,3732+2]..[104,3795+51])
                "Texp_function" (typing/typedtree.ml[103,3732+4]..[103,3732+17])
                [
                  (typing/typedtree.ml[103,3732+23]..[103,3732+45])
                    Immutable
                    "arg_label" (typing/typedtree.ml[103,3732+23]..[103,3732+32])                    core_type (typing/typedtree.ml[103,3732+35]..[103,3732+44])
                      Ptyp_constr "arg_label" (typing/typedtree.ml[103,3732+35]..[103,3732+44])
                      []
                  (typing/typedtree.ml[103,3732+46]..[103,3732+62])
                    Immutable
                    "param" (typing/typedtree.ml[103,3732+46]..[103,3732+51])                    core_type (typing/typedtree.ml[103,3732+54]..[103,3732+61])
                      Ptyp_constr "Ident.t" (typing/typedtree.ml[103,3732+54]..[103,3732+61])
                      []
                  (typing/typedtree.ml[104,3795+6]..[104,3795+30])
                    Immutable
                    "cases" (typing/typedtree.ml[104,3795+6]..[104,3795+11])                    core_type (typing/typedtree.ml[104,3795+14]..[104,3795+29])
                      Ptyp_constr "list" (typing/typedtree.ml[104,3795+25]..[104,3795+29])
                      [
                        core_type (typing/typedtree.ml[104,3795+14]..[104,3795+24])
                          Ptyp_constr "case" (typing/typedtree.ml[104,3795+20]..[104,3795+24])
                          [
                            core_type (typing/typedtree.ml[104,3795+14]..[104,3795+19])
                              Ptyp_constr "value" (typing/typedtree.ml[104,3795+14]..[104,3795+19])
                              []
                          ]
                      ]
                  (typing/typedtree.ml[104,3795+31]..[104,3795+49])
                    Immutable
                    "partial" (typing/typedtree.ml[104,3795+31]..[104,3795+38])                    core_type (typing/typedtree.ml[104,3795+41]..[104,3795+48])
                      Ptyp_constr "partial" (typing/typedtree.ml[104,3795+41]..[104,3795+48])
                      []
                ]
                None
              (typing/typedtree.ml[105,3847+2]..[105,3847+67])
                "Texp_apply" (typing/typedtree.ml[105,3847+4]..[105,3847+14])
                [
                  core_type (typing/typedtree.ml[105,3847+18]..[105,3847+28])
                    Ptyp_constr "expression" (typing/typedtree.ml[105,3847+18]..[105,3847+28])
                    []
                  core_type (typing/typedtree.ml[105,3847+31]..[105,3847+67])
                    Ptyp_constr "list" (typing/typedtree.ml[105,3847+63]..[105,3847+67])
                    [
                      core_type (typing/typedtree.ml[105,3847+32]..[105,3847+61])
                        Ptyp_tuple
                        [
                          core_type (typing/typedtree.ml[105,3847+32]..[105,3847+41])
                            Ptyp_constr "arg_label" (typing/typedtree.ml[105,3847+32]..[105,3847+41])
                            []
                          core_type (typing/typedtree.ml[105,3847+44]..[105,3847+61])
                            Ptyp_constr "option" (typing/typedtree.ml[105,3847+55]..[105,3847+61])
                            [
                              core_type (typing/typedtree.ml[105,3847+44]..[105,3847+54])
                                Ptyp_constr "expression" (typing/typedtree.ml[105,3847+44]..[105,3847+54])
                                []
                            ]
                        ]
                    ]
                ]
                None
              (typing/typedtree.ml[106,3915+2]..[106,3915+62])
                "Texp_match" (typing/typedtree.ml[106,3915+4]..[106,3915+14])
                [
                  core_type (typing/typedtree.ml[106,3915+18]..[106,3915+28])
                    Ptyp_constr "expression" (typing/typedtree.ml[106,3915+18]..[106,3915+28])
                    []
                  core_type (typing/typedtree.ml[106,3915+31]..[106,3915+52])
                    Ptyp_constr "list" (typing/typedtree.ml[106,3915+48]..[106,3915+52])
                    [
                      core_type (typing/typedtree.ml[106,3915+31]..[106,3915+47])
                        Ptyp_constr "case" (typing/typedtree.ml[106,3915+43]..[106,3915+47])
                        [
                          core_type (typing/typedtree.ml[106,3915+31]..[106,3915+42])
                            Ptyp_constr "computation" (typing/typedtree.ml[106,3915+31]..[106,3915+42])
                            []
                        ]
                    ]
                  core_type (typing/typedtree.ml[106,3915+55]..[106,3915+62])
                    Ptyp_constr "partial" (typing/typedtree.ml[106,3915+55]..[106,3915+62])
                    []
                ]
                None
              (typing/typedtree.ml[107,3978+2]..[107,3978+44])
                "Texp_try" (typing/typedtree.ml[107,3978+4]..[107,3978+12])
                [
                  core_type (typing/typedtree.ml[107,3978+16]..[107,3978+26])
                    Ptyp_constr "expression" (typing/typedtree.ml[107,3978+16]..[107,3978+26])
                    []
                  core_type (typing/typedtree.ml[107,3978+29]..[107,3978+44])
                    Ptyp_constr "list" (typing/typedtree.ml[107,3978+40]..[107,3978+44])
                    [
                      core_type (typing/typedtree.ml[107,3978+29]..[107,3978+39])
                        Ptyp_constr "case" (typing/typedtree.ml[107,3978+35]..[107,3978+39])
                        [
                          core_type (typing/typedtree.ml[107,3978+29]..[107,3978+34])
                            Ptyp_constr "value" (typing/typedtree.ml[107,3978+29]..[107,3978+34])
                            []
                        ]
                    ]
                ]
                None
              (typing/typedtree.ml[108,4023+2]..[108,4023+33])
                "Texp_tuple" (typing/typedtree.ml[108,4023+4]..[108,4023+14])
                [
                  core_type (typing/typedtree.ml[108,4023+18]..[108,4023+33])
                    Ptyp_constr "list" (typing/typedtree.ml[108,4023+29]..[108,4023+33])
                    [
                      core_type (typing/typedtree.ml[108,4023+18]..[108,4023+28])
                        Ptyp_constr "expression" (typing/typedtree.ml[108,4023+18]..[108,4023+28])
                        []
                    ]
                ]
                None
              (typing/typedtree.ml[109,4057+2]..[110,4079+65])
                "Texp_construct" (typing/typedtree.ml[109,4057+4]..[109,4057+18])
                [
                  core_type (typing/typedtree.ml[110,4079+6]..[110,4079+21])
                    Ptyp_constr "loc" (typing/typedtree.ml[110,4079+18]..[110,4079+21])
                    [
                      core_type (typing/typedtree.ml[110,4079+6]..[110,4079+17])
                        Ptyp_constr "Longident.t" (typing/typedtree.ml[110,4079+6]..[110,4079+17])
                        []
                    ]
                  core_type (typing/typedtree.ml[110,4079+24]..[110,4079+47])
                    Ptyp_constr "constructor_description" (typing/typedtree.ml[110,4079+24]..[110,4079+47])
                    []
                  core_type (typing/typedtree.ml[110,4079+50]..[110,4079+65])
                    Ptyp_constr "list" (typing/typedtree.ml[110,4079+61]..[110,4079+65])
                    [
                      core_type (typing/typedtree.ml[110,4079+50]..[110,4079+60])
                        Ptyp_constr "expression" (typing/typedtree.ml[110,4079+50]..[110,4079+60])
                        []
                    ]
                ]
                None
              (typing/typedtree.ml[111,4145+2]..[111,4145+45])
                "Texp_variant" (typing/typedtree.ml[111,4145+4]..[111,4145+16])
                [
                  core_type (typing/typedtree.ml[111,4145+20]..[111,4145+25])
                    Ptyp_constr "label" (typing/typedtree.ml[111,4145+20]..[111,4145+25])
                    []
                  core_type (typing/typedtree.ml[111,4145+28]..[111,4145+45])
                    Ptyp_constr "option" (typing/typedtree.ml[111,4145+39]..[111,4145+45])
                    [
                      core_type (typing/typedtree.ml[111,4145+28]..[111,4145+38])
                        Ptyp_constr "expression" (typing/typedtree.ml[111,4145+28]..[111,4145+38])
                        []
                    ]
                ]
                None
              (typing/typedtree.ml[112,4191+2]..[116,4387+5])
                "Texp_record" (typing/typedtree.ml[112,4191+4]..[112,4191+15])
                [
                  (typing/typedtree.ml[113,4212+6]..[113,4212+75])
                    Immutable
                    "fields" (typing/typedtree.ml[113,4212+6]..[113,4212+12])                    core_type (typing/typedtree.ml[113,4212+15]..[113,4212+74])
                      Ptyp_constr "array" (typing/typedtree.ml[113,4212+69]..[113,4212+74])
                      [
                        core_type (typing/typedtree.ml[113,4212+17]..[113,4212+66])
                          Ptyp_tuple
                          [
                            core_type (typing/typedtree.ml[113,4212+17]..[113,4212+40])
                              Ptyp_constr "Types.label_description" (typing/typedtree.ml[113,4212+17]..[113,4212+40])
                              []
                            core_type (typing/typedtree.ml[113,4212+43]..[113,4212+66])
                              Ptyp_constr "record_label_definition" (typing/typedtree.ml[113,4212+43]..[113,4212+66])
                              []
                          ]
                      ]
                  (typing/typedtree.ml[114,4288+6]..[114,4288+51])
                    Immutable
                    "representation" (typing/typedtree.ml[114,4288+6]..[114,4288+20])                    core_type (typing/typedtree.ml[114,4288+23]..[114,4288+50])
                      Ptyp_constr "Types.record_representation" (typing/typedtree.ml[114,4288+23]..[114,4288+50])
                      []
                  (typing/typedtree.ml[115,4340+6]..[115,4340+46])
                    Immutable
                    "extended_expression" (typing/typedtree.ml[115,4340+6]..[115,4340+25])                    core_type (typing/typedtree.ml[115,4340+28]..[115,4340+45])
                      Ptyp_constr "option" (typing/typedtree.ml[115,4340+39]..[115,4340+45])
                      [
                        core_type (typing/typedtree.ml[115,4340+28]..[115,4340+38])
                          Ptyp_constr "expression" (typing/typedtree.ml[115,4340+28]..[115,4340+38])
                          []
                      ]
                ]
                None
              (typing/typedtree.ml[117,4393+2]..[117,4393+66])
                "Texp_field" (typing/typedtree.ml[117,4393+4]..[117,4393+14])
                [
                  core_type (typing/typedtree.ml[117,4393+18]..[117,4393+28])
                    Ptyp_constr "expression" (typing/typedtree.ml[117,4393+18]..[117,4393+28])
                    []
                  core_type (typing/typedtree.ml[117,4393+31]..[117,4393+46])
                    Ptyp_constr "loc" (typing/typedtree.ml[117,4393+43]..[117,4393+46])
                    [
                      core_type (typing/typedtree.ml[117,4393+31]..[117,4393+42])
                        Ptyp_constr "Longident.t" (typing/typedtree.ml[117,4393+31]..[117,4393+42])
                        []
                    ]
                  core_type (typing/typedtree.ml[117,4393+49]..[117,4393+66])
                    Ptyp_constr "label_description" (typing/typedtree.ml[117,4393+49]..[117,4393+66])
                    []
                ]
                None
              (typing/typedtree.ml[118,4460+2]..[119,4481+67])
                "Texp_setfield" (typing/typedtree.ml[118,4460+4]..[118,4460+17])
                [
                  core_type (typing/typedtree.ml[119,4481+6]..[119,4481+16])
                    Ptyp_constr "expression" (typing/typedtree.ml[119,4481+6]..[119,4481+16])
                    []
                  core_type (typing/typedtree.ml[119,4481+19]..[119,4481+34])
                    Ptyp_constr "loc" (typing/typedtree.ml[119,4481+31]..[119,4481+34])
                    [
                      core_type (typing/typedtree.ml[119,4481+19]..[119,4481+30])
                        Ptyp_constr "Longident.t" (typing/typedtree.ml[119,4481+19]..[119,4481+30])
                        []
                    ]
                  core_type (typing/typedtree.ml[119,4481+37]..[119,4481+54])
                    Ptyp_constr "label_description" (typing/typedtree.ml[119,4481+37]..[119,4481+54])
                    []
                  core_type (typing/typedtree.ml[119,4481+57]..[119,4481+67])
                    Ptyp_constr "expression" (typing/typedtree.ml[119,4481+57]..[119,4481+67])
                    []
                ]
                None
              (typing/typedtree.ml[120,4549+2]..[120,4549+33])
                "Texp_array" (typing/typedtree.ml[120,4549+4]..[120,4549+14])
                [
                  core_type (typing/typedtree.ml[120,4549+18]..[120,4549+33])
                    Ptyp_constr "list" (typing/typedtree.ml[120,4549+29]..[120,4549+33])
                    [
                      core_type (typing/typedtree.ml[120,4549+18]..[120,4549+28])
                        Ptyp_constr "expression" (typing/typedtree.ml[120,4549+18]..[120,4549+28])
                        []
                    ]
                ]
                None
              (typing/typedtree.ml[121,4583+2]..[121,4583+66])
                "Texp_ifthenelse" (typing/typedtree.ml[121,4583+4]..[121,4583+19])
                [
                  core_type (typing/typedtree.ml[121,4583+23]..[121,4583+33])
                    Ptyp_constr "expression" (typing/typedtree.ml[121,4583+23]..[121,4583+33])
                    []
                  core_type (typing/typedtree.ml[121,4583+36]..[121,4583+46])
                    Ptyp_constr "expression" (typing/typedtree.ml[121,4583+36]..[121,4583+46])
                    []
                  core_type (typing/typedtree.ml[121,4583+49]..[121,4583+66])
                    Ptyp_constr "option" (typing/typedtree.ml[121,4583+60]..[121,4583+66])
                    [
                      core_type (typing/typedtree.ml[121,4583+49]..[121,4583+59])
                        Ptyp_constr "expression" (typing/typedtree.ml[121,4583+49]..[121,4583+59])
                        []
                    ]
                ]
                None
              (typing/typedtree.ml[122,4650+2]..[122,4650+44])
                "Texp_sequence" (typing/typedtree.ml[122,4650+4]..[122,4650+17])
                [
                  core_type (typing/typedtree.ml[122,4650+21]..[122,4650+31])
                    Ptyp_constr "expression" (typing/typedtree.ml[122,4650+21]..[122,4650+31])
                    []
                  core_type (typing/typedtree.ml[122,4650+34]..[122,4650+44])
                    Ptyp_constr "expression" (typing/typedtree.ml[122,4650+34]..[122,4650+44])
                    []
                ]
                None
              (typing/typedtree.ml[123,4695+2]..[123,4695+41])
                "Texp_while" (typing/typedtree.ml[123,4695+4]..[123,4695+14])
                [
                  core_type (typing/typedtree.ml[123,4695+18]..[123,4695+28])
                    Ptyp_constr "expression" (typing/typedtree.ml[123,4695+18]..[123,4695+28])
                    []
                  core_type (typing/typedtree.ml[123,4695+31]..[123,4695+41])
                    Ptyp_constr "expression" (typing/typedtree.ml[123,4695+31]..[123,4695+41])
                    []
                ]
                None
              (typing/typedtree.ml[124,4737+2]..[126,4832+18])
                "Texp_for" (typing/typedtree.ml[124,4737+4]..[124,4737+12])
                [
                  core_type (typing/typedtree.ml[125,4753+6]..[125,4753+13])
                    Ptyp_constr "Ident.t" (typing/typedtree.ml[125,4753+6]..[125,4753+13])
                    []
                  core_type (typing/typedtree.ml[125,4753+16]..[125,4753+33])
                    Ptyp_constr "Parsetree.pattern" (typing/typedtree.ml[125,4753+16]..[125,4753+33])
                    []
                  core_type (typing/typedtree.ml[125,4753+36]..[125,4753+46])
                    Ptyp_constr "expression" (typing/typedtree.ml[125,4753+36]..[125,4753+46])
                    []
                  core_type (typing/typedtree.ml[125,4753+49]..[125,4753+59])
                    Ptyp_constr "expression" (typing/typedtree.ml[125,4753+49]..[125,4753+59])
                    []
                  core_type (typing/typedtree.ml[125,4753+62]..[125,4753+76])
                    Ptyp_constr "direction_flag" (typing/typedtree.ml[125,4753+62]..[125,4753+76])
                    []
                  core_type (typing/typedtree.ml[126,4832+8]..[126,4832+18])
                    Ptyp_constr "expression" (typing/typedtree.ml[126,4832+8]..[126,4832+18])
                    []
                ]
                None
              (typing/typedtree.ml[127,4851+2]..[127,4851+34])
                "Texp_send" (typing/typedtree.ml[127,4851+4]..[127,4851+13])
                [
                  core_type (typing/typedtree.ml[127,4851+17]..[127,4851+27])
                    Ptyp_constr "expression" (typing/typedtree.ml[127,4851+17]..[127,4851+27])
                    []
                  core_type (typing/typedtree.ml[127,4851+30]..[127,4851+34])
                    Ptyp_constr "meth" (typing/typedtree.ml[127,4851+30]..[127,4851+34])
                    []
                ]
                None
              (typing/typedtree.ml[128,4886+2]..[128,4886+66])
                "Texp_new" (typing/typedtree.ml[128,4886+4]..[128,4886+12])
                [
                  core_type (typing/typedtree.ml[128,4886+16]..[128,4886+22])
                    Ptyp_constr "Path.t" (typing/typedtree.ml[128,4886+16]..[128,4886+22])
                    []
                  core_type (typing/typedtree.ml[128,4886+25]..[128,4886+40])
                    Ptyp_constr "loc" (typing/typedtree.ml[128,4886+37]..[128,4886+40])
                    [
                      core_type (typing/typedtree.ml[128,4886+25]..[128,4886+36])
                        Ptyp_constr "Longident.t" (typing/typedtree.ml[128,4886+25]..[128,4886+36])
                        []
                    ]
                  core_type (typing/typedtree.ml[128,4886+43]..[128,4886+66])
                    Ptyp_constr "Types.class_declaration" (typing/typedtree.ml[128,4886+43]..[128,4886+66])
                    []
                ]
                None
              (typing/typedtree.ml[129,4953+2]..[129,4953+48])
                "Texp_instvar" (typing/typedtree.ml[129,4953+4]..[129,4953+16])
                [
                  core_type (typing/typedtree.ml[129,4953+20]..[129,4953+26])
                    Ptyp_constr "Path.t" (typing/typedtree.ml[129,4953+20]..[129,4953+26])
                    []
                  core_type (typing/typedtree.ml[129,4953+29]..[129,4953+35])
                    Ptyp_constr "Path.t" (typing/typedtree.ml[129,4953+29]..[129,4953+35])
                    []
                  core_type (typing/typedtree.ml[129,4953+38]..[129,4953+48])
                    Ptyp_constr "loc" (typing/typedtree.ml[129,4953+45]..[129,4953+48])
                    [
                      core_type (typing/typedtree.ml[129,4953+38]..[129,4953+44])
                        Ptyp_constr "string" (typing/typedtree.ml[129,4953+38]..[129,4953+44])
                        []
                    ]
                ]
                None
              (typing/typedtree.ml[130,5002+2]..[130,5002+64])
                "Texp_setinstvar" (typing/typedtree.ml[130,5002+4]..[130,5002+19])
                [
                  core_type (typing/typedtree.ml[130,5002+23]..[130,5002+29])
                    Ptyp_constr "Path.t" (typing/typedtree.ml[130,5002+23]..[130,5002+29])
                    []
                  core_type (typing/typedtree.ml[130,5002+32]..[130,5002+38])
                    Ptyp_constr "Path.t" (typing/typedtree.ml[130,5002+32]..[130,5002+38])
                    []
                  core_type (typing/typedtree.ml[130,5002+41]..[130,5002+51])
                    Ptyp_constr "loc" (typing/typedtree.ml[130,5002+48]..[130,5002+51])
                    [
                      core_type (typing/typedtree.ml[130,5002+41]..[130,5002+47])
                        Ptyp_constr "string" (typing/typedtree.ml[130,5002+41]..[130,5002+47])
                        []
                    ]
                  core_type (typing/typedtree.ml[130,5002+54]..[130,5002+64])
                    Ptyp_constr "expression" (typing/typedtree.ml[130,5002+54]..[130,5002+64])
                    []
                ]
                None
              (typing/typedtree.ml[131,5067+2]..[131,5067+70])
                "Texp_override" (typing/typedtree.ml[131,5067+4]..[131,5067+17])
                [
                  core_type (typing/typedtree.ml[131,5067+21]..[131,5067+27])
                    Ptyp_constr "Path.t" (typing/typedtree.ml[131,5067+21]..[131,5067+27])
                    []
                  core_type (typing/typedtree.ml[131,5067+30]..[131,5067+70])
                    Ptyp_constr "list" (typing/typedtree.ml[131,5067+66]..[131,5067+70])
                    [
                      core_type (typing/typedtree.ml[131,5067+31]..[131,5067+64])
                        Ptyp_tuple
                        [
                          core_type (typing/typedtree.ml[131,5067+31]..[131,5067+38])
                            Ptyp_constr "Ident.t" (typing/typedtree.ml[131,5067+31]..[131,5067+38])
                            []
                          core_type (typing/typedtree.ml[131,5067+41]..[131,5067+51])
                            Ptyp_constr "loc" (typing/typedtree.ml[131,5067+48]..[131,5067+51])
                            [
                              core_type (typing/typedtree.ml[131,5067+41]..[131,5067+47])
                                Ptyp_constr "string" (typing/typedtree.ml[131,5067+41]..[131,5067+47])
                                []
                            ]
                          core_type (typing/typedtree.ml[131,5067+54]..[131,5067+64])
                            Ptyp_constr "expression" (typing/typedtree.ml[131,5067+54]..[131,5067+64])
                            []
                        ]
                    ]
                ]
                None
              (typing/typedtree.ml[132,5138+2]..[134,5241+18])
                "Texp_letmodule" (typing/typedtree.ml[132,5138+4]..[132,5138+18])
                [
                  core_type (typing/typedtree.ml[133,5160+6]..[133,5160+20])
                    Ptyp_constr "option" (typing/typedtree.ml[133,5160+14]..[133,5160+20])
                    [
                      core_type (typing/typedtree.ml[133,5160+6]..[133,5160+13])
                        Ptyp_constr "Ident.t" (typing/typedtree.ml[133,5160+6]..[133,5160+13])
                        []
                    ]
                  core_type (typing/typedtree.ml[133,5160+23]..[133,5160+40])
                    Ptyp_constr "loc" (typing/typedtree.ml[133,5160+37]..[133,5160+40])
                    [
                      core_type (typing/typedtree.ml[133,5160+23]..[133,5160+36])
                        Ptyp_constr "option" (typing/typedtree.ml[133,5160+30]..[133,5160+36])
                        [
                          core_type (typing/typedtree.ml[133,5160+23]..[133,5160+29])
                            Ptyp_constr "string" (typing/typedtree.ml[133,5160+23]..[133,5160+29])
                            []
                        ]
                    ]
                  core_type (typing/typedtree.ml[133,5160+43]..[133,5160+64])
                    Ptyp_constr "Types.module_presence" (typing/typedtree.ml[133,5160+43]..[133,5160+64])
                    []
                  core_type (typing/typedtree.ml[133,5160+67]..[133,5160+78])
                    Ptyp_constr "module_expr" (typing/typedtree.ml[133,5160+67]..[133,5160+78])
                    []
                  core_type (typing/typedtree.ml[134,5241+8]..[134,5241+18])
                    Ptyp_constr "expression" (typing/typedtree.ml[134,5241+8]..[134,5241+18])
                    []
                ]
                None
              (typing/typedtree.ml[135,5260+2]..[135,5260+59])
                "Texp_letexception" (typing/typedtree.ml[135,5260+4]..[135,5260+21])
                [
                  core_type (typing/typedtree.ml[135,5260+25]..[135,5260+46])
                    Ptyp_constr "extension_constructor" (typing/typedtree.ml[135,5260+25]..[135,5260+46])
                    []
                  core_type (typing/typedtree.ml[135,5260+49]..[135,5260+59])
                    Ptyp_constr "expression" (typing/typedtree.ml[135,5260+49]..[135,5260+59])
                    []
                ]
                None
              (typing/typedtree.ml[136,5320+2]..[136,5320+29])
                "Texp_assert" (typing/typedtree.ml[136,5320+4]..[136,5320+15])
                [
                  core_type (typing/typedtree.ml[136,5320+19]..[136,5320+29])
                    Ptyp_constr "expression" (typing/typedtree.ml[136,5320+19]..[136,5320+29])
                    []
                ]
                None
              (typing/typedtree.ml[137,5350+2]..[137,5350+27])
                "Texp_lazy" (typing/typedtree.ml[137,5350+4]..[137,5350+13])
                [
                  core_type (typing/typedtree.ml[137,5350+17]..[137,5350+27])
                    Ptyp_constr "expression" (typing/typedtree.ml[137,5350+17]..[137,5350+27])
                    []
                ]
                None
              (typing/typedtree.ml[138,5378+2]..[138,5378+48])
                "Texp_object" (typing/typedtree.ml[138,5378+4]..[138,5378+15])
                [
                  core_type (typing/typedtree.ml[138,5378+19]..[138,5378+34])
                    Ptyp_constr "class_structure" (typing/typedtree.ml[138,5378+19]..[138,5378+34])
                    []
                  core_type (typing/typedtree.ml[138,5378+37]..[138,5378+48])
                    Ptyp_constr "list" (typing/typedtree.ml[138,5378+44]..[138,5378+48])
                    [
                      core_type (typing/typedtree.ml[138,5378+37]..[138,5378+43])
                        Ptyp_constr "string" (typing/typedtree.ml[138,5378+37]..[138,5378+43])
                        []
                    ]
                ]
                None
              (typing/typedtree.ml[139,5427+2]..[139,5427+28])
                "Texp_pack" (typing/typedtree.ml[139,5427+4]..[139,5427+13])
                [
                  core_type (typing/typedtree.ml[139,5427+17]..[139,5427+28])
                    Ptyp_constr "module_expr" (typing/typedtree.ml[139,5427+17]..[139,5427+28])
                    []
                ]
                None
              (typing/typedtree.ml[140,5456+2]..[146,5604+5])
                "Texp_letop" (typing/typedtree.ml[140,5456+4]..[140,5456+14])
                [
                  (typing/typedtree.ml[141,5476+6]..[141,5476+24])
                    Immutable
                    "let_" (typing/typedtree.ml[141,5476+6]..[141,5476+10])                    core_type (typing/typedtree.ml[141,5476+13]..[141,5476+23])
                      Ptyp_constr "binding_op" (typing/typedtree.ml[141,5476+13]..[141,5476+23])
                      []
                  (typing/typedtree.ml[142,5501+6]..[142,5501+29])
                    Immutable
                    "ands" (typing/typedtree.ml[142,5501+6]..[142,5501+10])                    core_type (typing/typedtree.ml[142,5501+13]..[142,5501+28])
                      Ptyp_constr "list" (typing/typedtree.ml[142,5501+24]..[142,5501+28])
                      [
                        core_type (typing/typedtree.ml[142,5501+13]..[142,5501+23])
                          Ptyp_constr "binding_op" (typing/typedtree.ml[142,5501+13]..[142,5501+23])
                          []
                      ]
                  (typing/typedtree.ml[143,5531+6]..[143,5531+22])
                    Immutable
                    "param" (typing/typedtree.ml[143,5531+6]..[143,5531+11])                    core_type (typing/typedtree.ml[143,5531+14]..[143,5531+21])
                      Ptyp_constr "Ident.t" (typing/typedtree.ml[143,5531+14]..[143,5531+21])
                      []
                  (typing/typedtree.ml[144,5554+6]..[144,5554+24])
                    Immutable
                    "body" (typing/typedtree.ml[144,5554+6]..[144,5554+10])                    core_type (typing/typedtree.ml[144,5554+13]..[144,5554+23])
                      Ptyp_constr "case" (typing/typedtree.ml[144,5554+19]..[144,5554+23])
                      [
                        core_type (typing/typedtree.ml[144,5554+13]..[144,5554+18])
                          Ptyp_constr "value" (typing/typedtree.ml[144,5554+13]..[144,5554+18])
                          []
                      ]
                  (typing/typedtree.ml[145,5579+6]..[145,5579+24])
                    Immutable
                    "partial" (typing/typedtree.ml[145,5579+6]..[145,5579+13])                    core_type (typing/typedtree.ml[145,5579+16]..[145,5579+23])
                      Ptyp_constr "partial" (typing/typedtree.ml[145,5579+16]..[145,5579+23])
                      []
                ]
                None
              (typing/typedtree.ml[147,5610+2]..[147,5610+20])
                "Texp_unreachable" (typing/typedtree.ml[147,5610+4]..[147,5610+20])
                []
                None
              (typing/typedtree.ml[148,5631+2]..[148,5631+58])
                "Texp_extension_constructor" (typing/typedtree.ml[148,5631+4]..[148,5631+30])
                [
                  core_type (typing/typedtree.ml[148,5631+34]..[148,5631+49])
                    Ptyp_constr "loc" (typing/typedtree.ml[148,5631+46]..[148,5631+49])
                    [
                      core_type (typing/typedtree.ml[148,5631+34]..[148,5631+45])
                        Ptyp_constr "Longident.t" (typing/typedtree.ml[148,5631+34]..[148,5631+45])
                        []
                    ]
                  core_type (typing/typedtree.ml[148,5631+52]..[148,5631+58])
                    Ptyp_constr "Path.t" (typing/typedtree.ml[148,5631+52]..[148,5631+58])
                    []
                ]
                None
              (typing/typedtree.ml[149,5690+2]..[149,5690+46])
                "Texp_open" (typing/typedtree.ml[149,5690+4]..[149,5690+13])
                [
                  core_type (typing/typedtree.ml[149,5690+17]..[149,5690+33])
                    Ptyp_constr "open_declaration" (typing/typedtree.ml[149,5690+17]..[149,5690+33])
                    []
                  core_type (typing/typedtree.ml[149,5690+36]..[149,5690+46])
                    Ptyp_constr "expression" (typing/typedtree.ml[149,5690+36]..[149,5690+46])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "meth" (typing/typedtree.ml[151,5738+4]..[151,5738+8]) (typing/typedtree.ml[151,5738+0]..[154,5799+38])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (typing/typedtree.ml[152,5749+2]..[152,5749+24])
                "Tmeth_name" (typing/typedtree.ml[152,5749+4]..[152,5749+14])
                [
                  core_type (typing/typedtree.ml[152,5749+18]..[152,5749+24])
                    Ptyp_constr "string" (typing/typedtree.ml[152,5749+18]..[152,5749+24])
                    []
                ]
                None
              (typing/typedtree.ml[153,5774+2]..[153,5774+24])
                "Tmeth_val" (typing/typedtree.ml[153,5774+4]..[153,5774+13])
                [
                  core_type (typing/typedtree.ml[153,5774+17]..[153,5774+24])
                    Ptyp_constr "Ident.t" (typing/typedtree.ml[153,5774+17]..[153,5774+24])
                    []
                ]
                None
              (typing/typedtree.ml[154,5799+2]..[154,5799+38])
                "Tmeth_ancestor" (typing/typedtree.ml[154,5799+4]..[154,5799+18])
                [
                  core_type (typing/typedtree.ml[154,5799+22]..[154,5799+29])
                    Ptyp_constr "Ident.t" (typing/typedtree.ml[154,5799+22]..[154,5799+29])
                    []
                  core_type (typing/typedtree.ml[154,5799+32]..[154,5799+38])
                    Ptyp_constr "Path.t" (typing/typedtree.ml[154,5799+32]..[154,5799+38])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "case" (typing/typedtree.ml[156,5839+7]..[156,5839+11]) (typing/typedtree.ml[156,5839+0]..[161,5948+5])
        ptype_params =
          [
            core_type (typing/typedtree.ml[156,5839+4]..[156,5839+6])
              Ptyp_var k
          ]
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (typing/typedtree.ml[158,5859+5]..[158,5859+31])
                Immutable
                "c_lhs" (typing/typedtree.ml[158,5859+5]..[158,5859+10])                core_type (typing/typedtree.ml[158,5859+12]..[158,5859+30])
                  Ptyp_constr "general_pattern" (typing/typedtree.ml[158,5859+15]..[158,5859+30])
                  [
                    core_type (typing/typedtree.ml[158,5859+12]..[158,5859+14])
                      Ptyp_var k
                  ]
              (typing/typedtree.ml[159,5891+5]..[159,5891+32])
                Immutable
                "c_guard" (typing/typedtree.ml[159,5891+5]..[159,5891+12])                core_type (typing/typedtree.ml[159,5891+14]..[159,5891+31])
                  Ptyp_constr "option" (typing/typedtree.ml[159,5891+25]..[159,5891+31])
                  [
                    core_type (typing/typedtree.ml[159,5891+14]..[159,5891+24])
                      Ptyp_constr "expression" (typing/typedtree.ml[159,5891+14]..[159,5891+24])
                      []
                  ]
              (typing/typedtree.ml[160,5924+5]..[160,5924+23])
                Immutable
                "c_rhs" (typing/typedtree.ml[160,5924+5]..[160,5924+10])                core_type (typing/typedtree.ml[160,5924+12]..[160,5924+22])
                  Ptyp_constr "expression" (typing/typedtree.ml[160,5924+12]..[160,5924+22])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "record_label_definition" (typing/typedtree.ml[163,5955+4]..[163,5955+27]) (typing/typedtree.ml[163,5955+0]..[165,6013+46])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (typing/typedtree.ml[164,5985+2]..[164,5985+27])
                "Kept" (typing/typedtree.ml[164,5985+4]..[164,5985+8])
                [
                  core_type (typing/typedtree.ml[164,5985+12]..[164,5985+27])
                    Ptyp_constr "Types.type_expr" (typing/typedtree.ml[164,5985+12]..[164,5985+27])
                    []
                ]
                None
              (typing/typedtree.ml[165,6013+2]..[165,6013+46])
                "Overridden" (typing/typedtree.ml[165,6013+4]..[165,6013+14])
                [
                  core_type (typing/typedtree.ml[165,6013+18]..[165,6013+33])
                    Ptyp_constr "loc" (typing/typedtree.ml[165,6013+30]..[165,6013+33])
                    [
                      core_type (typing/typedtree.ml[165,6013+18]..[165,6013+29])
                        Ptyp_constr "Longident.t" (typing/typedtree.ml[165,6013+18]..[165,6013+29])
                        []
                    ]
                  core_type (typing/typedtree.ml[165,6013+36]..[165,6013+46])
                    Ptyp_constr "expression" (typing/typedtree.ml[165,6013+36]..[165,6013+46])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "binding_op" (typing/typedtree.ml[167,6061+4]..[167,6061+14]) (typing/typedtree.ml[167,6061+0]..[175,6267+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (typing/typedtree.ml[169,6082+4]..[169,6082+25])
                Immutable
                "bop_op_path" (typing/typedtree.ml[169,6082+4]..[169,6082+15])                core_type (typing/typedtree.ml[169,6082+18]..[169,6082+24])
                  Ptyp_constr "Path.t" (typing/typedtree.ml[169,6082+18]..[169,6082+24])
                  []
              (typing/typedtree.ml[170,6108+4]..[170,6108+29])
                Immutable
                "bop_op_name" (typing/typedtree.ml[170,6108+4]..[170,6108+15])                core_type (typing/typedtree.ml[170,6108+18]..[170,6108+28])
                  Ptyp_constr "loc" (typing/typedtree.ml[170,6108+25]..[170,6108+28])
                  [
                    core_type (typing/typedtree.ml[170,6108+18]..[170,6108+24])
                      Ptyp_constr "string" (typing/typedtree.ml[170,6108+18]..[170,6108+24])
                      []
                  ]
              (typing/typedtree.ml[171,6138+4]..[171,6138+41])
                Immutable
                "bop_op_val" (typing/typedtree.ml[171,6138+4]..[171,6138+14])                core_type (typing/typedtree.ml[171,6138+17]..[171,6138+40])
                  Ptyp_constr "Types.value_description" (typing/typedtree.ml[171,6138+17]..[171,6138+40])
                  []
              (typing/typedtree.ml[172,6180+4]..[172,6180+34])
                Immutable
                "bop_op_type" (typing/typedtree.ml[172,6180+4]..[172,6180+15])                core_type (typing/typedtree.ml[172,6180+18]..[172,6180+33])
                  Ptyp_constr "Types.type_expr" (typing/typedtree.ml[172,6180+18]..[172,6180+33])
                  []
              (typing/typedtree.ml[173,6215+4]..[173,6215+25])
                Immutable
                "bop_exp" (typing/typedtree.ml[173,6215+4]..[173,6215+11])                core_type (typing/typedtree.ml[173,6215+14]..[173,6215+24])
                  Ptyp_constr "expression" (typing/typedtree.ml[173,6215+14]..[173,6215+24])
                  []
              (typing/typedtree.ml[174,6241+4]..[174,6241+25])
                Immutable
                "bop_loc" (typing/typedtree.ml[174,6241+4]..[174,6241+11])                core_type (typing/typedtree.ml[174,6241+14]..[174,6241+24])
                  Ptyp_constr "Location.t" (typing/typedtree.ml[174,6241+14]..[174,6241+24])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "class_expr" (typing/typedtree.ml[179,6320+4]..[179,6320+14]) (typing/typedtree.ml[179,6320+0]..[186,6487+5])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (typing/typedtree.ml[181,6343+5]..[181,6343+30])
                Immutable
                "cl_desc" (typing/typedtree.ml[181,6343+5]..[181,6343+12])                core_type (typing/typedtree.ml[181,6343+14]..[181,6343+29])
                  Ptyp_constr "class_expr_desc" (typing/typedtree.ml[181,6343+14]..[181,6343+29])
                  []
              (typing/typedtree.ml[182,6374+5]..[182,6374+24])
                Immutable
                "cl_loc" (typing/typedtree.ml[182,6374+5]..[182,6374+11])                core_type (typing/typedtree.ml[182,6374+13]..[182,6374+23])
                  Ptyp_constr "Location.t" (typing/typedtree.ml[182,6374+13]..[182,6374+23])
                  []
              (typing/typedtree.ml[183,6399+5]..[183,6399+31])
                Immutable
                "cl_type" (typing/typedtree.ml[183,6399+5]..[183,6399+12])                core_type (typing/typedtree.ml[183,6399+14]..[183,6399+30])
                  Ptyp_constr "Types.class_type" (typing/typedtree.ml[183,6399+14]..[183,6399+30])
                  []
              (typing/typedtree.ml[184,6431+5]..[184,6431+19])
                Immutable
                "cl_env" (typing/typedtree.ml[184,6431+5]..[184,6431+11])                core_type (typing/typedtree.ml[184,6431+13]..[184,6431+18])
                  Ptyp_constr "Env.t" (typing/typedtree.ml[184,6431+13]..[184,6431+18])
                  []
              (typing/typedtree.ml[185,6451+5]..[185,6451+35])
                Immutable
                "cl_attributes" (typing/typedtree.ml[185,6451+5]..[185,6451+18])                core_type (typing/typedtree.ml[185,6451+20]..[185,6451+34])
                  Ptyp_constr "list" (typing/typedtree.ml[185,6451+30]..[185,6451+34])
                  [
                    core_type (typing/typedtree.ml[185,6451+20]..[185,6451+29])
                      Ptyp_constr "attribute" (typing/typedtree.ml[185,6451+20]..[185,6451+29])
                      []
                  ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "class_expr_desc" (typing/typedtree.ml[188,6494+4]..[188,6494+19]) (typing/typedtree.ml[188,6494+0]..[200,7051+45])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (typing/typedtree.ml[189,6516+4]..[189,6516+58])
                "Tcl_ident" (typing/typedtree.ml[189,6516+4]..[189,6516+13])
                [
                  core_type (typing/typedtree.ml[189,6516+17]..[189,6516+23])
                    Ptyp_constr "Path.t" (typing/typedtree.ml[189,6516+17]..[189,6516+23])
                    []
                  core_type (typing/typedtree.ml[189,6516+26]..[189,6516+41])
                    Ptyp_constr "loc" (typing/typedtree.ml[189,6516+38]..[189,6516+41])
                    [
                      core_type (typing/typedtree.ml[189,6516+26]..[189,6516+37])
                        Ptyp_constr "Longident.t" (typing/typedtree.ml[189,6516+26]..[189,6516+37])
                        []
                    ]
                  core_type (typing/typedtree.ml[189,6516+44]..[189,6516+58])
                    Ptyp_constr "list" (typing/typedtree.ml[189,6516+54]..[189,6516+58])
                    [
                      core_type (typing/typedtree.ml[189,6516+44]..[189,6516+53])
                        Ptyp_constr "core_type" (typing/typedtree.ml[189,6516+44]..[189,6516+53])
                        []
                    ]
                ]
                None
              (typing/typedtree.ml[190,6575+2]..[190,6575+36])
                "Tcl_structure" (typing/typedtree.ml[190,6575+4]..[190,6575+17])
                [
                  core_type (typing/typedtree.ml[190,6575+21]..[190,6575+36])
                    Ptyp_constr "class_structure" (typing/typedtree.ml[190,6575+21]..[190,6575+36])
                    []
                ]
                None
              (typing/typedtree.ml[191,6612+2]..[193,6683+28])
                "Tcl_fun" (typing/typedtree.ml[191,6612+4]..[191,6612+11])
                [
                  core_type (typing/typedtree.ml[192,6627+6]..[192,6627+15])
                    Ptyp_constr "arg_label" (typing/typedtree.ml[192,6627+6]..[192,6627+15])
                    []
                  core_type (typing/typedtree.ml[192,6627+18]..[192,6627+25])
                    Ptyp_constr "pattern" (typing/typedtree.ml[192,6627+18]..[192,6627+25])
                    []
                  core_type (typing/typedtree.ml[192,6627+28]..[192,6627+55])
                    Ptyp_constr "list" (typing/typedtree.ml[192,6627+51]..[192,6627+55])
                    [
                      core_type (typing/typedtree.ml[192,6627+29]..[192,6627+49])
                        Ptyp_tuple
                        [
                          core_type (typing/typedtree.ml[192,6627+29]..[192,6627+36])
                            Ptyp_constr "Ident.t" (typing/typedtree.ml[192,6627+29]..[192,6627+36])
                            []
                          core_type (typing/typedtree.ml[192,6627+39]..[192,6627+49])
                            Ptyp_constr "expression" (typing/typedtree.ml[192,6627+39]..[192,6627+49])
                            []
                        ]
                    ]
                  core_type (typing/typedtree.ml[193,6683+8]..[193,6683+18])
                    Ptyp_constr "class_expr" (typing/typedtree.ml[193,6683+8]..[193,6683+18])
                    []
                  core_type (typing/typedtree.ml[193,6683+21]..[193,6683+28])
                    Ptyp_constr "partial" (typing/typedtree.ml[193,6683+21]..[193,6683+28])
                    []
                ]
                None
              (typing/typedtree.ml[194,6712+2]..[194,6712+66])
                "Tcl_apply" (typing/typedtree.ml[194,6712+4]..[194,6712+13])
                [
                  core_type (typing/typedtree.ml[194,6712+17]..[194,6712+27])
                    Ptyp_constr "class_expr" (typing/typedtree.ml[194,6712+17]..[194,6712+27])
                    []
                  core_type (typing/typedtree.ml[194,6712+30]..[194,6712+66])
                    Ptyp_constr "list" (typing/typedtree.ml[194,6712+62]..[194,6712+66])
                    [
                      core_type (typing/typedtree.ml[194,6712+31]..[194,6712+60])
                        Ptyp_tuple
                        [
                          core_type (typing/typedtree.ml[194,6712+31]..[194,6712+40])
                            Ptyp_constr "arg_label" (typing/typedtree.ml[194,6712+31]..[194,6712+40])
                            []
                          core_type (typing/typedtree.ml[194,6712+43]..[194,6712+60])
                            Ptyp_constr "option" (typing/typedtree.ml[194,6712+54]..[194,6712+60])
                            [
                              core_type (typing/typedtree.ml[194,6712+43]..[194,6712+53])
                                Ptyp_constr "expression" (typing/typedtree.ml[194,6712+43]..[194,6712+53])
                                []
                            ]
                        ]
                    ]
                ]
                None
              (typing/typedtree.ml[195,6779+2]..[196,6826+58])
                "Tcl_let" (typing/typedtree.ml[195,6779+4]..[195,6779+11])
                [
                  core_type (typing/typedtree.ml[195,6779+15]..[195,6779+23])
                    Ptyp_constr "rec_flag" (typing/typedtree.ml[195,6779+15]..[195,6779+23])
                    []
                  core_type (typing/typedtree.ml[195,6779+26]..[195,6779+44])
                    Ptyp_constr "list" (typing/typedtree.ml[195,6779+40]..[195,6779+44])
                    [
                      core_type (typing/typedtree.ml[195,6779+26]..[195,6779+39])
                        Ptyp_constr "value_binding" (typing/typedtree.ml[195,6779+26]..[195,6779+39])
                        []
                    ]
                  core_type (typing/typedtree.ml[196,6826+18]..[196,6826+45])
                    Ptyp_constr "list" (typing/typedtree.ml[196,6826+41]..[196,6826+45])
                    [
                      core_type (typing/typedtree.ml[196,6826+19]..[196,6826+39])
                        Ptyp_tuple
                        [
                          core_type (typing/typedtree.ml[196,6826+19]..[196,6826+26])
                            Ptyp_constr "Ident.t" (typing/typedtree.ml[196,6826+19]..[196,6826+26])
                            []
                          core_type (typing/typedtree.ml[196,6826+29]..[196,6826+39])
                            Ptyp_constr "expression" (typing/typedtree.ml[196,6826+29]..[196,6826+39])
                            []
                        ]
                    ]
                  core_type (typing/typedtree.ml[196,6826+48]..[196,6826+58])
                    Ptyp_constr "class_expr" (typing/typedtree.ml[196,6826+48]..[196,6826+58])
                    []
                ]
                None
              (typing/typedtree.ml[197,6885+2]..[198,6907+76])
                "Tcl_constraint" (typing/typedtree.ml[197,6885+4]..[197,6885+18])
                [
                  core_type (typing/typedtree.ml[198,6907+6]..[198,6907+16])
                    Ptyp_constr "class_expr" (typing/typedtree.ml[198,6907+6]..[198,6907+16])
                    []
                  core_type (typing/typedtree.ml[198,6907+19]..[198,6907+36])
                    Ptyp_constr "option" (typing/typedtree.ml[198,6907+30]..[198,6907+36])
                    [
                      core_type (typing/typedtree.ml[198,6907+19]..[198,6907+29])
                        Ptyp_constr "class_type" (typing/typedtree.ml[198,6907+19]..[198,6907+29])
                        []
                    ]
                  core_type (typing/typedtree.ml[198,6907+39]..[198,6907+50])
                    Ptyp_constr "list" (typing/typedtree.ml[198,6907+46]..[198,6907+50])
                    [
                      core_type (typing/typedtree.ml[198,6907+39]..[198,6907+45])
                        Ptyp_constr "string" (typing/typedtree.ml[198,6907+39]..[198,6907+45])
                        []
                    ]
                  core_type (typing/typedtree.ml[198,6907+53]..[198,6907+64])
                    Ptyp_constr "list" (typing/typedtree.ml[198,6907+60]..[198,6907+64])
                    [
                      core_type (typing/typedtree.ml[198,6907+53]..[198,6907+59])
                        Ptyp_constr "string" (typing/typedtree.ml[198,6907+53]..[198,6907+59])
                        []
                    ]
                  core_type (typing/typedtree.ml[198,6907+67]..[198,6907+76])
                    Ptyp_constr "MethSet.t" (typing/typedtree.ml[198,6907+67]..[198,6907+76])
                    []
                ]
                None
              (typing/typedtree.ml[200,7051+2]..[200,7051+45])
                "Tcl_open" (typing/typedtree.ml[200,7051+4]..[200,7051+12])
                [
                  core_type (typing/typedtree.ml[200,7051+16]..[200,7051+32])
                    Ptyp_constr "open_description" (typing/typedtree.ml[200,7051+16]..[200,7051+32])
                    []
                  core_type (typing/typedtree.ml[200,7051+35]..[200,7051+45])
                    Ptyp_constr "class_expr" (typing/typedtree.ml[200,7051+35]..[200,7051+45])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "class_structure" (typing/typedtree.ml[202,7098+4]..[202,7098+19]) (typing/typedtree.ml[202,7098+0]..[208,7250+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (typing/typedtree.ml[204,7124+3]..[204,7124+22])
                Immutable
                "cstr_self" (typing/typedtree.ml[204,7124+3]..[204,7124+12])                core_type (typing/typedtree.ml[204,7124+14]..[204,7124+21])
                  Ptyp_constr "pattern" (typing/typedtree.ml[204,7124+14]..[204,7124+21])
                  []
              (typing/typedtree.ml[205,7147+3]..[205,7147+33])
                Immutable
                "cstr_fields" (typing/typedtree.ml[205,7147+3]..[205,7147+14])                core_type (typing/typedtree.ml[205,7147+16]..[205,7147+32])
                  Ptyp_constr "list" (typing/typedtree.ml[205,7147+28]..[205,7147+32])
                  [
                    core_type (typing/typedtree.ml[205,7147+16]..[205,7147+27])
                      Ptyp_constr "class_field" (typing/typedtree.ml[205,7147+16]..[205,7147+27])
                      []
                  ]
              (typing/typedtree.ml[206,7181+3]..[206,7181+36])
                Immutable
                "cstr_type" (typing/typedtree.ml[206,7181+3]..[206,7181+12])                core_type (typing/typedtree.ml[206,7181+14]..[206,7181+35])
                  Ptyp_constr "Types.class_signature" (typing/typedtree.ml[206,7181+14]..[206,7181+35])
                  []
              (typing/typedtree.ml[207,7218+3]..[207,7218+31])
                Immutable
                "cstr_meths" (typing/typedtree.ml[207,7218+3]..[207,7218+13])                core_type (typing/typedtree.ml[207,7218+15]..[207,7218+30])
                  Ptyp_constr "Meths.t" (typing/typedtree.ml[207,7218+23]..[207,7218+30])
                  [
                    core_type (typing/typedtree.ml[207,7218+15]..[207,7218+22])
                      Ptyp_constr "Ident.t" (typing/typedtree.ml[207,7218+15]..[207,7218+22])
                      []
                  ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "class_field" (typing/typedtree.ml[210,7255+4]..[210,7255+15]) (typing/typedtree.ml[210,7255+0]..[215,7368+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (typing/typedtree.ml[212,7278+4]..[212,7278+30])
                Immutable
                "cf_desc" (typing/typedtree.ml[212,7278+4]..[212,7278+11])                core_type (typing/typedtree.ml[212,7278+13]..[212,7278+29])
                  Ptyp_constr "class_field_desc" (typing/typedtree.ml[212,7278+13]..[212,7278+29])
                  []
              (typing/typedtree.ml[213,7309+4]..[213,7309+23])
                Immutable
                "cf_loc" (typing/typedtree.ml[213,7309+4]..[213,7309+10])                core_type (typing/typedtree.ml[213,7309+12]..[213,7309+22])
                  Ptyp_constr "Location.t" (typing/typedtree.ml[213,7309+12]..[213,7309+22])
                  []
              (typing/typedtree.ml[214,7333+4]..[214,7333+34])
                Immutable
                "cf_attributes" (typing/typedtree.ml[214,7333+4]..[214,7333+17])                core_type (typing/typedtree.ml[214,7333+19]..[214,7333+33])
                  Ptyp_constr "list" (typing/typedtree.ml[214,7333+29]..[214,7333+33])
                  [
                    core_type (typing/typedtree.ml[214,7333+19]..[214,7333+28])
                      Ptyp_constr "attribute" (typing/typedtree.ml[214,7333+19]..[214,7333+28])
                      []
                  ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "class_field_kind" (typing/typedtree.ml[217,7373+4]..[217,7373+20]) (typing/typedtree.ml[217,7373+0]..[219,7426+47])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (typing/typedtree.ml[218,7396+2]..[218,7396+29])
                "Tcfk_virtual" (typing/typedtree.ml[218,7396+4]..[218,7396+16])
                [
                  core_type (typing/typedtree.ml[218,7396+20]..[218,7396+29])
                    Ptyp_constr "core_type" (typing/typedtree.ml[218,7396+20]..[218,7396+29])
                    []
                ]
                None
              (typing/typedtree.ml[219,7426+2]..[219,7426+47])
                "Tcfk_concrete" (typing/typedtree.ml[219,7426+4]..[219,7426+17])
                [
                  core_type (typing/typedtree.ml[219,7426+21]..[219,7426+34])
                    Ptyp_constr "override_flag" (typing/typedtree.ml[219,7426+21]..[219,7426+34])
                    []
                  core_type (typing/typedtree.ml[219,7426+37]..[219,7426+47])
                    Ptyp_constr "expression" (typing/typedtree.ml[219,7426+37]..[219,7426+47])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "class_field_desc" (typing/typedtree.ml[221,7475+4]..[221,7475+20]) (typing/typedtree.ml[221,7475+0]..[230,7904+30])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (typing/typedtree.ml[222,7498+4]..[224,7594+31])
                "Tcf_inherit" (typing/typedtree.ml[222,7498+4]..[222,7498+15])
                [
                  core_type (typing/typedtree.ml[223,7517+6]..[223,7517+19])
                    Ptyp_constr "override_flag" (typing/typedtree.ml[223,7517+6]..[223,7517+19])
                    []
                  core_type (typing/typedtree.ml[223,7517+22]..[223,7517+32])
                    Ptyp_constr "class_expr" (typing/typedtree.ml[223,7517+22]..[223,7517+32])
                    []
                  core_type (typing/typedtree.ml[223,7517+35]..[223,7517+48])
                    Ptyp_constr "option" (typing/typedtree.ml[223,7517+42]..[223,7517+48])
                    [
                      core_type (typing/typedtree.ml[223,7517+35]..[223,7517+41])
                        Ptyp_constr "string" (typing/typedtree.ml[223,7517+35]..[223,7517+41])
                        []
                    ]
                  core_type (typing/typedtree.ml[223,7517+51]..[223,7517+74])
                    Ptyp_constr "list" (typing/typedtree.ml[223,7517+70]..[223,7517+74])
                    [
                      core_type (typing/typedtree.ml[223,7517+52]..[223,7517+68])
                        Ptyp_tuple
                        [
                          core_type (typing/typedtree.ml[223,7517+52]..[223,7517+58])
                            Ptyp_constr "string" (typing/typedtree.ml[223,7517+52]..[223,7517+58])
                            []
                          core_type (typing/typedtree.ml[223,7517+61]..[223,7517+68])
                            Ptyp_constr "Ident.t" (typing/typedtree.ml[223,7517+61]..[223,7517+68])
                            []
                        ]
                    ]
                  core_type (typing/typedtree.ml[224,7594+8]..[224,7594+31])
                    Ptyp_constr "list" (typing/typedtree.ml[224,7594+27]..[224,7594+31])
                    [
                      core_type (typing/typedtree.ml[224,7594+9]..[224,7594+25])
                        Ptyp_tuple
                        [
                          core_type (typing/typedtree.ml[224,7594+9]..[224,7594+15])
                            Ptyp_constr "string" (typing/typedtree.ml[224,7594+9]..[224,7594+15])
                            []
                          core_type (typing/typedtree.ml[224,7594+18]..[224,7594+25])
                            Ptyp_constr "Ident.t" (typing/typedtree.ml[224,7594+18]..[224,7594+25])
                            []
                        ]
                    ]
                ]
                None
              (typing/typedtree.ml[226,7686+2]..[226,7686+76])
                "Tcf_val" (typing/typedtree.ml[226,7686+4]..[226,7686+11])
                [
                  core_type (typing/typedtree.ml[226,7686+15]..[226,7686+25])
                    Ptyp_constr "loc" (typing/typedtree.ml[226,7686+22]..[226,7686+25])
                    [
                      core_type (typing/typedtree.ml[226,7686+15]..[226,7686+21])
                        Ptyp_constr "string" (typing/typedtree.ml[226,7686+15]..[226,7686+21])
                        []
                    ]
                  core_type (typing/typedtree.ml[226,7686+28]..[226,7686+40])
                    Ptyp_constr "mutable_flag" (typing/typedtree.ml[226,7686+28]..[226,7686+40])
                    []
                  core_type (typing/typedtree.ml[226,7686+43]..[226,7686+50])
                    Ptyp_constr "Ident.t" (typing/typedtree.ml[226,7686+43]..[226,7686+50])
                    []
                  core_type (typing/typedtree.ml[226,7686+53]..[226,7686+69])
                    Ptyp_constr "class_field_kind" (typing/typedtree.ml[226,7686+53]..[226,7686+69])
                    []
                  core_type (typing/typedtree.ml[226,7686+72]..[226,7686+76])
                    Ptyp_constr "bool" (typing/typedtree.ml[226,7686+72]..[226,7686+76])
                    []
                ]
                None
              (typing/typedtree.ml[227,7763+2]..[227,7763+62])
                "Tcf_method" (typing/typedtree.ml[227,7763+4]..[227,7763+14])
                [
                  core_type (typing/typedtree.ml[227,7763+18]..[227,7763+28])
                    Ptyp_constr "loc" (typing/typedtree.ml[227,7763+25]..[227,7763+28])
                    [
                      core_type (typing/typedtree.ml[227,7763+18]..[227,7763+24])
                        Ptyp_constr "string" (typing/typedtree.ml[227,7763+18]..[227,7763+24])
                        []
                    ]
                  core_type (typing/typedtree.ml[227,7763+31]..[227,7763+43])
                    Ptyp_constr "private_flag" (typing/typedtree.ml[227,7763+31]..[227,7763+43])
                    []
                  core_type (typing/typedtree.ml[227,7763+46]..[227,7763+62])
                    Ptyp_constr "class_field_kind" (typing/typedtree.ml[227,7763+46]..[227,7763+62])
                    []
                ]
                None
              (typing/typedtree.ml[228,7826+2]..[228,7826+43])
                "Tcf_constraint" (typing/typedtree.ml[228,7826+4]..[228,7826+18])
                [
                  core_type (typing/typedtree.ml[228,7826+22]..[228,7826+31])
                    Ptyp_constr "core_type" (typing/typedtree.ml[228,7826+22]..[228,7826+31])
                    []
                  core_type (typing/typedtree.ml[228,7826+34]..[228,7826+43])
                    Ptyp_constr "core_type" (typing/typedtree.ml[228,7826+34]..[228,7826+43])
                    []
                ]
                None
              (typing/typedtree.ml[229,7870+2]..[229,7870+33])
                "Tcf_initializer" (typing/typedtree.ml[229,7870+4]..[229,7870+19])
                [
                  core_type (typing/typedtree.ml[229,7870+23]..[229,7870+33])
                    Ptyp_constr "expression" (typing/typedtree.ml[229,7870+23]..[229,7870+33])
                    []
                ]
                None
              (typing/typedtree.ml[230,7904+2]..[230,7904+30])
                "Tcf_attribute" (typing/typedtree.ml[230,7904+4]..[230,7904+17])
                [
                  core_type (typing/typedtree.ml[230,7904+21]..[230,7904+30])
                    Ptyp_constr "attribute" (typing/typedtree.ml[230,7904+21]..[230,7904+30])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "module_expr" (typing/typedtree.ml[234,7985+4]..[234,7985+15]) (typing/typedtree.ml[234,7985+0]..[240,8149+4])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (typing/typedtree.ml[235,8003+4]..[235,8003+31])
                Immutable
                "mod_desc" (typing/typedtree.ml[235,8003+4]..[235,8003+12])                core_type (typing/typedtree.ml[235,8003+14]..[235,8003+30])
                  Ptyp_constr "module_expr_desc" (typing/typedtree.ml[235,8003+14]..[235,8003+30])
                  []
              (typing/typedtree.ml[236,8035+4]..[236,8035+24])
                Immutable
                "mod_loc" (typing/typedtree.ml[236,8035+4]..[236,8035+11])                core_type (typing/typedtree.ml[236,8035+13]..[236,8035+23])
                  Ptyp_constr "Location.t" (typing/typedtree.ml[236,8035+13]..[236,8035+23])
                  []
              (typing/typedtree.ml[237,8060+4]..[237,8060+32])
                Immutable
                "mod_type" (typing/typedtree.ml[237,8060+4]..[237,8060+12])                core_type (typing/typedtree.ml[237,8060+14]..[237,8060+31])
                  Ptyp_constr "Types.module_type" (typing/typedtree.ml[237,8060+14]..[237,8060+31])
                  []
              (typing/typedtree.ml[238,8093+4]..[238,8093+19])
                Immutable
                "mod_env" (typing/typedtree.ml[238,8093+4]..[238,8093+11])                core_type (typing/typedtree.ml[238,8093+13]..[238,8093+18])
                  Ptyp_constr "Env.t" (typing/typedtree.ml[238,8093+13]..[238,8093+18])
                  []
              (typing/typedtree.ml[239,8113+4]..[239,8113+35])
                Immutable
                "mod_attributes" (typing/typedtree.ml[239,8113+4]..[239,8113+18])                core_type (typing/typedtree.ml[239,8113+20]..[239,8113+34])
                  Ptyp_constr "list" (typing/typedtree.ml[239,8113+30]..[239,8113+34])
                  [
                    core_type (typing/typedtree.ml[239,8113+20]..[239,8113+29])
                      Ptyp_constr "attribute" (typing/typedtree.ml[239,8113+20]..[239,8113+29])
                      []
                  ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "module_type_constraint" (typing/typedtree.ml[242,8155+4]..[242,8155+26]) (typing/typedtree.ml[242,8155+0]..[244,8204+34])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (typing/typedtree.ml[243,8184+2]..[243,8184+19])
                "Tmodtype_implicit" (typing/typedtree.ml[243,8184+2]..[243,8184+19])
                []
                None
              (typing/typedtree.ml[244,8204+0]..[244,8204+34])
                "Tmodtype_explicit" (typing/typedtree.ml[244,8204+2]..[244,8204+19])
                [
                  core_type (typing/typedtree.ml[244,8204+23]..[244,8204+34])
                    Ptyp_constr "module_type" (typing/typedtree.ml[244,8204+23]..[244,8204+34])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "functor_parameter" (typing/typedtree.ml[246,8240+4]..[246,8240+21]) (typing/typedtree.ml[246,8240+0]..[248,8273+61])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (typing/typedtree.ml[247,8264+2]..[247,8264+8])
                "Unit" (typing/typedtree.ml[247,8264+4]..[247,8264+8])
                []
                None
              (typing/typedtree.ml[248,8273+2]..[248,8273+61])
                "Named" (typing/typedtree.ml[248,8273+4]..[248,8273+9])
                [
                  core_type (typing/typedtree.ml[248,8273+13]..[248,8273+27])
                    Ptyp_constr "option" (typing/typedtree.ml[248,8273+21]..[248,8273+27])
                    [
                      core_type (typing/typedtree.ml[248,8273+13]..[248,8273+20])
                        Ptyp_constr "Ident.t" (typing/typedtree.ml[248,8273+13]..[248,8273+20])
                        []
                    ]
                  core_type (typing/typedtree.ml[248,8273+30]..[248,8273+47])
                    Ptyp_constr "loc" (typing/typedtree.ml[248,8273+44]..[248,8273+47])
                    [
                      core_type (typing/typedtree.ml[248,8273+30]..[248,8273+43])
                        Ptyp_constr "option" (typing/typedtree.ml[248,8273+37]..[248,8273+43])
                        [
                          core_type (typing/typedtree.ml[248,8273+30]..[248,8273+36])
                            Ptyp_constr "string" (typing/typedtree.ml[248,8273+30]..[248,8273+36])
                            []
                        ]
                    ]
                  core_type (typing/typedtree.ml[248,8273+50]..[248,8273+61])
                    Ptyp_constr "module_type" (typing/typedtree.ml[248,8273+50]..[248,8273+61])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "module_expr_desc" (typing/typedtree.ml[250,8336+4]..[250,8336+20]) (typing/typedtree.ml[250,8336+0]..[257,8652+49])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (typing/typedtree.ml[251,8359+4]..[251,8359+42])
                "Tmod_ident" (typing/typedtree.ml[251,8359+4]..[251,8359+14])
                [
                  core_type (typing/typedtree.ml[251,8359+18]..[251,8359+24])
                    Ptyp_constr "Path.t" (typing/typedtree.ml[251,8359+18]..[251,8359+24])
                    []
                  core_type (typing/typedtree.ml[251,8359+27]..[251,8359+42])
                    Ptyp_constr "loc" (typing/typedtree.ml[251,8359+39]..[251,8359+42])
                    [
                      core_type (typing/typedtree.ml[251,8359+27]..[251,8359+38])
                        Ptyp_constr "Longident.t" (typing/typedtree.ml[251,8359+27]..[251,8359+38])
                        []
                    ]
                ]
                None
              (typing/typedtree.ml[252,8402+2]..[252,8402+31])
                "Tmod_structure" (typing/typedtree.ml[252,8402+4]..[252,8402+18])
                [
                  core_type (typing/typedtree.ml[252,8402+22]..[252,8402+31])
                    Ptyp_constr "structure" (typing/typedtree.ml[252,8402+22]..[252,8402+31])
                    []
                ]
                None
              (typing/typedtree.ml[253,8434+2]..[253,8434+51])
                "Tmod_functor" (typing/typedtree.ml[253,8434+4]..[253,8434+16])
                [
                  core_type (typing/typedtree.ml[253,8434+20]..[253,8434+37])
                    Ptyp_constr "functor_parameter" (typing/typedtree.ml[253,8434+20]..[253,8434+37])
                    []
                  core_type (typing/typedtree.ml[253,8434+40]..[253,8434+51])
                    Ptyp_constr "module_expr" (typing/typedtree.ml[253,8434+40]..[253,8434+51])
                    []
                ]
                None
              (typing/typedtree.ml[254,8486+2]..[254,8486+61])
                "Tmod_apply" (typing/typedtree.ml[254,8486+4]..[254,8486+14])
                [
                  core_type (typing/typedtree.ml[254,8486+18]..[254,8486+29])
                    Ptyp_constr "module_expr" (typing/typedtree.ml[254,8486+18]..[254,8486+29])
                    []
                  core_type (typing/typedtree.ml[254,8486+32]..[254,8486+43])
                    Ptyp_constr "module_expr" (typing/typedtree.ml[254,8486+32]..[254,8486+43])
                    []
                  core_type (typing/typedtree.ml[254,8486+46]..[254,8486+61])
                    Ptyp_constr "module_coercion" (typing/typedtree.ml[254,8486+46]..[254,8486+61])
                    []
                ]
                None
              (typing/typedtree.ml[255,8548+2]..[256,8571+80])
                "Tmod_constraint" (typing/typedtree.ml[255,8548+4]..[255,8548+19])
                [
                  core_type (typing/typedtree.ml[256,8571+6]..[256,8571+17])
                    Ptyp_constr "module_expr" (typing/typedtree.ml[256,8571+6]..[256,8571+17])
                    []
                  core_type (typing/typedtree.ml[256,8571+20]..[256,8571+37])
                    Ptyp_constr "Types.module_type" (typing/typedtree.ml[256,8571+20]..[256,8571+37])
                    []
                  core_type (typing/typedtree.ml[256,8571+40]..[256,8571+62])
                    Ptyp_constr "module_type_constraint" (typing/typedtree.ml[256,8571+40]..[256,8571+62])
                    []
                  core_type (typing/typedtree.ml[256,8571+65]..[256,8571+80])
                    Ptyp_constr "module_coercion" (typing/typedtree.ml[256,8571+65]..[256,8571+80])
                    []
                ]
                None
              (typing/typedtree.ml[257,8652+2]..[257,8652+49])
                "Tmod_unpack" (typing/typedtree.ml[257,8652+4]..[257,8652+15])
                [
                  core_type (typing/typedtree.ml[257,8652+19]..[257,8652+29])
                    Ptyp_constr "expression" (typing/typedtree.ml[257,8652+19]..[257,8652+29])
                    []
                  core_type (typing/typedtree.ml[257,8652+32]..[257,8652+49])
                    Ptyp_constr "Types.module_type" (typing/typedtree.ml[257,8652+32]..[257,8652+49])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "structure" (typing/typedtree.ml[259,8703+4]..[259,8703+13]) (typing/typedtree.ml[259,8703+0]..[263,8811+1])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (typing/typedtree.ml[260,8721+2]..[260,8721+34])
                Immutable
                "str_items" (typing/typedtree.ml[260,8721+2]..[260,8721+11])                core_type (typing/typedtree.ml[260,8721+14]..[260,8721+33])
                  Ptyp_constr "list" (typing/typedtree.ml[260,8721+29]..[260,8721+33])
                  [
                    core_type (typing/typedtree.ml[260,8721+14]..[260,8721+28])
                      Ptyp_constr "structure_item" (typing/typedtree.ml[260,8721+14]..[260,8721+28])
                      []
                  ]
              (typing/typedtree.ml[261,8756+2]..[261,8756+29])
                Immutable
                "str_type" (typing/typedtree.ml[261,8756+2]..[261,8756+10])                core_type (typing/typedtree.ml[261,8756+13]..[261,8756+28])
                  Ptyp_constr "Types.signature" (typing/typedtree.ml[261,8756+13]..[261,8756+28])
                  []
              (typing/typedtree.ml[262,8786+2]..[262,8786+24])
                Immutable
                "str_final_env" (typing/typedtree.ml[262,8786+2]..[262,8786+15])                core_type (typing/typedtree.ml[262,8786+18]..[262,8786+23])
                  Ptyp_constr "Env.t" (typing/typedtree.ml[262,8786+18]..[262,8786+23])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "structure_item" (typing/typedtree.ml[265,8814+4]..[265,8814+18]) (typing/typedtree.ml[265,8814+0]..[269,8917+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (typing/typedtree.ml[266,8835+4]..[266,8835+35])
                Immutable
                "str_desc" (typing/typedtree.ml[266,8835+4]..[266,8835+12])                core_type (typing/typedtree.ml[266,8835+15]..[266,8835+34])
                  Ptyp_constr "structure_item_desc" (typing/typedtree.ml[266,8835+15]..[266,8835+34])
                  []
              (typing/typedtree.ml[267,8871+4]..[267,8871+25])
                Immutable
                "str_loc" (typing/typedtree.ml[267,8871+4]..[267,8871+11])                core_type (typing/typedtree.ml[267,8871+14]..[267,8871+24])
                  Ptyp_constr "Location.t" (typing/typedtree.ml[267,8871+14]..[267,8871+24])
                  []
              (typing/typedtree.ml[268,8897+4]..[268,8897+19])
                Immutable
                "str_env" (typing/typedtree.ml[268,8897+4]..[268,8897+11])                core_type (typing/typedtree.ml[268,8897+14]..[268,8897+19])
                  Ptyp_constr "Env.t" (typing/typedtree.ml[268,8897+14]..[268,8897+19])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "structure_item_desc" (typing/typedtree.ml[271,8922+4]..[271,8922+23]) (typing/typedtree.ml[271,8922+0]..[285,9525+31])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (typing/typedtree.ml[272,8948+4]..[272,8948+40])
                "Tstr_eval" (typing/typedtree.ml[272,8948+4]..[272,8948+13])
                [
                  core_type (typing/typedtree.ml[272,8948+17]..[272,8948+27])
                    Ptyp_constr "expression" (typing/typedtree.ml[272,8948+17]..[272,8948+27])
                    []
                  core_type (typing/typedtree.ml[272,8948+30]..[272,8948+40])
                    Ptyp_constr "attributes" (typing/typedtree.ml[272,8948+30]..[272,8948+40])
                    []
                ]
                None
              (typing/typedtree.ml[273,8989+2]..[273,8989+47])
                "Tstr_value" (typing/typedtree.ml[273,8989+4]..[273,8989+14])
                [
                  core_type (typing/typedtree.ml[273,8989+18]..[273,8989+26])
                    Ptyp_constr "rec_flag" (typing/typedtree.ml[273,8989+18]..[273,8989+26])
                    []
                  core_type (typing/typedtree.ml[273,8989+29]..[273,8989+47])
                    Ptyp_constr "list" (typing/typedtree.ml[273,8989+43]..[273,8989+47])
                    [
                      core_type (typing/typedtree.ml[273,8989+29]..[273,8989+42])
                        Ptyp_constr "value_binding" (typing/typedtree.ml[273,8989+29]..[273,8989+42])
                        []
                    ]
                ]
                None
              (typing/typedtree.ml[274,9037+2]..[274,9037+39])
                "Tstr_primitive" (typing/typedtree.ml[274,9037+4]..[274,9037+18])
                [
                  core_type (typing/typedtree.ml[274,9037+22]..[274,9037+39])
                    Ptyp_constr "value_description" (typing/typedtree.ml[274,9037+22]..[274,9037+39])
                    []
                ]
                None
              (typing/typedtree.ml[275,9077+2]..[275,9077+49])
                "Tstr_type" (typing/typedtree.ml[275,9077+4]..[275,9077+13])
                [
                  core_type (typing/typedtree.ml[275,9077+17]..[275,9077+25])
                    Ptyp_constr "rec_flag" (typing/typedtree.ml[275,9077+17]..[275,9077+25])
                    []
                  core_type (typing/typedtree.ml[275,9077+28]..[275,9077+49])
                    Ptyp_constr "list" (typing/typedtree.ml[275,9077+45]..[275,9077+49])
                    [
                      core_type (typing/typedtree.ml[275,9077+28]..[275,9077+44])
                        Ptyp_constr "type_declaration" (typing/typedtree.ml[275,9077+28]..[275,9077+44])
                        []
                    ]
                ]
                None
              (typing/typedtree.ml[276,9127+2]..[276,9127+33])
                "Tstr_typext" (typing/typedtree.ml[276,9127+4]..[276,9127+15])
                [
                  core_type (typing/typedtree.ml[276,9127+19]..[276,9127+33])
                    Ptyp_constr "type_extension" (typing/typedtree.ml[276,9127+19]..[276,9127+33])
                    []
                ]
                None
              (typing/typedtree.ml[277,9161+2]..[277,9161+36])
                "Tstr_exception" (typing/typedtree.ml[277,9161+4]..[277,9161+18])
                [
                  core_type (typing/typedtree.ml[277,9161+22]..[277,9161+36])
                    Ptyp_constr "type_exception" (typing/typedtree.ml[277,9161+22]..[277,9161+36])
                    []
                ]
                None
              (typing/typedtree.ml[278,9198+2]..[278,9198+33])
                "Tstr_module" (typing/typedtree.ml[278,9198+4]..[278,9198+15])
                [
                  core_type (typing/typedtree.ml[278,9198+19]..[278,9198+33])
                    Ptyp_constr "module_binding" (typing/typedtree.ml[278,9198+19]..[278,9198+33])
                    []
                ]
                None
              (typing/typedtree.ml[279,9232+2]..[279,9232+41])
                "Tstr_recmodule" (typing/typedtree.ml[279,9232+4]..[279,9232+18])
                [
                  core_type (typing/typedtree.ml[279,9232+22]..[279,9232+41])
                    Ptyp_constr "list" (typing/typedtree.ml[279,9232+37]..[279,9232+41])
                    [
                      core_type (typing/typedtree.ml[279,9232+22]..[279,9232+36])
                        Ptyp_constr "module_binding" (typing/typedtree.ml[279,9232+22]..[279,9232+36])
                        []
                    ]
                ]
                None
              (typing/typedtree.ml[280,9274+2]..[280,9274+43])
                "Tstr_modtype" (typing/typedtree.ml[280,9274+4]..[280,9274+16])
                [
                  core_type (typing/typedtree.ml[280,9274+20]..[280,9274+43])
                    Ptyp_constr "module_type_declaration" (typing/typedtree.ml[280,9274+20]..[280,9274+43])
                    []
                ]
                None
              (typing/typedtree.ml[281,9318+2]..[281,9318+33])
                "Tstr_open" (typing/typedtree.ml[281,9318+4]..[281,9318+13])
                [
                  core_type (typing/typedtree.ml[281,9318+17]..[281,9318+33])
                    Ptyp_constr "open_declaration" (typing/typedtree.ml[281,9318+17]..[281,9318+33])
                    []
                ]
                None
              (typing/typedtree.ml[282,9352+2]..[282,9352+56])
                "Tstr_class" (typing/typedtree.ml[282,9352+4]..[282,9352+14])
                [
                  core_type (typing/typedtree.ml[282,9352+18]..[282,9352+56])
                    Ptyp_constr "list" (typing/typedtree.ml[282,9352+52]..[282,9352+56])
                    [
                      core_type (typing/typedtree.ml[282,9352+19]..[282,9352+50])
                        Ptyp_tuple
                        [
                          core_type (typing/typedtree.ml[282,9352+19]..[282,9352+36])
                            Ptyp_constr "class_declaration" (typing/typedtree.ml[282,9352+19]..[282,9352+36])
                            []
                          core_type (typing/typedtree.ml[282,9352+39]..[282,9352+50])
                            Ptyp_constr "list" (typing/typedtree.ml[282,9352+46]..[282,9352+50])
                            [
                              core_type (typing/typedtree.ml[282,9352+39]..[282,9352+45])
                                Ptyp_constr "string" (typing/typedtree.ml[282,9352+39]..[282,9352+45])
                                []
                            ]
                        ]
                    ]
                ]
                None
              (typing/typedtree.ml[283,9409+2]..[283,9409+75])
                "Tstr_class_type" (typing/typedtree.ml[283,9409+4]..[283,9409+19])
                [
                  core_type (typing/typedtree.ml[283,9409+23]..[283,9409+75])
                    Ptyp_constr "list" (typing/typedtree.ml[283,9409+71]..[283,9409+75])
                    [
                      core_type (typing/typedtree.ml[283,9409+24]..[283,9409+69])
                        Ptyp_tuple
                        [
                          core_type (typing/typedtree.ml[283,9409+24]..[283,9409+31])
                            Ptyp_constr "Ident.t" (typing/typedtree.ml[283,9409+24]..[283,9409+31])
                            []
                          core_type (typing/typedtree.ml[283,9409+34]..[283,9409+44])
                            Ptyp_constr "loc" (typing/typedtree.ml[283,9409+41]..[283,9409+44])
                            [
                              core_type (typing/typedtree.ml[283,9409+34]..[283,9409+40])
                                Ptyp_constr "string" (typing/typedtree.ml[283,9409+34]..[283,9409+40])
                                []
                            ]
                          core_type (typing/typedtree.ml[283,9409+47]..[283,9409+69])
                            Ptyp_constr "class_type_declaration" (typing/typedtree.ml[283,9409+47]..[283,9409+69])
                            []
                        ]
                    ]
                ]
                None
              (typing/typedtree.ml[284,9485+2]..[284,9485+39])
                "Tstr_include" (typing/typedtree.ml[284,9485+4]..[284,9485+16])
                [
                  core_type (typing/typedtree.ml[284,9485+20]..[284,9485+39])
                    Ptyp_constr "include_declaration" (typing/typedtree.ml[284,9485+20]..[284,9485+39])
                    []
                ]
                None
              (typing/typedtree.ml[285,9525+2]..[285,9525+31])
                "Tstr_attribute" (typing/typedtree.ml[285,9525+4]..[285,9525+18])
                [
                  core_type (typing/typedtree.ml[285,9525+22]..[285,9525+31])
                    Ptyp_constr "attribute" (typing/typedtree.ml[285,9525+22]..[285,9525+31])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "module_binding" (typing/typedtree.ml[287,9558+4]..[287,9558+18]) (typing/typedtree.ml[287,9558+0]..[295,9769+5])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (typing/typedtree.ml[289,9585+5]..[289,9585+27])
                Immutable
                "mb_id" (typing/typedtree.ml[289,9585+5]..[289,9585+10])                core_type (typing/typedtree.ml[289,9585+12]..[289,9585+26])
                  Ptyp_constr "option" (typing/typedtree.ml[289,9585+20]..[289,9585+26])
                  [
                    core_type (typing/typedtree.ml[289,9585+12]..[289,9585+19])
                      Ptyp_constr "Ident.t" (typing/typedtree.ml[289,9585+12]..[289,9585+19])
                      []
                  ]
              (typing/typedtree.ml[290,9613+5]..[290,9613+32])
                Immutable
                "mb_name" (typing/typedtree.ml[290,9613+5]..[290,9613+12])                core_type (typing/typedtree.ml[290,9613+14]..[290,9613+31])
                  Ptyp_constr "loc" (typing/typedtree.ml[290,9613+28]..[290,9613+31])
                  [
                    core_type (typing/typedtree.ml[290,9613+14]..[290,9613+27])
                      Ptyp_constr "option" (typing/typedtree.ml[290,9613+21]..[290,9613+27])
                      [
                        core_type (typing/typedtree.ml[290,9613+14]..[290,9613+20])
                          Ptyp_constr "string" (typing/typedtree.ml[290,9613+14]..[290,9613+20])
                          []
                      ]
                  ]
              (typing/typedtree.ml[291,9646+5]..[291,9646+34])
                Immutable
                "mb_presence" (typing/typedtree.ml[291,9646+5]..[291,9646+16])                core_type (typing/typedtree.ml[291,9646+18]..[291,9646+33])
                  Ptyp_constr "module_presence" (typing/typedtree.ml[291,9646+18]..[291,9646+33])
                  []
              (typing/typedtree.ml[292,9681+5]..[292,9681+26])
                Immutable
                "mb_expr" (typing/typedtree.ml[292,9681+5]..[292,9681+12])                core_type (typing/typedtree.ml[292,9681+14]..[292,9681+25])
                  Ptyp_constr "module_expr" (typing/typedtree.ml[292,9681+14]..[292,9681+25])
                  []
              (typing/typedtree.ml[293,9708+5]..[293,9708+35])
                Immutable
                "mb_attributes" (typing/typedtree.ml[293,9708+5]..[293,9708+18])                core_type (typing/typedtree.ml[293,9708+20]..[293,9708+34])
                  Ptyp_constr "list" (typing/typedtree.ml[293,9708+30]..[293,9708+34])
                  [
                    core_type (typing/typedtree.ml[293,9708+20]..[293,9708+29])
                      Ptyp_constr "attribute" (typing/typedtree.ml[293,9708+20]..[293,9708+29])
                      []
                  ]
              (typing/typedtree.ml[294,9744+5]..[294,9744+24])
                Immutable
                "mb_loc" (typing/typedtree.ml[294,9744+5]..[294,9744+11])                core_type (typing/typedtree.ml[294,9744+13]..[294,9744+23])
                  Ptyp_constr "Location.t" (typing/typedtree.ml[294,9744+13]..[294,9744+23])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "value_binding" (typing/typedtree.ml[297,9776+4]..[297,9776+17]) (typing/typedtree.ml[297,9776+0]..[303,9901+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (typing/typedtree.ml[299,9800+4]..[299,9800+20])
                Immutable
                "vb_pat" (typing/typedtree.ml[299,9800+4]..[299,9800+10])                core_type (typing/typedtree.ml[299,9800+12]..[299,9800+19])
                  Ptyp_constr "pattern" (typing/typedtree.ml[299,9800+12]..[299,9800+19])
                  []
              (typing/typedtree.ml[300,9821+4]..[300,9821+24])
                Immutable
                "vb_expr" (typing/typedtree.ml[300,9821+4]..[300,9821+11])                core_type (typing/typedtree.ml[300,9821+13]..[300,9821+23])
                  Ptyp_constr "expression" (typing/typedtree.ml[300,9821+13]..[300,9821+23])
                  []
              (typing/typedtree.ml[301,9846+4]..[301,9846+30])
                Immutable
                "vb_attributes" (typing/typedtree.ml[301,9846+4]..[301,9846+17])                core_type (typing/typedtree.ml[301,9846+19]..[301,9846+29])
                  Ptyp_constr "attributes" (typing/typedtree.ml[301,9846+19]..[301,9846+29])
                  []
              (typing/typedtree.ml[302,9877+4]..[302,9877+23])
                Immutable
                "vb_loc" (typing/typedtree.ml[302,9877+4]..[302,9877+10])                core_type (typing/typedtree.ml[302,9877+12]..[302,9877+22])
                  Ptyp_constr "Location.t" (typing/typedtree.ml[302,9877+12]..[302,9877+22])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "module_coercion" (typing/typedtree.ml[305,9906+4]..[305,9906+19]) (typing/typedtree.ml[305,9906+0]..[311,10166+53])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (typing/typedtree.ml[306,9928+4]..[306,9928+16])
                "Tcoerce_none" (typing/typedtree.ml[306,9928+4]..[306,9928+16])
                []
                None
              (typing/typedtree.ml[307,9945+2]..[308,10001+63])
                "Tcoerce_structure" (typing/typedtree.ml[307,9945+4]..[307,9945+21])
                [
                  core_type (typing/typedtree.ml[307,9945+25]..[307,9945+53])
                    Ptyp_constr "list" (typing/typedtree.ml[307,9945+49]..[307,9945+53])
                    [
                      core_type (typing/typedtree.ml[307,9945+26]..[307,9945+47])
                        Ptyp_tuple
                        [
                          core_type (typing/typedtree.ml[307,9945+26]..[307,9945+29])
                            Ptyp_constr "int" (typing/typedtree.ml[307,9945+26]..[307,9945+29])
                            []
                          core_type (typing/typedtree.ml[307,9945+32]..[307,9945+47])
                            Ptyp_constr "module_coercion" (typing/typedtree.ml[307,9945+32]..[307,9945+47])
                            []
                        ]
                    ]
                  core_type (typing/typedtree.ml[308,10001+25]..[308,10001+63])
                    Ptyp_constr "list" (typing/typedtree.ml[308,10001+59]..[308,10001+63])
                    [
                      core_type (typing/typedtree.ml[308,10001+26]..[308,10001+57])
                        Ptyp_tuple
                        [
                          core_type (typing/typedtree.ml[308,10001+26]..[308,10001+33])
                            Ptyp_constr "Ident.t" (typing/typedtree.ml[308,10001+26]..[308,10001+33])
                            []
                          core_type (typing/typedtree.ml[308,10001+36]..[308,10001+39])
                            Ptyp_constr "int" (typing/typedtree.ml[308,10001+36]..[308,10001+39])
                            []
                          core_type (typing/typedtree.ml[308,10001+42]..[308,10001+57])
                            Ptyp_constr "module_coercion" (typing/typedtree.ml[308,10001+42]..[308,10001+57])
                            []
                        ]
                    ]
                ]
                None
              (typing/typedtree.ml[309,10065+2]..[309,10065+56])
                "Tcoerce_functor" (typing/typedtree.ml[309,10065+4]..[309,10065+19])
                [
                  core_type (typing/typedtree.ml[309,10065+23]..[309,10065+38])
                    Ptyp_constr "module_coercion" (typing/typedtree.ml[309,10065+23]..[309,10065+38])
                    []
                  core_type (typing/typedtree.ml[309,10065+41]..[309,10065+56])
                    Ptyp_constr "module_coercion" (typing/typedtree.ml[309,10065+41]..[309,10065+56])
                    []
                ]
                None
              (typing/typedtree.ml[310,10122+2]..[310,10122+43])
                "Tcoerce_primitive" (typing/typedtree.ml[310,10122+4]..[310,10122+21])
                [
                  core_type (typing/typedtree.ml[310,10122+25]..[310,10122+43])
                    Ptyp_constr "primitive_coercion" (typing/typedtree.ml[310,10122+25]..[310,10122+43])
                    []
                ]
                None
              (typing/typedtree.ml[311,10166+2]..[311,10166+53])
                "Tcoerce_alias" (typing/typedtree.ml[311,10166+4]..[311,10166+17])
                [
                  core_type (typing/typedtree.ml[311,10166+21]..[311,10166+26])
                    Ptyp_constr "Env.t" (typing/typedtree.ml[311,10166+21]..[311,10166+26])
                    []
                  core_type (typing/typedtree.ml[311,10166+29]..[311,10166+35])
                    Ptyp_constr "Path.t" (typing/typedtree.ml[311,10166+29]..[311,10166+35])
                    []
                  core_type (typing/typedtree.ml[311,10166+38]..[311,10166+53])
                    Ptyp_constr "module_coercion" (typing/typedtree.ml[311,10166+38]..[311,10166+53])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "module_type" (typing/typedtree.ml[313,10221+4]..[313,10221+15]) (typing/typedtree.ml[313,10221+0]..[319,10387+4])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (typing/typedtree.ml[314,10239+4]..[314,10239+31])
                Immutable
                "mty_desc" (typing/typedtree.ml[314,10239+4]..[314,10239+12])                core_type (typing/typedtree.ml[314,10239+14]..[314,10239+30])
                  Ptyp_constr "module_type_desc" (typing/typedtree.ml[314,10239+14]..[314,10239+30])
                  []
              (typing/typedtree.ml[315,10271+4]..[315,10271+33])
                Immutable
                "mty_type" (typing/typedtree.ml[315,10271+4]..[315,10271+12])                core_type (typing/typedtree.ml[315,10271+15]..[315,10271+32])
                  Ptyp_constr "Types.module_type" (typing/typedtree.ml[315,10271+15]..[315,10271+32])
                  []
              (typing/typedtree.ml[316,10305+4]..[316,10305+20])
                Immutable
                "mty_env" (typing/typedtree.ml[316,10305+4]..[316,10305+11])                core_type (typing/typedtree.ml[316,10305+14]..[316,10305+19])
                  Ptyp_constr "Env.t" (typing/typedtree.ml[316,10305+14]..[316,10305+19])
                  []
              (typing/typedtree.ml[317,10326+4]..[317,10326+24])
                Immutable
                "mty_loc" (typing/typedtree.ml[317,10326+4]..[317,10326+11])                core_type (typing/typedtree.ml[317,10326+13]..[317,10326+23])
                  Ptyp_constr "Location.t" (typing/typedtree.ml[317,10326+13]..[317,10326+23])
                  []
              (typing/typedtree.ml[318,10351+4]..[318,10351+35])
                Immutable
                "mty_attributes" (typing/typedtree.ml[318,10351+4]..[318,10351+18])                core_type (typing/typedtree.ml[318,10351+20]..[318,10351+34])
                  Ptyp_constr "list" (typing/typedtree.ml[318,10351+30]..[318,10351+34])
                  [
                    core_type (typing/typedtree.ml[318,10351+20]..[318,10351+29])
                      Ptyp_constr "attribute" (typing/typedtree.ml[318,10351+20]..[318,10351+29])
                      []
                  ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "module_type_desc" (typing/typedtree.ml[321,10393+4]..[321,10393+20]) (typing/typedtree.ml[321,10393+0]..[327,10655+42])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (typing/typedtree.ml[322,10416+4]..[322,10416+42])
                "Tmty_ident" (typing/typedtree.ml[322,10416+4]..[322,10416+14])
                [
                  core_type (typing/typedtree.ml[322,10416+18]..[322,10416+24])
                    Ptyp_constr "Path.t" (typing/typedtree.ml[322,10416+18]..[322,10416+24])
                    []
                  core_type (typing/typedtree.ml[322,10416+27]..[322,10416+42])
                    Ptyp_constr "loc" (typing/typedtree.ml[322,10416+39]..[322,10416+42])
                    [
                      core_type (typing/typedtree.ml[322,10416+27]..[322,10416+38])
                        Ptyp_constr "Longident.t" (typing/typedtree.ml[322,10416+27]..[322,10416+38])
                        []
                    ]
                ]
                None
              (typing/typedtree.ml[323,10459+2]..[323,10459+31])
                "Tmty_signature" (typing/typedtree.ml[323,10459+4]..[323,10459+18])
                [
                  core_type (typing/typedtree.ml[323,10459+22]..[323,10459+31])
                    Ptyp_constr "signature" (typing/typedtree.ml[323,10459+22]..[323,10459+31])
                    []
                ]
                None
              (typing/typedtree.ml[324,10491+2]..[324,10491+51])
                "Tmty_functor" (typing/typedtree.ml[324,10491+4]..[324,10491+16])
                [
                  core_type (typing/typedtree.ml[324,10491+20]..[324,10491+37])
                    Ptyp_constr "functor_parameter" (typing/typedtree.ml[324,10491+20]..[324,10491+37])
                    []
                  core_type (typing/typedtree.ml[324,10491+40]..[324,10491+51])
                    Ptyp_constr "module_type" (typing/typedtree.ml[324,10491+40]..[324,10491+51])
                    []
                ]
                None
              (typing/typedtree.ml[325,10543+2]..[325,10543+80])
                "Tmty_with" (typing/typedtree.ml[325,10543+4]..[325,10543+13])
                [
                  core_type (typing/typedtree.ml[325,10543+17]..[325,10543+28])
                    Ptyp_constr "module_type" (typing/typedtree.ml[325,10543+17]..[325,10543+28])
                    []
                  core_type (typing/typedtree.ml[325,10543+31]..[325,10543+80])
                    Ptyp_constr "list" (typing/typedtree.ml[325,10543+76]..[325,10543+80])
                    [
                      core_type (typing/typedtree.ml[325,10543+32]..[325,10543+74])
                        Ptyp_tuple
                        [
                          core_type (typing/typedtree.ml[325,10543+32]..[325,10543+38])
                            Ptyp_constr "Path.t" (typing/typedtree.ml[325,10543+32]..[325,10543+38])
                            []
                          core_type (typing/typedtree.ml[325,10543+41]..[325,10543+56])
                            Ptyp_constr "loc" (typing/typedtree.ml[325,10543+53]..[325,10543+56])
                            [
                              core_type (typing/typedtree.ml[325,10543+41]..[325,10543+52])
                                Ptyp_constr "Longident.t" (typing/typedtree.ml[325,10543+41]..[325,10543+52])
                                []
                            ]
                          core_type (typing/typedtree.ml[325,10543+59]..[325,10543+74])
                            Ptyp_constr "with_constraint" (typing/typedtree.ml[325,10543+59]..[325,10543+74])
                            []
                        ]
                    ]
                ]
                None
              (typing/typedtree.ml[326,10624+2]..[326,10624+30])
                "Tmty_typeof" (typing/typedtree.ml[326,10624+4]..[326,10624+15])
                [
                  core_type (typing/typedtree.ml[326,10624+19]..[326,10624+30])
                    Ptyp_constr "module_expr" (typing/typedtree.ml[326,10624+19]..[326,10624+30])
                    []
                ]
                None
              (typing/typedtree.ml[327,10655+2]..[327,10655+42])
                "Tmty_alias" (typing/typedtree.ml[327,10655+4]..[327,10655+14])
                [
                  core_type (typing/typedtree.ml[327,10655+18]..[327,10655+24])
                    Ptyp_constr "Path.t" (typing/typedtree.ml[327,10655+18]..[327,10655+24])
                    []
                  core_type (typing/typedtree.ml[327,10655+27]..[327,10655+42])
                    Ptyp_constr "loc" (typing/typedtree.ml[327,10655+39]..[327,10655+42])
                    [
                      core_type (typing/typedtree.ml[327,10655+27]..[327,10655+38])
                        Ptyp_constr "Longident.t" (typing/typedtree.ml[327,10655+27]..[327,10655+38])
                        []
                    ]
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "primitive_coercion" (typing/typedtree.ml[330,10779+4]..[330,10779+22]) (typing/typedtree.ml[330,10779+0]..[336,10912+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (typing/typedtree.ml[332,10808+4]..[332,10808+35])
                Immutable
                "pc_desc" (typing/typedtree.ml[332,10808+4]..[332,10808+11])                core_type (typing/typedtree.ml[332,10808+13]..[332,10808+34])
                  Ptyp_constr "Primitive.description" (typing/typedtree.ml[332,10808+13]..[332,10808+34])
                  []
              (typing/typedtree.ml[333,10844+4]..[333,10844+23])
                Immutable
                "pc_type" (typing/typedtree.ml[333,10844+4]..[333,10844+11])                core_type (typing/typedtree.ml[333,10844+13]..[333,10844+22])
                  Ptyp_constr "type_expr" (typing/typedtree.ml[333,10844+13]..[333,10844+22])
                  []
              (typing/typedtree.ml[334,10868+4]..[334,10868+18])
                Immutable
                "pc_env" (typing/typedtree.ml[334,10868+4]..[334,10868+10])                core_type (typing/typedtree.ml[334,10868+12]..[334,10868+17])
                  Ptyp_constr "Env.t" (typing/typedtree.ml[334,10868+12]..[334,10868+17])
                  []
              (typing/typedtree.ml[335,10887+4]..[335,10887+24])
                Immutable
                "pc_loc" (typing/typedtree.ml[335,10887+4]..[335,10887+10])                core_type (typing/typedtree.ml[335,10887+13]..[335,10887+23])
                  Ptyp_constr "Location.t" (typing/typedtree.ml[335,10887+13]..[335,10887+23])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "signature" (typing/typedtree.ml[338,10917+4]..[338,10917+13]) (typing/typedtree.ml[338,10917+0]..[342,11025+1])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (typing/typedtree.ml[339,10935+2]..[339,10935+34])
                Immutable
                "sig_items" (typing/typedtree.ml[339,10935+2]..[339,10935+11])                core_type (typing/typedtree.ml[339,10935+14]..[339,10935+33])
                  Ptyp_constr "list" (typing/typedtree.ml[339,10935+29]..[339,10935+33])
                  [
                    core_type (typing/typedtree.ml[339,10935+14]..[339,10935+28])
                      Ptyp_constr "signature_item" (typing/typedtree.ml[339,10935+14]..[339,10935+28])
                      []
                  ]
              (typing/typedtree.ml[340,10970+2]..[340,10970+29])
                Immutable
                "sig_type" (typing/typedtree.ml[340,10970+2]..[340,10970+10])                core_type (typing/typedtree.ml[340,10970+13]..[340,10970+28])
                  Ptyp_constr "Types.signature" (typing/typedtree.ml[340,10970+13]..[340,10970+28])
                  []
              (typing/typedtree.ml[341,11000+2]..[341,11000+24])
                Immutable
                "sig_final_env" (typing/typedtree.ml[341,11000+2]..[341,11000+15])                core_type (typing/typedtree.ml[341,11000+18]..[341,11000+23])
                  Ptyp_constr "Env.t" (typing/typedtree.ml[341,11000+18]..[341,11000+23])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "signature_item" (typing/typedtree.ml[344,11028+4]..[344,11028+18]) (typing/typedtree.ml[344,11028+0]..[347,11126+25])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (typing/typedtree.ml[345,11049+4]..[345,11049+34])
                Immutable
                "sig_desc" (typing/typedtree.ml[345,11049+4]..[345,11049+12])                core_type (typing/typedtree.ml[345,11049+14]..[345,11049+33])
                  Ptyp_constr "signature_item_desc" (typing/typedtree.ml[345,11049+14]..[345,11049+33])
                  []
              (typing/typedtree.ml[346,11084+4]..[346,11084+20])
                Immutable
                "sig_env" (typing/typedtree.ml[346,11084+4]..[346,11084+11])                core_type (typing/typedtree.ml[346,11084+14]..[346,11084+19])
                  Ptyp_constr "Env.t" (typing/typedtree.ml[346,11084+14]..[346,11084+19])
                  []
              (typing/typedtree.ml[347,11126+4]..[347,11126+23])
                Immutable
                "sig_loc" (typing/typedtree.ml[347,11126+4]..[347,11126+11])                core_type (typing/typedtree.ml[347,11126+13]..[347,11126+23])
                  Ptyp_constr "Location.t" (typing/typedtree.ml[347,11126+13]..[347,11126+23])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "signature_item_desc" (typing/typedtree.ml[349,11153+4]..[349,11153+23]) (typing/typedtree.ml[349,11153+0]..[364,11764+31])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (typing/typedtree.ml[350,11179+4]..[350,11179+35])
                "Tsig_value" (typing/typedtree.ml[350,11179+4]..[350,11179+14])
                [
                  core_type (typing/typedtree.ml[350,11179+18]..[350,11179+35])
                    Ptyp_constr "value_description" (typing/typedtree.ml[350,11179+18]..[350,11179+35])
                    []
                ]
                None
              (typing/typedtree.ml[351,11215+2]..[351,11215+49])
                "Tsig_type" (typing/typedtree.ml[351,11215+4]..[351,11215+13])
                [
                  core_type (typing/typedtree.ml[351,11215+17]..[351,11215+25])
                    Ptyp_constr "rec_flag" (typing/typedtree.ml[351,11215+17]..[351,11215+25])
                    []
                  core_type (typing/typedtree.ml[351,11215+28]..[351,11215+49])
                    Ptyp_constr "list" (typing/typedtree.ml[351,11215+45]..[351,11215+49])
                    [
                      core_type (typing/typedtree.ml[351,11215+28]..[351,11215+44])
                        Ptyp_constr "type_declaration" (typing/typedtree.ml[351,11215+28]..[351,11215+44])
                        []
                    ]
                ]
                None
              (typing/typedtree.ml[352,11265+2]..[352,11265+43])
                "Tsig_typesubst" (typing/typedtree.ml[352,11265+4]..[352,11265+18])
                [
                  core_type (typing/typedtree.ml[352,11265+22]..[352,11265+43])
                    Ptyp_constr "list" (typing/typedtree.ml[352,11265+39]..[352,11265+43])
                    [
                      core_type (typing/typedtree.ml[352,11265+22]..[352,11265+38])
                        Ptyp_constr "type_declaration" (typing/typedtree.ml[352,11265+22]..[352,11265+38])
                        []
                    ]
                ]
                None
              (typing/typedtree.ml[353,11309+2]..[353,11309+33])
                "Tsig_typext" (typing/typedtree.ml[353,11309+4]..[353,11309+15])
                [
                  core_type (typing/typedtree.ml[353,11309+19]..[353,11309+33])
                    Ptyp_constr "type_extension" (typing/typedtree.ml[353,11309+19]..[353,11309+33])
                    []
                ]
                None
              (typing/typedtree.ml[354,11343+2]..[354,11343+36])
                "Tsig_exception" (typing/typedtree.ml[354,11343+4]..[354,11343+18])
                [
                  core_type (typing/typedtree.ml[354,11343+22]..[354,11343+36])
                    Ptyp_constr "type_exception" (typing/typedtree.ml[354,11343+22]..[354,11343+36])
                    []
                ]
                None
              (typing/typedtree.ml[355,11380+2]..[355,11380+37])
                "Tsig_module" (typing/typedtree.ml[355,11380+4]..[355,11380+15])
                [
                  core_type (typing/typedtree.ml[355,11380+19]..[355,11380+37])
                    Ptyp_constr "module_declaration" (typing/typedtree.ml[355,11380+19]..[355,11380+37])
                    []
                ]
                None
              (typing/typedtree.ml[356,11418+2]..[356,11418+40])
                "Tsig_modsubst" (typing/typedtree.ml[356,11418+4]..[356,11418+17])
                [
                  core_type (typing/typedtree.ml[356,11418+21]..[356,11418+40])
                    Ptyp_constr "module_substitution" (typing/typedtree.ml[356,11418+21]..[356,11418+40])
                    []
                ]
                None
              (typing/typedtree.ml[357,11459+2]..[357,11459+45])
                "Tsig_recmodule" (typing/typedtree.ml[357,11459+4]..[357,11459+18])
                [
                  core_type (typing/typedtree.ml[357,11459+22]..[357,11459+45])
                    Ptyp_constr "list" (typing/typedtree.ml[357,11459+41]..[357,11459+45])
                    [
                      core_type (typing/typedtree.ml[357,11459+22]..[357,11459+40])
                        Ptyp_constr "module_declaration" (typing/typedtree.ml[357,11459+22]..[357,11459+40])
                        []
                    ]
                ]
                None
              (typing/typedtree.ml[358,11505+2]..[358,11505+43])
                "Tsig_modtype" (typing/typedtree.ml[358,11505+4]..[358,11505+16])
                [
                  core_type (typing/typedtree.ml[358,11505+20]..[358,11505+43])
                    Ptyp_constr "module_type_declaration" (typing/typedtree.ml[358,11505+20]..[358,11505+43])
                    []
                ]
                None
              (typing/typedtree.ml[359,11549+2]..[359,11549+48])
                "Tsig_modtypesubst" (typing/typedtree.ml[359,11549+4]..[359,11549+21])
                [
                  core_type (typing/typedtree.ml[359,11549+25]..[359,11549+48])
                    Ptyp_constr "module_type_declaration" (typing/typedtree.ml[359,11549+25]..[359,11549+48])
                    []
                ]
                None
              (typing/typedtree.ml[360,11598+2]..[360,11598+33])
                "Tsig_open" (typing/typedtree.ml[360,11598+4]..[360,11598+13])
                [
                  core_type (typing/typedtree.ml[360,11598+17]..[360,11598+33])
                    Ptyp_constr "open_description" (typing/typedtree.ml[360,11598+17]..[360,11598+33])
                    []
                ]
                None
              (typing/typedtree.ml[361,11632+2]..[361,11632+39])
                "Tsig_include" (typing/typedtree.ml[361,11632+4]..[361,11632+16])
                [
                  core_type (typing/typedtree.ml[361,11632+20]..[361,11632+39])
                    Ptyp_constr "include_description" (typing/typedtree.ml[361,11632+20]..[361,11632+39])
                    []
                ]
                None
              (typing/typedtree.ml[362,11672+2]..[362,11672+40])
                "Tsig_class" (typing/typedtree.ml[362,11672+4]..[362,11672+14])
                [
                  core_type (typing/typedtree.ml[362,11672+18]..[362,11672+40])
                    Ptyp_constr "list" (typing/typedtree.ml[362,11672+36]..[362,11672+40])
                    [
                      core_type (typing/typedtree.ml[362,11672+18]..[362,11672+35])
                        Ptyp_constr "class_description" (typing/typedtree.ml[362,11672+18]..[362,11672+35])
                        []
                    ]
                ]
                None
              (typing/typedtree.ml[363,11713+2]..[363,11713+50])
                "Tsig_class_type" (typing/typedtree.ml[363,11713+4]..[363,11713+19])
                [
                  core_type (typing/typedtree.ml[363,11713+23]..[363,11713+50])
                    Ptyp_constr "list" (typing/typedtree.ml[363,11713+46]..[363,11713+50])
                    [
                      core_type (typing/typedtree.ml[363,11713+23]..[363,11713+45])
                        Ptyp_constr "class_type_declaration" (typing/typedtree.ml[363,11713+23]..[363,11713+45])
                        []
                    ]
                ]
                None
              (typing/typedtree.ml[364,11764+2]..[364,11764+31])
                "Tsig_attribute" (typing/typedtree.ml[364,11764+4]..[364,11764+18])
                [
                  core_type (typing/typedtree.ml[364,11764+22]..[364,11764+31])
                    Ptyp_constr "attribute" (typing/typedtree.ml[364,11764+22]..[364,11764+31])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "module_declaration" (typing/typedtree.ml[366,11797+4]..[366,11797+22]) (typing/typedtree.ml[366,11797+0]..[374,12012+5])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (typing/typedtree.ml[368,11828+5]..[368,11828+27])
                Immutable
                "md_id" (typing/typedtree.ml[368,11828+5]..[368,11828+10])                core_type (typing/typedtree.ml[368,11828+12]..[368,11828+26])
                  Ptyp_constr "option" (typing/typedtree.ml[368,11828+20]..[368,11828+26])
                  [
                    core_type (typing/typedtree.ml[368,11828+12]..[368,11828+19])
                      Ptyp_constr "Ident.t" (typing/typedtree.ml[368,11828+12]..[368,11828+19])
                      []
                  ]
              (typing/typedtree.ml[369,11856+5]..[369,11856+32])
                Immutable
                "md_name" (typing/typedtree.ml[369,11856+5]..[369,11856+12])                core_type (typing/typedtree.ml[369,11856+14]..[369,11856+31])
                  Ptyp_constr "loc" (typing/typedtree.ml[369,11856+28]..[369,11856+31])
                  [
                    core_type (typing/typedtree.ml[369,11856+14]..[369,11856+27])
                      Ptyp_constr "option" (typing/typedtree.ml[369,11856+21]..[369,11856+27])
                      [
                        core_type (typing/typedtree.ml[369,11856+14]..[369,11856+20])
                          Ptyp_constr "string" (typing/typedtree.ml[369,11856+14]..[369,11856+20])
                          []
                      ]
                  ]
              (typing/typedtree.ml[370,11889+5]..[370,11889+34])
                Immutable
                "md_presence" (typing/typedtree.ml[370,11889+5]..[370,11889+16])                core_type (typing/typedtree.ml[370,11889+18]..[370,11889+33])
                  Ptyp_constr "module_presence" (typing/typedtree.ml[370,11889+18]..[370,11889+33])
                  []
              (typing/typedtree.ml[371,11924+5]..[371,11924+26])
                Immutable
                "md_type" (typing/typedtree.ml[371,11924+5]..[371,11924+12])                core_type (typing/typedtree.ml[371,11924+14]..[371,11924+25])
                  Ptyp_constr "module_type" (typing/typedtree.ml[371,11924+14]..[371,11924+25])
                  []
              (typing/typedtree.ml[372,11951+5]..[372,11951+35])
                Immutable
                "md_attributes" (typing/typedtree.ml[372,11951+5]..[372,11951+18])                core_type (typing/typedtree.ml[372,11951+20]..[372,11951+34])
                  Ptyp_constr "list" (typing/typedtree.ml[372,11951+30]..[372,11951+34])
                  [
                    core_type (typing/typedtree.ml[372,11951+20]..[372,11951+29])
                      Ptyp_constr "attribute" (typing/typedtree.ml[372,11951+20]..[372,11951+29])
                      []
                  ]
              (typing/typedtree.ml[373,11987+5]..[373,11987+24])
                Immutable
                "md_loc" (typing/typedtree.ml[373,11987+5]..[373,11987+11])                core_type (typing/typedtree.ml[373,11987+13]..[373,11987+23])
                  Ptyp_constr "Location.t" (typing/typedtree.ml[373,11987+13]..[373,11987+23])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "module_substitution" (typing/typedtree.ml[376,12019+4]..[376,12019+23]) (typing/typedtree.ml[376,12019+0]..[384,12211+5])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (typing/typedtree.ml[378,12051+5]..[378,12051+20])
                Immutable
                "ms_id" (typing/typedtree.ml[378,12051+5]..[378,12051+10])                core_type (typing/typedtree.ml[378,12051+12]..[378,12051+19])
                  Ptyp_constr "Ident.t" (typing/typedtree.ml[378,12051+12]..[378,12051+19])
                  []
              (typing/typedtree.ml[379,12072+5]..[379,12072+25])
                Immutable
                "ms_name" (typing/typedtree.ml[379,12072+5]..[379,12072+12])                core_type (typing/typedtree.ml[379,12072+14]..[379,12072+24])
                  Ptyp_constr "loc" (typing/typedtree.ml[379,12072+21]..[379,12072+24])
                  [
                    core_type (typing/typedtree.ml[379,12072+14]..[379,12072+20])
                      Ptyp_constr "string" (typing/typedtree.ml[379,12072+14]..[379,12072+20])
                      []
                  ]
              (typing/typedtree.ml[380,12098+5]..[380,12098+25])
                Immutable
                "ms_manifest" (typing/typedtree.ml[380,12098+5]..[380,12098+16])                core_type (typing/typedtree.ml[380,12098+18]..[380,12098+24])
                  Ptyp_constr "Path.t" (typing/typedtree.ml[380,12098+18]..[380,12098+24])
                  []
              (typing/typedtree.ml[381,12124+5]..[381,12124+29])
                Immutable
                "ms_txt" (typing/typedtree.ml[381,12124+5]..[381,12124+11])                core_type (typing/typedtree.ml[381,12124+13]..[381,12124+28])
                  Ptyp_constr "loc" (typing/typedtree.ml[381,12124+25]..[381,12124+28])
                  [
                    core_type (typing/typedtree.ml[381,12124+13]..[381,12124+24])
                      Ptyp_constr "Longident.t" (typing/typedtree.ml[381,12124+13]..[381,12124+24])
                      []
                  ]
              (typing/typedtree.ml[382,12154+5]..[382,12154+31])
                Immutable
                "ms_attributes" (typing/typedtree.ml[382,12154+5]..[382,12154+18])                core_type (typing/typedtree.ml[382,12154+20]..[382,12154+30])
                  Ptyp_constr "attributes" (typing/typedtree.ml[382,12154+20]..[382,12154+30])
                  []
              (typing/typedtree.ml[383,12186+5]..[383,12186+24])
                Immutable
                "ms_loc" (typing/typedtree.ml[383,12186+5]..[383,12186+11])                core_type (typing/typedtree.ml[383,12186+13]..[383,12186+23])
                  Ptyp_constr "Location.t" (typing/typedtree.ml[383,12186+13]..[383,12186+23])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "module_type_declaration" (typing/typedtree.ml[386,12218+4]..[386,12218+27]) (typing/typedtree.ml[386,12218+0]..[393,12401+5])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (typing/typedtree.ml[388,12254+5]..[388,12254+21])
                Immutable
                "mtd_id" (typing/typedtree.ml[388,12254+5]..[388,12254+11])                core_type (typing/typedtree.ml[388,12254+13]..[388,12254+20])
                  Ptyp_constr "Ident.t" (typing/typedtree.ml[388,12254+13]..[388,12254+20])
                  []
              (typing/typedtree.ml[389,12276+5]..[389,12276+26])
                Immutable
                "mtd_name" (typing/typedtree.ml[389,12276+5]..[389,12276+13])                core_type (typing/typedtree.ml[389,12276+15]..[389,12276+25])
                  Ptyp_constr "loc" (typing/typedtree.ml[389,12276+22]..[389,12276+25])
                  [
                    core_type (typing/typedtree.ml[389,12276+15]..[389,12276+21])
                      Ptyp_constr "string" (typing/typedtree.ml[389,12276+15]..[389,12276+21])
                      []
                  ]
              (typing/typedtree.ml[390,12303+5]..[390,12303+34])
                Immutable
                "mtd_type" (typing/typedtree.ml[390,12303+5]..[390,12303+13])                core_type (typing/typedtree.ml[390,12303+15]..[390,12303+33])
                  Ptyp_constr "option" (typing/typedtree.ml[390,12303+27]..[390,12303+33])
                  [
                    core_type (typing/typedtree.ml[390,12303+15]..[390,12303+26])
                      Ptyp_constr "module_type" (typing/typedtree.ml[390,12303+15]..[390,12303+26])
                      []
                  ]
              (typing/typedtree.ml[391,12338+5]..[391,12338+36])
                Immutable
                "mtd_attributes" (typing/typedtree.ml[391,12338+5]..[391,12338+19])                core_type (typing/typedtree.ml[391,12338+21]..[391,12338+35])
                  Ptyp_constr "list" (typing/typedtree.ml[391,12338+31]..[391,12338+35])
                  [
                    core_type (typing/typedtree.ml[391,12338+21]..[391,12338+30])
                      Ptyp_constr "attribute" (typing/typedtree.ml[391,12338+21]..[391,12338+30])
                      []
                  ]
              (typing/typedtree.ml[392,12375+5]..[392,12375+25])
                Immutable
                "mtd_loc" (typing/typedtree.ml[392,12375+5]..[392,12375+12])                core_type (typing/typedtree.ml[392,12375+14]..[392,12375+24])
                  Ptyp_constr "Location.t" (typing/typedtree.ml[392,12375+14]..[392,12375+24])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "open_infos" (typing/typedtree.ml[395,12408+7]..[395,12408+17]) (typing/typedtree.ml[395,12408+0]..[403,12616+5])
        ptype_params =
          [
            core_type (typing/typedtree.ml[395,12408+4]..[395,12408+6])
              Ptyp_var a
          ]
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (typing/typedtree.ml[397,12434+5]..[397,12434+19])
                Immutable
                "open_expr" (typing/typedtree.ml[397,12434+5]..[397,12434+14])                core_type (typing/typedtree.ml[397,12434+16]..[397,12434+18])
                  Ptyp_var a
              (typing/typedtree.ml[398,12454+5]..[398,12454+39])
                Immutable
                "open_bound_items" (typing/typedtree.ml[398,12454+5]..[398,12454+21])                core_type (typing/typedtree.ml[398,12454+23]..[398,12454+38])
                  Ptyp_constr "Types.signature" (typing/typedtree.ml[398,12454+23]..[398,12454+38])
                  []
              (typing/typedtree.ml[399,12494+5]..[399,12494+34])
                Immutable
                "open_override" (typing/typedtree.ml[399,12494+5]..[399,12494+18])                core_type (typing/typedtree.ml[399,12494+20]..[399,12494+33])
                  Ptyp_constr "override_flag" (typing/typedtree.ml[399,12494+20]..[399,12494+33])
                  []
              (typing/typedtree.ml[400,12529+5]..[400,12529+21])
                Immutable
                "open_env" (typing/typedtree.ml[400,12529+5]..[400,12529+13])                core_type (typing/typedtree.ml[400,12529+15]..[400,12529+20])
                  Ptyp_constr "Env.t" (typing/typedtree.ml[400,12529+15]..[400,12529+20])
                  []
              (typing/typedtree.ml[401,12551+5]..[401,12551+26])
                Immutable
                "open_loc" (typing/typedtree.ml[401,12551+5]..[401,12551+13])                core_type (typing/typedtree.ml[401,12551+15]..[401,12551+25])
                  Ptyp_constr "Location.t" (typing/typedtree.ml[401,12551+15]..[401,12551+25])
                  []
              (typing/typedtree.ml[402,12578+5]..[402,12578+37])
                Immutable
                "open_attributes" (typing/typedtree.ml[402,12578+5]..[402,12578+20])                core_type (typing/typedtree.ml[402,12578+22]..[402,12578+36])
                  Ptyp_constr "list" (typing/typedtree.ml[402,12578+32]..[402,12578+36])
                  [
                    core_type (typing/typedtree.ml[402,12578+22]..[402,12578+31])
                      Ptyp_constr "attribute" (typing/typedtree.ml[402,12578+22]..[402,12578+31])
                      []
                  ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "open_description" (typing/typedtree.ml[405,12623+4]..[405,12623+20]) (typing/typedtree.ml[405,12623+0]..[405,12623+60])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (typing/typedtree.ml[405,12623+23]..[405,12623+60])
              Ptyp_constr "open_infos" (typing/typedtree.ml[405,12623+50]..[405,12623+60])
              [
                core_type (typing/typedtree.ml[405,12623+24]..[405,12623+48])
                  Ptyp_tuple
                  [
                    core_type (typing/typedtree.ml[405,12623+24]..[405,12623+30])
                      Ptyp_constr "Path.t" (typing/typedtree.ml[405,12623+24]..[405,12623+30])
                      []
                    core_type (typing/typedtree.ml[405,12623+33]..[405,12623+48])
                      Ptyp_constr "loc" (typing/typedtree.ml[405,12623+45]..[405,12623+48])
                      [
                        core_type (typing/typedtree.ml[405,12623+33]..[405,12623+44])
                          Ptyp_constr "Longident.t" (typing/typedtree.ml[405,12623+33]..[405,12623+44])
                          []
                      ]
                  ]
              ]
      type_declaration "open_declaration" (typing/typedtree.ml[407,12685+4]..[407,12685+20]) (typing/typedtree.ml[407,12685+0]..[407,12685+45])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (typing/typedtree.ml[407,12685+23]..[407,12685+45])
              Ptyp_constr "open_infos" (typing/typedtree.ml[407,12685+35]..[407,12685+45])
              [
                core_type (typing/typedtree.ml[407,12685+23]..[407,12685+34])
                  Ptyp_constr "module_expr" (typing/typedtree.ml[407,12685+23]..[407,12685+34])
                  []
              ]
      type_declaration "include_infos" (typing/typedtree.ml[409,12732+7]..[409,12732+20]) (typing/typedtree.ml[409,12732+0]..[415,12878+5])
        ptype_params =
          [
            core_type (typing/typedtree.ml[409,12732+4]..[409,12732+6])
              Ptyp_var a
          ]
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (typing/typedtree.ml[411,12761+5]..[411,12761+18])
                Immutable
                "incl_mod" (typing/typedtree.ml[411,12761+5]..[411,12761+13])                core_type (typing/typedtree.ml[411,12761+15]..[411,12761+17])
                  Ptyp_var a
              (typing/typedtree.ml[412,12780+5]..[412,12780+32])
                Immutable
                "incl_type" (typing/typedtree.ml[412,12780+5]..[412,12780+14])                core_type (typing/typedtree.ml[412,12780+16]..[412,12780+31])
                  Ptyp_constr "Types.signature" (typing/typedtree.ml[412,12780+16]..[412,12780+31])
                  []
              (typing/typedtree.ml[413,12813+5]..[413,12813+26])
                Immutable
                "incl_loc" (typing/typedtree.ml[413,12813+5]..[413,12813+13])                core_type (typing/typedtree.ml[413,12813+15]..[413,12813+25])
                  Ptyp_constr "Location.t" (typing/typedtree.ml[413,12813+15]..[413,12813+25])
                  []
              (typing/typedtree.ml[414,12840+5]..[414,12840+37])
                Immutable
                "incl_attributes" (typing/typedtree.ml[414,12840+5]..[414,12840+20])                core_type (typing/typedtree.ml[414,12840+22]..[414,12840+36])
                  Ptyp_constr "list" (typing/typedtree.ml[414,12840+32]..[414,12840+36])
                  [
                    core_type (typing/typedtree.ml[414,12840+22]..[414,12840+31])
                      Ptyp_constr "attribute" (typing/typedtree.ml[414,12840+22]..[414,12840+31])
                      []
                  ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "include_description" (typing/typedtree.ml[417,12885+4]..[417,12885+23]) (typing/typedtree.ml[417,12885+0]..[417,12885+51])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (typing/typedtree.ml[417,12885+26]..[417,12885+51])
              Ptyp_constr "include_infos" (typing/typedtree.ml[417,12885+38]..[417,12885+51])
              [
                core_type (typing/typedtree.ml[417,12885+26]..[417,12885+37])
                  Ptyp_constr "module_type" (typing/typedtree.ml[417,12885+26]..[417,12885+37])
                  []
              ]
      type_declaration "include_declaration" (typing/typedtree.ml[419,12938+4]..[419,12938+23]) (typing/typedtree.ml[419,12938+0]..[419,12938+51])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (typing/typedtree.ml[419,12938+26]..[419,12938+51])
              Ptyp_constr "include_infos" (typing/typedtree.ml[419,12938+38]..[419,12938+51])
              [
                core_type (typing/typedtree.ml[419,12938+26]..[419,12938+37])
                  Ptyp_constr "module_expr" (typing/typedtree.ml[419,12938+26]..[419,12938+37])
                  []
              ]
      type_declaration "with_constraint" (typing/typedtree.ml[421,12991+4]..[421,12991+19]) (typing/typedtree.ml[421,12991+0]..[427,13213+37])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (typing/typedtree.ml[422,13013+4]..[422,13013+34])
                "Twith_type" (typing/typedtree.ml[422,13013+4]..[422,13013+14])
                [
                  core_type (typing/typedtree.ml[422,13013+18]..[422,13013+34])
                    Ptyp_constr "type_declaration" (typing/typedtree.ml[422,13013+18]..[422,13013+34])
                    []
                ]
                None
              (typing/typedtree.ml[423,13048+2]..[423,13048+44])
                "Twith_module" (typing/typedtree.ml[423,13048+4]..[423,13048+16])
                [
                  core_type (typing/typedtree.ml[423,13048+20]..[423,13048+26])
                    Ptyp_constr "Path.t" (typing/typedtree.ml[423,13048+20]..[423,13048+26])
                    []
                  core_type (typing/typedtree.ml[423,13048+29]..[423,13048+44])
                    Ptyp_constr "loc" (typing/typedtree.ml[423,13048+41]..[423,13048+44])
                    [
                      core_type (typing/typedtree.ml[423,13048+29]..[423,13048+40])
                        Ptyp_constr "Longident.t" (typing/typedtree.ml[423,13048+29]..[423,13048+40])
                        []
                    ]
                ]
                None
              (typing/typedtree.ml[424,13093+2]..[424,13093+32])
                "Twith_modtype" (typing/typedtree.ml[424,13093+4]..[424,13093+17])
                [
                  core_type (typing/typedtree.ml[424,13093+21]..[424,13093+32])
                    Ptyp_constr "module_type" (typing/typedtree.ml[424,13093+21]..[424,13093+32])
                    []
                ]
                None
              (typing/typedtree.ml[425,13126+2]..[425,13126+39])
                "Twith_typesubst" (typing/typedtree.ml[425,13126+4]..[425,13126+19])
                [
                  core_type (typing/typedtree.ml[425,13126+23]..[425,13126+39])
                    Ptyp_constr "type_declaration" (typing/typedtree.ml[425,13126+23]..[425,13126+39])
                    []
                ]
                None
              (typing/typedtree.ml[426,13166+2]..[426,13166+46])
                "Twith_modsubst" (typing/typedtree.ml[426,13166+4]..[426,13166+18])
                [
                  core_type (typing/typedtree.ml[426,13166+22]..[426,13166+28])
                    Ptyp_constr "Path.t" (typing/typedtree.ml[426,13166+22]..[426,13166+28])
                    []
                  core_type (typing/typedtree.ml[426,13166+31]..[426,13166+46])
                    Ptyp_constr "loc" (typing/typedtree.ml[426,13166+43]..[426,13166+46])
                    [
                      core_type (typing/typedtree.ml[426,13166+31]..[426,13166+42])
                        Ptyp_constr "Longident.t" (typing/typedtree.ml[426,13166+31]..[426,13166+42])
                        []
                    ]
                ]
                None
              (typing/typedtree.ml[427,13213+2]..[427,13213+37])
                "Twith_modtypesubst" (typing/typedtree.ml[427,13213+4]..[427,13213+22])
                [
                  core_type (typing/typedtree.ml[427,13213+26]..[427,13213+37])
                    Ptyp_constr "module_type" (typing/typedtree.ml[427,13213+26]..[427,13213+37])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "core_type" (typing/typedtree.ml[430,13253+4]..[430,13253+13]) (typing/typedtree.ml[430,13253+0]..[437,13503+4])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (typing/typedtree.ml[432,13321+4]..[432,13321+39])
                Mutable
                "ctyp_desc" (typing/typedtree.ml[432,13321+12]..[432,13321+21])                core_type (typing/typedtree.ml[432,13321+24]..[432,13321+38])
                  Ptyp_constr "core_type_desc" (typing/typedtree.ml[432,13321+24]..[432,13321+38])
                  []
              (typing/typedtree.ml[433,13361+4]..[433,13361+34])
                Mutable
                "ctyp_type" (typing/typedtree.ml[433,13361+12]..[433,13361+21])                core_type (typing/typedtree.ml[433,13361+24]..[433,13361+33])
                  Ptyp_constr "type_expr" (typing/typedtree.ml[433,13361+24]..[433,13361+33])
                  []
              (typing/typedtree.ml[434,13396+4]..[434,13396+21])
                Immutable
                "ctyp_env" (typing/typedtree.ml[434,13396+4]..[434,13396+12])                core_type (typing/typedtree.ml[434,13396+15]..[434,13396+20])
                  Ptyp_constr "Env.t" (typing/typedtree.ml[434,13396+15]..[434,13396+20])
                  []
              (typing/typedtree.ml[435,13439+4]..[435,13439+26])
                Immutable
                "ctyp_loc" (typing/typedtree.ml[435,13439+4]..[435,13439+12])                core_type (typing/typedtree.ml[435,13439+15]..[435,13439+25])
                  Ptyp_constr "Location.t" (typing/typedtree.ml[435,13439+15]..[435,13439+25])
                  []
              (typing/typedtree.ml[436,13466+4]..[436,13466+36])
                Immutable
                "ctyp_attributes" (typing/typedtree.ml[436,13466+4]..[436,13466+19])                core_type (typing/typedtree.ml[436,13466+21]..[436,13466+35])
                  Ptyp_constr "list" (typing/typedtree.ml[436,13466+31]..[436,13466+35])
                  [
                    core_type (typing/typedtree.ml[436,13466+21]..[436,13466+30])
                      Ptyp_constr "attribute" (typing/typedtree.ml[436,13466+21]..[436,13466+30])
                      []
                  ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "core_type_desc" (typing/typedtree.ml[439,13509+4]..[439,13509+18]) (typing/typedtree.ml[439,13509+0]..[450,13970+32])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (typing/typedtree.ml[440,13530+4]..[440,13530+12])
                "Ttyp_any" (typing/typedtree.ml[440,13530+4]..[440,13530+12])
                []
                None
              (typing/typedtree.ml[441,13543+2]..[441,13543+22])
                "Ttyp_var" (typing/typedtree.ml[441,13543+4]..[441,13543+12])
                [
                  core_type (typing/typedtree.ml[441,13543+16]..[441,13543+22])
                    Ptyp_constr "string" (typing/typedtree.ml[441,13543+16]..[441,13543+22])
                    []
                ]
                None
              (typing/typedtree.ml[442,13566+2]..[442,13566+51])
                "Ttyp_arrow" (typing/typedtree.ml[442,13566+4]..[442,13566+14])
                [
                  core_type (typing/typedtree.ml[442,13566+18]..[442,13566+27])
                    Ptyp_constr "arg_label" (typing/typedtree.ml[442,13566+18]..[442,13566+27])
                    []
                  core_type (typing/typedtree.ml[442,13566+30]..[442,13566+39])
                    Ptyp_constr "core_type" (typing/typedtree.ml[442,13566+30]..[442,13566+39])
                    []
                  core_type (typing/typedtree.ml[442,13566+42]..[442,13566+51])
                    Ptyp_constr "core_type" (typing/typedtree.ml[442,13566+42]..[442,13566+51])
                    []
                ]
                None
              (typing/typedtree.ml[443,13618+2]..[443,13618+32])
                "Ttyp_tuple" (typing/typedtree.ml[443,13618+4]..[443,13618+14])
                [
                  core_type (typing/typedtree.ml[443,13618+18]..[443,13618+32])
                    Ptyp_constr "list" (typing/typedtree.ml[443,13618+28]..[443,13618+32])
                    [
                      core_type (typing/typedtree.ml[443,13618+18]..[443,13618+27])
                        Ptyp_constr "core_type" (typing/typedtree.ml[443,13618+18]..[443,13618+27])
                        []
                    ]
                ]
                None
              (typing/typedtree.ml[444,13651+2]..[444,13651+60])
                "Ttyp_constr" (typing/typedtree.ml[444,13651+4]..[444,13651+15])
                [
                  core_type (typing/typedtree.ml[444,13651+19]..[444,13651+25])
                    Ptyp_constr "Path.t" (typing/typedtree.ml[444,13651+19]..[444,13651+25])
                    []
                  core_type (typing/typedtree.ml[444,13651+28]..[444,13651+43])
                    Ptyp_constr "loc" (typing/typedtree.ml[444,13651+40]..[444,13651+43])
                    [
                      core_type (typing/typedtree.ml[444,13651+28]..[444,13651+39])
                        Ptyp_constr "Longident.t" (typing/typedtree.ml[444,13651+28]..[444,13651+39])
                        []
                    ]
                  core_type (typing/typedtree.ml[444,13651+46]..[444,13651+60])
                    Ptyp_constr "list" (typing/typedtree.ml[444,13651+56]..[444,13651+60])
                    [
                      core_type (typing/typedtree.ml[444,13651+46]..[444,13651+55])
                        Ptyp_constr "core_type" (typing/typedtree.ml[444,13651+46]..[444,13651+55])
                        []
                    ]
                ]
                None
              (typing/typedtree.ml[445,13712+2]..[445,13712+50])
                "Ttyp_object" (typing/typedtree.ml[445,13712+4]..[445,13712+15])
                [
                  core_type (typing/typedtree.ml[445,13712+19]..[445,13712+36])
                    Ptyp_constr "list" (typing/typedtree.ml[445,13712+32]..[445,13712+36])
                    [
                      core_type (typing/typedtree.ml[445,13712+19]..[445,13712+31])
                        Ptyp_constr "object_field" (typing/typedtree.ml[445,13712+19]..[445,13712+31])
                        []
                    ]
                  core_type (typing/typedtree.ml[445,13712+39]..[445,13712+50])
                    Ptyp_constr "closed_flag" (typing/typedtree.ml[445,13712+39]..[445,13712+50])
                    []
                ]
                None
              (typing/typedtree.ml[446,13763+2]..[446,13763+59])
                "Ttyp_class" (typing/typedtree.ml[446,13763+4]..[446,13763+14])
                [
                  core_type (typing/typedtree.ml[446,13763+18]..[446,13763+24])
                    Ptyp_constr "Path.t" (typing/typedtree.ml[446,13763+18]..[446,13763+24])
                    []
                  core_type (typing/typedtree.ml[446,13763+27]..[446,13763+42])
                    Ptyp_constr "loc" (typing/typedtree.ml[446,13763+39]..[446,13763+42])
                    [
                      core_type (typing/typedtree.ml[446,13763+27]..[446,13763+38])
                        Ptyp_constr "Longident.t" (typing/typedtree.ml[446,13763+27]..[446,13763+38])
                        []
                    ]
                  core_type (typing/typedtree.ml[446,13763+45]..[446,13763+59])
                    Ptyp_constr "list" (typing/typedtree.ml[446,13763+55]..[446,13763+59])
                    [
                      core_type (typing/typedtree.ml[446,13763+45]..[446,13763+54])
                        Ptyp_constr "core_type" (typing/typedtree.ml[446,13763+45]..[446,13763+54])
                        []
                    ]
                ]
                None
              (typing/typedtree.ml[447,13823+2]..[447,13823+36])
                "Ttyp_alias" (typing/typedtree.ml[447,13823+4]..[447,13823+14])
                [
                  core_type (typing/typedtree.ml[447,13823+18]..[447,13823+27])
                    Ptyp_constr "core_type" (typing/typedtree.ml[447,13823+18]..[447,13823+27])
                    []
                  core_type (typing/typedtree.ml[447,13823+30]..[447,13823+36])
                    Ptyp_constr "string" (typing/typedtree.ml[447,13823+30]..[447,13823+36])
                    []
                ]
                None
              (typing/typedtree.ml[448,13860+2]..[448,13860+68])
                "Ttyp_variant" (typing/typedtree.ml[448,13860+4]..[448,13860+16])
                [
                  core_type (typing/typedtree.ml[448,13860+20]..[448,13860+34])
                    Ptyp_constr "list" (typing/typedtree.ml[448,13860+30]..[448,13860+34])
                    [
                      core_type (typing/typedtree.ml[448,13860+20]..[448,13860+29])
                        Ptyp_constr "row_field" (typing/typedtree.ml[448,13860+20]..[448,13860+29])
                        []
                    ]
                  core_type (typing/typedtree.ml[448,13860+37]..[448,13860+48])
                    Ptyp_constr "closed_flag" (typing/typedtree.ml[448,13860+37]..[448,13860+48])
                    []
                  core_type (typing/typedtree.ml[448,13860+51]..[448,13860+68])
                    Ptyp_constr "option" (typing/typedtree.ml[448,13860+62]..[448,13860+68])
                    [
                      core_type (typing/typedtree.ml[448,13860+51]..[448,13860+61])
                        Ptyp_constr "list" (typing/typedtree.ml[448,13860+57]..[448,13860+61])
                        [
                          core_type (typing/typedtree.ml[448,13860+51]..[448,13860+56])
                            Ptyp_constr "label" (typing/typedtree.ml[448,13860+51]..[448,13860+56])
                            []
                        ]
                    ]
                ]
                None
              (typing/typedtree.ml[449,13929+2]..[449,13929+40])
                "Ttyp_poly" (typing/typedtree.ml[449,13929+4]..[449,13929+13])
                [
                  core_type (typing/typedtree.ml[449,13929+17]..[449,13929+28])
                    Ptyp_constr "list" (typing/typedtree.ml[449,13929+24]..[449,13929+28])
                    [
                      core_type (typing/typedtree.ml[449,13929+17]..[449,13929+23])
                        Ptyp_constr "string" (typing/typedtree.ml[449,13929+17]..[449,13929+23])
                        []
                    ]
                  core_type (typing/typedtree.ml[449,13929+31]..[449,13929+40])
                    Ptyp_constr "core_type" (typing/typedtree.ml[449,13929+31]..[449,13929+40])
                    []
                ]
                None
              (typing/typedtree.ml[450,13970+2]..[450,13970+32])
                "Ttyp_package" (typing/typedtree.ml[450,13970+4]..[450,13970+16])
                [
                  core_type (typing/typedtree.ml[450,13970+20]..[450,13970+32])
                    Ptyp_constr "package_type" (typing/typedtree.ml[450,13970+20]..[450,13970+32])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "package_type" (typing/typedtree.ml[452,14004+4]..[452,14004+16]) (typing/typedtree.ml[452,14004+0]..[457,14162+1])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (typing/typedtree.ml[453,14025+2]..[453,14025+21])
                Immutable
                "pack_path" (typing/typedtree.ml[453,14025+2]..[453,14025+11])                core_type (typing/typedtree.ml[453,14025+14]..[453,14025+20])
                  Ptyp_constr "Path.t" (typing/typedtree.ml[453,14025+14]..[453,14025+20])
                  []
              (typing/typedtree.ml[454,14047+2]..[454,14047+51])
                Immutable
                "pack_fields" (typing/typedtree.ml[454,14047+2]..[454,14047+13])                core_type (typing/typedtree.ml[454,14047+16]..[454,14047+50])
                  Ptyp_constr "list" (typing/typedtree.ml[454,14047+46]..[454,14047+50])
                  [
                    core_type (typing/typedtree.ml[454,14047+17]..[454,14047+44])
                      Ptyp_tuple
                      [
                        core_type (typing/typedtree.ml[454,14047+17]..[454,14047+32])
                          Ptyp_constr "loc" (typing/typedtree.ml[454,14047+29]..[454,14047+32])
                          [
                            core_type (typing/typedtree.ml[454,14047+17]..[454,14047+28])
                              Ptyp_constr "Longident.t" (typing/typedtree.ml[454,14047+17]..[454,14047+28])
                              []
                          ]
                        core_type (typing/typedtree.ml[454,14047+35]..[454,14047+44])
                          Ptyp_constr "core_type" (typing/typedtree.ml[454,14047+35]..[454,14047+44])
                          []
                      ]
                  ]
              (typing/typedtree.ml[455,14099+2]..[455,14099+32])
                Immutable
                "pack_type" (typing/typedtree.ml[455,14099+2]..[455,14099+11])                core_type (typing/typedtree.ml[455,14099+14]..[455,14099+31])
                  Ptyp_constr "Types.module_type" (typing/typedtree.ml[455,14099+14]..[455,14099+31])
                  []
              (typing/typedtree.ml[456,14132+2]..[456,14132+29])
                Immutable
                "pack_txt" (typing/typedtree.ml[456,14132+2]..[456,14132+10])                core_type (typing/typedtree.ml[456,14132+13]..[456,14132+28])
                  Ptyp_constr "loc" (typing/typedtree.ml[456,14132+25]..[456,14132+28])
                  [
                    core_type (typing/typedtree.ml[456,14132+13]..[456,14132+24])
                      Ptyp_constr "Longident.t" (typing/typedtree.ml[456,14132+13]..[456,14132+24])
                      []
                  ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "row_field" (typing/typedtree.ml[459,14165+4]..[459,14165+13]) (typing/typedtree.ml[459,14165+0]..[463,14264+1])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (typing/typedtree.ml[460,14183+2]..[460,14183+27])
                Immutable
                "rf_desc" (typing/typedtree.ml[460,14183+2]..[460,14183+9])                core_type (typing/typedtree.ml[460,14183+12]..[460,14183+26])
                  Ptyp_constr "row_field_desc" (typing/typedtree.ml[460,14183+12]..[460,14183+26])
                  []
              (typing/typedtree.ml[461,14211+2]..[461,14211+22])
                Immutable
                "rf_loc" (typing/typedtree.ml[461,14211+2]..[461,14211+8])                core_type (typing/typedtree.ml[461,14211+11]..[461,14211+21])
                  Ptyp_constr "Location.t" (typing/typedtree.ml[461,14211+11]..[461,14211+21])
                  []
              (typing/typedtree.ml[462,14234+2]..[462,14234+29])
                Immutable
                "rf_attributes" (typing/typedtree.ml[462,14234+2]..[462,14234+15])                core_type (typing/typedtree.ml[462,14234+18]..[462,14234+28])
                  Ptyp_constr "attributes" (typing/typedtree.ml[462,14234+18]..[462,14234+28])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "row_field_desc" (typing/typedtree.ml[465,14267+4]..[465,14267+18]) (typing/typedtree.ml[465,14267+0]..[467,14335+25])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (typing/typedtree.ml[466,14288+4]..[466,14288+46])
                "Ttag" (typing/typedtree.ml[466,14288+4]..[466,14288+8])
                [
                  core_type (typing/typedtree.ml[466,14288+12]..[466,14288+22])
                    Ptyp_constr "loc" (typing/typedtree.ml[466,14288+19]..[466,14288+22])
                    [
                      core_type (typing/typedtree.ml[466,14288+12]..[466,14288+18])
                        Ptyp_constr "string" (typing/typedtree.ml[466,14288+12]..[466,14288+18])
                        []
                    ]
                  core_type (typing/typedtree.ml[466,14288+25]..[466,14288+29])
                    Ptyp_constr "bool" (typing/typedtree.ml[466,14288+25]..[466,14288+29])
                    []
                  core_type (typing/typedtree.ml[466,14288+32]..[466,14288+46])
                    Ptyp_constr "list" (typing/typedtree.ml[466,14288+42]..[466,14288+46])
                    [
                      core_type (typing/typedtree.ml[466,14288+32]..[466,14288+41])
                        Ptyp_constr "core_type" (typing/typedtree.ml[466,14288+32]..[466,14288+41])
                        []
                    ]
                ]
                None
              (typing/typedtree.ml[467,14335+2]..[467,14335+25])
                "Tinherit" (typing/typedtree.ml[467,14335+4]..[467,14335+12])
                [
                  core_type (typing/typedtree.ml[467,14335+16]..[467,14335+25])
                    Ptyp_constr "core_type" (typing/typedtree.ml[467,14335+16]..[467,14335+25])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "object_field" (typing/typedtree.ml[469,14362+4]..[469,14362+16]) (typing/typedtree.ml[469,14362+0]..[473,14467+1])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (typing/typedtree.ml[470,14383+2]..[470,14383+30])
                Immutable
                "of_desc" (typing/typedtree.ml[470,14383+2]..[470,14383+9])                core_type (typing/typedtree.ml[470,14383+12]..[470,14383+29])
                  Ptyp_constr "object_field_desc" (typing/typedtree.ml[470,14383+12]..[470,14383+29])
                  []
              (typing/typedtree.ml[471,14414+2]..[471,14414+22])
                Immutable
                "of_loc" (typing/typedtree.ml[471,14414+2]..[471,14414+8])                core_type (typing/typedtree.ml[471,14414+11]..[471,14414+21])
                  Ptyp_constr "Location.t" (typing/typedtree.ml[471,14414+11]..[471,14414+21])
                  []
              (typing/typedtree.ml[472,14437+2]..[472,14437+29])
                Immutable
                "of_attributes" (typing/typedtree.ml[472,14437+2]..[472,14437+15])                core_type (typing/typedtree.ml[472,14437+18]..[472,14437+28])
                  Ptyp_constr "attributes" (typing/typedtree.ml[472,14437+18]..[472,14437+28])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "object_field_desc" (typing/typedtree.ml[475,14470+4]..[475,14470+21]) (typing/typedtree.ml[475,14470+0]..[477,14530+26])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (typing/typedtree.ml[476,14494+2]..[476,14494+35])
                "OTtag" (typing/typedtree.ml[476,14494+4]..[476,14494+9])
                [
                  core_type (typing/typedtree.ml[476,14494+13]..[476,14494+23])
                    Ptyp_constr "loc" (typing/typedtree.ml[476,14494+20]..[476,14494+23])
                    [
                      core_type (typing/typedtree.ml[476,14494+13]..[476,14494+19])
                        Ptyp_constr "string" (typing/typedtree.ml[476,14494+13]..[476,14494+19])
                        []
                    ]
                  core_type (typing/typedtree.ml[476,14494+26]..[476,14494+35])
                    Ptyp_constr "core_type" (typing/typedtree.ml[476,14494+26]..[476,14494+35])
                    []
                ]
                None
              (typing/typedtree.ml[477,14530+2]..[477,14530+26])
                "OTinherit" (typing/typedtree.ml[477,14530+4]..[477,14530+13])
                [
                  core_type (typing/typedtree.ml[477,14530+17]..[477,14530+26])
                    Ptyp_constr "core_type" (typing/typedtree.ml[477,14530+17]..[477,14530+26])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "value_description" (typing/typedtree.ml[479,14558+4]..[479,14558+21]) (typing/typedtree.ml[479,14558+0]..[487,14780+5])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (typing/typedtree.ml[480,14582+4]..[480,14582+20])
                Immutable
                "val_id" (typing/typedtree.ml[480,14582+4]..[480,14582+10])                core_type (typing/typedtree.ml[480,14582+12]..[480,14582+19])
                  Ptyp_constr "Ident.t" (typing/typedtree.ml[480,14582+12]..[480,14582+19])
                  []
              (typing/typedtree.ml[481,14603+4]..[481,14603+25])
                Immutable
                "val_name" (typing/typedtree.ml[481,14603+4]..[481,14603+12])                core_type (typing/typedtree.ml[481,14603+14]..[481,14603+24])
                  Ptyp_constr "loc" (typing/typedtree.ml[481,14603+21]..[481,14603+24])
                  [
                    core_type (typing/typedtree.ml[481,14603+14]..[481,14603+20])
                      Ptyp_constr "string" (typing/typedtree.ml[481,14603+14]..[481,14603+20])
                      []
                  ]
              (typing/typedtree.ml[482,14629+4]..[482,14629+24])
                Immutable
                "val_desc" (typing/typedtree.ml[482,14629+4]..[482,14629+12])                core_type (typing/typedtree.ml[482,14629+14]..[482,14629+23])
                  Ptyp_constr "core_type" (typing/typedtree.ml[482,14629+14]..[482,14629+23])
                  []
              (typing/typedtree.ml[483,14654+4]..[483,14654+37])
                Immutable
                "val_val" (typing/typedtree.ml[483,14654+4]..[483,14654+11])                core_type (typing/typedtree.ml[483,14654+13]..[483,14654+36])
                  Ptyp_constr "Types.value_description" (typing/typedtree.ml[483,14654+13]..[483,14654+36])
                  []
              (typing/typedtree.ml[484,14692+4]..[484,14692+26])
                Immutable
                "val_prim" (typing/typedtree.ml[484,14692+4]..[484,14692+12])                core_type (typing/typedtree.ml[484,14692+14]..[484,14692+25])
                  Ptyp_constr "list" (typing/typedtree.ml[484,14692+21]..[484,14692+25])
                  [
                    core_type (typing/typedtree.ml[484,14692+14]..[484,14692+20])
                      Ptyp_constr "string" (typing/typedtree.ml[484,14692+14]..[484,14692+20])
                      []
                  ]
              (typing/typedtree.ml[485,14719+4]..[485,14719+24])
                Immutable
                "val_loc" (typing/typedtree.ml[485,14719+4]..[485,14719+11])                core_type (typing/typedtree.ml[485,14719+13]..[485,14719+23])
                  Ptyp_constr "Location.t" (typing/typedtree.ml[485,14719+13]..[485,14719+23])
                  []
              (typing/typedtree.ml[486,14744+4]..[486,14744+35])
                Immutable
                "val_attributes" (typing/typedtree.ml[486,14744+4]..[486,14744+18])                core_type (typing/typedtree.ml[486,14744+20]..[486,14744+34])
                  Ptyp_constr "list" (typing/typedtree.ml[486,14744+30]..[486,14744+34])
                  [
                    core_type (typing/typedtree.ml[486,14744+20]..[486,14744+29])
                      Ptyp_constr "attribute" (typing/typedtree.ml[486,14744+20]..[486,14744+29])
                      []
                  ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "type_declaration" (typing/typedtree.ml[489,14787+4]..[489,14787+20]) (typing/typedtree.ml[489,14787+0]..[500,15167+4])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (typing/typedtree.ml[490,14810+4]..[490,14810+20])
                Immutable
                "typ_id" (typing/typedtree.ml[490,14810+4]..[490,14810+10])                core_type (typing/typedtree.ml[490,14810+12]..[490,14810+19])
                  Ptyp_constr "Ident.t" (typing/typedtree.ml[490,14810+12]..[490,14810+19])
                  []
              (typing/typedtree.ml[491,14831+4]..[491,14831+25])
                Immutable
                "typ_name" (typing/typedtree.ml[491,14831+4]..[491,14831+12])                core_type (typing/typedtree.ml[491,14831+14]..[491,14831+24])
                  Ptyp_constr "loc" (typing/typedtree.ml[491,14831+21]..[491,14831+24])
                  [
                    core_type (typing/typedtree.ml[491,14831+14]..[491,14831+20])
                      Ptyp_constr "string" (typing/typedtree.ml[491,14831+14]..[491,14831+20])
                      []
                  ]
              (typing/typedtree.ml[492,14857+4]..[492,14857+60])
                Immutable
                "typ_params" (typing/typedtree.ml[492,14857+4]..[492,14857+14])                core_type (typing/typedtree.ml[492,14857+16]..[492,14857+59])
                  Ptyp_constr "list" (typing/typedtree.ml[492,14857+55]..[492,14857+59])
                  [
                    core_type (typing/typedtree.ml[492,14857+17]..[492,14857+53])
                      Ptyp_tuple
                      [
                        core_type (typing/typedtree.ml[492,14857+17]..[492,14857+26])
                          Ptyp_constr "core_type" (typing/typedtree.ml[492,14857+17]..[492,14857+26])
                          []
                        core_type (typing/typedtree.ml[492,14857+30]..[492,14857+52])
                          Ptyp_tuple
                          [
                            core_type (typing/typedtree.ml[492,14857+30]..[492,14857+38])
                              Ptyp_constr "variance" (typing/typedtree.ml[492,14857+30]..[492,14857+38])
                              []
                            core_type (typing/typedtree.ml[492,14857+41]..[492,14857+52])
                              Ptyp_constr "injectivity" (typing/typedtree.ml[492,14857+41]..[492,14857+52])
                              []
                          ]
                      ]
                  ]
              (typing/typedtree.ml[493,14918+4]..[493,14918+37])
                Immutable
                "typ_type" (typing/typedtree.ml[493,14918+4]..[493,14918+12])                core_type (typing/typedtree.ml[493,14918+14]..[493,14918+36])
                  Ptyp_constr "Types.type_declaration" (typing/typedtree.ml[493,14918+14]..[493,14918+36])
                  []
              (typing/typedtree.ml[494,14956+4]..[494,14956+57])
                Immutable
                "typ_cstrs" (typing/typedtree.ml[494,14956+4]..[494,14956+13])                core_type (typing/typedtree.ml[494,14956+15]..[494,14956+56])
                  Ptyp_constr "list" (typing/typedtree.ml[494,14956+52]..[494,14956+56])
                  [
                    core_type (typing/typedtree.ml[494,14956+16]..[494,14956+50])
                      Ptyp_tuple
                      [
                        core_type (typing/typedtree.ml[494,14956+16]..[494,14956+25])
                          Ptyp_constr "core_type" (typing/typedtree.ml[494,14956+16]..[494,14956+25])
                          []
                        core_type (typing/typedtree.ml[494,14956+28]..[494,14956+37])
                          Ptyp_constr "core_type" (typing/typedtree.ml[494,14956+28]..[494,14956+37])
                          []
                        core_type (typing/typedtree.ml[494,14956+40]..[494,14956+50])
                          Ptyp_constr "Location.t" (typing/typedtree.ml[494,14956+40]..[494,14956+50])
                          []
                      ]
                  ]
              (typing/typedtree.ml[495,15014+4]..[495,15014+24])
                Immutable
                "typ_kind" (typing/typedtree.ml[495,15014+4]..[495,15014+12])                core_type (typing/typedtree.ml[495,15014+14]..[495,15014+23])
                  Ptyp_constr "type_kind" (typing/typedtree.ml[495,15014+14]..[495,15014+23])
                  []
              (typing/typedtree.ml[496,15039+4]..[496,15039+30])
                Immutable
                "typ_private" (typing/typedtree.ml[496,15039+4]..[496,15039+15])                core_type (typing/typedtree.ml[496,15039+17]..[496,15039+29])
                  Ptyp_constr "private_flag" (typing/typedtree.ml[496,15039+17]..[496,15039+29])
                  []
              (typing/typedtree.ml[497,15070+4]..[497,15070+35])
                Immutable
                "typ_manifest" (typing/typedtree.ml[497,15070+4]..[497,15070+16])                core_type (typing/typedtree.ml[497,15070+18]..[497,15070+34])
                  Ptyp_constr "option" (typing/typedtree.ml[497,15070+28]..[497,15070+34])
                  [
                    core_type (typing/typedtree.ml[497,15070+18]..[497,15070+27])
                      Ptyp_constr "core_type" (typing/typedtree.ml[497,15070+18]..[497,15070+27])
                      []
                  ]
              (typing/typedtree.ml[498,15106+4]..[498,15106+24])
                Immutable
                "typ_loc" (typing/typedtree.ml[498,15106+4]..[498,15106+11])                core_type (typing/typedtree.ml[498,15106+13]..[498,15106+23])
                  Ptyp_constr "Location.t" (typing/typedtree.ml[498,15106+13]..[498,15106+23])
                  []
              (typing/typedtree.ml[499,15131+4]..[499,15131+35])
                Immutable
                "typ_attributes" (typing/typedtree.ml[499,15131+4]..[499,15131+18])                core_type (typing/typedtree.ml[499,15131+20]..[499,15131+34])
                  Ptyp_constr "list" (typing/typedtree.ml[499,15131+30]..[499,15131+34])
                  [
                    core_type (typing/typedtree.ml[499,15131+20]..[499,15131+29])
                      Ptyp_constr "attribute" (typing/typedtree.ml[499,15131+20]..[499,15131+29])
                      []
                  ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "type_kind" (typing/typedtree.ml[502,15173+4]..[502,15173+13]) (typing/typedtree.ml[502,15173+0]..[506,15301+14])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (typing/typedtree.ml[503,15189+4]..[503,15189+18])
                "Ttype_abstract" (typing/typedtree.ml[503,15189+4]..[503,15189+18])
                []
                None
              (typing/typedtree.ml[504,15208+2]..[504,15208+49])
                "Ttype_variant" (typing/typedtree.ml[504,15208+4]..[504,15208+17])
                [
                  core_type (typing/typedtree.ml[504,15208+21]..[504,15208+49])
                    Ptyp_constr "list" (typing/typedtree.ml[504,15208+45]..[504,15208+49])
                    [
                      core_type (typing/typedtree.ml[504,15208+21]..[504,15208+44])
                        Ptyp_constr "constructor_declaration" (typing/typedtree.ml[504,15208+21]..[504,15208+44])
                        []
                    ]
                ]
                None
              (typing/typedtree.ml[505,15258+2]..[505,15258+42])
                "Ttype_record" (typing/typedtree.ml[505,15258+4]..[505,15258+16])
                [
                  core_type (typing/typedtree.ml[505,15258+20]..[505,15258+42])
                    Ptyp_constr "list" (typing/typedtree.ml[505,15258+38]..[505,15258+42])
                    [
                      core_type (typing/typedtree.ml[505,15258+20]..[505,15258+37])
                        Ptyp_constr "label_declaration" (typing/typedtree.ml[505,15258+20]..[505,15258+37])
                        []
                    ]
                ]
                None
              (typing/typedtree.ml[506,15301+2]..[506,15301+14])
                "Ttype_open" (typing/typedtree.ml[506,15301+4]..[506,15301+14])
                []
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "label_declaration" (typing/typedtree.ml[508,15317+4]..[508,15317+21]) (typing/typedtree.ml[508,15317+0]..[516,15511+5])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (typing/typedtree.ml[510,15347+5]..[510,15347+20])
                Immutable
                "ld_id" (typing/typedtree.ml[510,15347+5]..[510,15347+10])                core_type (typing/typedtree.ml[510,15347+12]..[510,15347+19])
                  Ptyp_constr "Ident.t" (typing/typedtree.ml[510,15347+12]..[510,15347+19])
                  []
              (typing/typedtree.ml[511,15368+5]..[511,15368+25])
                Immutable
                "ld_name" (typing/typedtree.ml[511,15368+5]..[511,15368+12])                core_type (typing/typedtree.ml[511,15368+14]..[511,15368+24])
                  Ptyp_constr "loc" (typing/typedtree.ml[511,15368+21]..[511,15368+24])
                  [
                    core_type (typing/typedtree.ml[511,15368+14]..[511,15368+20])
                      Ptyp_constr "string" (typing/typedtree.ml[511,15368+14]..[511,15368+20])
                      []
                  ]
              (typing/typedtree.ml[512,15394+5]..[512,15394+30])
                Immutable
                "ld_mutable" (typing/typedtree.ml[512,15394+5]..[512,15394+15])                core_type (typing/typedtree.ml[512,15394+17]..[512,15394+29])
                  Ptyp_constr "mutable_flag" (typing/typedtree.ml[512,15394+17]..[512,15394+29])
                  []
              (typing/typedtree.ml[513,15425+5]..[513,15425+24])
                Immutable
                "ld_type" (typing/typedtree.ml[513,15425+5]..[513,15425+12])                core_type (typing/typedtree.ml[513,15425+14]..[513,15425+23])
                  Ptyp_constr "core_type" (typing/typedtree.ml[513,15425+14]..[513,15425+23])
                  []
              (typing/typedtree.ml[514,15450+5]..[514,15450+24])
                Immutable
                "ld_loc" (typing/typedtree.ml[514,15450+5]..[514,15450+11])                core_type (typing/typedtree.ml[514,15450+13]..[514,15450+23])
                  Ptyp_constr "Location.t" (typing/typedtree.ml[514,15450+13]..[514,15450+23])
                  []
              (typing/typedtree.ml[515,15475+5]..[515,15475+35])
                Immutable
                "ld_attributes" (typing/typedtree.ml[515,15475+5]..[515,15475+18])                core_type (typing/typedtree.ml[515,15475+20]..[515,15475+34])
                  Ptyp_constr "list" (typing/typedtree.ml[515,15475+30]..[515,15475+34])
                  [
                    core_type (typing/typedtree.ml[515,15475+20]..[515,15475+29])
                      Ptyp_constr "attribute" (typing/typedtree.ml[515,15475+20]..[515,15475+29])
                      []
                  ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "constructor_declaration" (typing/typedtree.ml[518,15518+4]..[518,15518+27]) (typing/typedtree.ml[518,15518+0]..[527,15761+5])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (typing/typedtree.ml[520,15554+5]..[520,15554+20])
                Immutable
                "cd_id" (typing/typedtree.ml[520,15554+5]..[520,15554+10])                core_type (typing/typedtree.ml[520,15554+12]..[520,15554+19])
                  Ptyp_constr "Ident.t" (typing/typedtree.ml[520,15554+12]..[520,15554+19])
                  []
              (typing/typedtree.ml[521,15575+5]..[521,15575+25])
                Immutable
                "cd_name" (typing/typedtree.ml[521,15575+5]..[521,15575+12])                core_type (typing/typedtree.ml[521,15575+14]..[521,15575+24])
                  Ptyp_constr "loc" (typing/typedtree.ml[521,15575+21]..[521,15575+24])
                  [
                    core_type (typing/typedtree.ml[521,15575+14]..[521,15575+20])
                      Ptyp_constr "string" (typing/typedtree.ml[521,15575+14]..[521,15575+20])
                      []
                  ]
              (typing/typedtree.ml[522,15601+5]..[522,15601+30])
                Immutable
                "cd_vars" (typing/typedtree.ml[522,15601+5]..[522,15601+12])                core_type (typing/typedtree.ml[522,15601+14]..[522,15601+29])
                  Ptyp_constr "list" (typing/typedtree.ml[522,15601+25]..[522,15601+29])
                  [
                    core_type (typing/typedtree.ml[522,15601+14]..[522,15601+24])
                      Ptyp_constr "loc" (typing/typedtree.ml[522,15601+21]..[522,15601+24])
                      [
                        core_type (typing/typedtree.ml[522,15601+14]..[522,15601+20])
                          Ptyp_constr "string" (typing/typedtree.ml[522,15601+14]..[522,15601+20])
                          []
                      ]
                  ]
              (typing/typedtree.ml[523,15632+5]..[523,15632+36])
                Immutable
                "cd_args" (typing/typedtree.ml[523,15632+5]..[523,15632+12])                core_type (typing/typedtree.ml[523,15632+14]..[523,15632+35])
                  Ptyp_constr "constructor_arguments" (typing/typedtree.ml[523,15632+14]..[523,15632+35])
                  []
              (typing/typedtree.ml[524,15669+5]..[524,15669+30])
                Immutable
                "cd_res" (typing/typedtree.ml[524,15669+5]..[524,15669+11])                core_type (typing/typedtree.ml[524,15669+13]..[524,15669+29])
                  Ptyp_constr "option" (typing/typedtree.ml[524,15669+23]..[524,15669+29])
                  [
                    core_type (typing/typedtree.ml[524,15669+13]..[524,15669+22])
                      Ptyp_constr "core_type" (typing/typedtree.ml[524,15669+13]..[524,15669+22])
                      []
                  ]
              (typing/typedtree.ml[525,15700+5]..[525,15700+24])
                Immutable
                "cd_loc" (typing/typedtree.ml[525,15700+5]..[525,15700+11])                core_type (typing/typedtree.ml[525,15700+13]..[525,15700+23])
                  Ptyp_constr "Location.t" (typing/typedtree.ml[525,15700+13]..[525,15700+23])
                  []
              (typing/typedtree.ml[526,15725+5]..[526,15725+35])
                Immutable
                "cd_attributes" (typing/typedtree.ml[526,15725+5]..[526,15725+18])                core_type (typing/typedtree.ml[526,15725+20]..[526,15725+34])
                  Ptyp_constr "list" (typing/typedtree.ml[526,15725+30]..[526,15725+34])
                  [
                    core_type (typing/typedtree.ml[526,15725+20]..[526,15725+29])
                      Ptyp_constr "attribute" (typing/typedtree.ml[526,15725+20]..[526,15725+29])
                      []
                  ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "constructor_arguments" (typing/typedtree.ml[529,15768+4]..[529,15768+25]) (typing/typedtree.ml[529,15768+0]..[531,15829+41])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (typing/typedtree.ml[530,15796+2]..[530,15796+32])
                "Cstr_tuple" (typing/typedtree.ml[530,15796+4]..[530,15796+14])
                [
                  core_type (typing/typedtree.ml[530,15796+18]..[530,15796+32])
                    Ptyp_constr "list" (typing/typedtree.ml[530,15796+28]..[530,15796+32])
                    [
                      core_type (typing/typedtree.ml[530,15796+18]..[530,15796+27])
                        Ptyp_constr "core_type" (typing/typedtree.ml[530,15796+18]..[530,15796+27])
                        []
                    ]
                ]
                None
              (typing/typedtree.ml[531,15829+2]..[531,15829+41])
                "Cstr_record" (typing/typedtree.ml[531,15829+4]..[531,15829+15])
                [
                  core_type (typing/typedtree.ml[531,15829+19]..[531,15829+41])
                    Ptyp_constr "list" (typing/typedtree.ml[531,15829+37]..[531,15829+41])
                    [
                      core_type (typing/typedtree.ml[531,15829+19]..[531,15829+36])
                        Ptyp_constr "label_declaration" (typing/typedtree.ml[531,15829+19]..[531,15829+36])
                        []
                    ]
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "type_extension" (typing/typedtree.ml[533,15872+4]..[533,15872+18]) (typing/typedtree.ml[533,15872+0]..[542,16166+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (typing/typedtree.ml[535,15897+4]..[535,15897+23])
                Immutable
                "tyext_path" (typing/typedtree.ml[535,15897+4]..[535,15897+14])                core_type (typing/typedtree.ml[535,15897+16]..[535,15897+22])
                  Ptyp_constr "Path.t" (typing/typedtree.ml[535,15897+16]..[535,15897+22])
                  []
              (typing/typedtree.ml[536,15921+4]..[536,15921+31])
                Immutable
                "tyext_txt" (typing/typedtree.ml[536,15921+4]..[536,15921+13])                core_type (typing/typedtree.ml[536,15921+15]..[536,15921+30])
                  Ptyp_constr "loc" (typing/typedtree.ml[536,15921+27]..[536,15921+30])
                  [
                    core_type (typing/typedtree.ml[536,15921+15]..[536,15921+26])
                      Ptyp_constr "Longident.t" (typing/typedtree.ml[536,15921+15]..[536,15921+26])
                      []
                  ]
              (typing/typedtree.ml[537,15953+4]..[537,15953+62])
                Immutable
                "tyext_params" (typing/typedtree.ml[537,15953+4]..[537,15953+16])                core_type (typing/typedtree.ml[537,15953+18]..[537,15953+61])
                  Ptyp_constr "list" (typing/typedtree.ml[537,15953+57]..[537,15953+61])
                  [
                    core_type (typing/typedtree.ml[537,15953+19]..[537,15953+55])
                      Ptyp_tuple
                      [
                        core_type (typing/typedtree.ml[537,15953+19]..[537,15953+28])
                          Ptyp_constr "core_type" (typing/typedtree.ml[537,15953+19]..[537,15953+28])
                          []
                        core_type (typing/typedtree.ml[537,15953+32]..[537,15953+54])
                          Ptyp_tuple
                          [
                            core_type (typing/typedtree.ml[537,15953+32]..[537,15953+40])
                              Ptyp_constr "variance" (typing/typedtree.ml[537,15953+32]..[537,15953+40])
                              []
                            core_type (typing/typedtree.ml[537,15953+43]..[537,15953+54])
                              Ptyp_constr "injectivity" (typing/typedtree.ml[537,15953+43]..[537,15953+54])
                              []
                          ]
                      ]
                  ]
              (typing/typedtree.ml[538,16016+4]..[538,16016+51])
                Immutable
                "tyext_constructors" (typing/typedtree.ml[538,16016+4]..[538,16016+22])                core_type (typing/typedtree.ml[538,16016+24]..[538,16016+50])
                  Ptyp_constr "list" (typing/typedtree.ml[538,16016+46]..[538,16016+50])
                  [
                    core_type (typing/typedtree.ml[538,16016+24]..[538,16016+45])
                      Ptyp_constr "extension_constructor" (typing/typedtree.ml[538,16016+24]..[538,16016+45])
                      []
                  ]
              (typing/typedtree.ml[539,16068+4]..[539,16068+32])
                Immutable
                "tyext_private" (typing/typedtree.ml[539,16068+4]..[539,16068+17])                core_type (typing/typedtree.ml[539,16068+19]..[539,16068+31])
                  Ptyp_constr "private_flag" (typing/typedtree.ml[539,16068+19]..[539,16068+31])
                  []
              (typing/typedtree.ml[540,16101+4]..[540,16101+26])
                Immutable
                "tyext_loc" (typing/typedtree.ml[540,16101+4]..[540,16101+13])                core_type (typing/typedtree.ml[540,16101+15]..[540,16101+25])
                  Ptyp_constr "Location.t" (typing/typedtree.ml[540,16101+15]..[540,16101+25])
                  []
              (typing/typedtree.ml[541,16128+4]..[541,16128+37])
                Immutable
                "tyext_attributes" (typing/typedtree.ml[541,16128+4]..[541,16128+20])                core_type (typing/typedtree.ml[541,16128+22]..[541,16128+36])
                  Ptyp_constr "list" (typing/typedtree.ml[541,16128+32]..[541,16128+36])
                  [
                    core_type (typing/typedtree.ml[541,16128+22]..[541,16128+31])
                      Ptyp_constr "attribute" (typing/typedtree.ml[541,16128+22]..[541,16128+31])
                      []
                  ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "type_exception" (typing/typedtree.ml[544,16171+4]..[544,16171+18]) (typing/typedtree.ml[544,16171+0]..[549,16307+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (typing/typedtree.ml[546,16196+4]..[546,16196+45])
                Immutable
                "tyexn_constructor" (typing/typedtree.ml[546,16196+4]..[546,16196+21])                core_type (typing/typedtree.ml[546,16196+23]..[546,16196+44])
                  Ptyp_constr "extension_constructor" (typing/typedtree.ml[546,16196+23]..[546,16196+44])
                  []
              (typing/typedtree.ml[547,16242+4]..[547,16242+26])
                Immutable
                "tyexn_loc" (typing/typedtree.ml[547,16242+4]..[547,16242+13])                core_type (typing/typedtree.ml[547,16242+15]..[547,16242+25])
                  Ptyp_constr "Location.t" (typing/typedtree.ml[547,16242+15]..[547,16242+25])
                  []
              (typing/typedtree.ml[548,16269+4]..[548,16269+37])
                Immutable
                "tyexn_attributes" (typing/typedtree.ml[548,16269+4]..[548,16269+20])                core_type (typing/typedtree.ml[548,16269+22]..[548,16269+36])
                  Ptyp_constr "list" (typing/typedtree.ml[548,16269+32]..[548,16269+36])
                  [
                    core_type (typing/typedtree.ml[548,16269+22]..[548,16269+31])
                      Ptyp_constr "attribute" (typing/typedtree.ml[548,16269+22]..[548,16269+31])
                      []
                  ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "extension_constructor" (typing/typedtree.ml[551,16312+4]..[551,16312+25]) (typing/typedtree.ml[551,16312+0]..[559,16537+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (typing/typedtree.ml[553,16344+4]..[553,16344+20])
                Immutable
                "ext_id" (typing/typedtree.ml[553,16344+4]..[553,16344+10])                core_type (typing/typedtree.ml[553,16344+12]..[553,16344+19])
                  Ptyp_constr "Ident.t" (typing/typedtree.ml[553,16344+12]..[553,16344+19])
                  []
              (typing/typedtree.ml[554,16365+4]..[554,16365+25])
                Immutable
                "ext_name" (typing/typedtree.ml[554,16365+4]..[554,16365+12])                core_type (typing/typedtree.ml[554,16365+14]..[554,16365+24])
                  Ptyp_constr "loc" (typing/typedtree.ml[554,16365+21]..[554,16365+24])
                  [
                    core_type (typing/typedtree.ml[554,16365+14]..[554,16365+20])
                      Ptyp_constr "string" (typing/typedtree.ml[554,16365+14]..[554,16365+20])
                      []
                  ]
              (typing/typedtree.ml[555,16391+4]..[555,16391+42])
                Immutable
                "ext_type" (typing/typedtree.ml[555,16391+4]..[555,16391+12])                core_type (typing/typedtree.ml[555,16391+14]..[555,16391+41])
                  Ptyp_constr "Types.extension_constructor" (typing/typedtree.ml[555,16391+14]..[555,16391+41])
                  []
              (typing/typedtree.ml[556,16434+4]..[556,16434+41])
                Immutable
                "ext_kind" (typing/typedtree.ml[556,16434+4]..[556,16434+12])                core_type (typing/typedtree.ml[556,16434+14]..[556,16434+40])
                  Ptyp_constr "extension_constructor_kind" (typing/typedtree.ml[556,16434+14]..[556,16434+40])
                  []
              (typing/typedtree.ml[557,16476+4]..[557,16476+24])
                Immutable
                "ext_loc" (typing/typedtree.ml[557,16476+4]..[557,16476+11])                core_type (typing/typedtree.ml[557,16476+13]..[557,16476+23])
                  Ptyp_constr "Location.t" (typing/typedtree.ml[557,16476+13]..[557,16476+23])
                  []
              (typing/typedtree.ml[558,16501+4]..[558,16501+35])
                Immutable
                "ext_attributes" (typing/typedtree.ml[558,16501+4]..[558,16501+18])                core_type (typing/typedtree.ml[558,16501+20]..[558,16501+34])
                  Ptyp_constr "list" (typing/typedtree.ml[558,16501+30]..[558,16501+34])
                  [
                    core_type (typing/typedtree.ml[558,16501+20]..[558,16501+29])
                      Ptyp_constr "attribute" (typing/typedtree.ml[558,16501+20]..[558,16501+29])
                      []
                  ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "extension_constructor_kind" (typing/typedtree.ml[561,16542+4]..[561,16542+30]) (typing/typedtree.ml[561,16542+0]..[563,16651+43])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (typing/typedtree.ml[562,16575+4]..[562,16575+75])
                "Text_decl" (typing/typedtree.ml[562,16575+4]..[562,16575+13])
                [
                  core_type (typing/typedtree.ml[562,16575+17]..[562,16575+32])
                    Ptyp_constr "list" (typing/typedtree.ml[562,16575+28]..[562,16575+32])
                    [
                      core_type (typing/typedtree.ml[562,16575+17]..[562,16575+27])
                        Ptyp_constr "loc" (typing/typedtree.ml[562,16575+24]..[562,16575+27])
                        [
                          core_type (typing/typedtree.ml[562,16575+17]..[562,16575+23])
                            Ptyp_constr "string" (typing/typedtree.ml[562,16575+17]..[562,16575+23])
                            []
                        ]
                    ]
                  core_type (typing/typedtree.ml[562,16575+35]..[562,16575+56])
                    Ptyp_constr "constructor_arguments" (typing/typedtree.ml[562,16575+35]..[562,16575+56])
                    []
                  core_type (typing/typedtree.ml[562,16575+59]..[562,16575+75])
                    Ptyp_constr "option" (typing/typedtree.ml[562,16575+69]..[562,16575+75])
                    [
                      core_type (typing/typedtree.ml[562,16575+59]..[562,16575+68])
                        Ptyp_constr "core_type" (typing/typedtree.ml[562,16575+59]..[562,16575+68])
                        []
                    ]
                ]
                None
              (typing/typedtree.ml[563,16651+2]..[563,16651+43])
                "Text_rebind" (typing/typedtree.ml[563,16651+4]..[563,16651+15])
                [
                  core_type (typing/typedtree.ml[563,16651+19]..[563,16651+25])
                    Ptyp_constr "Path.t" (typing/typedtree.ml[563,16651+19]..[563,16651+25])
                    []
                  core_type (typing/typedtree.ml[563,16651+28]..[563,16651+43])
                    Ptyp_constr "loc" (typing/typedtree.ml[563,16651+40]..[563,16651+43])
                    [
                      core_type (typing/typedtree.ml[563,16651+28]..[563,16651+39])
                        Ptyp_constr "Longident.t" (typing/typedtree.ml[563,16651+28]..[563,16651+39])
                        []
                    ]
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "class_type" (typing/typedtree.ml[565,16696+4]..[565,16696+14]) (typing/typedtree.ml[565,16696+0]..[572,16878+5])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (typing/typedtree.ml[567,16719+5]..[567,16719+33])
                Immutable
                "cltyp_desc" (typing/typedtree.ml[567,16719+5]..[567,16719+15])                core_type (typing/typedtree.ml[567,16719+17]..[567,16719+32])
                  Ptyp_constr "class_type_desc" (typing/typedtree.ml[567,16719+17]..[567,16719+32])
                  []
              (typing/typedtree.ml[568,16753+5]..[568,16753+34])
                Immutable
                "cltyp_type" (typing/typedtree.ml[568,16753+5]..[568,16753+15])                core_type (typing/typedtree.ml[568,16753+17]..[568,16753+33])
                  Ptyp_constr "Types.class_type" (typing/typedtree.ml[568,16753+17]..[568,16753+33])
                  []
              (typing/typedtree.ml[569,16788+5]..[569,16788+22])
                Immutable
                "cltyp_env" (typing/typedtree.ml[569,16788+5]..[569,16788+14])                core_type (typing/typedtree.ml[569,16788+16]..[569,16788+21])
                  Ptyp_constr "Env.t" (typing/typedtree.ml[569,16788+16]..[569,16788+21])
                  []
              (typing/typedtree.ml[570,16811+5]..[570,16811+27])
                Immutable
                "cltyp_loc" (typing/typedtree.ml[570,16811+5]..[570,16811+14])                core_type (typing/typedtree.ml[570,16811+16]..[570,16811+26])
                  Ptyp_constr "Location.t" (typing/typedtree.ml[570,16811+16]..[570,16811+26])
                  []
              (typing/typedtree.ml[571,16839+5]..[571,16839+38])
                Immutable
                "cltyp_attributes" (typing/typedtree.ml[571,16839+5]..[571,16839+21])                core_type (typing/typedtree.ml[571,16839+23]..[571,16839+37])
                  Ptyp_constr "list" (typing/typedtree.ml[571,16839+33]..[571,16839+37])
                  [
                    core_type (typing/typedtree.ml[571,16839+23]..[571,16839+32])
                      Ptyp_constr "attribute" (typing/typedtree.ml[571,16839+23]..[571,16839+32])
                      []
                  ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "class_type_desc" (typing/typedtree.ml[574,16885+4]..[574,16885+19]) (typing/typedtree.ml[574,16885+0]..[578,17059+46])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (typing/typedtree.ml[575,16907+4]..[575,16907+60])
                "Tcty_constr" (typing/typedtree.ml[575,16907+4]..[575,16907+15])
                [
                  core_type (typing/typedtree.ml[575,16907+19]..[575,16907+25])
                    Ptyp_constr "Path.t" (typing/typedtree.ml[575,16907+19]..[575,16907+25])
                    []
                  core_type (typing/typedtree.ml[575,16907+28]..[575,16907+43])
                    Ptyp_constr "loc" (typing/typedtree.ml[575,16907+40]..[575,16907+43])
                    [
                      core_type (typing/typedtree.ml[575,16907+28]..[575,16907+39])
                        Ptyp_constr "Longident.t" (typing/typedtree.ml[575,16907+28]..[575,16907+39])
                        []
                    ]
                  core_type (typing/typedtree.ml[575,16907+46]..[575,16907+60])
                    Ptyp_constr "list" (typing/typedtree.ml[575,16907+56]..[575,16907+60])
                    [
                      core_type (typing/typedtree.ml[575,16907+46]..[575,16907+55])
                        Ptyp_constr "core_type" (typing/typedtree.ml[575,16907+46]..[575,16907+55])
                        []
                    ]
                ]
                None
              (typing/typedtree.ml[576,16968+2]..[576,16968+37])
                "Tcty_signature" (typing/typedtree.ml[576,16968+4]..[576,16968+18])
                [
                  core_type (typing/typedtree.ml[576,16968+22]..[576,16968+37])
                    Ptyp_constr "class_signature" (typing/typedtree.ml[576,16968+22]..[576,16968+37])
                    []
                ]
                None
              (typing/typedtree.ml[577,17006+2]..[577,17006+52])
                "Tcty_arrow" (typing/typedtree.ml[577,17006+4]..[577,17006+14])
                [
                  core_type (typing/typedtree.ml[577,17006+18]..[577,17006+27])
                    Ptyp_constr "arg_label" (typing/typedtree.ml[577,17006+18]..[577,17006+27])
                    []
                  core_type (typing/typedtree.ml[577,17006+30]..[577,17006+39])
                    Ptyp_constr "core_type" (typing/typedtree.ml[577,17006+30]..[577,17006+39])
                    []
                  core_type (typing/typedtree.ml[577,17006+42]..[577,17006+52])
                    Ptyp_constr "class_type" (typing/typedtree.ml[577,17006+42]..[577,17006+52])
                    []
                ]
                None
              (typing/typedtree.ml[578,17059+2]..[578,17059+46])
                "Tcty_open" (typing/typedtree.ml[578,17059+4]..[578,17059+13])
                [
                  core_type (typing/typedtree.ml[578,17059+17]..[578,17059+33])
                    Ptyp_constr "open_description" (typing/typedtree.ml[578,17059+17]..[578,17059+33])
                    []
                  core_type (typing/typedtree.ml[578,17059+36]..[578,17059+46])
                    Ptyp_constr "class_type" (typing/typedtree.ml[578,17059+36]..[578,17059+46])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "class_signature" (typing/typedtree.ml[580,17107+4]..[580,17107+19]) (typing/typedtree.ml[580,17107+0]..[584,17235+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (typing/typedtree.ml[581,17131+4]..[581,17131+25])
                Immutable
                "csig_self" (typing/typedtree.ml[581,17131+4]..[581,17131+13])                core_type (typing/typedtree.ml[581,17131+15]..[581,17131+24])
                  Ptyp_constr "core_type" (typing/typedtree.ml[581,17131+15]..[581,17131+24])
                  []
              (typing/typedtree.ml[582,17157+4]..[582,17157+39])
                Immutable
                "csig_fields" (typing/typedtree.ml[582,17157+4]..[582,17157+15])                core_type (typing/typedtree.ml[582,17157+17]..[582,17157+38])
                  Ptyp_constr "list" (typing/typedtree.ml[582,17157+34]..[582,17157+38])
                  [
                    core_type (typing/typedtree.ml[582,17157+17]..[582,17157+33])
                      Ptyp_constr "class_type_field" (typing/typedtree.ml[582,17157+17]..[582,17157+33])
                      []
                  ]
              (typing/typedtree.ml[583,17197+4]..[583,17197+37])
                Immutable
                "csig_type" (typing/typedtree.ml[583,17197+4]..[583,17197+13])                core_type (typing/typedtree.ml[583,17197+15]..[583,17197+36])
                  Ptyp_constr "Types.class_signature" (typing/typedtree.ml[583,17197+15]..[583,17197+36])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "class_type_field" (typing/typedtree.ml[586,17240+4]..[586,17240+20]) (typing/typedtree.ml[586,17240+0]..[590,17363+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (typing/typedtree.ml[587,17265+4]..[587,17265+36])
                Immutable
                "ctf_desc" (typing/typedtree.ml[587,17265+4]..[587,17265+12])                core_type (typing/typedtree.ml[587,17265+14]..[587,17265+35])
                  Ptyp_constr "class_type_field_desc" (typing/typedtree.ml[587,17265+14]..[587,17265+35])
                  []
              (typing/typedtree.ml[588,17302+4]..[588,17302+24])
                Immutable
                "ctf_loc" (typing/typedtree.ml[588,17302+4]..[588,17302+11])                core_type (typing/typedtree.ml[588,17302+13]..[588,17302+23])
                  Ptyp_constr "Location.t" (typing/typedtree.ml[588,17302+13]..[588,17302+23])
                  []
              (typing/typedtree.ml[589,17327+4]..[589,17327+35])
                Immutable
                "ctf_attributes" (typing/typedtree.ml[589,17327+4]..[589,17327+18])                core_type (typing/typedtree.ml[589,17327+20]..[589,17327+34])
                  Ptyp_constr "list" (typing/typedtree.ml[589,17327+30]..[589,17327+34])
                  [
                    core_type (typing/typedtree.ml[589,17327+20]..[589,17327+29])
                      Ptyp_constr "attribute" (typing/typedtree.ml[589,17327+20]..[589,17327+29])
                      []
                  ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "class_type_field_desc" (typing/typedtree.ml[592,17368+4]..[592,17368+25]) (typing/typedtree.ml[592,17368+0]..[597,17611+31])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (typing/typedtree.ml[593,17396+2]..[593,17396+30])
                "Tctf_inherit" (typing/typedtree.ml[593,17396+4]..[593,17396+16])
                [
                  core_type (typing/typedtree.ml[593,17396+20]..[593,17396+30])
                    Ptyp_constr "class_type" (typing/typedtree.ml[593,17396+20]..[593,17396+30])
                    []
                ]
                None
              (typing/typedtree.ml[594,17427+2]..[594,17427+66])
                "Tctf_val" (typing/typedtree.ml[594,17427+4]..[594,17427+12])
                [
                  core_type (typing/typedtree.ml[594,17427+17]..[594,17427+65])
                    Ptyp_tuple
                    [
                      core_type (typing/typedtree.ml[594,17427+17]..[594,17427+23])
                        Ptyp_constr "string" (typing/typedtree.ml[594,17427+17]..[594,17427+23])
                        []
                      core_type (typing/typedtree.ml[594,17427+26]..[594,17427+38])
                        Ptyp_constr "mutable_flag" (typing/typedtree.ml[594,17427+26]..[594,17427+38])
                        []
                      core_type (typing/typedtree.ml[594,17427+41]..[594,17427+53])
                        Ptyp_constr "virtual_flag" (typing/typedtree.ml[594,17427+41]..[594,17427+53])
                        []
                      core_type (typing/typedtree.ml[594,17427+56]..[594,17427+65])
                        Ptyp_constr "core_type" (typing/typedtree.ml[594,17427+56]..[594,17427+65])
                        []
                    ]
                ]
                None
              (typing/typedtree.ml[595,17494+2]..[595,17494+69])
                "Tctf_method" (typing/typedtree.ml[595,17494+4]..[595,17494+15])
                [
                  core_type (typing/typedtree.ml[595,17494+20]..[595,17494+68])
                    Ptyp_tuple
                    [
                      core_type (typing/typedtree.ml[595,17494+20]..[595,17494+26])
                        Ptyp_constr "string" (typing/typedtree.ml[595,17494+20]..[595,17494+26])
                        []
                      core_type (typing/typedtree.ml[595,17494+29]..[595,17494+41])
                        Ptyp_constr "private_flag" (typing/typedtree.ml[595,17494+29]..[595,17494+41])
                        []
                      core_type (typing/typedtree.ml[595,17494+44]..[595,17494+56])
                        Ptyp_constr "virtual_flag" (typing/typedtree.ml[595,17494+44]..[595,17494+56])
                        []
                      core_type (typing/typedtree.ml[595,17494+59]..[595,17494+68])
                        Ptyp_constr "core_type" (typing/typedtree.ml[595,17494+59]..[595,17494+68])
                        []
                    ]
                ]
                None
              (typing/typedtree.ml[596,17564+2]..[596,17564+46])
                "Tctf_constraint" (typing/typedtree.ml[596,17564+4]..[596,17564+19])
                [
                  core_type (typing/typedtree.ml[596,17564+24]..[596,17564+45])
                    Ptyp_tuple
                    [
                      core_type (typing/typedtree.ml[596,17564+24]..[596,17564+33])
                        Ptyp_constr "core_type" (typing/typedtree.ml[596,17564+24]..[596,17564+33])
                        []
                      core_type (typing/typedtree.ml[596,17564+36]..[596,17564+45])
                        Ptyp_constr "core_type" (typing/typedtree.ml[596,17564+36]..[596,17564+45])
                        []
                    ]
                ]
                None
              (typing/typedtree.ml[597,17611+2]..[597,17611+31])
                "Tctf_attribute" (typing/typedtree.ml[597,17611+4]..[597,17611+18])
                [
                  core_type (typing/typedtree.ml[597,17611+22]..[597,17611+31])
                    Ptyp_constr "attribute" (typing/typedtree.ml[597,17611+22]..[597,17611+31])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "class_declaration" (typing/typedtree.ml[599,17644+4]..[599,17644+21]) (typing/typedtree.ml[599,17644+0]..[600,17668+24])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (typing/typedtree.ml[600,17668+2]..[600,17668+24])
              Ptyp_constr "class_infos" (typing/typedtree.ml[600,17668+13]..[600,17668+24])
              [
                core_type (typing/typedtree.ml[600,17668+2]..[600,17668+12])
                  Ptyp_constr "class_expr" (typing/typedtree.ml[600,17668+2]..[600,17668+12])
                  []
              ]
      type_declaration "class_description" (typing/typedtree.ml[602,17694+4]..[602,17694+21]) (typing/typedtree.ml[602,17694+0]..[603,17718+24])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (typing/typedtree.ml[603,17718+2]..[603,17718+24])
              Ptyp_constr "class_infos" (typing/typedtree.ml[603,17718+13]..[603,17718+24])
              [
                core_type (typing/typedtree.ml[603,17718+2]..[603,17718+12])
                  Ptyp_constr "class_type" (typing/typedtree.ml[603,17718+2]..[603,17718+12])
                  []
              ]
      type_declaration "class_type_declaration" (typing/typedtree.ml[605,17744+4]..[605,17744+26]) (typing/typedtree.ml[605,17744+0]..[606,17773+24])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (typing/typedtree.ml[606,17773+2]..[606,17773+24])
              Ptyp_constr "class_infos" (typing/typedtree.ml[606,17773+13]..[606,17773+24])
              [
                core_type (typing/typedtree.ml[606,17773+2]..[606,17773+12])
                  Ptyp_constr "class_type" (typing/typedtree.ml[606,17773+2]..[606,17773+12])
                  []
              ]
      type_declaration "class_infos" (typing/typedtree.ml[608,17799+7]..[608,17799+18]) (typing/typedtree.ml[608,17799+0]..[621,18210+4])
        ptype_params =
          [
            core_type (typing/typedtree.ml[608,17799+4]..[608,17799+6])
              Ptyp_var a
          ]
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (typing/typedtree.ml[609,17820+4]..[609,17820+26])
                Immutable
                "ci_virt" (typing/typedtree.ml[609,17820+4]..[609,17820+11])                core_type (typing/typedtree.ml[609,17820+13]..[609,17820+25])
                  Ptyp_constr "virtual_flag" (typing/typedtree.ml[609,17820+13]..[609,17820+25])
                  []
              (typing/typedtree.ml[610,17847+4]..[610,17847+59])
                Immutable
                "ci_params" (typing/typedtree.ml[610,17847+4]..[610,17847+13])                core_type (typing/typedtree.ml[610,17847+15]..[610,17847+58])
                  Ptyp_constr "list" (typing/typedtree.ml[610,17847+54]..[610,17847+58])
                  [
                    core_type (typing/typedtree.ml[610,17847+16]..[610,17847+52])
                      Ptyp_tuple
                      [
                        core_type (typing/typedtree.ml[610,17847+16]..[610,17847+25])
                          Ptyp_constr "core_type" (typing/typedtree.ml[610,17847+16]..[610,17847+25])
                          []
                        core_type (typing/typedtree.ml[610,17847+29]..[610,17847+51])
                          Ptyp_tuple
                          [
                            core_type (typing/typedtree.ml[610,17847+29]..[610,17847+37])
                              Ptyp_constr "variance" (typing/typedtree.ml[610,17847+29]..[610,17847+37])
                              []
                            core_type (typing/typedtree.ml[610,17847+40]..[610,17847+51])
                              Ptyp_constr "injectivity" (typing/typedtree.ml[610,17847+40]..[610,17847+51])
                              []
                          ]
                      ]
                  ]
              (typing/typedtree.ml[611,17907+4]..[611,17907+27])
                Immutable
                "ci_id_name" (typing/typedtree.ml[611,17907+4]..[611,17907+14])                core_type (typing/typedtree.ml[611,17907+16]..[611,17907+26])
                  Ptyp_constr "loc" (typing/typedtree.ml[611,17907+23]..[611,17907+26])
                  [
                    core_type (typing/typedtree.ml[611,17907+16]..[611,17907+22])
                      Ptyp_constr "string" (typing/typedtree.ml[611,17907+16]..[611,17907+22])
                      []
                  ]
              (typing/typedtree.ml[612,17935+4]..[612,17935+25])
                Immutable
                "ci_id_class" (typing/typedtree.ml[612,17935+4]..[612,17935+15])                core_type (typing/typedtree.ml[612,17935+17]..[612,17935+24])
                  Ptyp_constr "Ident.t" (typing/typedtree.ml[612,17935+17]..[612,17935+24])
                  []
              (typing/typedtree.ml[613,17961+4]..[613,17961+30])
                Immutable
                "ci_id_class_type" (typing/typedtree.ml[613,17961+4]..[613,17961+20])                core_type (typing/typedtree.ml[613,17961+22]..[613,17961+29])
                  Ptyp_constr "Ident.t" (typing/typedtree.ml[613,17961+22]..[613,17961+29])
                  []
              (typing/typedtree.ml[614,17992+4]..[614,17992+26])
                Immutable
                "ci_id_object" (typing/typedtree.ml[614,17992+4]..[614,17992+16])                core_type (typing/typedtree.ml[614,17992+18]..[614,17992+25])
                  Ptyp_constr "Ident.t" (typing/typedtree.ml[614,17992+18]..[614,17992+25])
                  []
              (typing/typedtree.ml[615,18019+4]..[615,18019+28])
                Immutable
                "ci_id_typehash" (typing/typedtree.ml[615,18019+4]..[615,18019+18])                core_type (typing/typedtree.ml[615,18019+20]..[615,18019+27])
                  Ptyp_constr "Ident.t" (typing/typedtree.ml[615,18019+20]..[615,18019+27])
                  []
              (typing/typedtree.ml[616,18048+4]..[616,18048+16])
                Immutable
                "ci_expr" (typing/typedtree.ml[616,18048+4]..[616,18048+11])                core_type (typing/typedtree.ml[616,18048+13]..[616,18048+15])
                  Ptyp_var a
              (typing/typedtree.ml[617,18065+4]..[617,18065+37])
                Immutable
                "ci_decl" (typing/typedtree.ml[617,18065+4]..[617,18065+11])                core_type (typing/typedtree.ml[617,18065+13]..[617,18065+36])
                  Ptyp_constr "Types.class_declaration" (typing/typedtree.ml[617,18065+13]..[617,18065+36])
                  []
              (typing/typedtree.ml[618,18103+4]..[618,18103+47])
                Immutable
                "ci_type_decl" (typing/typedtree.ml[618,18103+4]..[618,18103+16])                core_type (typing/typedtree.ml[618,18103+18]..[618,18103+46])
                  Ptyp_constr "Types.class_type_declaration" (typing/typedtree.ml[618,18103+18]..[618,18103+46])
                  []
              (typing/typedtree.ml[619,18151+4]..[619,18151+23])
                Immutable
                "ci_loc" (typing/typedtree.ml[619,18151+4]..[619,18151+10])                core_type (typing/typedtree.ml[619,18151+12]..[619,18151+22])
                  Ptyp_constr "Location.t" (typing/typedtree.ml[619,18151+12]..[619,18151+22])
                  []
              (typing/typedtree.ml[620,18175+4]..[620,18175+34])
                Immutable
                "ci_attributes" (typing/typedtree.ml[620,18175+4]..[620,18175+17])                core_type (typing/typedtree.ml[620,18175+19]..[620,18175+33])
                  Ptyp_constr "list" (typing/typedtree.ml[620,18175+29]..[620,18175+33])
                  [
                    core_type (typing/typedtree.ml[620,18175+19]..[620,18175+28])
                      Ptyp_constr "attribute" (typing/typedtree.ml[620,18175+19]..[620,18175+28])
                      []
                  ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (typing/typedtree.ml[623,18216+0]..[627,18322+1])
    Pstr_type Rec
    [
      type_declaration "implementation" (typing/typedtree.ml[623,18216+5]..[623,18216+19]) (typing/typedtree.ml[623,18216+0]..[627,18322+1])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (typing/typedtree.ml[624,18240+2]..[624,18240+23])
                Immutable
                "structure" (typing/typedtree.ml[624,18240+2]..[624,18240+11])                core_type (typing/typedtree.ml[624,18240+13]..[624,18240+22])
                  Ptyp_constr "structure" (typing/typedtree.ml[624,18240+13]..[624,18240+22])
                  []
              (typing/typedtree.ml[625,18264+2]..[625,18264+28])
                Immutable
                "coercion" (typing/typedtree.ml[625,18264+2]..[625,18264+10])                core_type (typing/typedtree.ml[625,18264+12]..[625,18264+27])
                  Ptyp_constr "module_coercion" (typing/typedtree.ml[625,18264+12]..[625,18264+27])
                  []
              (typing/typedtree.ml[626,18293+2]..[626,18293+28])
                Immutable
                "signature" (typing/typedtree.ml[626,18293+2]..[626,18293+11])                core_type (typing/typedtree.ml[626,18293+13]..[626,18293+28])
                  Ptyp_constr "Types.signature" (typing/typedtree.ml[626,18293+13]..[626,18293+28])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (typing/typedtree.ml[632,18369+0]..[640,18597+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/typedtree.ml[632,18369+4]..[632,18369+26])
          Ppat_var "as_computation_pattern" (typing/typedtree.ml[632,18369+4]..[632,18369+26])
        expression (typing/typedtree.ml[632,18369+27]..[640,18597+3]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (typing/typedtree.ml[632,18369+27]..[632,18369+40])
            Ppat_constraint
            pattern (typing/typedtree.ml[632,18369+28]..[632,18369+29])
              Ppat_var "p" (typing/typedtree.ml[632,18369+28]..[632,18369+29])
            core_type (typing/typedtree.ml[632,18369+32]..[632,18369+39])
              Ptyp_constr "pattern" (typing/typedtree.ml[632,18369+32]..[632,18369+39])
              []
          expression (typing/typedtree.ml[632,18369+41]..[640,18597+3])
            Pexp_constraint
            expression (typing/typedtree.ml[633,18442+2]..[640,18597+3])
              Pexp_record
              [
                "pat_desc" (typing/typedtree.ml[634,18446+4]..[634,18446+12])
                  expression (typing/typedtree.ml[634,18446+15]..[634,18446+27])
                    Pexp_construct "Tpat_value" (typing/typedtree.ml[634,18446+15]..[634,18446+25])
                    Some
                      expression (typing/typedtree.ml[634,18446+26]..[634,18446+27])
                        Pexp_ident "p" (typing/typedtree.ml[634,18446+26]..[634,18446+27])
                "pat_loc" (typing/typedtree.ml[635,18475+4]..[635,18475+11])
                  expression (typing/typedtree.ml[635,18475+14]..[635,18475+23])
                    Pexp_field
                    expression (typing/typedtree.ml[635,18475+14]..[635,18475+15])
                      Pexp_ident "p" (typing/typedtree.ml[635,18475+14]..[635,18475+15])
                    "pat_loc" (typing/typedtree.ml[635,18475+16]..[635,18475+23])
                "pat_extra" (typing/typedtree.ml[636,18500+4]..[636,18500+13])
                  expression (typing/typedtree.ml[636,18500+16]..[636,18500+18])
                    Pexp_construct "[]" (typing/typedtree.ml[636,18500+16]..[636,18500+18])
                    None
                "pat_type" (typing/typedtree.ml[637,18520+4]..[637,18520+12])
                  expression (typing/typedtree.ml[637,18520+15]..[637,18520+25])
                    Pexp_field
                    expression (typing/typedtree.ml[637,18520+15]..[637,18520+16])
                      Pexp_ident "p" (typing/typedtree.ml[637,18520+15]..[637,18520+16])
                    "pat_type" (typing/typedtree.ml[637,18520+17]..[637,18520+25])
                "pat_env" (typing/typedtree.ml[638,18547+4]..[638,18547+11])
                  expression (typing/typedtree.ml[638,18547+14]..[638,18547+23])
                    Pexp_field
                    expression (typing/typedtree.ml[638,18547+14]..[638,18547+15])
                      Pexp_ident "p" (typing/typedtree.ml[638,18547+14]..[638,18547+15])
                    "pat_env" (typing/typedtree.ml[638,18547+16]..[638,18547+23])
                "pat_attributes" (typing/typedtree.ml[639,18572+4]..[639,18572+18])
                  expression (typing/typedtree.ml[639,18572+21]..[639,18572+23])
                    Pexp_construct "[]" (typing/typedtree.ml[639,18572+21]..[639,18572+23])
                    None
              ]
              None
            core_type (typing/typedtree.ml[632,18369+43]..[632,18369+70])
              Ptyp_constr "general_pattern" (typing/typedtree.ml[632,18369+55]..[632,18369+70])
              [
                core_type (typing/typedtree.ml[632,18369+43]..[632,18369+54])
                  Ptyp_constr "computation" (typing/typedtree.ml[632,18369+43]..[632,18369+54])
                  []
              ]
    ]
  structure_item (typing/typedtree.ml[642,18602+0]..[667,19290+36])
    Pstr_value Rec
    [
      <def>
        pattern (typing/typedtree.ml[642,18602+8]..[642,18602+77]) ghost
          Ppat_constraint
          pattern (typing/typedtree.ml[642,18602+8]..[642,18602+29])
            Ppat_var "classify_pattern_desc" (typing/typedtree.ml[642,18602+8]..[642,18602+29])
          core_type (typing/typedtree.ml[642,18602+8]..[662,19191+8]) ghost
            Ptyp_poly 'k
            core_type (typing/typedtree.ml[642,18602+41]..[642,18602+77])
              Ptyp_arrow
              Nolabel
              core_type (typing/typedtree.ml[642,18602+41]..[642,18602+55])
                Ptyp_constr "pattern_desc" (typing/typedtree.ml[642,18602+43]..[642,18602+55])
                [
                  core_type (typing/typedtree.ml[642,18602+41]..[642,18602+42])
                    Ptyp_var k
                ]
              core_type (typing/typedtree.ml[642,18602+59]..[642,18602+77])
                Ptyp_constr "pattern_category" (typing/typedtree.ml[642,18602+61]..[642,18602+77])
                [
                  core_type (typing/typedtree.ml[642,18602+59]..[642,18602+60])
                    Ptyp_var k
                ]
        expression (typing/typedtree.ml[642,18602+8]..[662,19191+8])
          Pexp_newtype "k"
          expression (typing/typedtree.ml[642,18602+8]..[662,19191+8])
            Pexp_constraint
            expression (typing/typedtree.ml[643,18682+2]..[662,19191+8])
              Pexp_function
              [
                <case>
                  pattern (typing/typedtree.ml[644,18693+4]..[644,18693+16])
                    Ppat_construct "Tpat_alias" (typing/typedtree.ml[644,18693+4]..[644,18693+14])
                    Some
                      []
                      pattern (typing/typedtree.ml[644,18693+15]..[644,18693+16])
                        Ppat_any
                  expression (typing/typedtree.ml[644,18693+20]..[644,18693+25])
                    Pexp_construct "Value" (typing/typedtree.ml[644,18693+20]..[644,18693+25])
                    None
                <case>
                  pattern (typing/typedtree.ml[645,18719+4]..[645,18719+16])
                    Ppat_construct "Tpat_tuple" (typing/typedtree.ml[645,18719+4]..[645,18719+14])
                    Some
                      []
                      pattern (typing/typedtree.ml[645,18719+15]..[645,18719+16])
                        Ppat_any
                  expression (typing/typedtree.ml[645,18719+20]..[645,18719+25])
                    Pexp_construct "Value" (typing/typedtree.ml[645,18719+20]..[645,18719+25])
                    None
                <case>
                  pattern (typing/typedtree.ml[646,18745+4]..[646,18745+20])
                    Ppat_construct "Tpat_construct" (typing/typedtree.ml[646,18745+4]..[646,18745+18])
                    Some
                      []
                      pattern (typing/typedtree.ml[646,18745+19]..[646,18745+20])
                        Ppat_any
                  expression (typing/typedtree.ml[646,18745+24]..[646,18745+29])
                    Pexp_construct "Value" (typing/typedtree.ml[646,18745+24]..[646,18745+29])
                    None
                <case>
                  pattern (typing/typedtree.ml[647,18775+4]..[647,18775+18])
                    Ppat_construct "Tpat_variant" (typing/typedtree.ml[647,18775+4]..[647,18775+16])
                    Some
                      []
                      pattern (typing/typedtree.ml[647,18775+17]..[647,18775+18])
                        Ppat_any
                  expression (typing/typedtree.ml[647,18775+22]..[647,18775+27])
                    Pexp_construct "Value" (typing/typedtree.ml[647,18775+22]..[647,18775+27])
                    None
                <case>
                  pattern (typing/typedtree.ml[648,18803+4]..[648,18803+17])
                    Ppat_construct "Tpat_record" (typing/typedtree.ml[648,18803+4]..[648,18803+15])
                    Some
                      []
                      pattern (typing/typedtree.ml[648,18803+16]..[648,18803+17])
                        Ppat_any
                  expression (typing/typedtree.ml[648,18803+21]..[648,18803+26])
                    Pexp_construct "Value" (typing/typedtree.ml[648,18803+21]..[648,18803+26])
                    None
                <case>
                  pattern (typing/typedtree.ml[649,18830+4]..[649,18830+16])
                    Ppat_construct "Tpat_array" (typing/typedtree.ml[649,18830+4]..[649,18830+14])
                    Some
                      []
                      pattern (typing/typedtree.ml[649,18830+15]..[649,18830+16])
                        Ppat_any
                  expression (typing/typedtree.ml[649,18830+20]..[649,18830+25])
                    Pexp_construct "Value" (typing/typedtree.ml[649,18830+20]..[649,18830+25])
                    None
                <case>
                  pattern (typing/typedtree.ml[650,18856+4]..[650,18856+15])
                    Ppat_construct "Tpat_lazy" (typing/typedtree.ml[650,18856+4]..[650,18856+13])
                    Some
                      []
                      pattern (typing/typedtree.ml[650,18856+14]..[650,18856+15])
                        Ppat_any
                  expression (typing/typedtree.ml[650,18856+19]..[650,18856+24])
                    Pexp_construct "Value" (typing/typedtree.ml[650,18856+19]..[650,18856+24])
                    None
                <case>
                  pattern (typing/typedtree.ml[651,18881+4]..[651,18881+12])
                    Ppat_construct "Tpat_any" (typing/typedtree.ml[651,18881+4]..[651,18881+12])
                    None
                  expression (typing/typedtree.ml[651,18881+16]..[651,18881+21])
                    Pexp_construct "Value" (typing/typedtree.ml[651,18881+16]..[651,18881+21])
                    None
                <case>
                  pattern (typing/typedtree.ml[652,18903+4]..[652,18903+14])
                    Ppat_construct "Tpat_var" (typing/typedtree.ml[652,18903+4]..[652,18903+12])
                    Some
                      []
                      pattern (typing/typedtree.ml[652,18903+13]..[652,18903+14])
                        Ppat_any
                  expression (typing/typedtree.ml[652,18903+18]..[652,18903+23])
                    Pexp_construct "Value" (typing/typedtree.ml[652,18903+18]..[652,18903+23])
                    None
                <case>
                  pattern (typing/typedtree.ml[653,18927+4]..[653,18927+19])
                    Ppat_construct "Tpat_constant" (typing/typedtree.ml[653,18927+4]..[653,18927+17])
                    Some
                      []
                      pattern (typing/typedtree.ml[653,18927+18]..[653,18927+19])
                        Ppat_any
                  expression (typing/typedtree.ml[653,18927+23]..[653,18927+28])
                    Pexp_construct "Value" (typing/typedtree.ml[653,18927+23]..[653,18927+28])
                    None
                <case>
                  pattern (typing/typedtree.ml[655,18957+4]..[655,18957+16])
                    Ppat_construct "Tpat_value" (typing/typedtree.ml[655,18957+4]..[655,18957+14])
                    Some
                      []
                      pattern (typing/typedtree.ml[655,18957+15]..[655,18957+16])
                        Ppat_any
                  expression (typing/typedtree.ml[655,18957+20]..[655,18957+31])
                    Pexp_construct "Computation" (typing/typedtree.ml[655,18957+20]..[655,18957+31])
                    None
                <case>
                  pattern (typing/typedtree.ml[656,18989+4]..[656,18989+20])
                    Ppat_construct "Tpat_exception" (typing/typedtree.ml[656,18989+4]..[656,18989+18])
                    Some
                      []
                      pattern (typing/typedtree.ml[656,18989+19]..[656,18989+20])
                        Ppat_any
                  expression (typing/typedtree.ml[656,18989+24]..[656,18989+35])
                    Pexp_construct "Computation" (typing/typedtree.ml[656,18989+24]..[656,18989+35])
                    None
                <case>
                  pattern (typing/typedtree.ml[658,19026+4]..[658,19026+22])
                    Ppat_construct "Tpat_or" (typing/typedtree.ml[658,19026+4]..[658,19026+11])
                    Some
                      []
                      pattern (typing/typedtree.ml[658,19026+11]..[658,19026+22])
                        Ppat_tuple
                        [
                          pattern (typing/typedtree.ml[658,19026+12]..[658,19026+14])
                            Ppat_var "p1" (typing/typedtree.ml[658,19026+12]..[658,19026+14])
                          pattern (typing/typedtree.ml[658,19026+16]..[658,19026+18])
                            Ppat_var "p2" (typing/typedtree.ml[658,19026+16]..[658,19026+18])
                          pattern (typing/typedtree.ml[658,19026+20]..[658,19026+21])
                            Ppat_any
                        ]
                  expression (typing/typedtree.ml[659,19052+5]..[662,19191+8])
                    Pexp_match
                    expression (typing/typedtree.ml[659,19052+17]..[659,19052+57])
                      Pexp_tuple
                      [
                        expression (typing/typedtree.ml[659,19052+17]..[659,19052+36])
                          Pexp_apply
                          expression (typing/typedtree.ml[659,19052+17]..[659,19052+33])
                            Pexp_ident "classify_pattern" (typing/typedtree.ml[659,19052+17]..[659,19052+33])
                          [
                            <arg>
                            Nolabel
                              expression (typing/typedtree.ml[659,19052+34]..[659,19052+36])
                                Pexp_ident "p1" (typing/typedtree.ml[659,19052+34]..[659,19052+36])
                          ]
                        expression (typing/typedtree.ml[659,19052+38]..[659,19052+57])
                          Pexp_apply
                          expression (typing/typedtree.ml[659,19052+38]..[659,19052+54])
                            Pexp_ident "classify_pattern" (typing/typedtree.ml[659,19052+38]..[659,19052+54])
                          [
                            <arg>
                            Nolabel
                              expression (typing/typedtree.ml[659,19052+55]..[659,19052+57])
                                Pexp_ident "p2" (typing/typedtree.ml[659,19052+55]..[659,19052+57])
                          ]
                      ]
                    [
                      <case>
                        pattern (typing/typedtree.ml[660,19115+7]..[660,19115+19])
                          Ppat_tuple
                          [
                            pattern (typing/typedtree.ml[660,19115+7]..[660,19115+12])
                              Ppat_construct "Value" (typing/typedtree.ml[660,19115+7]..[660,19115+12])
                              None
                            pattern (typing/typedtree.ml[660,19115+14]..[660,19115+19])
                              Ppat_construct "Value" (typing/typedtree.ml[660,19115+14]..[660,19115+19])
                              None
                          ]
                        expression (typing/typedtree.ml[660,19115+23]..[660,19115+28])
                          Pexp_construct "Value" (typing/typedtree.ml[660,19115+23]..[660,19115+28])
                          None
                      <case>
                        pattern (typing/typedtree.ml[661,19144+7]..[661,19144+31])
                          Ppat_tuple
                          [
                            pattern (typing/typedtree.ml[661,19144+7]..[661,19144+18])
                              Ppat_construct "Computation" (typing/typedtree.ml[661,19144+7]..[661,19144+18])
                              None
                            pattern (typing/typedtree.ml[661,19144+20]..[661,19144+31])
                              Ppat_construct "Computation" (typing/typedtree.ml[661,19144+20]..[661,19144+31])
                              None
                          ]
                        expression (typing/typedtree.ml[661,19144+35]..[661,19144+46])
                          Pexp_construct "Computation" (typing/typedtree.ml[661,19144+35]..[661,19144+46])
                          None
                    ]
              ]
            core_type (typing/typedtree.ml[642,18602+41]..[642,18602+77])
              Ptyp_arrow
              Nolabel
              core_type (typing/typedtree.ml[642,18602+41]..[642,18602+55])
                Ptyp_constr "pattern_desc" (typing/typedtree.ml[642,18602+43]..[642,18602+55])
                [
                  core_type (typing/typedtree.ml[642,18602+41]..[642,18602+42])
                    Ptyp_constr "k" (typing/typedtree.ml[642,18602+41]..[642,18602+42])
                    []
                ]
              core_type (typing/typedtree.ml[642,18602+59]..[642,18602+77])
                Ptyp_constr "pattern_category" (typing/typedtree.ml[642,18602+61]..[642,18602+77])
                [
                  core_type (typing/typedtree.ml[642,18602+59]..[642,18602+60])
                    Ptyp_constr "k" (typing/typedtree.ml[642,18602+59]..[642,18602+60])
                    []
                ]
      <def>
        pattern (typing/typedtree.ml[664,19201+4]..[665,19222+52]) ghost
          Ppat_constraint
          pattern (typing/typedtree.ml[664,19201+4]..[664,19201+20])
            Ppat_var "classify_pattern" (typing/typedtree.ml[664,19201+4]..[664,19201+20])
          core_type (typing/typedtree.ml[664,19201+4]..[667,19290+36]) ghost
            Ptyp_poly 'k
            core_type (typing/typedtree.ml[665,19222+13]..[665,19222+52])
              Ptyp_arrow
              Nolabel
              core_type (typing/typedtree.ml[665,19222+13]..[665,19222+30])
                Ptyp_constr "general_pattern" (typing/typedtree.ml[665,19222+15]..[665,19222+30])
                [
                  core_type (typing/typedtree.ml[665,19222+13]..[665,19222+14])
                    Ptyp_var k
                ]
              core_type (typing/typedtree.ml[665,19222+34]..[665,19222+52])
                Ptyp_constr "pattern_category" (typing/typedtree.ml[665,19222+36]..[665,19222+52])
                [
                  core_type (typing/typedtree.ml[665,19222+34]..[665,19222+35])
                    Ptyp_var k
                ]
        expression (typing/typedtree.ml[664,19201+4]..[667,19290+36])
          Pexp_newtype "k"
          expression (typing/typedtree.ml[664,19201+4]..[667,19290+36])
            Pexp_constraint
            expression (typing/typedtree.ml[666,19275+4]..[667,19290+36])
              Pexp_fun
              Nolabel
              None
              pattern (typing/typedtree.ml[666,19275+8]..[666,19275+11])
                Ppat_var "pat" (typing/typedtree.ml[666,19275+8]..[666,19275+11])
              expression (typing/typedtree.ml[667,19290+2]..[667,19290+36])
                Pexp_apply
                expression (typing/typedtree.ml[667,19290+2]..[667,19290+23])
                  Pexp_ident "classify_pattern_desc" (typing/typedtree.ml[667,19290+2]..[667,19290+23])
                [
                  <arg>
                  Nolabel
                    expression (typing/typedtree.ml[667,19290+24]..[667,19290+36])
                      Pexp_field
                      expression (typing/typedtree.ml[667,19290+24]..[667,19290+27])
                        Pexp_ident "pat" (typing/typedtree.ml[667,19290+24]..[667,19290+27])
                      "pat_desc" (typing/typedtree.ml[667,19290+28]..[667,19290+36])
                ]
            core_type (typing/typedtree.ml[665,19222+13]..[665,19222+52])
              Ptyp_arrow
              Nolabel
              core_type (typing/typedtree.ml[665,19222+13]..[665,19222+30])
                Ptyp_constr "general_pattern" (typing/typedtree.ml[665,19222+15]..[665,19222+30])
                [
                  core_type (typing/typedtree.ml[665,19222+13]..[665,19222+14])
                    Ptyp_constr "k" (typing/typedtree.ml[665,19222+13]..[665,19222+14])
                    []
                ]
              core_type (typing/typedtree.ml[665,19222+34]..[665,19222+52])
                Ptyp_constr "pattern_category" (typing/typedtree.ml[665,19222+36]..[665,19222+52])
                [
                  core_type (typing/typedtree.ml[665,19222+34]..[665,19222+35])
                    Ptyp_constr "k" (typing/typedtree.ml[665,19222+34]..[665,19222+35])
                    []
                ]
    ]
  structure_item (typing/typedtree.ml[669,19328+0]..[670,19350+41])
    Pstr_type Rec
    [
      type_declaration "pattern_action" (typing/typedtree.ml[669,19328+5]..[669,19328+19]) (typing/typedtree.ml[669,19328+0]..[670,19350+41])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (typing/typedtree.ml[670,19350+4]..[670,19350+39])
                Immutable
                "f" (typing/typedtree.ml[670,19350+4]..[670,19350+5])                core_type (typing/typedtree.ml[670,19350+8]..[670,19350+39])
                  Ptyp_poly 'k
                  core_type (typing/typedtree.ml[670,19350+13]..[670,19350+39])
                    Ptyp_arrow
                    Nolabel
                    core_type (typing/typedtree.ml[670,19350+13]..[670,19350+31])
                      Ptyp_constr "general_pattern" (typing/typedtree.ml[670,19350+16]..[670,19350+31])
                      [
                        core_type (typing/typedtree.ml[670,19350+13]..[670,19350+15])
                          Ptyp_var k
                      ]
                    core_type (typing/typedtree.ml[670,19350+35]..[670,19350+39])
                      Ptyp_constr "unit" (typing/typedtree.ml[670,19350+35]..[670,19350+39])
                      []
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (typing/typedtree.ml[671,19392+0]..[687,19952+40])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/typedtree.ml[671,19392+4]..[672,19422+53]) ghost
          Ppat_constraint
          pattern (typing/typedtree.ml[671,19392+4]..[671,19392+29])
            Ppat_var "shallow_iter_pattern_desc" (typing/typedtree.ml[671,19392+4]..[671,19392+29])
          core_type (typing/typedtree.ml[671,19392+4]..[687,19952+40]) ghost
            Ptyp_poly 'k
            core_type (typing/typedtree.ml[672,19422+13]..[672,19422+53])
              Ptyp_arrow
              Nolabel
              core_type (typing/typedtree.ml[672,19422+13]..[672,19422+27])
                Ptyp_constr "pattern_action" (typing/typedtree.ml[672,19422+13]..[672,19422+27])
                []
              core_type (typing/typedtree.ml[672,19422+31]..[672,19422+53])
                Ptyp_arrow
                Nolabel
                core_type (typing/typedtree.ml[672,19422+31]..[672,19422+45])
                  Ptyp_constr "pattern_desc" (typing/typedtree.ml[672,19422+33]..[672,19422+45])
                  [
                    core_type (typing/typedtree.ml[672,19422+31]..[672,19422+32])
                      Ptyp_var k
                  ]
                core_type (typing/typedtree.ml[672,19422+49]..[672,19422+53])
                  Ptyp_constr "unit" (typing/typedtree.ml[672,19422+49]..[672,19422+53])
                  []
        expression (typing/typedtree.ml[671,19392+4]..[687,19952+40])
          Pexp_newtype "k"
          expression (typing/typedtree.ml[671,19392+4]..[687,19952+40])
            Pexp_constraint
            expression (typing/typedtree.ml[673,19476+4]..[687,19952+40])
              Pexp_fun
              Nolabel
              None
              pattern (typing/typedtree.ml[673,19476+8]..[673,19476+9])
                Ppat_var "f" (typing/typedtree.ml[673,19476+8]..[673,19476+9])
              expression (typing/typedtree.ml[673,19476+13]..[687,19952+40])
                Pexp_function
                [
                  <case>
                    pattern (typing/typedtree.ml[674,19498+4]..[674,19498+23])
                      Ppat_construct "Tpat_alias" (typing/typedtree.ml[674,19498+4]..[674,19498+14])
                      Some
                        []
                        pattern (typing/typedtree.ml[674,19498+14]..[674,19498+23])
                          Ppat_tuple
                          [
                            pattern (typing/typedtree.ml[674,19498+15]..[674,19498+16])
                              Ppat_var "p" (typing/typedtree.ml[674,19498+15]..[674,19498+16])
                            pattern (typing/typedtree.ml[674,19498+18]..[674,19498+19])
                              Ppat_any
                            pattern (typing/typedtree.ml[674,19498+21]..[674,19498+22])
                              Ppat_any
                          ]
                    expression (typing/typedtree.ml[674,19498+27]..[674,19498+32])
                      Pexp_apply
                      expression (typing/typedtree.ml[674,19498+27]..[674,19498+30])
                        Pexp_field
                        expression (typing/typedtree.ml[674,19498+27]..[674,19498+28])
                          Pexp_ident "f" (typing/typedtree.ml[674,19498+27]..[674,19498+28])
                        "f" (typing/typedtree.ml[674,19498+29]..[674,19498+30])
                      [
                        <arg>
                        Nolabel
                          expression (typing/typedtree.ml[674,19498+31]..[674,19498+32])
                            Pexp_ident "p" (typing/typedtree.ml[674,19498+31]..[674,19498+32])
                      ]
                  <case>
                    pattern (typing/typedtree.ml[675,19531+4]..[675,19531+19])
                      Ppat_construct "Tpat_tuple" (typing/typedtree.ml[675,19531+4]..[675,19531+14])
                      Some
                        []
                        pattern (typing/typedtree.ml[675,19531+15]..[675,19531+19])
                          Ppat_var "patl" (typing/typedtree.ml[675,19531+15]..[675,19531+19])
                    expression (typing/typedtree.ml[675,19531+23]..[675,19531+41])
                      Pexp_apply
                      expression (typing/typedtree.ml[675,19531+23]..[675,19531+32])
                        Pexp_ident "List.iter" (typing/typedtree.ml[675,19531+23]..[675,19531+32])
                      [
                        <arg>
                        Nolabel
                          expression (typing/typedtree.ml[675,19531+33]..[675,19531+36])
                            Pexp_field
                            expression (typing/typedtree.ml[675,19531+33]..[675,19531+34])
                              Pexp_ident "f" (typing/typedtree.ml[675,19531+33]..[675,19531+34])
                            "f" (typing/typedtree.ml[675,19531+35]..[675,19531+36])
                        <arg>
                        Nolabel
                          expression (typing/typedtree.ml[675,19531+37]..[675,19531+41])
                            Pexp_ident "patl" (typing/typedtree.ml[675,19531+37]..[675,19531+41])
                      ]
                  <case>
                    pattern (typing/typedtree.ml[676,19573+4]..[676,19573+33])
                      Ppat_construct "Tpat_construct" (typing/typedtree.ml[676,19573+4]..[676,19573+18])
                      Some
                        []
                        pattern (typing/typedtree.ml[676,19573+18]..[676,19573+33])
                          Ppat_tuple
                          [
                            pattern (typing/typedtree.ml[676,19573+19]..[676,19573+20])
                              Ppat_any
                            pattern (typing/typedtree.ml[676,19573+22]..[676,19573+23])
                              Ppat_any
                            pattern (typing/typedtree.ml[676,19573+25]..[676,19573+29])
                              Ppat_var "patl" (typing/typedtree.ml[676,19573+25]..[676,19573+29])
                            pattern (typing/typedtree.ml[676,19573+31]..[676,19573+32])
                              Ppat_any
                          ]
                    expression (typing/typedtree.ml[676,19573+37]..[676,19573+55])
                      Pexp_apply
                      expression (typing/typedtree.ml[676,19573+37]..[676,19573+46])
                        Pexp_ident "List.iter" (typing/typedtree.ml[676,19573+37]..[676,19573+46])
                      [
                        <arg>
                        Nolabel
                          expression (typing/typedtree.ml[676,19573+47]..[676,19573+50])
                            Pexp_field
                            expression (typing/typedtree.ml[676,19573+47]..[676,19573+48])
                              Pexp_ident "f" (typing/typedtree.ml[676,19573+47]..[676,19573+48])
                            "f" (typing/typedtree.ml[676,19573+49]..[676,19573+50])
                        <arg>
                        Nolabel
                          expression (typing/typedtree.ml[676,19573+51]..[676,19573+55])
                            Pexp_ident "patl" (typing/typedtree.ml[676,19573+51]..[676,19573+55])
                      ]
                  <case>
                    pattern (typing/typedtree.ml[677,19629+4]..[677,19629+27])
                      Ppat_construct "Tpat_variant" (typing/typedtree.ml[677,19629+4]..[677,19629+16])
                      Some
                        []
                        pattern (typing/typedtree.ml[677,19629+16]..[677,19629+27])
                          Ppat_tuple
                          [
                            pattern (typing/typedtree.ml[677,19629+17]..[677,19629+18])
                              Ppat_any
                            pattern (typing/typedtree.ml[677,19629+20]..[677,19629+23])
                              Ppat_var "pat" (typing/typedtree.ml[677,19629+20]..[677,19629+23])
                            pattern (typing/typedtree.ml[677,19629+25]..[677,19629+26])
                              Ppat_any
                          ]
                    expression (typing/typedtree.ml[677,19629+31]..[677,19629+50])
                      Pexp_apply
                      expression (typing/typedtree.ml[677,19629+31]..[677,19629+42])
                        Pexp_ident "Option.iter" (typing/typedtree.ml[677,19629+31]..[677,19629+42])
                      [
                        <arg>
                        Nolabel
                          expression (typing/typedtree.ml[677,19629+43]..[677,19629+46])
                            Pexp_field
                            expression (typing/typedtree.ml[677,19629+43]..[677,19629+44])
                              Pexp_ident "f" (typing/typedtree.ml[677,19629+43]..[677,19629+44])
                            "f" (typing/typedtree.ml[677,19629+45]..[677,19629+46])
                        <arg>
                        Nolabel
                          expression (typing/typedtree.ml[677,19629+47]..[677,19629+50])
                            Pexp_ident "pat" (typing/typedtree.ml[677,19629+47]..[677,19629+50])
                      ]
                  <case>
                    pattern (typing/typedtree.ml[678,19680+4]..[678,19680+33])
                      Ppat_construct "Tpat_record" (typing/typedtree.ml[678,19680+4]..[678,19680+15])
                      Some
                        []
                        pattern (typing/typedtree.ml[678,19680+16]..[678,19680+33])
                          Ppat_tuple
                          [
                            pattern (typing/typedtree.ml[678,19680+17]..[678,19680+29])
                              Ppat_var "lbl_pat_list" (typing/typedtree.ml[678,19680+17]..[678,19680+29])
                            pattern (typing/typedtree.ml[678,19680+31]..[678,19680+32])
                              Ppat_any
                          ]
                    expression (typing/typedtree.ml[679,19717+6]..[679,19717+57])
                      Pexp_apply
                      expression (typing/typedtree.ml[679,19717+6]..[679,19717+15])
                        Pexp_ident "List.iter" (typing/typedtree.ml[679,19717+6]..[679,19717+15])
                      [
                        <arg>
                        Nolabel
                          expression (typing/typedtree.ml[679,19717+16]..[679,19717+44])
                            Pexp_fun
                            Nolabel
                            None
                            pattern (typing/typedtree.ml[679,19717+21]..[679,19717+32])
                              Ppat_tuple
                              [
                                pattern (typing/typedtree.ml[679,19717+22]..[679,19717+23])
                                  Ppat_any
                                pattern (typing/typedtree.ml[679,19717+25]..[679,19717+26])
                                  Ppat_any
                                pattern (typing/typedtree.ml[679,19717+28]..[679,19717+31])
                                  Ppat_var "pat" (typing/typedtree.ml[679,19717+28]..[679,19717+31])
                              ]
                            expression (typing/typedtree.ml[679,19717+36]..[679,19717+43])
                              Pexp_apply
                              expression (typing/typedtree.ml[679,19717+36]..[679,19717+39])
                                Pexp_field
                                expression (typing/typedtree.ml[679,19717+36]..[679,19717+37])
                                  Pexp_ident "f" (typing/typedtree.ml[679,19717+36]..[679,19717+37])
                                "f" (typing/typedtree.ml[679,19717+38]..[679,19717+39])
                              [
                                <arg>
                                Nolabel
                                  expression (typing/typedtree.ml[679,19717+40]..[679,19717+43])
                                    Pexp_ident "pat" (typing/typedtree.ml[679,19717+40]..[679,19717+43])
                              ]
                        <arg>
                        Nolabel
                          expression (typing/typedtree.ml[679,19717+45]..[679,19717+57])
                            Pexp_ident "lbl_pat_list" (typing/typedtree.ml[679,19717+45]..[679,19717+57])
                      ]
                  <case>
                    pattern (typing/typedtree.ml[680,19775+4]..[680,19775+19])
                      Ppat_construct "Tpat_array" (typing/typedtree.ml[680,19775+4]..[680,19775+14])
                      Some
                        []
                        pattern (typing/typedtree.ml[680,19775+15]..[680,19775+19])
                          Ppat_var "patl" (typing/typedtree.ml[680,19775+15]..[680,19775+19])
                    expression (typing/typedtree.ml[680,19775+23]..[680,19775+41])
                      Pexp_apply
                      expression (typing/typedtree.ml[680,19775+23]..[680,19775+32])
                        Pexp_ident "List.iter" (typing/typedtree.ml[680,19775+23]..[680,19775+32])
                      [
                        <arg>
                        Nolabel
                          expression (typing/typedtree.ml[680,19775+33]..[680,19775+36])
                            Pexp_field
                            expression (typing/typedtree.ml[680,19775+33]..[680,19775+34])
                              Pexp_ident "f" (typing/typedtree.ml[680,19775+33]..[680,19775+34])
                            "f" (typing/typedtree.ml[680,19775+35]..[680,19775+36])
                        <arg>
                        Nolabel
                          expression (typing/typedtree.ml[680,19775+37]..[680,19775+41])
                            Pexp_ident "patl" (typing/typedtree.ml[680,19775+37]..[680,19775+41])
                      ]
                  <case>
                    pattern (typing/typedtree.ml[681,19817+4]..[681,19817+15])
                      Ppat_construct "Tpat_lazy" (typing/typedtree.ml[681,19817+4]..[681,19817+13])
                      Some
                        []
                        pattern (typing/typedtree.ml[681,19817+14]..[681,19817+15])
                          Ppat_var "p" (typing/typedtree.ml[681,19817+14]..[681,19817+15])
                    expression (typing/typedtree.ml[681,19817+19]..[681,19817+24])
                      Pexp_apply
                      expression (typing/typedtree.ml[681,19817+19]..[681,19817+22])
                        Pexp_field
                        expression (typing/typedtree.ml[681,19817+19]..[681,19817+20])
                          Pexp_ident "f" (typing/typedtree.ml[681,19817+19]..[681,19817+20])
                        "f" (typing/typedtree.ml[681,19817+21]..[681,19817+22])
                      [
                        <arg>
                        Nolabel
                          expression (typing/typedtree.ml[681,19817+23]..[681,19817+24])
                            Pexp_ident "p" (typing/typedtree.ml[681,19817+23]..[681,19817+24])
                      ]
                  <case>
                    pattern (typing/typedtree.ml[682,19842+4]..[684,19870+19])
                      Ppat_or
                      pattern (typing/typedtree.ml[682,19842+4]..[683,19855+14])
                        Ppat_or
                        pattern (typing/typedtree.ml[682,19842+4]..[682,19842+12])
                          Ppat_construct "Tpat_any" (typing/typedtree.ml[682,19842+4]..[682,19842+12])
                          None
                        pattern (typing/typedtree.ml[683,19855+4]..[683,19855+14])
                          Ppat_construct "Tpat_var" (typing/typedtree.ml[683,19855+4]..[683,19855+12])
                          Some
                            []
                            pattern (typing/typedtree.ml[683,19855+13]..[683,19855+14])
                              Ppat_any
                      pattern (typing/typedtree.ml[684,19870+4]..[684,19870+19])
                        Ppat_construct "Tpat_constant" (typing/typedtree.ml[684,19870+4]..[684,19870+17])
                        Some
                          []
                          pattern (typing/typedtree.ml[684,19870+18]..[684,19870+19])
                            Ppat_any
                    expression (typing/typedtree.ml[684,19870+23]..[684,19870+25])
                      Pexp_construct "()" (typing/typedtree.ml[684,19870+23]..[684,19870+25])
                      None
                  <case>
                    pattern (typing/typedtree.ml[685,19896+4]..[685,19896+16])
                      Ppat_construct "Tpat_value" (typing/typedtree.ml[685,19896+4]..[685,19896+14])
                      Some
                        []
                        pattern (typing/typedtree.ml[685,19896+15]..[685,19896+16])
                          Ppat_var "p" (typing/typedtree.ml[685,19896+15]..[685,19896+16])
                    expression (typing/typedtree.ml[685,19896+20]..[685,19896+25])
                      Pexp_apply
                      expression (typing/typedtree.ml[685,19896+20]..[685,19896+23])
                        Pexp_field
                        expression (typing/typedtree.ml[685,19896+20]..[685,19896+21])
                          Pexp_ident "f" (typing/typedtree.ml[685,19896+20]..[685,19896+21])
                        "f" (typing/typedtree.ml[685,19896+22]..[685,19896+23])
                      [
                        <arg>
                        Nolabel
                          expression (typing/typedtree.ml[685,19896+24]..[685,19896+25])
                            Pexp_ident "p" (typing/typedtree.ml[685,19896+24]..[685,19896+25])
                      ]
                  <case>
                    pattern (typing/typedtree.ml[686,19922+4]..[686,19922+20])
                      Ppat_construct "Tpat_exception" (typing/typedtree.ml[686,19922+4]..[686,19922+18])
                      Some
                        []
                        pattern (typing/typedtree.ml[686,19922+19]..[686,19922+20])
                          Ppat_var "p" (typing/typedtree.ml[686,19922+19]..[686,19922+20])
                    expression (typing/typedtree.ml[686,19922+24]..[686,19922+29])
                      Pexp_apply
                      expression (typing/typedtree.ml[686,19922+24]..[686,19922+27])
                        Pexp_field
                        expression (typing/typedtree.ml[686,19922+24]..[686,19922+25])
                          Pexp_ident "f" (typing/typedtree.ml[686,19922+24]..[686,19922+25])
                        "f" (typing/typedtree.ml[686,19922+26]..[686,19922+27])
                      [
                        <arg>
                        Nolabel
                          expression (typing/typedtree.ml[686,19922+28]..[686,19922+29])
                            Pexp_ident "p" (typing/typedtree.ml[686,19922+28]..[686,19922+29])
                      ]
                  <case>
                    pattern (typing/typedtree.ml[687,19952+4]..[687,19952+22])
                      Ppat_construct "Tpat_or" (typing/typedtree.ml[687,19952+4]..[687,19952+11])
                      Some
                        []
                        pattern (typing/typedtree.ml[687,19952+11]..[687,19952+22])
                          Ppat_tuple
                          [
                            pattern (typing/typedtree.ml[687,19952+12]..[687,19952+14])
                              Ppat_var "p1" (typing/typedtree.ml[687,19952+12]..[687,19952+14])
                            pattern (typing/typedtree.ml[687,19952+16]..[687,19952+18])
                              Ppat_var "p2" (typing/typedtree.ml[687,19952+16]..[687,19952+18])
                            pattern (typing/typedtree.ml[687,19952+20]..[687,19952+21])
                              Ppat_any
                          ]
                    expression (typing/typedtree.ml[687,19952+26]..[687,19952+40])
                      Pexp_sequence
                      expression (typing/typedtree.ml[687,19952+26]..[687,19952+32])
                        Pexp_apply
                        expression (typing/typedtree.ml[687,19952+26]..[687,19952+29])
                          Pexp_field
                          expression (typing/typedtree.ml[687,19952+26]..[687,19952+27])
                            Pexp_ident "f" (typing/typedtree.ml[687,19952+26]..[687,19952+27])
                          "f" (typing/typedtree.ml[687,19952+28]..[687,19952+29])
                        [
                          <arg>
                          Nolabel
                            expression (typing/typedtree.ml[687,19952+30]..[687,19952+32])
                              Pexp_ident "p1" (typing/typedtree.ml[687,19952+30]..[687,19952+32])
                        ]
                      expression (typing/typedtree.ml[687,19952+34]..[687,19952+40])
                        Pexp_apply
                        expression (typing/typedtree.ml[687,19952+34]..[687,19952+37])
                          Pexp_field
                          expression (typing/typedtree.ml[687,19952+34]..[687,19952+35])
                            Pexp_ident "f" (typing/typedtree.ml[687,19952+34]..[687,19952+35])
                          "f" (typing/typedtree.ml[687,19952+36]..[687,19952+37])
                        [
                          <arg>
                          Nolabel
                            expression (typing/typedtree.ml[687,19952+38]..[687,19952+40])
                              Pexp_ident "p2" (typing/typedtree.ml[687,19952+38]..[687,19952+40])
                        ]
                ]
            core_type (typing/typedtree.ml[672,19422+13]..[672,19422+53])
              Ptyp_arrow
              Nolabel
              core_type (typing/typedtree.ml[672,19422+13]..[672,19422+27])
                Ptyp_constr "pattern_action" (typing/typedtree.ml[672,19422+13]..[672,19422+27])
                []
              core_type (typing/typedtree.ml[672,19422+31]..[672,19422+53])
                Ptyp_arrow
                Nolabel
                core_type (typing/typedtree.ml[672,19422+31]..[672,19422+45])
                  Ptyp_constr "pattern_desc" (typing/typedtree.ml[672,19422+33]..[672,19422+45])
                  [
                    core_type (typing/typedtree.ml[672,19422+31]..[672,19422+32])
                      Ptyp_constr "k" (typing/typedtree.ml[672,19422+31]..[672,19422+32])
                      []
                  ]
                core_type (typing/typedtree.ml[672,19422+49]..[672,19422+53])
                  Ptyp_constr "unit" (typing/typedtree.ml[672,19422+49]..[672,19422+53])
                  []
    ]
  structure_item (typing/typedtree.ml[689,19994+0]..[690,20024+55])
    Pstr_type Rec
    [
      type_declaration "pattern_transformation" (typing/typedtree.ml[689,19994+5]..[689,19994+27]) (typing/typedtree.ml[689,19994+0]..[690,20024+55])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (typing/typedtree.ml[690,20024+4]..[690,20024+53])
                Immutable
                "f" (typing/typedtree.ml[690,20024+4]..[690,20024+5])                core_type (typing/typedtree.ml[690,20024+8]..[690,20024+53])
                  Ptyp_poly 'k
                  core_type (typing/typedtree.ml[690,20024+13]..[690,20024+53])
                    Ptyp_arrow
                    Nolabel
                    core_type (typing/typedtree.ml[690,20024+13]..[690,20024+31])
                      Ptyp_constr "general_pattern" (typing/typedtree.ml[690,20024+16]..[690,20024+31])
                      [
                        core_type (typing/typedtree.ml[690,20024+13]..[690,20024+15])
                          Ptyp_var k
                      ]
                    core_type (typing/typedtree.ml[690,20024+35]..[690,20024+53])
                      Ptyp_constr "general_pattern" (typing/typedtree.ml[690,20024+38]..[690,20024+53])
                      [
                        core_type (typing/typedtree.ml[690,20024+35]..[690,20024+37])
                          Ptyp_var k
                      ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (typing/typedtree.ml[691,20080+0]..[714,20913+36])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/typedtree.ml[691,20080+4]..[692,20109+71]) ghost
          Ppat_constraint
          pattern (typing/typedtree.ml[691,20080+4]..[691,20080+28])
            Ppat_var "shallow_map_pattern_desc" (typing/typedtree.ml[691,20080+4]..[691,20080+28])
          core_type (typing/typedtree.ml[691,20080+4]..[714,20913+36]) ghost
            Ptyp_poly 'k
            core_type (typing/typedtree.ml[692,20109+13]..[692,20109+71])
              Ptyp_arrow
              Nolabel
              core_type (typing/typedtree.ml[692,20109+13]..[692,20109+35])
                Ptyp_constr "pattern_transformation" (typing/typedtree.ml[692,20109+13]..[692,20109+35])
                []
              core_type (typing/typedtree.ml[692,20109+39]..[692,20109+71])
                Ptyp_arrow
                Nolabel
                core_type (typing/typedtree.ml[692,20109+39]..[692,20109+53])
                  Ptyp_constr "pattern_desc" (typing/typedtree.ml[692,20109+41]..[692,20109+53])
                  [
                    core_type (typing/typedtree.ml[692,20109+39]..[692,20109+40])
                      Ptyp_var k
                  ]
                core_type (typing/typedtree.ml[692,20109+57]..[692,20109+71])
                  Ptyp_constr "pattern_desc" (typing/typedtree.ml[692,20109+59]..[692,20109+71])
                  [
                    core_type (typing/typedtree.ml[692,20109+57]..[692,20109+58])
                      Ptyp_var k
                  ]
        expression (typing/typedtree.ml[691,20080+4]..[714,20913+36])
          Pexp_newtype "k"
          expression (typing/typedtree.ml[691,20080+4]..[714,20913+36])
            Pexp_constraint
            expression (typing/typedtree.ml[693,20181+4]..[714,20913+36])
              Pexp_fun
              Nolabel
              None
              pattern (typing/typedtree.ml[693,20181+8]..[693,20181+9])
                Ppat_var "f" (typing/typedtree.ml[693,20181+8]..[693,20181+9])
              expression (typing/typedtree.ml[693,20181+10]..[714,20913+36]) ghost
                Pexp_fun
                Nolabel
                None
                pattern (typing/typedtree.ml[693,20181+10]..[693,20181+11])
                  Ppat_var "d" (typing/typedtree.ml[693,20181+10]..[693,20181+11])
                expression (typing/typedtree.ml[693,20181+15]..[714,20913+36])
                  Pexp_match
                  expression (typing/typedtree.ml[693,20181+21]..[693,20181+22])
                    Pexp_ident "d" (typing/typedtree.ml[693,20181+21]..[693,20181+22])
                  [
                    <case>
                      pattern (typing/typedtree.ml[694,20209+4]..[694,20209+26])
                        Ppat_construct "Tpat_alias" (typing/typedtree.ml[694,20209+4]..[694,20209+14])
                        Some
                          []
                          pattern (typing/typedtree.ml[694,20209+15]..[694,20209+26])
                            Ppat_tuple
                            [
                              pattern (typing/typedtree.ml[694,20209+16]..[694,20209+18])
                                Ppat_var "p1" (typing/typedtree.ml[694,20209+16]..[694,20209+18])
                              pattern (typing/typedtree.ml[694,20209+20]..[694,20209+22])
                                Ppat_var "id" (typing/typedtree.ml[694,20209+20]..[694,20209+22])
                              pattern (typing/typedtree.ml[694,20209+24]..[694,20209+25])
                                Ppat_var "s" (typing/typedtree.ml[694,20209+24]..[694,20209+25])
                            ]
                      expression (typing/typedtree.ml[695,20239+6]..[695,20239+32])
                        Pexp_construct "Tpat_alias" (typing/typedtree.ml[695,20239+6]..[695,20239+16])
                        Some
                          expression (typing/typedtree.ml[695,20239+17]..[695,20239+32])
                            Pexp_tuple
                            [
                              expression (typing/typedtree.ml[695,20239+18]..[695,20239+24])
                                Pexp_apply
                                expression (typing/typedtree.ml[695,20239+18]..[695,20239+21])
                                  Pexp_field
                                  expression (typing/typedtree.ml[695,20239+18]..[695,20239+19])
                                    Pexp_ident "f" (typing/typedtree.ml[695,20239+18]..[695,20239+19])
                                  "f" (typing/typedtree.ml[695,20239+20]..[695,20239+21])
                                [
                                  <arg>
                                  Nolabel
                                    expression (typing/typedtree.ml[695,20239+22]..[695,20239+24])
                                      Pexp_ident "p1" (typing/typedtree.ml[695,20239+22]..[695,20239+24])
                                ]
                              expression (typing/typedtree.ml[695,20239+26]..[695,20239+28])
                                Pexp_ident "id" (typing/typedtree.ml[695,20239+26]..[695,20239+28])
                              expression (typing/typedtree.ml[695,20239+30]..[695,20239+31])
                                Pexp_ident "s" (typing/typedtree.ml[695,20239+30]..[695,20239+31])
                            ]
                    <case>
                      pattern (typing/typedtree.ml[696,20272+4]..[696,20272+19])
                        Ppat_construct "Tpat_tuple" (typing/typedtree.ml[696,20272+4]..[696,20272+14])
                        Some
                          []
                          pattern (typing/typedtree.ml[696,20272+15]..[696,20272+19])
                            Ppat_var "pats" (typing/typedtree.ml[696,20272+15]..[696,20272+19])
                      expression (typing/typedtree.ml[697,20295+6]..[697,20295+36])
                        Pexp_construct "Tpat_tuple" (typing/typedtree.ml[697,20295+6]..[697,20295+16])
                        Some
                          expression (typing/typedtree.ml[697,20295+17]..[697,20295+36])
                            Pexp_apply
                            expression (typing/typedtree.ml[697,20295+18]..[697,20295+26])
                              Pexp_ident "List.map" (typing/typedtree.ml[697,20295+18]..[697,20295+26])
                            [
                              <arg>
                              Nolabel
                                expression (typing/typedtree.ml[697,20295+27]..[697,20295+30])
                                  Pexp_field
                                  expression (typing/typedtree.ml[697,20295+27]..[697,20295+28])
                                    Pexp_ident "f" (typing/typedtree.ml[697,20295+27]..[697,20295+28])
                                  "f" (typing/typedtree.ml[697,20295+29]..[697,20295+30])
                              <arg>
                              Nolabel
                                expression (typing/typedtree.ml[697,20295+31]..[697,20295+35])
                                  Pexp_ident "pats" (typing/typedtree.ml[697,20295+31]..[697,20295+35])
                            ]
                    <case>
                      pattern (typing/typedtree.ml[698,20332+4]..[698,20332+31])
                        Ppat_construct "Tpat_record" (typing/typedtree.ml[698,20332+4]..[698,20332+15])
                        Some
                          []
                          pattern (typing/typedtree.ml[698,20332+16]..[698,20332+31])
                            Ppat_tuple
                            [
                              pattern (typing/typedtree.ml[698,20332+17]..[698,20332+22])
                                Ppat_var "lpats" (typing/typedtree.ml[698,20332+17]..[698,20332+22])
                              pattern (typing/typedtree.ml[698,20332+24]..[698,20332+30])
                                Ppat_var "closed" (typing/typedtree.ml[698,20332+24]..[698,20332+30])
                            ]
                      expression (typing/typedtree.ml[699,20367+6]..[699,20367+76])
                        Pexp_construct "Tpat_record" (typing/typedtree.ml[699,20367+6]..[699,20367+17])
                        Some
                          expression (typing/typedtree.ml[699,20367+18]..[699,20367+76])
                            Pexp_tuple
                            [
                              expression (typing/typedtree.ml[699,20367+19]..[699,20367+67])
                                Pexp_apply
                                expression (typing/typedtree.ml[699,20367+19]..[699,20367+27])
                                  Pexp_ident "List.map" (typing/typedtree.ml[699,20367+19]..[699,20367+27])
                                [
                                  <arg>
                                  Nolabel
                                    expression (typing/typedtree.ml[699,20367+28]..[699,20367+61])
                                      Pexp_fun
                                      Nolabel
                                      None
                                      pattern (typing/typedtree.ml[699,20367+33]..[699,20367+43])
                                        Ppat_tuple
                                        [
                                          pattern (typing/typedtree.ml[699,20367+34]..[699,20367+37])
                                            Ppat_var "lid" (typing/typedtree.ml[699,20367+34]..[699,20367+37])
                                          pattern (typing/typedtree.ml[699,20367+39]..[699,20367+40])
                                            Ppat_var "l" (typing/typedtree.ml[699,20367+39]..[699,20367+40])
                                          pattern (typing/typedtree.ml[699,20367+41]..[699,20367+42])
                                            Ppat_var "p" (typing/typedtree.ml[699,20367+41]..[699,20367+42])
                                        ]
                                      expression (typing/typedtree.ml[699,20367+47]..[699,20367+60])
                                        Pexp_tuple
                                        [
                                          expression (typing/typedtree.ml[699,20367+47]..[699,20367+50])
                                            Pexp_ident "lid" (typing/typedtree.ml[699,20367+47]..[699,20367+50])
                                          expression (typing/typedtree.ml[699,20367+52]..[699,20367+53])
                                            Pexp_ident "l" (typing/typedtree.ml[699,20367+52]..[699,20367+53])
                                          expression (typing/typedtree.ml[699,20367+55]..[699,20367+60])
                                            Pexp_apply
                                            expression (typing/typedtree.ml[699,20367+55]..[699,20367+58])
                                              Pexp_field
                                              expression (typing/typedtree.ml[699,20367+55]..[699,20367+56])
                                                Pexp_ident "f" (typing/typedtree.ml[699,20367+55]..[699,20367+56])
                                              "f" (typing/typedtree.ml[699,20367+57]..[699,20367+58])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (typing/typedtree.ml[699,20367+59]..[699,20367+60])
                                                  Pexp_ident "p" (typing/typedtree.ml[699,20367+59]..[699,20367+60])
                                            ]
                                        ]
                                  <arg>
                                  Nolabel
                                    expression (typing/typedtree.ml[699,20367+62]..[699,20367+67])
                                      Pexp_ident "lpats" (typing/typedtree.ml[699,20367+62]..[699,20367+67])
                                ]
                              expression (typing/typedtree.ml[699,20367+69]..[699,20367+75])
                                Pexp_ident "closed" (typing/typedtree.ml[699,20367+69]..[699,20367+75])
                            ]
                    <case>
                      pattern (typing/typedtree.ml[700,20444+4]..[700,20444+37])
                        Ppat_construct "Tpat_construct" (typing/typedtree.ml[700,20444+4]..[700,20444+18])
                        Some
                          []
                          pattern (typing/typedtree.ml[700,20444+19]..[700,20444+37])
                            Ppat_tuple
                            [
                              pattern (typing/typedtree.ml[700,20444+20]..[700,20444+23])
                                Ppat_var "lid" (typing/typedtree.ml[700,20444+20]..[700,20444+23])
                              pattern (typing/typedtree.ml[700,20444+25]..[700,20444+26])
                                Ppat_var "c" (typing/typedtree.ml[700,20444+25]..[700,20444+26])
                              pattern (typing/typedtree.ml[700,20444+28]..[700,20444+32])
                                Ppat_var "pats" (typing/typedtree.ml[700,20444+28]..[700,20444+32])
                              pattern (typing/typedtree.ml[700,20444+34]..[700,20444+36])
                                Ppat_var "ty" (typing/typedtree.ml[700,20444+34]..[700,20444+36])
                            ]
                      expression (typing/typedtree.ml[701,20485+6]..[701,20485+52])
                        Pexp_construct "Tpat_construct" (typing/typedtree.ml[701,20485+6]..[701,20485+20])
                        Some
                          expression (typing/typedtree.ml[701,20485+21]..[701,20485+52])
                            Pexp_tuple
                            [
                              expression (typing/typedtree.ml[701,20485+22]..[701,20485+25])
                                Pexp_ident "lid" (typing/typedtree.ml[701,20485+22]..[701,20485+25])
                              expression (typing/typedtree.ml[701,20485+27]..[701,20485+28])
                                Pexp_ident "c" (typing/typedtree.ml[701,20485+27]..[701,20485+28])
                              expression (typing/typedtree.ml[701,20485+30]..[701,20485+47])
                                Pexp_apply
                                expression (typing/typedtree.ml[701,20485+30]..[701,20485+38])
                                  Pexp_ident "List.map" (typing/typedtree.ml[701,20485+30]..[701,20485+38])
                                [
                                  <arg>
                                  Nolabel
                                    expression (typing/typedtree.ml[701,20485+39]..[701,20485+42])
                                      Pexp_field
                                      expression (typing/typedtree.ml[701,20485+39]..[701,20485+40])
                                        Pexp_ident "f" (typing/typedtree.ml[701,20485+39]..[701,20485+40])
                                      "f" (typing/typedtree.ml[701,20485+41]..[701,20485+42])
                                  <arg>
                                  Nolabel
                                    expression (typing/typedtree.ml[701,20485+43]..[701,20485+47])
                                      Pexp_ident "pats" (typing/typedtree.ml[701,20485+43]..[701,20485+47])
                                ]
                              expression (typing/typedtree.ml[701,20485+49]..[701,20485+51])
                                Pexp_ident "ty" (typing/typedtree.ml[701,20485+49]..[701,20485+51])
                            ]
                    <case>
                      pattern (typing/typedtree.ml[702,20538+4]..[702,20538+19])
                        Ppat_construct "Tpat_array" (typing/typedtree.ml[702,20538+4]..[702,20538+14])
                        Some
                          []
                          pattern (typing/typedtree.ml[702,20538+15]..[702,20538+19])
                            Ppat_var "pats" (typing/typedtree.ml[702,20538+15]..[702,20538+19])
                      expression (typing/typedtree.ml[703,20561+6]..[703,20561+36])
                        Pexp_construct "Tpat_array" (typing/typedtree.ml[703,20561+6]..[703,20561+16])
                        Some
                          expression (typing/typedtree.ml[703,20561+17]..[703,20561+36])
                            Pexp_apply
                            expression (typing/typedtree.ml[703,20561+18]..[703,20561+26])
                              Pexp_ident "List.map" (typing/typedtree.ml[703,20561+18]..[703,20561+26])
                            [
                              <arg>
                              Nolabel
                                expression (typing/typedtree.ml[703,20561+27]..[703,20561+30])
                                  Pexp_field
                                  expression (typing/typedtree.ml[703,20561+27]..[703,20561+28])
                                    Pexp_ident "f" (typing/typedtree.ml[703,20561+27]..[703,20561+28])
                                  "f" (typing/typedtree.ml[703,20561+29]..[703,20561+30])
                              <arg>
                              Nolabel
                                expression (typing/typedtree.ml[703,20561+31]..[703,20561+35])
                                  Pexp_ident "pats" (typing/typedtree.ml[703,20561+31]..[703,20561+35])
                            ]
                    <case>
                      pattern (typing/typedtree.ml[704,20598+4]..[704,20598+16])
                        Ppat_construct "Tpat_lazy" (typing/typedtree.ml[704,20598+4]..[704,20598+13])
                        Some
                          []
                          pattern (typing/typedtree.ml[704,20598+14]..[704,20598+16])
                            Ppat_var "p1" (typing/typedtree.ml[704,20598+14]..[704,20598+16])
                      expression (typing/typedtree.ml[704,20598+20]..[704,20598+38])
                        Pexp_construct "Tpat_lazy" (typing/typedtree.ml[704,20598+20]..[704,20598+29])
                        Some
                          expression (typing/typedtree.ml[704,20598+30]..[704,20598+38])
                            Pexp_apply
                            expression (typing/typedtree.ml[704,20598+31]..[704,20598+34])
                              Pexp_field
                              expression (typing/typedtree.ml[704,20598+31]..[704,20598+32])
                                Pexp_ident "f" (typing/typedtree.ml[704,20598+31]..[704,20598+32])
                              "f" (typing/typedtree.ml[704,20598+33]..[704,20598+34])
                            [
                              <arg>
                              Nolabel
                                expression (typing/typedtree.ml[704,20598+35]..[704,20598+37])
                                  Pexp_ident "p1" (typing/typedtree.ml[704,20598+35]..[704,20598+37])
                            ]
                    <case>
                      pattern (typing/typedtree.ml[705,20637+4]..[705,20637+34])
                        Ppat_construct "Tpat_variant" (typing/typedtree.ml[705,20637+4]..[705,20637+16])
                        Some
                          []
                          pattern (typing/typedtree.ml[705,20637+17]..[705,20637+34])
                            Ppat_tuple
                            [
                              pattern (typing/typedtree.ml[705,20637+18]..[705,20637+20])
                                Ppat_var "x1" (typing/typedtree.ml[705,20637+18]..[705,20637+20])
                              pattern (typing/typedtree.ml[705,20637+22]..[705,20637+29])
                                Ppat_construct "Some" (typing/typedtree.ml[705,20637+22]..[705,20637+26])
                                Some
                                  []
                                  pattern (typing/typedtree.ml[705,20637+27]..[705,20637+29])
                                    Ppat_var "p1" (typing/typedtree.ml[705,20637+27]..[705,20637+29])
                              pattern (typing/typedtree.ml[705,20637+31]..[705,20637+33])
                                Ppat_var "x2" (typing/typedtree.ml[705,20637+31]..[705,20637+33])
                            ]
                      expression (typing/typedtree.ml[706,20675+6]..[706,20675+42])
                        Pexp_construct "Tpat_variant" (typing/typedtree.ml[706,20675+6]..[706,20675+18])
                        Some
                          expression (typing/typedtree.ml[706,20675+19]..[706,20675+42])
                            Pexp_tuple
                            [
                              expression (typing/typedtree.ml[706,20675+20]..[706,20675+22])
                                Pexp_ident "x1" (typing/typedtree.ml[706,20675+20]..[706,20675+22])
                              expression (typing/typedtree.ml[706,20675+24]..[706,20675+37])
                                Pexp_construct "Some" (typing/typedtree.ml[706,20675+24]..[706,20675+28])
                                Some
                                  expression (typing/typedtree.ml[706,20675+29]..[706,20675+37])
                                    Pexp_apply
                                    expression (typing/typedtree.ml[706,20675+30]..[706,20675+33])
                                      Pexp_field
                                      expression (typing/typedtree.ml[706,20675+30]..[706,20675+31])
                                        Pexp_ident "f" (typing/typedtree.ml[706,20675+30]..[706,20675+31])
                                      "f" (typing/typedtree.ml[706,20675+32]..[706,20675+33])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (typing/typedtree.ml[706,20675+34]..[706,20675+36])
                                          Pexp_ident "p1" (typing/typedtree.ml[706,20675+34]..[706,20675+36])
                                    ]
                              expression (typing/typedtree.ml[706,20675+39]..[706,20675+41])
                                Pexp_ident "x2" (typing/typedtree.ml[706,20675+39]..[706,20675+41])
                            ]
                    <case>
                      pattern (typing/typedtree.ml[707,20718+4]..[710,20766+27])
                        Ppat_or
                        pattern (typing/typedtree.ml[707,20718+4]..[709,20753+12])
                          Ppat_or
                          pattern (typing/typedtree.ml[707,20718+4]..[708,20733+19])
                            Ppat_or
                            pattern (typing/typedtree.ml[707,20718+4]..[707,20718+14])
                              Ppat_construct "Tpat_var" (typing/typedtree.ml[707,20718+4]..[707,20718+12])
                              Some
                                []
                                pattern (typing/typedtree.ml[707,20718+13]..[707,20718+14])
                                  Ppat_any
                            pattern (typing/typedtree.ml[708,20733+4]..[708,20733+19])
                              Ppat_construct "Tpat_constant" (typing/typedtree.ml[708,20733+4]..[708,20733+17])
                              Some
                                []
                                pattern (typing/typedtree.ml[708,20733+18]..[708,20733+19])
                                  Ppat_any
                          pattern (typing/typedtree.ml[709,20753+4]..[709,20753+12])
                            Ppat_construct "Tpat_any" (typing/typedtree.ml[709,20753+4]..[709,20753+12])
                            None
                        pattern (typing/typedtree.ml[710,20766+4]..[710,20766+27])
                          Ppat_construct "Tpat_variant" (typing/typedtree.ml[710,20766+4]..[710,20766+16])
                          Some
                            []
                            pattern (typing/typedtree.ml[710,20766+17]..[710,20766+27])
                              Ppat_tuple
                              [
                                pattern (typing/typedtree.ml[710,20766+18]..[710,20766+19])
                                  Ppat_any
                                pattern (typing/typedtree.ml[710,20766+20]..[710,20766+24])
                                  Ppat_construct "None" (typing/typedtree.ml[710,20766+20]..[710,20766+24])
                                  None
                                pattern (typing/typedtree.ml[710,20766+25]..[710,20766+26])
                                  Ppat_any
                              ]
                      expression (typing/typedtree.ml[710,20766+31]..[710,20766+32])
                        Pexp_ident "d" (typing/typedtree.ml[710,20766+31]..[710,20766+32])
                    <case>
                      pattern (typing/typedtree.ml[711,20799+4]..[711,20799+16])
                        Ppat_construct "Tpat_value" (typing/typedtree.ml[711,20799+4]..[711,20799+14])
                        Some
                          []
                          pattern (typing/typedtree.ml[711,20799+15]..[711,20799+16])
                            Ppat_var "p" (typing/typedtree.ml[711,20799+15]..[711,20799+16])
                      expression (typing/typedtree.ml[711,20799+20]..[711,20799+38])
                        Pexp_construct "Tpat_value" (typing/typedtree.ml[711,20799+20]..[711,20799+30])
                        Some
                          expression (typing/typedtree.ml[711,20799+31]..[711,20799+38])
                            Pexp_apply
                            expression (typing/typedtree.ml[711,20799+32]..[711,20799+35])
                              Pexp_field
                              expression (typing/typedtree.ml[711,20799+32]..[711,20799+33])
                                Pexp_ident "f" (typing/typedtree.ml[711,20799+32]..[711,20799+33])
                              "f" (typing/typedtree.ml[711,20799+34]..[711,20799+35])
                            [
                              <arg>
                              Nolabel
                                expression (typing/typedtree.ml[711,20799+36]..[711,20799+37])
                                  Pexp_ident "p" (typing/typedtree.ml[711,20799+36]..[711,20799+37])
                            ]
                    <case>
                      pattern (typing/typedtree.ml[712,20838+4]..[712,20838+20])
                        Ppat_construct "Tpat_exception" (typing/typedtree.ml[712,20838+4]..[712,20838+18])
                        Some
                          []
                          pattern (typing/typedtree.ml[712,20838+19]..[712,20838+20])
                            Ppat_var "p" (typing/typedtree.ml[712,20838+19]..[712,20838+20])
                      expression (typing/typedtree.ml[712,20838+24]..[712,20838+46])
                        Pexp_construct "Tpat_exception" (typing/typedtree.ml[712,20838+24]..[712,20838+38])
                        Some
                          expression (typing/typedtree.ml[712,20838+39]..[712,20838+46])
                            Pexp_apply
                            expression (typing/typedtree.ml[712,20838+40]..[712,20838+43])
                              Pexp_field
                              expression (typing/typedtree.ml[712,20838+40]..[712,20838+41])
                                Pexp_ident "f" (typing/typedtree.ml[712,20838+40]..[712,20838+41])
                              "f" (typing/typedtree.ml[712,20838+42]..[712,20838+43])
                            [
                              <arg>
                              Nolabel
                                expression (typing/typedtree.ml[712,20838+44]..[712,20838+45])
                                  Pexp_ident "p" (typing/typedtree.ml[712,20838+44]..[712,20838+45])
                            ]
                    <case>
                      pattern (typing/typedtree.ml[713,20885+4]..[713,20885+24])
                        Ppat_construct "Tpat_or" (typing/typedtree.ml[713,20885+4]..[713,20885+11])
                        Some
                          []
                          pattern (typing/typedtree.ml[713,20885+12]..[713,20885+24])
                            Ppat_tuple
                            [
                              pattern (typing/typedtree.ml[713,20885+13]..[713,20885+15])
                                Ppat_var "p1" (typing/typedtree.ml[713,20885+13]..[713,20885+15])
                              pattern (typing/typedtree.ml[713,20885+16]..[713,20885+18])
                                Ppat_var "p2" (typing/typedtree.ml[713,20885+16]..[713,20885+18])
                              pattern (typing/typedtree.ml[713,20885+19]..[713,20885+23])
                                Ppat_var "path" (typing/typedtree.ml[713,20885+19]..[713,20885+23])
                            ]
                      expression (typing/typedtree.ml[714,20913+6]..[714,20913+36])
                        Pexp_construct "Tpat_or" (typing/typedtree.ml[714,20913+6]..[714,20913+13])
                        Some
                          expression (typing/typedtree.ml[714,20913+14]..[714,20913+36])
                            Pexp_tuple
                            [
                              expression (typing/typedtree.ml[714,20913+15]..[714,20913+21])
                                Pexp_apply
                                expression (typing/typedtree.ml[714,20913+15]..[714,20913+18])
                                  Pexp_field
                                  expression (typing/typedtree.ml[714,20913+15]..[714,20913+16])
                                    Pexp_ident "f" (typing/typedtree.ml[714,20913+15]..[714,20913+16])
                                  "f" (typing/typedtree.ml[714,20913+17]..[714,20913+18])
                                [
                                  <arg>
                                  Nolabel
                                    expression (typing/typedtree.ml[714,20913+19]..[714,20913+21])
                                      Pexp_ident "p1" (typing/typedtree.ml[714,20913+19]..[714,20913+21])
                                ]
                              expression (typing/typedtree.ml[714,20913+23]..[714,20913+29])
                                Pexp_apply
                                expression (typing/typedtree.ml[714,20913+23]..[714,20913+26])
                                  Pexp_field
                                  expression (typing/typedtree.ml[714,20913+23]..[714,20913+24])
                                    Pexp_ident "f" (typing/typedtree.ml[714,20913+23]..[714,20913+24])
                                  "f" (typing/typedtree.ml[714,20913+25]..[714,20913+26])
                                [
                                  <arg>
                                  Nolabel
                                    expression (typing/typedtree.ml[714,20913+27]..[714,20913+29])
                                      Pexp_ident "p2" (typing/typedtree.ml[714,20913+27]..[714,20913+29])
                                ]
                              expression (typing/typedtree.ml[714,20913+31]..[714,20913+35])
                                Pexp_ident "path" (typing/typedtree.ml[714,20913+31]..[714,20913+35])
                            ]
                  ]
            core_type (typing/typedtree.ml[692,20109+13]..[692,20109+71])
              Ptyp_arrow
              Nolabel
              core_type (typing/typedtree.ml[692,20109+13]..[692,20109+35])
                Ptyp_constr "pattern_transformation" (typing/typedtree.ml[692,20109+13]..[692,20109+35])
                []
              core_type (typing/typedtree.ml[692,20109+39]..[692,20109+71])
                Ptyp_arrow
                Nolabel
                core_type (typing/typedtree.ml[692,20109+39]..[692,20109+53])
                  Ptyp_constr "pattern_desc" (typing/typedtree.ml[692,20109+41]..[692,20109+53])
                  [
                    core_type (typing/typedtree.ml[692,20109+39]..[692,20109+40])
                      Ptyp_constr "k" (typing/typedtree.ml[692,20109+39]..[692,20109+40])
                      []
                  ]
                core_type (typing/typedtree.ml[692,20109+57]..[692,20109+71])
                  Ptyp_constr "pattern_desc" (typing/typedtree.ml[692,20109+59]..[692,20109+71])
                  [
                    core_type (typing/typedtree.ml[692,20109+57]..[692,20109+58])
                      Ptyp_constr "k" (typing/typedtree.ml[692,20109+57]..[692,20109+58])
                      []
                  ]
    ]
  structure_item (typing/typedtree.ml[716,20951+0]..[722,21135+14])
    Pstr_value Rec
    [
      <def>
        pattern (typing/typedtree.ml[716,20951+8]..[717,20980+56]) ghost
          Ppat_constraint
          pattern (typing/typedtree.ml[716,20951+8]..[716,20951+28])
            Ppat_var "iter_general_pattern" (typing/typedtree.ml[716,20951+8]..[716,20951+28])
          core_type (typing/typedtree.ml[716,20951+8]..[722,21135+14]) ghost
            Ptyp_poly 'k
            core_type (typing/typedtree.ml[717,20980+13]..[717,20980+56])
              Ptyp_arrow
              Nolabel
              core_type (typing/typedtree.ml[717,20980+13]..[717,20980+27])
                Ptyp_constr "pattern_action" (typing/typedtree.ml[717,20980+13]..[717,20980+27])
                []
              core_type (typing/typedtree.ml[717,20980+31]..[717,20980+56])
                Ptyp_arrow
                Nolabel
                core_type (typing/typedtree.ml[717,20980+31]..[717,20980+48])
                  Ptyp_constr "general_pattern" (typing/typedtree.ml[717,20980+33]..[717,20980+48])
                  [
                    core_type (typing/typedtree.ml[717,20980+31]..[717,20980+32])
                      Ptyp_var k
                  ]
                core_type (typing/typedtree.ml[717,20980+52]..[717,20980+56])
                  Ptyp_constr "unit" (typing/typedtree.ml[717,20980+52]..[717,20980+56])
                  []
        expression (typing/typedtree.ml[716,20951+8]..[722,21135+14])
          Pexp_newtype "k"
          expression (typing/typedtree.ml[716,20951+8]..[722,21135+14])
            Pexp_constraint
            expression (typing/typedtree.ml[718,21037+4]..[722,21135+14])
              Pexp_fun
              Nolabel
              None
              pattern (typing/typedtree.ml[718,21037+8]..[718,21037+9])
                Ppat_var "f" (typing/typedtree.ml[718,21037+8]..[718,21037+9])
              expression (typing/typedtree.ml[718,21037+10]..[722,21135+14]) ghost
                Pexp_fun
                Nolabel
                None
                pattern (typing/typedtree.ml[718,21037+10]..[718,21037+11])
                  Ppat_var "p" (typing/typedtree.ml[718,21037+10]..[718,21037+11])
                expression (typing/typedtree.ml[719,21052+2]..[722,21135+14])
                  Pexp_sequence
                  expression (typing/typedtree.ml[719,21052+2]..[719,21052+7])
                    Pexp_apply
                    expression (typing/typedtree.ml[719,21052+2]..[719,21052+5])
                      Pexp_field
                      expression (typing/typedtree.ml[719,21052+2]..[719,21052+3])
                        Pexp_ident "f" (typing/typedtree.ml[719,21052+2]..[719,21052+3])
                      "f" (typing/typedtree.ml[719,21052+4]..[719,21052+5])
                    [
                      <arg>
                      Nolabel
                        expression (typing/typedtree.ml[719,21052+6]..[719,21052+7])
                          Pexp_ident "p" (typing/typedtree.ml[719,21052+6]..[719,21052+7])
                    ]
                  expression (typing/typedtree.ml[720,21061+2]..[722,21135+14])
                    Pexp_apply
                    expression (typing/typedtree.ml[720,21061+2]..[720,21061+27])
                      Pexp_ident "shallow_iter_pattern_desc" (typing/typedtree.ml[720,21061+2]..[720,21061+27])
                    [
                      <arg>
                      Nolabel
                        expression (typing/typedtree.ml[721,21089+4]..[721,21089+45])
                          Pexp_record
                          [
                            "f" (typing/typedtree.ml[721,21089+6]..[721,21089+7])
                              expression (typing/typedtree.ml[721,21089+10]..[721,21089+43])
                                Pexp_fun
                                Nolabel
                                None
                                pattern (typing/typedtree.ml[721,21089+14]..[721,21089+15])
                                  Ppat_var "p" (typing/typedtree.ml[721,21089+14]..[721,21089+15])
                                expression (typing/typedtree.ml[721,21089+19]..[721,21089+43])
                                  Pexp_apply
                                  expression (typing/typedtree.ml[721,21089+19]..[721,21089+39])
                                    Pexp_ident "iter_general_pattern" (typing/typedtree.ml[721,21089+19]..[721,21089+39])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (typing/typedtree.ml[721,21089+40]..[721,21089+41])
                                        Pexp_ident "f" (typing/typedtree.ml[721,21089+40]..[721,21089+41])
                                    <arg>
                                    Nolabel
                                      expression (typing/typedtree.ml[721,21089+42]..[721,21089+43])
                                        Pexp_ident "p" (typing/typedtree.ml[721,21089+42]..[721,21089+43])
                                  ]
                          ]
                          None
                      <arg>
                      Nolabel
                        expression (typing/typedtree.ml[722,21135+4]..[722,21135+14])
                          Pexp_field
                          expression (typing/typedtree.ml[722,21135+4]..[722,21135+5])
                            Pexp_ident "p" (typing/typedtree.ml[722,21135+4]..[722,21135+5])
                          "pat_desc" (typing/typedtree.ml[722,21135+6]..[722,21135+14])
                    ]
            core_type (typing/typedtree.ml[717,20980+13]..[717,20980+56])
              Ptyp_arrow
              Nolabel
              core_type (typing/typedtree.ml[717,20980+13]..[717,20980+27])
                Ptyp_constr "pattern_action" (typing/typedtree.ml[717,20980+13]..[717,20980+27])
                []
              core_type (typing/typedtree.ml[717,20980+31]..[717,20980+56])
                Ptyp_arrow
                Nolabel
                core_type (typing/typedtree.ml[717,20980+31]..[717,20980+48])
                  Ptyp_constr "general_pattern" (typing/typedtree.ml[717,20980+33]..[717,20980+48])
                  [
                    core_type (typing/typedtree.ml[717,20980+31]..[717,20980+32])
                      Ptyp_constr "k" (typing/typedtree.ml[717,20980+31]..[717,20980+32])
                      []
                  ]
                core_type (typing/typedtree.ml[717,20980+52]..[717,20980+56])
                  Ptyp_constr "unit" (typing/typedtree.ml[717,20980+52]..[717,20980+56])
                  []
    ]
  structure_item (typing/typedtree.ml[724,21151+0]..[729,21330+31])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/typedtree.ml[724,21151+4]..[724,21151+16])
          Ppat_var "iter_pattern" (typing/typedtree.ml[724,21151+4]..[724,21151+16])
        expression (typing/typedtree.ml[724,21151+17]..[729,21330+31]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (typing/typedtree.ml[724,21151+17]..[724,21151+38])
            Ppat_constraint
            pattern (typing/typedtree.ml[724,21151+18]..[724,21151+19])
              Ppat_var "f" (typing/typedtree.ml[724,21151+18]..[724,21151+19])
            core_type (typing/typedtree.ml[724,21151+22]..[724,21151+37])
              Ptyp_arrow
              Nolabel
              core_type (typing/typedtree.ml[724,21151+22]..[724,21151+29])
                Ptyp_constr "pattern" (typing/typedtree.ml[724,21151+22]..[724,21151+29])
                []
              core_type (typing/typedtree.ml[724,21151+33]..[724,21151+37])
                Ptyp_constr "unit" (typing/typedtree.ml[724,21151+33]..[724,21151+37])
                []
          expression (typing/typedtree.ml[725,21192+2]..[729,21330+31])
            Pexp_apply
            expression (typing/typedtree.ml[725,21192+2]..[725,21192+22])
              Pexp_ident "iter_general_pattern" (typing/typedtree.ml[725,21192+2]..[725,21192+22])
            [
              <arg>
              Nolabel
                expression (typing/typedtree.ml[726,21215+4]..[729,21330+31])
                  Pexp_record
                  [
                    "f" (typing/typedtree.ml[726,21215+6]..[726,21215+7])
                      expression (typing/typedtree.ml[726,21215+10]..[729,21330+29])
                        Pexp_newtype "k"
                        expression (typing/typedtree.ml[726,21215+23]..[729,21330+29]) ghost
                          Pexp_fun
                          Nolabel
                          None
                          pattern (typing/typedtree.ml[726,21215+23]..[726,21215+46])
                            Ppat_constraint
                            pattern (typing/typedtree.ml[726,21215+24]..[726,21215+25])
                              Ppat_var "p" (typing/typedtree.ml[726,21215+24]..[726,21215+25])
                            core_type (typing/typedtree.ml[726,21215+28]..[726,21215+45])
                              Ptyp_constr "general_pattern" (typing/typedtree.ml[726,21215+30]..[726,21215+45])
                              [
                                core_type (typing/typedtree.ml[726,21215+28]..[726,21215+29])
                                  Ptyp_constr "k" (typing/typedtree.ml[726,21215+28]..[726,21215+29])
                                  []
                              ]
                          expression (typing/typedtree.ml[727,21265+10]..[729,21330+29])
                            Pexp_match
                            expression (typing/typedtree.ml[727,21265+16]..[727,21265+34])
                              Pexp_apply
                              expression (typing/typedtree.ml[727,21265+16]..[727,21265+32])
                                Pexp_ident "classify_pattern" (typing/typedtree.ml[727,21265+16]..[727,21265+32])
                              [
                                <arg>
                                Nolabel
                                  expression (typing/typedtree.ml[727,21265+33]..[727,21265+34])
                                    Pexp_ident "p" (typing/typedtree.ml[727,21265+33]..[727,21265+34])
                              ]
                            [
                              <case>
                                pattern (typing/typedtree.ml[728,21305+12]..[728,21305+17])
                                  Ppat_construct "Value" (typing/typedtree.ml[728,21305+12]..[728,21305+17])
                                  None
                                expression (typing/typedtree.ml[728,21305+21]..[728,21305+24])
                                  Pexp_apply
                                  expression (typing/typedtree.ml[728,21305+21]..[728,21305+22])
                                    Pexp_ident "f" (typing/typedtree.ml[728,21305+21]..[728,21305+22])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (typing/typedtree.ml[728,21305+23]..[728,21305+24])
                                        Pexp_ident "p" (typing/typedtree.ml[728,21305+23]..[728,21305+24])
                                  ]
                              <case>
                                pattern (typing/typedtree.ml[729,21330+12]..[729,21330+23])
                                  Ppat_construct "Computation" (typing/typedtree.ml[729,21330+12]..[729,21330+23])
                                  None
                                expression (typing/typedtree.ml[729,21330+27]..[729,21330+29])
                                  Pexp_construct "()" (typing/typedtree.ml[729,21330+27]..[729,21330+29])
                                  None
                            ]
                  ]
                  None
            ]
    ]
  structure_item (typing/typedtree.ml[731,21363+0]..[731,21363+64])
    Pstr_type Rec
    [
      type_declaration "pattern_predicate" (typing/typedtree.ml[731,21363+5]..[731,21363+22]) (typing/typedtree.ml[731,21363+0]..[731,21363+64])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (typing/typedtree.ml[731,21363+27]..[731,21363+62])
                Immutable
                "f" (typing/typedtree.ml[731,21363+27]..[731,21363+28])                core_type (typing/typedtree.ml[731,21363+31]..[731,21363+62])
                  Ptyp_poly 'k
                  core_type (typing/typedtree.ml[731,21363+36]..[731,21363+62])
                    Ptyp_arrow
                    Nolabel
                    core_type (typing/typedtree.ml[731,21363+36]..[731,21363+54])
                      Ptyp_constr "general_pattern" (typing/typedtree.ml[731,21363+39]..[731,21363+54])
                      [
                        core_type (typing/typedtree.ml[731,21363+36]..[731,21363+38])
                          Ptyp_var k
                      ]
                    core_type (typing/typedtree.ml[731,21363+58]..[731,21363+62])
                      Ptyp_constr "bool" (typing/typedtree.ml[731,21363+58]..[731,21363+62])
                      []
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (typing/typedtree.ml[732,21428+0]..[740,21641+15])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/typedtree.ml[732,21428+4]..[732,21428+26])
          Ppat_var "exists_general_pattern" (typing/typedtree.ml[732,21428+4]..[732,21428+26])
        expression (typing/typedtree.ml[732,21428+27]..[740,21641+15]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (typing/typedtree.ml[732,21428+27]..[732,21428+50])
            Ppat_constraint
            pattern (typing/typedtree.ml[732,21428+28]..[732,21428+29])
              Ppat_var "f" (typing/typedtree.ml[732,21428+28]..[732,21428+29])
            core_type (typing/typedtree.ml[732,21428+32]..[732,21428+49])
              Ptyp_constr "pattern_predicate" (typing/typedtree.ml[732,21428+32]..[732,21428+49])
              []
          expression (typing/typedtree.ml[732,21428+51]..[740,21641+15]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (typing/typedtree.ml[732,21428+51]..[732,21428+52])
              Ppat_var "p" (typing/typedtree.ml[732,21428+51]..[732,21428+52])
            expression (typing/typedtree.ml[733,21483+2]..[740,21641+15])
              Pexp_letexception
              extension_constructor (typing/typedtree.ml[733,21483+16]..[733,21483+21])
                pext_name = "Found"
                pext_kind =
                  Pext_decl
                    []
                    None
              expression (typing/typedtree.ml[734,21508+2]..[740,21641+15])
                Pexp_match
                expression (typing/typedtree.ml[735,21516+4]..[737,21598+7])
                  Pexp_apply
                  expression (typing/typedtree.ml[735,21516+4]..[735,21516+24])
                    Pexp_ident "iter_general_pattern" (typing/typedtree.ml[735,21516+4]..[735,21516+24])
                  [
                    <arg>
                    Nolabel
                      expression (typing/typedtree.ml[736,21541+6]..[736,21541+56])
                        Pexp_record
                        [
                          "f" (typing/typedtree.ml[736,21541+8]..[736,21541+9])
                            expression (typing/typedtree.ml[736,21541+12]..[736,21541+54])
                              Pexp_fun
                              Nolabel
                              None
                              pattern (typing/typedtree.ml[736,21541+16]..[736,21541+17])
                                Ppat_var "p" (typing/typedtree.ml[736,21541+16]..[736,21541+17])
                              expression (typing/typedtree.ml[736,21541+21]..[736,21541+54])
                                Pexp_ifthenelse
                                expression (typing/typedtree.ml[736,21541+24]..[736,21541+29])
                                  Pexp_apply
                                  expression (typing/typedtree.ml[736,21541+24]..[736,21541+27])
                                    Pexp_field
                                    expression (typing/typedtree.ml[736,21541+24]..[736,21541+25])
                                      Pexp_ident "f" (typing/typedtree.ml[736,21541+24]..[736,21541+25])
                                    "f" (typing/typedtree.ml[736,21541+26]..[736,21541+27])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (typing/typedtree.ml[736,21541+28]..[736,21541+29])
                                        Pexp_ident "p" (typing/typedtree.ml[736,21541+28]..[736,21541+29])
                                  ]
                                expression (typing/typedtree.ml[736,21541+35]..[736,21541+46])
                                  Pexp_apply
                                  expression (typing/typedtree.ml[736,21541+35]..[736,21541+40])
                                    Pexp_ident "raise" (typing/typedtree.ml[736,21541+35]..[736,21541+40])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (typing/typedtree.ml[736,21541+41]..[736,21541+46])
                                        Pexp_construct "Found" (typing/typedtree.ml[736,21541+41]..[736,21541+46])
                                        None
                                  ]
                                Some
                                  expression (typing/typedtree.ml[736,21541+52]..[736,21541+54])
                                    Pexp_construct "()" (typing/typedtree.ml[736,21541+52]..[736,21541+54])
                                    None
                        ]
                        None
                    <arg>
                    Nolabel
                      expression (typing/typedtree.ml[737,21598+6]..[737,21598+7])
                        Pexp_ident "p" (typing/typedtree.ml[737,21598+6]..[737,21598+7])
                  ]
                [
                  <case>
                    pattern (typing/typedtree.ml[739,21613+4]..[739,21613+19])
                      Ppat_exception
                      pattern (typing/typedtree.ml[739,21613+14]..[739,21613+19])
                        Ppat_construct "Found" (typing/typedtree.ml[739,21613+14]..[739,21613+19])
                        None
                    expression (typing/typedtree.ml[739,21613+23]..[739,21613+27])
                      Pexp_construct "true" (typing/typedtree.ml[739,21613+23]..[739,21613+27])
                      None
                  <case>
                    pattern (typing/typedtree.ml[740,21641+4]..[740,21641+6])
                      Ppat_construct "()" (typing/typedtree.ml[740,21641+4]..[740,21641+6])
                      None
                    expression (typing/typedtree.ml[740,21641+10]..[740,21641+15])
                      Pexp_construct "false" (typing/typedtree.ml[740,21641+10]..[740,21641+15])
                      None
                ]
    ]
  structure_item (typing/typedtree.ml[742,21658+0]..[747,21841+34])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/typedtree.ml[742,21658+4]..[742,21658+18])
          Ppat_var "exists_pattern" (typing/typedtree.ml[742,21658+4]..[742,21658+18])
        expression (typing/typedtree.ml[742,21658+19]..[747,21841+34]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (typing/typedtree.ml[742,21658+19]..[742,21658+40])
            Ppat_constraint
            pattern (typing/typedtree.ml[742,21658+20]..[742,21658+21])
              Ppat_var "f" (typing/typedtree.ml[742,21658+20]..[742,21658+21])
            core_type (typing/typedtree.ml[742,21658+24]..[742,21658+39])
              Ptyp_arrow
              Nolabel
              core_type (typing/typedtree.ml[742,21658+24]..[742,21658+31])
                Ptyp_constr "pattern" (typing/typedtree.ml[742,21658+24]..[742,21658+31])
                []
              core_type (typing/typedtree.ml[742,21658+35]..[742,21658+39])
                Ptyp_constr "bool" (typing/typedtree.ml[742,21658+35]..[742,21658+39])
                []
          expression (typing/typedtree.ml[743,21701+2]..[747,21841+34])
            Pexp_apply
            expression (typing/typedtree.ml[743,21701+2]..[743,21701+24])
              Pexp_ident "exists_general_pattern" (typing/typedtree.ml[743,21701+2]..[743,21701+24])
            [
              <arg>
              Nolabel
                expression (typing/typedtree.ml[744,21726+4]..[747,21841+34])
                  Pexp_record
                  [
                    "f" (typing/typedtree.ml[744,21726+6]..[744,21726+7])
                      expression (typing/typedtree.ml[744,21726+10]..[747,21841+32])
                        Pexp_newtype "k"
                        expression (typing/typedtree.ml[744,21726+23]..[747,21841+32]) ghost
                          Pexp_fun
                          Nolabel
                          None
                          pattern (typing/typedtree.ml[744,21726+23]..[744,21726+46])
                            Ppat_constraint
                            pattern (typing/typedtree.ml[744,21726+24]..[744,21726+25])
                              Ppat_var "p" (typing/typedtree.ml[744,21726+24]..[744,21726+25])
                            core_type (typing/typedtree.ml[744,21726+28]..[744,21726+45])
                              Ptyp_constr "general_pattern" (typing/typedtree.ml[744,21726+30]..[744,21726+45])
                              [
                                core_type (typing/typedtree.ml[744,21726+28]..[744,21726+29])
                                  Ptyp_constr "k" (typing/typedtree.ml[744,21726+28]..[744,21726+29])
                                  []
                              ]
                          expression (typing/typedtree.ml[745,21776+10]..[747,21841+32])
                            Pexp_match
                            expression (typing/typedtree.ml[745,21776+16]..[745,21776+34])
                              Pexp_apply
                              expression (typing/typedtree.ml[745,21776+16]..[745,21776+32])
                                Pexp_ident "classify_pattern" (typing/typedtree.ml[745,21776+16]..[745,21776+32])
                              [
                                <arg>
                                Nolabel
                                  expression (typing/typedtree.ml[745,21776+33]..[745,21776+34])
                                    Pexp_ident "p" (typing/typedtree.ml[745,21776+33]..[745,21776+34])
                              ]
                            [
                              <case>
                                pattern (typing/typedtree.ml[746,21816+12]..[746,21816+17])
                                  Ppat_construct "Value" (typing/typedtree.ml[746,21816+12]..[746,21816+17])
                                  None
                                expression (typing/typedtree.ml[746,21816+21]..[746,21816+24])
                                  Pexp_apply
                                  expression (typing/typedtree.ml[746,21816+21]..[746,21816+22])
                                    Pexp_ident "f" (typing/typedtree.ml[746,21816+21]..[746,21816+22])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (typing/typedtree.ml[746,21816+23]..[746,21816+24])
                                        Pexp_ident "p" (typing/typedtree.ml[746,21816+23]..[746,21816+24])
                                  ]
                              <case>
                                pattern (typing/typedtree.ml[747,21841+12]..[747,21841+23])
                                  Ppat_construct "Computation" (typing/typedtree.ml[747,21841+12]..[747,21841+23])
                                  None
                                expression (typing/typedtree.ml[747,21841+27]..[747,21841+32])
                                  Pexp_construct "false" (typing/typedtree.ml[747,21841+27]..[747,21841+32])
                                  None
                            ]
                  ]
                  None
            ]
    ]
  structure_item (typing/typedtree.ml[752,21934+0]..[767,22382+8])
    Pstr_value Rec
    [
      <def>
        pattern (typing/typedtree.ml[752,21934+8]..[753,21960+40]) ghost
          Ppat_constraint
          pattern (typing/typedtree.ml[752,21934+8]..[752,21934+25])
            Ppat_var "iter_bound_idents" (typing/typedtree.ml[752,21934+8]..[752,21934+25])
          core_type (typing/typedtree.ml[752,21934+8]..[767,22382+8]) ghost
            Ptyp_poly 'k
            core_type (typing/typedtree.ml[753,21960+13]..[753,21960+40])
              Ptyp_arrow
              Nolabel
              core_type (typing/typedtree.ml[753,21960+13]..[753,21960+14])
                Ptyp_any
              core_type (typing/typedtree.ml[753,21960+18]..[753,21960+40])
                Ptyp_arrow
                Nolabel
                core_type (typing/typedtree.ml[753,21960+18]..[753,21960+35])
                  Ptyp_constr "general_pattern" (typing/typedtree.ml[753,21960+20]..[753,21960+35])
                  [
                    core_type (typing/typedtree.ml[753,21960+18]..[753,21960+19])
                      Ptyp_var k
                  ]
                core_type (typing/typedtree.ml[753,21960+39]..[753,21960+40])
                  Ptyp_any
        expression (typing/typedtree.ml[752,21934+8]..[767,22382+8])
          Pexp_newtype "k"
          expression (typing/typedtree.ml[752,21934+8]..[767,22382+8])
            Pexp_constraint
            expression (typing/typedtree.ml[754,22001+4]..[767,22382+8])
              Pexp_fun
              Nolabel
              None
              pattern (typing/typedtree.ml[754,22001+8]..[754,22001+9])
                Ppat_var "f" (typing/typedtree.ml[754,22001+8]..[754,22001+9])
              expression (typing/typedtree.ml[754,22001+10]..[767,22382+8]) ghost
                Pexp_fun
                Nolabel
                None
                pattern (typing/typedtree.ml[754,22001+10]..[754,22001+13])
                  Ppat_var "pat" (typing/typedtree.ml[754,22001+10]..[754,22001+13])
                expression (typing/typedtree.ml[755,22018+2]..[767,22382+8])
                  Pexp_match
                  expression (typing/typedtree.ml[755,22018+8]..[755,22018+20])
                    Pexp_field
                    expression (typing/typedtree.ml[755,22018+8]..[755,22018+11])
                      Pexp_ident "pat" (typing/typedtree.ml[755,22018+8]..[755,22018+11])
                    "pat_desc" (typing/typedtree.ml[755,22018+12]..[755,22018+20])
                  [
                    <case>
                      pattern (typing/typedtree.ml[756,22044+4]..[756,22044+19])
                        Ppat_construct "Tpat_var" (typing/typedtree.ml[756,22044+4]..[756,22044+12])
                        Some
                          []
                          pattern (typing/typedtree.ml[756,22044+13]..[756,22044+19])
                            Ppat_tuple
                            [
                              pattern (typing/typedtree.ml[756,22044+14]..[756,22044+16])
                                Ppat_var "id" (typing/typedtree.ml[756,22044+14]..[756,22044+16])
                              pattern (typing/typedtree.ml[756,22044+17]..[756,22044+18])
                                Ppat_var "s" (typing/typedtree.ml[756,22044+17]..[756,22044+18])
                            ]
                      expression (typing/typedtree.ml[757,22067+5]..[757,22067+26])
                        Pexp_apply
                        expression (typing/typedtree.ml[757,22067+5]..[757,22067+6])
                          Pexp_ident "f" (typing/typedtree.ml[757,22067+5]..[757,22067+6])
                        [
                          <arg>
                          Nolabel
                            expression (typing/typedtree.ml[757,22067+7]..[757,22067+26])
                              Pexp_tuple
                              [
                                expression (typing/typedtree.ml[757,22067+8]..[757,22067+10])
                                  Pexp_ident "id" (typing/typedtree.ml[757,22067+8]..[757,22067+10])
                                expression (typing/typedtree.ml[757,22067+11]..[757,22067+12])
                                  Pexp_ident "s" (typing/typedtree.ml[757,22067+11]..[757,22067+12])
                                expression (typing/typedtree.ml[757,22067+13]..[757,22067+25])
                                  Pexp_field
                                  expression (typing/typedtree.ml[757,22067+13]..[757,22067+16])
                                    Pexp_ident "pat" (typing/typedtree.ml[757,22067+13]..[757,22067+16])
                                  "pat_type" (typing/typedtree.ml[757,22067+17]..[757,22067+25])
                              ]
                        ]
                    <case>
                      pattern (typing/typedtree.ml[758,22094+4]..[758,22094+24])
                        Ppat_construct "Tpat_alias" (typing/typedtree.ml[758,22094+4]..[758,22094+14])
                        Some
                          []
                          pattern (typing/typedtree.ml[758,22094+14]..[758,22094+24])
                            Ppat_tuple
                            [
                              pattern (typing/typedtree.ml[758,22094+15]..[758,22094+16])
                                Ppat_var "p" (typing/typedtree.ml[758,22094+15]..[758,22094+16])
                              pattern (typing/typedtree.ml[758,22094+18]..[758,22094+20])
                                Ppat_var "id" (typing/typedtree.ml[758,22094+18]..[758,22094+20])
                              pattern (typing/typedtree.ml[758,22094+22]..[758,22094+23])
                                Ppat_var "s" (typing/typedtree.ml[758,22094+22]..[758,22094+23])
                            ]
                      expression (typing/typedtree.ml[759,22122+6]..[760,22151+27])
                        Pexp_sequence
                        expression (typing/typedtree.ml[759,22122+6]..[759,22122+27])
                          Pexp_apply
                          expression (typing/typedtree.ml[759,22122+6]..[759,22122+23])
                            Pexp_ident "iter_bound_idents" (typing/typedtree.ml[759,22122+6]..[759,22122+23])
                          [
                            <arg>
                            Nolabel
                              expression (typing/typedtree.ml[759,22122+24]..[759,22122+25])
                                Pexp_ident "f" (typing/typedtree.ml[759,22122+24]..[759,22122+25])
                            <arg>
                            Nolabel
                              expression (typing/typedtree.ml[759,22122+26]..[759,22122+27])
                                Pexp_ident "p" (typing/typedtree.ml[759,22122+26]..[759,22122+27])
                          ]
                        expression (typing/typedtree.ml[760,22151+6]..[760,22151+27])
                          Pexp_apply
                          expression (typing/typedtree.ml[760,22151+6]..[760,22151+7])
                            Pexp_ident "f" (typing/typedtree.ml[760,22151+6]..[760,22151+7])
                          [
                            <arg>
                            Nolabel
                              expression (typing/typedtree.ml[760,22151+8]..[760,22151+27])
                                Pexp_tuple
                                [
                                  expression (typing/typedtree.ml[760,22151+9]..[760,22151+11])
                                    Pexp_ident "id" (typing/typedtree.ml[760,22151+9]..[760,22151+11])
                                  expression (typing/typedtree.ml[760,22151+12]..[760,22151+13])
                                    Pexp_ident "s" (typing/typedtree.ml[760,22151+12]..[760,22151+13])
                                  expression (typing/typedtree.ml[760,22151+14]..[760,22151+26])
                                    Pexp_field
                                    expression (typing/typedtree.ml[760,22151+14]..[760,22151+17])
                                      Pexp_ident "pat" (typing/typedtree.ml[760,22151+14]..[760,22151+17])
                                    "pat_type" (typing/typedtree.ml[760,22151+18]..[760,22151+26])
                                ]
                          ]
                    <case>
                      pattern (typing/typedtree.ml[761,22179+4]..[761,22179+21])
                        Ppat_construct "Tpat_or" (typing/typedtree.ml[761,22179+4]..[761,22179+11])
                        Some
                          []
                          pattern (typing/typedtree.ml[761,22179+11]..[761,22179+21])
                            Ppat_tuple
                            [
                              pattern (typing/typedtree.ml[761,22179+12]..[761,22179+14])
                                Ppat_var "p1" (typing/typedtree.ml[761,22179+12]..[761,22179+14])
                              pattern (typing/typedtree.ml[761,22179+16]..[761,22179+17])
                                Ppat_any
                              pattern (typing/typedtree.ml[761,22179+19]..[761,22179+20])
                                Ppat_any
                            ]
                      expression (typing/typedtree.ml[763,22267+6]..[763,22267+28])
                        Pexp_apply
                        expression (typing/typedtree.ml[763,22267+6]..[763,22267+23])
                          Pexp_ident "iter_bound_idents" (typing/typedtree.ml[763,22267+6]..[763,22267+23])
                        [
                          <arg>
                          Nolabel
                            expression (typing/typedtree.ml[763,22267+24]..[763,22267+25])
                              Pexp_ident "f" (typing/typedtree.ml[763,22267+24]..[763,22267+25])
                          <arg>
                          Nolabel
                            expression (typing/typedtree.ml[763,22267+26]..[763,22267+28])
                              Pexp_ident "p1" (typing/typedtree.ml[763,22267+26]..[763,22267+28])
                        ]
                    <case>
                      pattern (typing/typedtree.ml[764,22296+4]..[764,22296+5])
                        Ppat_var "d" (typing/typedtree.ml[764,22296+4]..[764,22296+5])
                      expression (typing/typedtree.ml[765,22305+5]..[767,22382+8])
                        Pexp_apply
                        expression (typing/typedtree.ml[765,22305+5]..[765,22305+30])
                          Pexp_ident "shallow_iter_pattern_desc" (typing/typedtree.ml[765,22305+5]..[765,22305+30])
                        [
                          <arg>
                          Nolabel
                            expression (typing/typedtree.ml[766,22336+7]..[766,22336+45])
                              Pexp_record
                              [
                                "f" (typing/typedtree.ml[766,22336+9]..[766,22336+10])
                                  expression (typing/typedtree.ml[766,22336+13]..[766,22336+43])
                                    Pexp_fun
                                    Nolabel
                                    None
                                    pattern (typing/typedtree.ml[766,22336+17]..[766,22336+18])
                                      Ppat_var "p" (typing/typedtree.ml[766,22336+17]..[766,22336+18])
                                    expression (typing/typedtree.ml[766,22336+22]..[766,22336+43])
                                      Pexp_apply
                                      expression (typing/typedtree.ml[766,22336+22]..[766,22336+39])
                                        Pexp_ident "iter_bound_idents" (typing/typedtree.ml[766,22336+22]..[766,22336+39])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (typing/typedtree.ml[766,22336+40]..[766,22336+41])
                                            Pexp_ident "f" (typing/typedtree.ml[766,22336+40]..[766,22336+41])
                                        <arg>
                                        Nolabel
                                          expression (typing/typedtree.ml[766,22336+42]..[766,22336+43])
                                            Pexp_ident "p" (typing/typedtree.ml[766,22336+42]..[766,22336+43])
                                      ]
                              ]
                              None
                          <arg>
                          Nolabel
                            expression (typing/typedtree.ml[767,22382+7]..[767,22382+8])
                              Pexp_ident "d" (typing/typedtree.ml[767,22382+7]..[767,22382+8])
                        ]
                  ]
            core_type (typing/typedtree.ml[753,21960+13]..[753,21960+40])
              Ptyp_arrow
              Nolabel
              core_type (typing/typedtree.ml[753,21960+13]..[753,21960+14])
                Ptyp_any
              core_type (typing/typedtree.ml[753,21960+18]..[753,21960+40])
                Ptyp_arrow
                Nolabel
                core_type (typing/typedtree.ml[753,21960+18]..[753,21960+35])
                  Ptyp_constr "general_pattern" (typing/typedtree.ml[753,21960+20]..[753,21960+35])
                  [
                    core_type (typing/typedtree.ml[753,21960+18]..[753,21960+19])
                      Ptyp_constr "k" (typing/typedtree.ml[753,21960+18]..[753,21960+19])
                      []
                  ]
                core_type (typing/typedtree.ml[753,21960+39]..[753,21960+40])
                  Ptyp_any
    ]
  structure_item (typing/typedtree.ml[769,22392+0]..[773,22549+14])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/typedtree.ml[769,22392+4]..[769,22392+29])
          Ppat_var "rev_pat_bound_idents_full" (typing/typedtree.ml[769,22392+4]..[769,22392+29])
        expression (typing/typedtree.ml[769,22392+30]..[773,22549+14]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (typing/typedtree.ml[769,22392+30]..[769,22392+33])
            Ppat_var "pat" (typing/typedtree.ml[769,22392+30]..[769,22392+33])
          expression (typing/typedtree.ml[770,22428+2]..[773,22549+14])
            Pexp_let Nonrec
            [
              <def>
                pattern (typing/typedtree.ml[770,22428+6]..[770,22428+17])
                  Ppat_var "idents_full" (typing/typedtree.ml[770,22428+6]..[770,22428+17])
                expression (typing/typedtree.ml[770,22428+20]..[770,22428+26])
                  Pexp_apply
                  expression (typing/typedtree.ml[770,22428+20]..[770,22428+23])
                    Pexp_ident "ref" (typing/typedtree.ml[770,22428+20]..[770,22428+23])
                  [
                    <arg>
                    Nolabel
                      expression (typing/typedtree.ml[770,22428+24]..[770,22428+26])
                        Pexp_construct "[]" (typing/typedtree.ml[770,22428+24]..[770,22428+26])
                        None
                  ]
            ]
            expression (typing/typedtree.ml[771,22458+2]..[773,22549+14])
              Pexp_let Nonrec
              [
                <def>
                  pattern (typing/typedtree.ml[771,22458+6]..[771,22458+9])
                    Ppat_var "add" (typing/typedtree.ml[771,22458+6]..[771,22458+9])
                  expression (typing/typedtree.ml[771,22458+10]..[771,22458+58]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (typing/typedtree.ml[771,22458+10]..[771,22458+17])
                      Ppat_var "id_full" (typing/typedtree.ml[771,22458+10]..[771,22458+17])
                    expression (typing/typedtree.ml[771,22458+20]..[771,22458+58])
                      Pexp_apply
                      expression (typing/typedtree.ml[771,22458+32]..[771,22458+34])
                        Pexp_ident ":=" (typing/typedtree.ml[771,22458+32]..[771,22458+34])
                      [
                        <arg>
                        Nolabel
                          expression (typing/typedtree.ml[771,22458+20]..[771,22458+31])
                            Pexp_ident "idents_full" (typing/typedtree.ml[771,22458+20]..[771,22458+31])
                        <arg>
                        Nolabel
                          expression (typing/typedtree.ml[771,22458+35]..[771,22458+58])
                            Pexp_construct "::" (typing/typedtree.ml[771,22458+43]..[771,22458+45])
                            Some
                              expression (typing/typedtree.ml[771,22458+35]..[771,22458+58]) ghost
                                Pexp_tuple
                                [
                                  expression (typing/typedtree.ml[771,22458+35]..[771,22458+42])
                                    Pexp_ident "id_full" (typing/typedtree.ml[771,22458+35]..[771,22458+42])
                                  expression (typing/typedtree.ml[771,22458+46]..[771,22458+58])
                                    Pexp_apply
                                    expression (typing/typedtree.ml[771,22458+46]..[771,22458+47])
                                      Pexp_ident "!" (typing/typedtree.ml[771,22458+46]..[771,22458+47])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (typing/typedtree.ml[771,22458+47]..[771,22458+58])
                                          Pexp_ident "idents_full" (typing/typedtree.ml[771,22458+47]..[771,22458+58])
                                    ]
                                ]
                      ]
              ]
              expression (typing/typedtree.ml[772,22520+2]..[773,22549+14])
                Pexp_sequence
                expression (typing/typedtree.ml[772,22520+2]..[772,22520+27])
                  Pexp_apply
                  expression (typing/typedtree.ml[772,22520+2]..[772,22520+19])
                    Pexp_ident "iter_bound_idents" (typing/typedtree.ml[772,22520+2]..[772,22520+19])
                  [
                    <arg>
                    Nolabel
                      expression (typing/typedtree.ml[772,22520+20]..[772,22520+23])
                        Pexp_ident "add" (typing/typedtree.ml[772,22520+20]..[772,22520+23])
                    <arg>
                    Nolabel
                      expression (typing/typedtree.ml[772,22520+24]..[772,22520+27])
                        Pexp_ident "pat" (typing/typedtree.ml[772,22520+24]..[772,22520+27])
                  ]
                expression (typing/typedtree.ml[773,22549+2]..[773,22549+14])
                  Pexp_apply
                  expression (typing/typedtree.ml[773,22549+2]..[773,22549+3])
                    Pexp_ident "!" (typing/typedtree.ml[773,22549+2]..[773,22549+3])
                  [
                    <arg>
                    Nolabel
                      expression (typing/typedtree.ml[773,22549+3]..[773,22549+14])
                        Pexp_ident "idents_full" (typing/typedtree.ml[773,22549+3]..[773,22549+14])
                  ]
    ]
  structure_item (typing/typedtree.ml[775,22565+0]..[776,22599+47])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/typedtree.ml[775,22565+4]..[775,22565+19])
          Ppat_var "rev_only_idents" (typing/typedtree.ml[775,22565+4]..[775,22565+19])
        expression (typing/typedtree.ml[775,22565+20]..[776,22599+47]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (typing/typedtree.ml[775,22565+20]..[775,22565+31])
            Ppat_var "idents_full" (typing/typedtree.ml[775,22565+20]..[775,22565+31])
          expression (typing/typedtree.ml[776,22599+2]..[776,22599+47])
            Pexp_apply
            expression (typing/typedtree.ml[776,22599+2]..[776,22599+14])
              Pexp_ident "List.rev_map" (typing/typedtree.ml[776,22599+2]..[776,22599+14])
            [
              <arg>
              Nolabel
                expression (typing/typedtree.ml[776,22599+15]..[776,22599+35])
                  Pexp_fun
                  Nolabel
                  None
                  pattern (typing/typedtree.ml[776,22599+20]..[776,22599+28])
                    Ppat_tuple
                    [
                      pattern (typing/typedtree.ml[776,22599+21]..[776,22599+23])
                        Ppat_var "id" (typing/typedtree.ml[776,22599+21]..[776,22599+23])
                      pattern (typing/typedtree.ml[776,22599+24]..[776,22599+25])
                        Ppat_any
                      pattern (typing/typedtree.ml[776,22599+26]..[776,22599+27])
                        Ppat_any
                    ]
                  expression (typing/typedtree.ml[776,22599+32]..[776,22599+34])
                    Pexp_ident "id" (typing/typedtree.ml[776,22599+32]..[776,22599+34])
              <arg>
              Nolabel
                expression (typing/typedtree.ml[776,22599+36]..[776,22599+47])
                  Pexp_ident "idents_full" (typing/typedtree.ml[776,22599+36]..[776,22599+47])
            ]
    ]
  structure_item (typing/typedtree.ml[778,22648+0]..[779,22680+42])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/typedtree.ml[778,22648+4]..[778,22648+25])
          Ppat_var "pat_bound_idents_full" (typing/typedtree.ml[778,22648+4]..[778,22648+25])
        expression (typing/typedtree.ml[778,22648+26]..[779,22680+42]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (typing/typedtree.ml[778,22648+26]..[778,22648+29])
            Ppat_var "pat" (typing/typedtree.ml[778,22648+26]..[778,22648+29])
          expression (typing/typedtree.ml[779,22680+2]..[779,22680+42])
            Pexp_apply
            expression (typing/typedtree.ml[779,22680+2]..[779,22680+10])
              Pexp_ident "List.rev" (typing/typedtree.ml[779,22680+2]..[779,22680+10])
            [
              <arg>
              Nolabel
                expression (typing/typedtree.ml[779,22680+11]..[779,22680+42])
                  Pexp_apply
                  expression (typing/typedtree.ml[779,22680+12]..[779,22680+37])
                    Pexp_ident "rev_pat_bound_idents_full" (typing/typedtree.ml[779,22680+12]..[779,22680+37])
                  [
                    <arg>
                    Nolabel
                      expression (typing/typedtree.ml[779,22680+38]..[779,22680+41])
                        Pexp_ident "pat" (typing/typedtree.ml[779,22680+38]..[779,22680+41])
                  ]
            ]
    ]
  structure_item (typing/typedtree.ml[780,22723+0]..[781,22750+49])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/typedtree.ml[780,22723+4]..[780,22723+20])
          Ppat_var "pat_bound_idents" (typing/typedtree.ml[780,22723+4]..[780,22723+20])
        expression (typing/typedtree.ml[780,22723+21]..[781,22750+49]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (typing/typedtree.ml[780,22723+21]..[780,22723+24])
            Ppat_var "pat" (typing/typedtree.ml[780,22723+21]..[780,22723+24])
          expression (typing/typedtree.ml[781,22750+2]..[781,22750+49])
            Pexp_apply
            expression (typing/typedtree.ml[781,22750+2]..[781,22750+17])
              Pexp_ident "rev_only_idents" (typing/typedtree.ml[781,22750+2]..[781,22750+17])
            [
              <arg>
              Nolabel
                expression (typing/typedtree.ml[781,22750+18]..[781,22750+49])
                  Pexp_apply
                  expression (typing/typedtree.ml[781,22750+19]..[781,22750+44])
                    Pexp_ident "rev_pat_bound_idents_full" (typing/typedtree.ml[781,22750+19]..[781,22750+44])
                  [
                    <arg>
                    Nolabel
                      expression (typing/typedtree.ml[781,22750+45]..[781,22750+48])
                        Pexp_ident "pat" (typing/typedtree.ml[781,22750+45]..[781,22750+48])
                  ]
            ]
    ]
  structure_item (typing/typedtree.ml[783,22801+0]..[787,23000+14])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/typedtree.ml[783,22801+4]..[783,22801+29])
          Ppat_var "rev_let_bound_idents_full" (typing/typedtree.ml[783,22801+4]..[783,22801+29])
        expression (typing/typedtree.ml[783,22801+30]..[787,23000+14]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (typing/typedtree.ml[783,22801+30]..[783,22801+38])
            Ppat_var "bindings" (typing/typedtree.ml[783,22801+30]..[783,22801+38])
          expression (typing/typedtree.ml[784,22842+2]..[787,23000+14])
            Pexp_let Nonrec
            [
              <def>
                pattern (typing/typedtree.ml[784,22842+6]..[784,22842+17])
                  Ppat_var "idents_full" (typing/typedtree.ml[784,22842+6]..[784,22842+17])
                expression (typing/typedtree.ml[784,22842+20]..[784,22842+26])
                  Pexp_apply
                  expression (typing/typedtree.ml[784,22842+20]..[784,22842+23])
                    Pexp_ident "ref" (typing/typedtree.ml[784,22842+20]..[784,22842+23])
                  [
                    <arg>
                    Nolabel
                      expression (typing/typedtree.ml[784,22842+24]..[784,22842+26])
                        Pexp_construct "[]" (typing/typedtree.ml[784,22842+24]..[784,22842+26])
                        None
                  ]
            ]
            expression (typing/typedtree.ml[785,22872+2]..[787,23000+14])
              Pexp_let Nonrec
              [
                <def>
                  pattern (typing/typedtree.ml[785,22872+6]..[785,22872+9])
                    Ppat_var "add" (typing/typedtree.ml[785,22872+6]..[785,22872+9])
                  expression (typing/typedtree.ml[785,22872+10]..[785,22872+58]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (typing/typedtree.ml[785,22872+10]..[785,22872+17])
                      Ppat_var "id_full" (typing/typedtree.ml[785,22872+10]..[785,22872+17])
                    expression (typing/typedtree.ml[785,22872+20]..[785,22872+58])
                      Pexp_apply
                      expression (typing/typedtree.ml[785,22872+32]..[785,22872+34])
                        Pexp_ident ":=" (typing/typedtree.ml[785,22872+32]..[785,22872+34])
                      [
                        <arg>
                        Nolabel
                          expression (typing/typedtree.ml[785,22872+20]..[785,22872+31])
                            Pexp_ident "idents_full" (typing/typedtree.ml[785,22872+20]..[785,22872+31])
                        <arg>
                        Nolabel
                          expression (typing/typedtree.ml[785,22872+35]..[785,22872+58])
                            Pexp_construct "::" (typing/typedtree.ml[785,22872+43]..[785,22872+45])
                            Some
                              expression (typing/typedtree.ml[785,22872+35]..[785,22872+58]) ghost
                                Pexp_tuple
                                [
                                  expression (typing/typedtree.ml[785,22872+35]..[785,22872+42])
                                    Pexp_ident "id_full" (typing/typedtree.ml[785,22872+35]..[785,22872+42])
                                  expression (typing/typedtree.ml[785,22872+46]..[785,22872+58])
                                    Pexp_apply
                                    expression (typing/typedtree.ml[785,22872+46]..[785,22872+47])
                                      Pexp_ident "!" (typing/typedtree.ml[785,22872+46]..[785,22872+47])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (typing/typedtree.ml[785,22872+47]..[785,22872+58])
                                          Pexp_ident "idents_full" (typing/typedtree.ml[785,22872+47]..[785,22872+58])
                                    ]
                                ]
                      ]
              ]
              expression (typing/typedtree.ml[786,22934+2]..[787,23000+14])
                Pexp_sequence
                expression (typing/typedtree.ml[786,22934+2]..[786,22934+64])
                  Pexp_apply
                  expression (typing/typedtree.ml[786,22934+2]..[786,22934+11])
                    Pexp_ident "List.iter" (typing/typedtree.ml[786,22934+2]..[786,22934+11])
                  [
                    <arg>
                    Nolabel
                      expression (typing/typedtree.ml[786,22934+12]..[786,22934+55])
                        Pexp_fun
                        Nolabel
                        None
                        pattern (typing/typedtree.ml[786,22934+17]..[786,22934+19])
                          Ppat_var "vb" (typing/typedtree.ml[786,22934+17]..[786,22934+19])
                        expression (typing/typedtree.ml[786,22934+23]..[786,22934+54])
                          Pexp_apply
                          expression (typing/typedtree.ml[786,22934+23]..[786,22934+40])
                            Pexp_ident "iter_bound_idents" (typing/typedtree.ml[786,22934+23]..[786,22934+40])
                          [
                            <arg>
                            Nolabel
                              expression (typing/typedtree.ml[786,22934+41]..[786,22934+44])
                                Pexp_ident "add" (typing/typedtree.ml[786,22934+41]..[786,22934+44])
                            <arg>
                            Nolabel
                              expression (typing/typedtree.ml[786,22934+45]..[786,22934+54])
                                Pexp_field
                                expression (typing/typedtree.ml[786,22934+45]..[786,22934+47])
                                  Pexp_ident "vb" (typing/typedtree.ml[786,22934+45]..[786,22934+47])
                                "vb_pat" (typing/typedtree.ml[786,22934+48]..[786,22934+54])
                          ]
                    <arg>
                    Nolabel
                      expression (typing/typedtree.ml[786,22934+56]..[786,22934+64])
                        Pexp_ident "bindings" (typing/typedtree.ml[786,22934+56]..[786,22934+64])
                  ]
                expression (typing/typedtree.ml[787,23000+2]..[787,23000+14])
                  Pexp_apply
                  expression (typing/typedtree.ml[787,23000+2]..[787,23000+3])
                    Pexp_ident "!" (typing/typedtree.ml[787,23000+2]..[787,23000+3])
                  [
                    <arg>
                    Nolabel
                      expression (typing/typedtree.ml[787,23000+3]..[787,23000+14])
                        Pexp_ident "idents_full" (typing/typedtree.ml[787,23000+3]..[787,23000+14])
                  ]
    ]
  structure_item (typing/typedtree.ml[789,23016+0]..[790,23053+47])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/typedtree.ml[789,23016+4]..[789,23016+25])
          Ppat_var "let_bound_idents_full" (typing/typedtree.ml[789,23016+4]..[789,23016+25])
        expression (typing/typedtree.ml[789,23016+26]..[790,23053+47]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (typing/typedtree.ml[789,23016+26]..[789,23016+34])
            Ppat_var "bindings" (typing/typedtree.ml[789,23016+26]..[789,23016+34])
          expression (typing/typedtree.ml[790,23053+2]..[790,23053+47])
            Pexp_apply
            expression (typing/typedtree.ml[790,23053+2]..[790,23053+10])
              Pexp_ident "List.rev" (typing/typedtree.ml[790,23053+2]..[790,23053+10])
            [
              <arg>
              Nolabel
                expression (typing/typedtree.ml[790,23053+11]..[790,23053+47])
                  Pexp_apply
                  expression (typing/typedtree.ml[790,23053+12]..[790,23053+37])
                    Pexp_ident "rev_let_bound_idents_full" (typing/typedtree.ml[790,23053+12]..[790,23053+37])
                  [
                    <arg>
                    Nolabel
                      expression (typing/typedtree.ml[790,23053+38]..[790,23053+46])
                        Pexp_ident "bindings" (typing/typedtree.ml[790,23053+38]..[790,23053+46])
                  ]
            ]
    ]
  structure_item (typing/typedtree.ml[791,23101+0]..[792,23128+49])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/typedtree.ml[791,23101+4]..[791,23101+20])
          Ppat_var "let_bound_idents" (typing/typedtree.ml[791,23101+4]..[791,23101+20])
        expression (typing/typedtree.ml[791,23101+21]..[792,23128+49]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (typing/typedtree.ml[791,23101+21]..[791,23101+24])
            Ppat_var "pat" (typing/typedtree.ml[791,23101+21]..[791,23101+24])
          expression (typing/typedtree.ml[792,23128+2]..[792,23128+49])
            Pexp_apply
            expression (typing/typedtree.ml[792,23128+2]..[792,23128+17])
              Pexp_ident "rev_only_idents" (typing/typedtree.ml[792,23128+2]..[792,23128+17])
            [
              <arg>
              Nolabel
                expression (typing/typedtree.ml[792,23128+18]..[792,23128+49])
                  Pexp_apply
                  expression (typing/typedtree.ml[792,23128+19]..[792,23128+44])
                    Pexp_ident "rev_let_bound_idents_full" (typing/typedtree.ml[792,23128+19]..[792,23128+44])
                  [
                    <arg>
                    Nolabel
                      expression (typing/typedtree.ml[792,23128+45]..[792,23128+48])
                        Pexp_ident "pat" (typing/typedtree.ml[792,23128+45]..[792,23128+48])
                  ]
            ]
    ]
  structure_item (typing/typedtree.ml[794,23179+0]..[794,23179+40])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/typedtree.ml[794,23179+4]..[794,23179+13])
          Ppat_var "alpha_var" (typing/typedtree.ml[794,23179+4]..[794,23179+13])
        expression (typing/typedtree.ml[794,23179+14]..[794,23179+40]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (typing/typedtree.ml[794,23179+14]..[794,23179+17])
            Ppat_var "env" (typing/typedtree.ml[794,23179+14]..[794,23179+17])
          expression (typing/typedtree.ml[794,23179+18]..[794,23179+40]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (typing/typedtree.ml[794,23179+18]..[794,23179+20])
              Ppat_var "id" (typing/typedtree.ml[794,23179+18]..[794,23179+20])
            expression (typing/typedtree.ml[794,23179+23]..[794,23179+40])
              Pexp_apply
              expression (typing/typedtree.ml[794,23179+23]..[794,23179+33])
                Pexp_ident "List.assoc" (typing/typedtree.ml[794,23179+23]..[794,23179+33])
              [
                <arg>
                Nolabel
                  expression (typing/typedtree.ml[794,23179+34]..[794,23179+36])
                    Pexp_ident "id" (typing/typedtree.ml[794,23179+34]..[794,23179+36])
                <arg>
                Nolabel
                  expression (typing/typedtree.ml[794,23179+37]..[794,23179+40])
                    Pexp_ident "env" (typing/typedtree.ml[794,23179+37]..[794,23179+40])
              ]
    ]
  structure_item (typing/typedtree.ml[796,23221+0]..[813,23797+22])
    Pstr_value Rec
    [
      <def>
        pattern (typing/typedtree.ml[796,23221+8]..[797,23239+56]) ghost
          Ppat_constraint
          pattern (typing/typedtree.ml[796,23221+8]..[796,23221+17])
            Ppat_var "alpha_pat" (typing/typedtree.ml[796,23221+8]..[796,23221+17])
          core_type (typing/typedtree.ml[796,23221+8]..[813,23797+22]) ghost
            Ptyp_poly 'k
            core_type (typing/typedtree.ml[797,23239+13]..[797,23239+56])
              Ptyp_arrow
              Nolabel
              core_type (typing/typedtree.ml[797,23239+13]..[797,23239+14])
                Ptyp_any
              core_type (typing/typedtree.ml[797,23239+18]..[797,23239+56])
                Ptyp_arrow
                Nolabel
                core_type (typing/typedtree.ml[797,23239+18]..[797,23239+35])
                  Ptyp_constr "general_pattern" (typing/typedtree.ml[797,23239+20]..[797,23239+35])
                  [
                    core_type (typing/typedtree.ml[797,23239+18]..[797,23239+19])
                      Ptyp_var k
                  ]
                core_type (typing/typedtree.ml[797,23239+39]..[797,23239+56])
                  Ptyp_constr "general_pattern" (typing/typedtree.ml[797,23239+41]..[797,23239+56])
                  [
                    core_type (typing/typedtree.ml[797,23239+39]..[797,23239+40])
                      Ptyp_var k
                  ]
        expression (typing/typedtree.ml[796,23221+8]..[813,23797+22])
          Pexp_newtype "k"
          expression (typing/typedtree.ml[796,23221+8]..[813,23797+22])
            Pexp_constraint
            expression (typing/typedtree.ml[798,23296+4]..[813,23797+22])
              Pexp_fun
              Nolabel
              None
              pattern (typing/typedtree.ml[798,23296+8]..[798,23296+11])
                Ppat_var "env" (typing/typedtree.ml[798,23296+8]..[798,23296+11])
              expression (typing/typedtree.ml[798,23296+12]..[813,23797+22]) ghost
                Pexp_fun
                Nolabel
                None
                pattern (typing/typedtree.ml[798,23296+12]..[798,23296+13])
                  Ppat_var "p" (typing/typedtree.ml[798,23296+12]..[798,23296+13])
                expression (typing/typedtree.ml[798,23296+17]..[813,23797+22])
                  Pexp_match
                  expression (typing/typedtree.ml[798,23296+23]..[798,23296+33])
                    Pexp_field
                    expression (typing/typedtree.ml[798,23296+23]..[798,23296+24])
                      Pexp_ident "p" (typing/typedtree.ml[798,23296+23]..[798,23296+24])
                    "pat_desc" (typing/typedtree.ml[798,23296+25]..[798,23296+33])
                  [
                    <case>
                      pattern (typing/typedtree.ml[799,23335+4]..[799,23335+20])
                        Ppat_construct "Tpat_var" (typing/typedtree.ml[799,23335+4]..[799,23335+12])
                        Some
                          []
                          pattern (typing/typedtree.ml[799,23335+13]..[799,23335+20])
                            Ppat_tuple
                            [
                              pattern (typing/typedtree.ml[799,23335+14]..[799,23335+16])
                                Ppat_var "id" (typing/typedtree.ml[799,23335+14]..[799,23335+16])
                              pattern (typing/typedtree.ml[799,23335+18]..[799,23335+19])
                                Ppat_var "s" (typing/typedtree.ml[799,23335+18]..[799,23335+19])
                            ]
                      expression (typing/typedtree.ml[800,23393+6]..[802,23465+31])
                        Pexp_record
                        [
                          "pat_desc" (typing/typedtree.ml[800,23393+14]..[800,23393+22])
                            expression (typing/typedtree.ml[801,23418+7]..[802,23465+30])
                              Pexp_try
                              expression (typing/typedtree.ml[801,23418+11]..[801,23418+41])
                                Pexp_construct "Tpat_var" (typing/typedtree.ml[801,23418+11]..[801,23418+19])
                                Some
                                  expression (typing/typedtree.ml[801,23418+20]..[801,23418+41])
                                    Pexp_tuple
                                    [
                                      expression (typing/typedtree.ml[801,23418+21]..[801,23418+37])
                                        Pexp_apply
                                        expression (typing/typedtree.ml[801,23418+21]..[801,23418+30])
                                          Pexp_ident "alpha_var" (typing/typedtree.ml[801,23418+21]..[801,23418+30])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (typing/typedtree.ml[801,23418+31]..[801,23418+34])
                                              Pexp_ident "env" (typing/typedtree.ml[801,23418+31]..[801,23418+34])
                                          <arg>
                                          Nolabel
                                            expression (typing/typedtree.ml[801,23418+35]..[801,23418+37])
                                              Pexp_ident "id" (typing/typedtree.ml[801,23418+35]..[801,23418+37])
                                        ]
                                      expression (typing/typedtree.ml[801,23418+39]..[801,23418+40])
                                        Pexp_ident "s" (typing/typedtree.ml[801,23418+39]..[801,23418+40])
                                    ]
                              [
                                <case>
                                  pattern (typing/typedtree.ml[802,23465+9]..[802,23465+18])
                                    Ppat_construct "Not_found" (typing/typedtree.ml[802,23465+9]..[802,23465+18])
                                    None
                                  expression (typing/typedtree.ml[802,23465+22]..[802,23465+30])
                                    Pexp_construct "Tpat_any" (typing/typedtree.ml[802,23465+22]..[802,23465+30])
                                    None
                              ]
                        ]
                        Some
                          expression (typing/typedtree.ml[800,23393+7]..[800,23393+8])
                            Pexp_ident "p" (typing/typedtree.ml[800,23393+7]..[800,23393+8])
                    <case>
                      pattern (typing/typedtree.ml[803,23497+4]..[803,23497+26])
                        Ppat_construct "Tpat_alias" (typing/typedtree.ml[803,23497+4]..[803,23497+14])
                        Some
                          []
                          pattern (typing/typedtree.ml[803,23497+15]..[803,23497+26])
                            Ppat_tuple
                            [
                              pattern (typing/typedtree.ml[803,23497+16]..[803,23497+18])
                                Ppat_var "p1" (typing/typedtree.ml[803,23497+16]..[803,23497+18])
                              pattern (typing/typedtree.ml[803,23497+20]..[803,23497+22])
                                Ppat_var "id" (typing/typedtree.ml[803,23497+20]..[803,23497+22])
                              pattern (typing/typedtree.ml[803,23497+24]..[803,23497+25])
                                Ppat_var "s" (typing/typedtree.ml[803,23497+24]..[803,23497+25])
                            ]
                      expression (typing/typedtree.ml[804,23527+6]..[809,23688+9])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (typing/typedtree.ml[804,23527+10]..[804,23527+15])
                              Ppat_var "new_p" (typing/typedtree.ml[804,23527+10]..[804,23527+15])
                            expression (typing/typedtree.ml[804,23527+19]..[804,23527+35])
                              Pexp_apply
                              expression (typing/typedtree.ml[804,23527+19]..[804,23527+28])
                                Pexp_ident "alpha_pat" (typing/typedtree.ml[804,23527+19]..[804,23527+28])
                              [
                                <arg>
                                Nolabel
                                  expression (typing/typedtree.ml[804,23527+29]..[804,23527+32])
                                    Pexp_ident "env" (typing/typedtree.ml[804,23527+29]..[804,23527+32])
                                <arg>
                                Nolabel
                                  expression (typing/typedtree.ml[804,23527+33]..[804,23527+35])
                                    Pexp_ident "p1" (typing/typedtree.ml[804,23527+33]..[804,23527+35])
                              ]
                        ]
                        expression (typing/typedtree.ml[805,23566+6]..[809,23688+9])
                          Pexp_try
                          expression (typing/typedtree.ml[806,23582+8]..[806,23582+67])
                            Pexp_record
                            [
                              "pat_desc" (typing/typedtree.ml[806,23582+16]..[806,23582+24])
                                expression (typing/typedtree.ml[806,23582+27]..[806,23582+66])
                                  Pexp_construct "Tpat_alias" (typing/typedtree.ml[806,23582+27]..[806,23582+37])
                                  Some
                                    expression (typing/typedtree.ml[806,23582+38]..[806,23582+66])
                                      Pexp_tuple
                                      [
                                        expression (typing/typedtree.ml[806,23582+39]..[806,23582+44])
                                          Pexp_ident "new_p" (typing/typedtree.ml[806,23582+39]..[806,23582+44])
                                        expression (typing/typedtree.ml[806,23582+46]..[806,23582+62])
                                          Pexp_apply
                                          expression (typing/typedtree.ml[806,23582+46]..[806,23582+55])
                                            Pexp_ident "alpha_var" (typing/typedtree.ml[806,23582+46]..[806,23582+55])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (typing/typedtree.ml[806,23582+56]..[806,23582+59])
                                                Pexp_ident "env" (typing/typedtree.ml[806,23582+56]..[806,23582+59])
                                            <arg>
                                            Nolabel
                                              expression (typing/typedtree.ml[806,23582+60]..[806,23582+62])
                                                Pexp_ident "id" (typing/typedtree.ml[806,23582+60]..[806,23582+62])
                                          ]
                                        expression (typing/typedtree.ml[806,23582+64]..[806,23582+65])
                                          Pexp_ident "s" (typing/typedtree.ml[806,23582+64]..[806,23582+65])
                                      ]
                            ]
                            Some
                              expression (typing/typedtree.ml[806,23582+9]..[806,23582+10])
                                Pexp_ident "p" (typing/typedtree.ml[806,23582+9]..[806,23582+10])
                          [
                            <case>
                              pattern (typing/typedtree.ml[808,23661+8]..[808,23661+17])
                                Ppat_construct "Not_found" (typing/typedtree.ml[808,23661+8]..[808,23661+17])
                                None
                              expression (typing/typedtree.ml[808,23661+21]..[808,23661+26])
                                Pexp_ident "new_p" (typing/typedtree.ml[808,23661+21]..[808,23661+26])
                          ]
                    <case>
                      pattern (typing/typedtree.ml[810,23698+4]..[810,23698+5])
                        Ppat_var "d" (typing/typedtree.ml[810,23698+4]..[810,23698+5])
                      expression (typing/typedtree.ml[811,23707+5]..[813,23797+22])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (typing/typedtree.ml[811,23707+9]..[811,23707+17])
                              Ppat_var "pat_desc" (typing/typedtree.ml[811,23707+9]..[811,23707+17])
                            expression (typing/typedtree.ml[812,23727+7]..[812,23727+66])
                              Pexp_apply
                              expression (typing/typedtree.ml[812,23727+7]..[812,23727+31])
                                Pexp_ident "shallow_map_pattern_desc" (typing/typedtree.ml[812,23727+7]..[812,23727+31])
                              [
                                <arg>
                                Nolabel
                                  expression (typing/typedtree.ml[812,23727+32]..[812,23727+64])
                                    Pexp_record
                                    [
                                      "f" (typing/typedtree.ml[812,23727+34]..[812,23727+35])
                                        expression (typing/typedtree.ml[812,23727+38]..[812,23727+62])
                                          Pexp_fun
                                          Nolabel
                                          None
                                          pattern (typing/typedtree.ml[812,23727+42]..[812,23727+43])
                                            Ppat_var "p" (typing/typedtree.ml[812,23727+42]..[812,23727+43])
                                          expression (typing/typedtree.ml[812,23727+47]..[812,23727+62])
                                            Pexp_apply
                                            expression (typing/typedtree.ml[812,23727+47]..[812,23727+56])
                                              Pexp_ident "alpha_pat" (typing/typedtree.ml[812,23727+47]..[812,23727+56])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (typing/typedtree.ml[812,23727+57]..[812,23727+60])
                                                  Pexp_ident "env" (typing/typedtree.ml[812,23727+57]..[812,23727+60])
                                              <arg>
                                              Nolabel
                                                expression (typing/typedtree.ml[812,23727+61]..[812,23727+62])
                                                  Pexp_ident "p" (typing/typedtree.ml[812,23727+61]..[812,23727+62])
                                            ]
                                    ]
                                    None
                                <arg>
                                Nolabel
                                  expression (typing/typedtree.ml[812,23727+65]..[812,23727+66])
                                    Pexp_ident "d" (typing/typedtree.ml[812,23727+65]..[812,23727+66])
                              ]
                        ]
                        expression (typing/typedtree.ml[813,23797+5]..[813,23797+22])
                          Pexp_record
                          [
                            "pat_desc" (typing/typedtree.ml[813,23797+13]..[813,23797+21]) ghost
                              expression (typing/typedtree.ml[813,23797+13]..[813,23797+21])
                                Pexp_ident "pat_desc" (typing/typedtree.ml[813,23797+13]..[813,23797+21])
                          ]
                          Some
                            expression (typing/typedtree.ml[813,23797+6]..[813,23797+7])
                              Pexp_ident "p" (typing/typedtree.ml[813,23797+6]..[813,23797+7])
                  ]
            core_type (typing/typedtree.ml[797,23239+13]..[797,23239+56])
              Ptyp_arrow
              Nolabel
              core_type (typing/typedtree.ml[797,23239+13]..[797,23239+14])
                Ptyp_any
              core_type (typing/typedtree.ml[797,23239+18]..[797,23239+56])
                Ptyp_arrow
                Nolabel
                core_type (typing/typedtree.ml[797,23239+18]..[797,23239+35])
                  Ptyp_constr "general_pattern" (typing/typedtree.ml[797,23239+20]..[797,23239+35])
                  [
                    core_type (typing/typedtree.ml[797,23239+18]..[797,23239+19])
                      Ptyp_constr "k" (typing/typedtree.ml[797,23239+18]..[797,23239+19])
                      []
                  ]
                core_type (typing/typedtree.ml[797,23239+39]..[797,23239+56])
                  Ptyp_constr "general_pattern" (typing/typedtree.ml[797,23239+41]..[797,23239+56])
                  [
                    core_type (typing/typedtree.ml[797,23239+39]..[797,23239+40])
                      Ptyp_constr "k" (typing/typedtree.ml[797,23239+39]..[797,23239+40])
                      []
                  ]
    ]
  structure_item (typing/typedtree.ml[815,23821+0]..[815,23821+26])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/typedtree.ml[815,23821+4]..[815,23821+9])
          Ppat_var "mkloc" (typing/typedtree.ml[815,23821+4]..[815,23821+9])
        expression (typing/typedtree.ml[815,23821+12]..[815,23821+26])
          Pexp_ident "Location.mkloc" (typing/typedtree.ml[815,23821+12]..[815,23821+26])
    ]
  structure_item (typing/typedtree.ml[816,23848+0]..[816,23848+30])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/typedtree.ml[816,23848+4]..[816,23848+11])
          Ppat_var "mknoloc" (typing/typedtree.ml[816,23848+4]..[816,23848+11])
        expression (typing/typedtree.ml[816,23848+14]..[816,23848+30])
          Pexp_ident "Location.mknoloc" (typing/typedtree.ml[816,23848+14]..[816,23848+30])
    ]
  structure_item (typing/typedtree.ml[818,23880+0]..[846,24820+19])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/typedtree.ml[818,23880+4]..[818,23880+17])
          Ppat_var "split_pattern" (typing/typedtree.ml[818,23880+4]..[818,23880+17])
        expression (typing/typedtree.ml[818,23880+18]..[846,24820+19]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (typing/typedtree.ml[818,23880+18]..[818,23880+21])
            Ppat_var "pat" (typing/typedtree.ml[818,23880+18]..[818,23880+21])
          expression (typing/typedtree.ml[819,23904+2]..[846,24820+19])
            Pexp_let Nonrec
            [
              <def>
                pattern (typing/typedtree.ml[819,23904+6]..[819,23904+18])
                  Ppat_var "combine_opts" (typing/typedtree.ml[819,23904+6]..[819,23904+18])
                expression (typing/typedtree.ml[819,23904+19]..[826,24066+26]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (typing/typedtree.ml[819,23904+19]..[819,23904+24])
                    Ppat_var "merge" (typing/typedtree.ml[819,23904+19]..[819,23904+24])
                  expression (typing/typedtree.ml[819,23904+25]..[826,24066+26]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (typing/typedtree.ml[819,23904+25]..[819,23904+27])
                      Ppat_var "p1" (typing/typedtree.ml[819,23904+25]..[819,23904+27])
                    expression (typing/typedtree.ml[819,23904+28]..[826,24066+26]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (typing/typedtree.ml[819,23904+28]..[819,23904+30])
                        Ppat_var "p2" (typing/typedtree.ml[819,23904+28]..[819,23904+30])
                      expression (typing/typedtree.ml[820,23937+4]..[826,24066+26])
                        Pexp_match
                        expression (typing/typedtree.ml[820,23937+10]..[820,23937+16])
                          Pexp_tuple
                          [
                            expression (typing/typedtree.ml[820,23937+10]..[820,23937+12])
                              Pexp_ident "p1" (typing/typedtree.ml[820,23937+10]..[820,23937+12])
                            expression (typing/typedtree.ml[820,23937+14]..[820,23937+16])
                              Pexp_ident "p2" (typing/typedtree.ml[820,23937+14]..[820,23937+16])
                          ]
                        [
                          <case>
                            pattern (typing/typedtree.ml[821,23959+6]..[821,23959+16])
                              Ppat_tuple
                              [
                                pattern (typing/typedtree.ml[821,23959+6]..[821,23959+10])
                                  Ppat_construct "None" (typing/typedtree.ml[821,23959+6]..[821,23959+10])
                                  None
                                pattern (typing/typedtree.ml[821,23959+12]..[821,23959+16])
                                  Ppat_construct "None" (typing/typedtree.ml[821,23959+12]..[821,23959+16])
                                  None
                              ]
                            expression (typing/typedtree.ml[821,23959+20]..[821,23959+24])
                              Pexp_construct "None" (typing/typedtree.ml[821,23959+20]..[821,23959+24])
                              None
                          <case>
                            pattern (typing/typedtree.ml[822,23984+6]..[823,24003+18])
                              Ppat_or
                              pattern (typing/typedtree.ml[822,23984+6]..[822,23984+18])
                                Ppat_tuple
                                [
                                  pattern (typing/typedtree.ml[822,23984+6]..[822,23984+12])
                                    Ppat_construct "Some" (typing/typedtree.ml[822,23984+6]..[822,23984+10])
                                    Some
                                      []
                                      pattern (typing/typedtree.ml[822,23984+11]..[822,23984+12])
                                        Ppat_var "p" (typing/typedtree.ml[822,23984+11]..[822,23984+12])
                                  pattern (typing/typedtree.ml[822,23984+14]..[822,23984+18])
                                    Ppat_construct "None" (typing/typedtree.ml[822,23984+14]..[822,23984+18])
                                    None
                                ]
                              pattern (typing/typedtree.ml[823,24003+6]..[823,24003+18])
                                Ppat_tuple
                                [
                                  pattern (typing/typedtree.ml[823,24003+6]..[823,24003+10])
                                    Ppat_construct "None" (typing/typedtree.ml[823,24003+6]..[823,24003+10])
                                    None
                                  pattern (typing/typedtree.ml[823,24003+12]..[823,24003+18])
                                    Ppat_construct "Some" (typing/typedtree.ml[823,24003+12]..[823,24003+16])
                                    Some
                                      []
                                      pattern (typing/typedtree.ml[823,24003+17]..[823,24003+18])
                                        Ppat_var "p" (typing/typedtree.ml[823,24003+17]..[823,24003+18])
                                ]
                            expression (typing/typedtree.ml[824,24025+8]..[824,24025+14])
                              Pexp_construct "Some" (typing/typedtree.ml[824,24025+8]..[824,24025+12])
                              Some
                                expression (typing/typedtree.ml[824,24025+13]..[824,24025+14])
                                  Pexp_ident "p" (typing/typedtree.ml[824,24025+13]..[824,24025+14])
                          <case>
                            pattern (typing/typedtree.ml[825,24040+6]..[825,24040+22])
                              Ppat_tuple
                              [
                                pattern (typing/typedtree.ml[825,24040+6]..[825,24040+13])
                                  Ppat_construct "Some" (typing/typedtree.ml[825,24040+6]..[825,24040+10])
                                  Some
                                    []
                                    pattern (typing/typedtree.ml[825,24040+11]..[825,24040+13])
                                      Ppat_var "p1" (typing/typedtree.ml[825,24040+11]..[825,24040+13])
                                pattern (typing/typedtree.ml[825,24040+15]..[825,24040+22])
                                  Ppat_construct "Some" (typing/typedtree.ml[825,24040+15]..[825,24040+19])
                                  Some
                                    []
                                    pattern (typing/typedtree.ml[825,24040+20]..[825,24040+22])
                                      Ppat_var "p2" (typing/typedtree.ml[825,24040+20]..[825,24040+22])
                              ]
                            expression (typing/typedtree.ml[826,24066+8]..[826,24066+26])
                              Pexp_construct "Some" (typing/typedtree.ml[826,24066+8]..[826,24066+12])
                              Some
                                expression (typing/typedtree.ml[826,24066+13]..[826,24066+26])
                                  Pexp_apply
                                  expression (typing/typedtree.ml[826,24066+14]..[826,24066+19])
                                    Pexp_ident "merge" (typing/typedtree.ml[826,24066+14]..[826,24066+19])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (typing/typedtree.ml[826,24066+20]..[826,24066+22])
                                        Pexp_ident "p1" (typing/typedtree.ml[826,24066+20]..[826,24066+22])
                                    <arg>
                                    Nolabel
                                      expression (typing/typedtree.ml[826,24066+23]..[826,24066+25])
                                        Pexp_ident "p2" (typing/typedtree.ml[826,24066+23]..[826,24066+25])
                                  ]
                        ]
            ]
            expression (typing/typedtree.ml[828,24098+2]..[846,24820+19])
              Pexp_let Nonrec
              [
                <def>
                  pattern (typing/typedtree.ml[828,24098+6]..[828,24098+10])
                    Ppat_var "into" (typing/typedtree.ml[828,24098+6]..[828,24098+10])
                  expression (typing/typedtree.ml[828,24098+11]..[831,24265+50]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (typing/typedtree.ml[828,24098+11]..[828,24098+14])
                      Ppat_var "pat" (typing/typedtree.ml[828,24098+11]..[828,24098+14])
                    expression (typing/typedtree.ml[828,24098+15]..[831,24265+50]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (typing/typedtree.ml[828,24098+15]..[828,24098+17])
                        Ppat_var "p1" (typing/typedtree.ml[828,24098+15]..[828,24098+17])
                      expression (typing/typedtree.ml[828,24098+18]..[831,24265+50]) ghost
                        Pexp_fun
                        Nolabel
                        None
                        pattern (typing/typedtree.ml[828,24098+18]..[828,24098+20])
                          Ppat_var "p2" (typing/typedtree.ml[828,24098+18]..[828,24098+20])
                        expression (typing/typedtree.ml[831,24265+4]..[831,24265+50])
                          Pexp_record
                          [
                            "pat_desc" (typing/typedtree.ml[831,24265+15]..[831,24265+23])
                              expression (typing/typedtree.ml[831,24265+26]..[831,24265+48])
                                Pexp_construct "Tpat_or" (typing/typedtree.ml[831,24265+26]..[831,24265+33])
                                Some
                                  expression (typing/typedtree.ml[831,24265+34]..[831,24265+48])
                                    Pexp_tuple
                                    [
                                      expression (typing/typedtree.ml[831,24265+35]..[831,24265+37])
                                        Pexp_ident "p1" (typing/typedtree.ml[831,24265+35]..[831,24265+37])
                                      expression (typing/typedtree.ml[831,24265+39]..[831,24265+41])
                                        Pexp_ident "p2" (typing/typedtree.ml[831,24265+39]..[831,24265+41])
                                      expression (typing/typedtree.ml[831,24265+43]..[831,24265+47])
                                        Pexp_construct "None" (typing/typedtree.ml[831,24265+43]..[831,24265+47])
                                        None
                                    ]
                          ]
                          Some
                            expression (typing/typedtree.ml[831,24265+6]..[831,24265+9])
                              Pexp_ident "pat" (typing/typedtree.ml[831,24265+6]..[831,24265+9])
              ]
              expression (typing/typedtree.ml[832,24319+2]..[846,24820+19])
                Pexp_let Rec
                [
                  <def>
                    pattern (typing/typedtree.ml[832,24319+10]..[832,24319+23])
                      Ppat_var "split_pattern" (typing/typedtree.ml[832,24319+10]..[832,24319+23])
                    expression (typing/typedtree.ml[832,24319+24]..[844,24770+44]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (typing/typedtree.ml[832,24319+24]..[832,24319+28])
                        Ppat_var "cpat" (typing/typedtree.ml[832,24319+24]..[832,24319+28])
                      expression (typing/typedtree.ml[833,24350+4]..[844,24770+44])
                        Pexp_match
                        expression (typing/typedtree.ml[833,24350+10]..[833,24350+23])
                          Pexp_field
                          expression (typing/typedtree.ml[833,24350+10]..[833,24350+14])
                            Pexp_ident "cpat" (typing/typedtree.ml[833,24350+10]..[833,24350+14])
                          "pat_desc" (typing/typedtree.ml[833,24350+15]..[833,24350+23])
                        [
                          <case>
                            pattern (typing/typedtree.ml[834,24379+6]..[834,24379+18])
                              Ppat_construct "Tpat_value" (typing/typedtree.ml[834,24379+6]..[834,24379+16])
                              Some
                                []
                                pattern (typing/typedtree.ml[834,24379+17]..[834,24379+18])
                                  Ppat_var "p" (typing/typedtree.ml[834,24379+17]..[834,24379+18])
                            expression (typing/typedtree.ml[835,24401+8]..[835,24401+20])
                              Pexp_tuple
                              [
                                expression (typing/typedtree.ml[835,24401+8]..[835,24401+14])
                                  Pexp_construct "Some" (typing/typedtree.ml[835,24401+8]..[835,24401+12])
                                  Some
                                    expression (typing/typedtree.ml[835,24401+13]..[835,24401+14])
                                      Pexp_ident "p" (typing/typedtree.ml[835,24401+13]..[835,24401+14])
                                expression (typing/typedtree.ml[835,24401+16]..[835,24401+20])
                                  Pexp_construct "None" (typing/typedtree.ml[835,24401+16]..[835,24401+20])
                                  None
                              ]
                          <case>
                            pattern (typing/typedtree.ml[836,24422+6]..[836,24422+22])
                              Ppat_construct "Tpat_exception" (typing/typedtree.ml[836,24422+6]..[836,24422+20])
                              Some
                                []
                                pattern (typing/typedtree.ml[836,24422+21]..[836,24422+22])
                                  Ppat_var "p" (typing/typedtree.ml[836,24422+21]..[836,24422+22])
                            expression (typing/typedtree.ml[837,24448+8]..[837,24448+20])
                              Pexp_tuple
                              [
                                expression (typing/typedtree.ml[837,24448+8]..[837,24448+12])
                                  Pexp_construct "None" (typing/typedtree.ml[837,24448+8]..[837,24448+12])
                                  None
                                expression (typing/typedtree.ml[837,24448+14]..[837,24448+20])
                                  Pexp_construct "Some" (typing/typedtree.ml[837,24448+14]..[837,24448+18])
                                  Some
                                    expression (typing/typedtree.ml[837,24448+19]..[837,24448+20])
                                      Pexp_ident "p" (typing/typedtree.ml[837,24448+19]..[837,24448+20])
                              ]
                          <case>
                            pattern (typing/typedtree.ml[838,24469+6]..[838,24469+27])
                              Ppat_construct "Tpat_or" (typing/typedtree.ml[838,24469+6]..[838,24469+13])
                              Some
                                []
                                pattern (typing/typedtree.ml[838,24469+14]..[838,24469+27])
                                  Ppat_tuple
                                  [
                                    pattern (typing/typedtree.ml[838,24469+15]..[838,24469+18])
                                      Ppat_var "cp1" (typing/typedtree.ml[838,24469+15]..[838,24469+18])
                                    pattern (typing/typedtree.ml[838,24469+20]..[838,24469+23])
                                      Ppat_var "cp2" (typing/typedtree.ml[838,24469+20]..[838,24469+23])
                                    pattern (typing/typedtree.ml[838,24469+25]..[838,24469+26])
                                      Ppat_any
                                  ]
                            expression (typing/typedtree.ml[839,24500+8]..[844,24770+44])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (typing/typedtree.ml[839,24500+12]..[839,24500+24])
                                    Ppat_tuple
                                    [
                                      pattern (typing/typedtree.ml[839,24500+12]..[839,24500+17])
                                        Ppat_var "vals1" (typing/typedtree.ml[839,24500+12]..[839,24500+17])
                                      pattern (typing/typedtree.ml[839,24500+19]..[839,24500+24])
                                        Ppat_var "exns1" (typing/typedtree.ml[839,24500+19]..[839,24500+24])
                                    ]
                                  expression (typing/typedtree.ml[839,24500+27]..[839,24500+44])
                                    Pexp_apply
                                    expression (typing/typedtree.ml[839,24500+27]..[839,24500+40])
                                      Pexp_ident "split_pattern" (typing/typedtree.ml[839,24500+27]..[839,24500+40])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (typing/typedtree.ml[839,24500+41]..[839,24500+44])
                                          Pexp_ident "cp1" (typing/typedtree.ml[839,24500+41]..[839,24500+44])
                                    ]
                              ]
                              expression (typing/typedtree.ml[840,24548+8]..[844,24770+44])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (typing/typedtree.ml[840,24548+12]..[840,24548+24])
                                      Ppat_tuple
                                      [
                                        pattern (typing/typedtree.ml[840,24548+12]..[840,24548+17])
                                          Ppat_var "vals2" (typing/typedtree.ml[840,24548+12]..[840,24548+17])
                                        pattern (typing/typedtree.ml[840,24548+19]..[840,24548+24])
                                          Ppat_var "exns2" (typing/typedtree.ml[840,24548+19]..[840,24548+24])
                                      ]
                                    expression (typing/typedtree.ml[840,24548+27]..[840,24548+44])
                                      Pexp_apply
                                      expression (typing/typedtree.ml[840,24548+27]..[840,24548+40])
                                        Pexp_ident "split_pattern" (typing/typedtree.ml[840,24548+27]..[840,24548+40])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (typing/typedtree.ml[840,24548+41]..[840,24548+44])
                                            Pexp_ident "cp2" (typing/typedtree.ml[840,24548+41]..[840,24548+44])
                                      ]
                                ]
                                expression (typing/typedtree.ml[841,24596+8]..[844,24770+44])
                                  Pexp_tuple
                                  [
                                    expression (typing/typedtree.ml[841,24596+8]..[841,24596+44])
                                      Pexp_apply
                                      expression (typing/typedtree.ml[841,24596+8]..[841,24596+20])
                                        Pexp_ident "combine_opts" (typing/typedtree.ml[841,24596+8]..[841,24596+20])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (typing/typedtree.ml[841,24596+21]..[841,24596+32])
                                            Pexp_apply
                                            expression (typing/typedtree.ml[841,24596+22]..[841,24596+26])
                                              Pexp_ident "into" (typing/typedtree.ml[841,24596+22]..[841,24596+26])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (typing/typedtree.ml[841,24596+27]..[841,24596+31])
                                                  Pexp_ident "cpat" (typing/typedtree.ml[841,24596+27]..[841,24596+31])
                                            ]
                                        <arg>
                                        Nolabel
                                          expression (typing/typedtree.ml[841,24596+33]..[841,24596+38])
                                            Pexp_ident "vals1" (typing/typedtree.ml[841,24596+33]..[841,24596+38])
                                        <arg>
                                        Nolabel
                                          expression (typing/typedtree.ml[841,24596+39]..[841,24596+44])
                                            Pexp_ident "vals2" (typing/typedtree.ml[841,24596+39]..[841,24596+44])
                                      ]
                                    expression (typing/typedtree.ml[844,24770+8]..[844,24770+44])
                                      Pexp_apply
                                      expression (typing/typedtree.ml[844,24770+8]..[844,24770+20])
                                        Pexp_ident "combine_opts" (typing/typedtree.ml[844,24770+8]..[844,24770+20])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (typing/typedtree.ml[844,24770+21]..[844,24770+32])
                                            Pexp_apply
                                            expression (typing/typedtree.ml[844,24770+22]..[844,24770+26])
                                              Pexp_ident "into" (typing/typedtree.ml[844,24770+22]..[844,24770+26])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (typing/typedtree.ml[844,24770+27]..[844,24770+31])
                                                  Pexp_ident "cpat" (typing/typedtree.ml[844,24770+27]..[844,24770+31])
                                            ]
                                        <arg>
                                        Nolabel
                                          expression (typing/typedtree.ml[844,24770+33]..[844,24770+38])
                                            Pexp_ident "exns1" (typing/typedtree.ml[844,24770+33]..[844,24770+38])
                                        <arg>
                                        Nolabel
                                          expression (typing/typedtree.ml[844,24770+39]..[844,24770+44])
                                            Pexp_ident "exns2" (typing/typedtree.ml[844,24770+39]..[844,24770+44])
                                      ]
                                  ]
                        ]
                ]
                expression (typing/typedtree.ml[846,24820+2]..[846,24820+19])
                  Pexp_apply
                  expression (typing/typedtree.ml[846,24820+2]..[846,24820+15])
                    Pexp_ident "split_pattern" (typing/typedtree.ml[846,24820+2]..[846,24820+15])
                  [
                    <arg>
                    Nolabel
                      expression (typing/typedtree.ml[846,24820+16]..[846,24820+19])
                        Pexp_ident "pat" (typing/typedtree.ml[846,24820+16]..[846,24820+19])
                  ]
    ]
]

