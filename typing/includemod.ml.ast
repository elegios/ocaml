[
  structure_item (typing/includemod.ml[18,1127+0]..[18,1127+9])
    Pstr_open Fresh
    module_expr (typing/includemod.ml[18,1127+5]..[18,1127+9])
      Pmod_ident "Misc" (typing/includemod.ml[18,1127+5]..[18,1127+9])
  structure_item (typing/includemod.ml[19,1137+0]..[19,1137+14])
    Pstr_open Fresh
    module_expr (typing/includemod.ml[19,1137+5]..[19,1137+14])
      Pmod_ident "Typedtree" (typing/includemod.ml[19,1137+5]..[19,1137+14])
  structure_item (typing/includemod.ml[20,1152+0]..[20,1152+10])
    Pstr_open Fresh
    module_expr (typing/includemod.ml[20,1152+5]..[20,1152+10])
      Pmod_ident "Types" (typing/includemod.ml[20,1152+5]..[20,1152+10])
  structure_item (typing/includemod.ml[22,1164+0]..[41,2137+34])
    Pstr_type Rec
    [
      type_declaration "symptom" (typing/includemod.ml[22,1164+5]..[22,1164+12]) (typing/includemod.ml[22,1164+0]..[41,2137+34])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (typing/includemod.ml[23,1179+4]..[23,1179+50])
                "Missing_field" (typing/includemod.ml[23,1179+4]..[23,1179+17])
                [
                  core_type (typing/includemod.ml[23,1179+21]..[23,1179+28])
                    Ptyp_constr "Ident.t" (typing/includemod.ml[23,1179+21]..[23,1179+28])
                    []
                  core_type (typing/includemod.ml[23,1179+31]..[23,1179+41])
                    Ptyp_constr "Location.t" (typing/includemod.ml[23,1179+31]..[23,1179+41])
                    []
                  core_type (typing/includemod.ml[23,1179+44]..[23,1179+50])
                    Ptyp_constr "string" (typing/includemod.ml[23,1179+44]..[23,1179+50])
                    []
                ]
                None
              (typing/includemod.ml[24,1241+2]..[25,1315+54])
                "Value_descriptions" (typing/includemod.ml[24,1241+4]..[24,1241+22])
                [
                  core_type (typing/includemod.ml[24,1241+26]..[24,1241+33])
                    Ptyp_constr "Ident.t" (typing/includemod.ml[24,1241+26]..[24,1241+33])
                    []
                  core_type (typing/includemod.ml[24,1241+36]..[24,1241+53])
                    Ptyp_constr "value_description" (typing/includemod.ml[24,1241+36]..[24,1241+53])
                    []
                  core_type (typing/includemod.ml[24,1241+56]..[24,1241+73])
                    Ptyp_constr "value_description" (typing/includemod.ml[24,1241+56]..[24,1241+73])
                    []
                  core_type (typing/includemod.ml[25,1315+28]..[25,1315+54])
                    Ptyp_constr "Includecore.value_mismatch" (typing/includemod.ml[25,1315+28]..[25,1315+54])
                    []
                ]
                None
              (typing/includemod.ml[26,1370+2]..[27,1422+54])
                "Type_declarations" (typing/includemod.ml[26,1370+4]..[26,1370+21])
                [
                  core_type (typing/includemod.ml[26,1370+25]..[26,1370+32])
                    Ptyp_constr "Ident.t" (typing/includemod.ml[26,1370+25]..[26,1370+32])
                    []
                  core_type (typing/includemod.ml[26,1370+35]..[26,1370+51])
                    Ptyp_constr "type_declaration" (typing/includemod.ml[26,1370+35]..[26,1370+51])
                    []
                  core_type (typing/includemod.ml[27,1422+10]..[27,1422+26])
                    Ptyp_constr "type_declaration" (typing/includemod.ml[27,1422+10]..[27,1422+26])
                    []
                  core_type (typing/includemod.ml[27,1422+29]..[27,1422+54])
                    Ptyp_constr "Includecore.type_mismatch" (typing/includemod.ml[27,1422+29]..[27,1422+54])
                    []
                ]
                None
              (typing/includemod.ml[28,1477+2]..[29,1539+76])
                "Extension_constructors" (typing/includemod.ml[28,1477+4]..[28,1477+26])
                [
                  core_type (typing/includemod.ml[28,1477+30]..[28,1477+37])
                    Ptyp_constr "Ident.t" (typing/includemod.ml[28,1477+30]..[28,1477+37])
                    []
                  core_type (typing/includemod.ml[28,1477+40]..[28,1477+61])
                    Ptyp_constr "extension_constructor" (typing/includemod.ml[28,1477+40]..[28,1477+61])
                    []
                  core_type (typing/includemod.ml[29,1539+10]..[29,1539+31])
                    Ptyp_constr "extension_constructor" (typing/includemod.ml[29,1539+10]..[29,1539+31])
                    []
                  core_type (typing/includemod.ml[29,1539+34]..[29,1539+76])
                    Ptyp_constr "Includecore.extension_constructor_mismatch" (typing/includemod.ml[29,1539+34]..[29,1539+76])
                    []
                ]
                None
              (typing/includemod.ml[30,1616+2]..[30,1616+45])
                "Module_types" (typing/includemod.ml[30,1616+4]..[30,1616+16])
                [
                  core_type (typing/includemod.ml[30,1616+20]..[30,1616+31])
                    Ptyp_constr "module_type" (typing/includemod.ml[30,1616+20]..[30,1616+31])
                    []
                  core_type (typing/includemod.ml[30,1616+34]..[30,1616+45])
                    Ptyp_constr "module_type" (typing/includemod.ml[30,1616+34]..[30,1616+45])
                    []
                ]
                None
              (typing/includemod.ml[31,1662+2]..[31,1662+72])
                "Modtype_infos" (typing/includemod.ml[31,1662+4]..[31,1662+17])
                [
                  core_type (typing/includemod.ml[31,1662+21]..[31,1662+28])
                    Ptyp_constr "Ident.t" (typing/includemod.ml[31,1662+21]..[31,1662+28])
                    []
                  core_type (typing/includemod.ml[31,1662+31]..[31,1662+50])
                    Ptyp_constr "modtype_declaration" (typing/includemod.ml[31,1662+31]..[31,1662+50])
                    []
                  core_type (typing/includemod.ml[31,1662+53]..[31,1662+72])
                    Ptyp_constr "modtype_declaration" (typing/includemod.ml[31,1662+53]..[31,1662+72])
                    []
                ]
                None
              (typing/includemod.ml[32,1735+2]..[32,1735+72])
                "Modtype_permutation" (typing/includemod.ml[32,1735+4]..[32,1735+23])
                [
                  core_type (typing/includemod.ml[32,1735+27]..[32,1735+44])
                    Ptyp_constr "Types.module_type" (typing/includemod.ml[32,1735+27]..[32,1735+44])
                    []
                  core_type (typing/includemod.ml[32,1735+47]..[32,1735+72])
                    Ptyp_constr "Typedtree.module_coercion" (typing/includemod.ml[32,1735+47]..[32,1735+72])
                    []
                ]
                None
              (typing/includemod.ml[33,1808+2]..[33,1808+41])
                "Interface_mismatch" (typing/includemod.ml[33,1808+4]..[33,1808+22])
                [
                  core_type (typing/includemod.ml[33,1808+26]..[33,1808+32])
                    Ptyp_constr "string" (typing/includemod.ml[33,1808+26]..[33,1808+32])
                    []
                  core_type (typing/includemod.ml[33,1808+35]..[33,1808+41])
                    Ptyp_constr "string" (typing/includemod.ml[33,1808+35]..[33,1808+41])
                    []
                ]
                None
              (typing/includemod.ml[34,1850+2]..[36,1947+36])
                "Class_type_declarations" (typing/includemod.ml[34,1850+4]..[34,1850+27])
                [
                  core_type (typing/includemod.ml[35,1881+6]..[35,1881+13])
                    Ptyp_constr "Ident.t" (typing/includemod.ml[35,1881+6]..[35,1881+13])
                    []
                  core_type (typing/includemod.ml[35,1881+16]..[35,1881+38])
                    Ptyp_constr "class_type_declaration" (typing/includemod.ml[35,1881+16]..[35,1881+38])
                    []
                  core_type (typing/includemod.ml[35,1881+41]..[35,1881+63])
                    Ptyp_constr "class_type_declaration" (typing/includemod.ml[35,1881+41]..[35,1881+63])
                    []
                  core_type (typing/includemod.ml[36,1947+6]..[36,1947+36])
                    Ptyp_constr "list" (typing/includemod.ml[36,1947+32]..[36,1947+36])
                    [
                      core_type (typing/includemod.ml[36,1947+6]..[36,1947+31])
                        Ptyp_constr "Ctype.class_match_failure" (typing/includemod.ml[36,1947+6]..[36,1947+31])
                        []
                    ]
                ]
                None
              (typing/includemod.ml[37,1984+2]..[39,2066+36])
                "Class_declarations" (typing/includemod.ml[37,1984+4]..[37,1984+22])
                [
                  core_type (typing/includemod.ml[38,2010+6]..[38,2010+13])
                    Ptyp_constr "Ident.t" (typing/includemod.ml[38,2010+6]..[38,2010+13])
                    []
                  core_type (typing/includemod.ml[38,2010+16]..[38,2010+33])
                    Ptyp_constr "class_declaration" (typing/includemod.ml[38,2010+16]..[38,2010+33])
                    []
                  core_type (typing/includemod.ml[38,2010+36]..[38,2010+53])
                    Ptyp_constr "class_declaration" (typing/includemod.ml[38,2010+36]..[38,2010+53])
                    []
                  core_type (typing/includemod.ml[39,2066+6]..[39,2066+36])
                    Ptyp_constr "list" (typing/includemod.ml[39,2066+32]..[39,2066+36])
                    [
                      core_type (typing/includemod.ml[39,2066+6]..[39,2066+31])
                        Ptyp_constr "Ctype.class_match_failure" (typing/includemod.ml[39,2066+6]..[39,2066+31])
                        []
                    ]
                ]
                None
              (typing/includemod.ml[40,2103+2]..[40,2103+33])
                "Unbound_module_path" (typing/includemod.ml[40,2103+4]..[40,2103+23])
                [
                  core_type (typing/includemod.ml[40,2103+27]..[40,2103+33])
                    Ptyp_constr "Path.t" (typing/includemod.ml[40,2103+27]..[40,2103+33])
                    []
                ]
                None
              (typing/includemod.ml[41,2137+2]..[41,2137+34])
                "Invalid_module_alias" (typing/includemod.ml[41,2137+4]..[41,2137+24])
                [
                  core_type (typing/includemod.ml[41,2137+28]..[41,2137+34])
                    Ptyp_constr "Path.t" (typing/includemod.ml[41,2137+28]..[41,2137+34])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (typing/includemod.ml[43,2173+0]..[47,2258+29])
    Pstr_type Rec
    [
      type_declaration "pos" (typing/includemod.ml[43,2173+5]..[43,2173+8]) (typing/includemod.ml[43,2173+0]..[47,2258+29])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (typing/includemod.ml[44,2184+2]..[44,2184+21])
                "Module" (typing/includemod.ml[44,2184+4]..[44,2184+10])
                [
                  core_type (typing/includemod.ml[44,2184+14]..[44,2184+21])
                    Ptyp_constr "Ident.t" (typing/includemod.ml[44,2184+14]..[44,2184+21])
                    []
                ]
                None
              (typing/includemod.ml[45,2206+2]..[45,2206+22])
                "Modtype" (typing/includemod.ml[45,2206+4]..[45,2206+11])
                [
                  core_type (typing/includemod.ml[45,2206+15]..[45,2206+22])
                    Ptyp_constr "Ident.t" (typing/includemod.ml[45,2206+15]..[45,2206+22])
                    []
                ]
                None
              (typing/includemod.ml[46,2229+2]..[46,2229+28])
                "Arg" (typing/includemod.ml[46,2229+4]..[46,2229+7])
                [
                  core_type (typing/includemod.ml[46,2229+11]..[46,2229+28])
                    Ptyp_constr "functor_parameter" (typing/includemod.ml[46,2229+11]..[46,2229+28])
                    []
                ]
                None
              (typing/includemod.ml[47,2258+2]..[47,2258+29])
                "Body" (typing/includemod.ml[47,2258+4]..[47,2258+8])
                [
                  core_type (typing/includemod.ml[47,2258+12]..[47,2258+29])
                    Ptyp_constr "functor_parameter" (typing/includemod.ml[47,2258+12]..[47,2258+29])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (typing/includemod.ml[50,2290+0]..[131,4959+3])
    Pstr_module
    "Error" (typing/includemod.ml[50,2290+7]..[50,2290+12])
      module_expr (typing/includemod.ml[50,2290+15]..[131,4959+3])
        Pmod_structure
        [
          structure_item (typing/includemod.ml[52,2313+2]..[55,2378+10])
            Pstr_type Rec
            [
              type_declaration "functor_arg_descr" (typing/includemod.ml[52,2313+7]..[52,2313+24]) (typing/includemod.ml[52,2313+2]..[55,2378+10])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_variant
                    [
                      (typing/includemod.ml[53,2340+4]..[53,2340+15])
                        "Anonymous" (typing/includemod.ml[53,2340+6]..[53,2340+15])
                        []
                        None
                      (typing/includemod.ml[54,2356+4]..[54,2356+21])
                        "Named" (typing/includemod.ml[54,2356+6]..[54,2356+11])
                        [
                          core_type (typing/includemod.ml[54,2356+15]..[54,2356+21])
                            Ptyp_constr "Path.t" (typing/includemod.ml[54,2356+15]..[54,2356+21])
                            []
                        ]
                        None
                      (typing/includemod.ml[55,2378+4]..[55,2378+10])
                        "Unit" (typing/includemod.ml[55,2378+6]..[55,2378+10])
                        []
                        None
                    ]
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          structure_item (typing/includemod.ml[57,2390+2]..[57,2390+55])
            Pstr_type Rec
            [
              type_declaration "diff" (typing/includemod.ml[57,2390+15]..[57,2390+19]) (typing/includemod.ml[57,2390+2]..[57,2390+55])
                ptype_params =
                  [
                    core_type (typing/includemod.ml[57,2390+8]..[57,2390+10])
                      Ptyp_var a
                    core_type (typing/includemod.ml[57,2390+11]..[57,2390+13])
                      Ptyp_var b
                  ]
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_record
                    [
                      (typing/includemod.ml[57,2390+23]..[57,2390+30])
                        Immutable
                        "got" (typing/includemod.ml[57,2390+23]..[57,2390+26])                        core_type (typing/includemod.ml[57,2390+27]..[57,2390+29])
                          Ptyp_var a
                      (typing/includemod.ml[57,2390+31]..[57,2390+43])
                        Immutable
                        "expected" (typing/includemod.ml[57,2390+31]..[57,2390+39])                        core_type (typing/includemod.ml[57,2390+40]..[57,2390+42])
                          Ptyp_var a
                      (typing/includemod.ml[57,2390+44]..[57,2390+54])
                        Immutable
                        "symptom" (typing/includemod.ml[57,2390+44]..[57,2390+51])                        core_type (typing/includemod.ml[57,2390+52]..[57,2390+54])
                          Ptyp_var b
                    ]
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          structure_item (typing/includemod.ml[58,2446+2]..[58,2446+35])
            Pstr_type Rec
            [
              type_declaration "core_diff" (typing/includemod.ml[58,2446+10]..[58,2446+19]) (typing/includemod.ml[58,2446+2]..[58,2446+35])
                ptype_params =
                  [
                    core_type (typing/includemod.ml[58,2446+7]..[58,2446+9])
                      Ptyp_var a
                  ]
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  Some
                    core_type (typing/includemod.ml[58,2446+21]..[58,2446+35])
                      Ptyp_constr "diff" (typing/includemod.ml[58,2446+31]..[58,2446+35])
                      [
                        core_type (typing/includemod.ml[58,2446+22]..[58,2446+24])
                          Ptyp_var a
                        core_type (typing/includemod.ml[58,2446+25]..[58,2446+29])
                          Ptyp_constr "unit" (typing/includemod.ml[58,2446+25]..[58,2446+29])
                          []
                      ]
            ]
          structure_item (typing/includemod.ml[59,2482+2]..[59,2482+48])
            Pstr_value Nonrec
            [
              <def>
                pattern (typing/includemod.ml[59,2482+6]..[59,2482+10])
                  Ppat_var "diff" (typing/includemod.ml[59,2482+6]..[59,2482+10])
                expression (typing/includemod.ml[59,2482+11]..[59,2482+48]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (typing/includemod.ml[59,2482+11]..[59,2482+12])
                    Ppat_var "x" (typing/includemod.ml[59,2482+11]..[59,2482+12])
                  expression (typing/includemod.ml[59,2482+13]..[59,2482+48]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (typing/includemod.ml[59,2482+13]..[59,2482+14])
                      Ppat_var "y" (typing/includemod.ml[59,2482+13]..[59,2482+14])
                    expression (typing/includemod.ml[59,2482+15]..[59,2482+48]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (typing/includemod.ml[59,2482+15]..[59,2482+16])
                        Ppat_var "s" (typing/includemod.ml[59,2482+15]..[59,2482+16])
                      expression (typing/includemod.ml[59,2482+19]..[59,2482+48])
                        Pexp_record
                        [
                          "got" (typing/includemod.ml[59,2482+20]..[59,2482+23])
                            expression (typing/includemod.ml[59,2482+24]..[59,2482+25])
                              Pexp_ident "x" (typing/includemod.ml[59,2482+24]..[59,2482+25])
                          "expected" (typing/includemod.ml[59,2482+26]..[59,2482+34])
                            expression (typing/includemod.ml[59,2482+35]..[59,2482+36])
                              Pexp_ident "y" (typing/includemod.ml[59,2482+35]..[59,2482+36])
                          "symptom" (typing/includemod.ml[59,2482+38]..[59,2482+45])
                            expression (typing/includemod.ml[59,2482+46]..[59,2482+47])
                              Pexp_ident "s" (typing/includemod.ml[59,2482+46]..[59,2482+47])
                        ]
                        None
            ]
          structure_item (typing/includemod.ml[60,2531+2]..[60,2531+49])
            Pstr_value Nonrec
            [
              <def>
                pattern (typing/includemod.ml[60,2531+6]..[60,2531+11])
                  Ppat_var "sdiff" (typing/includemod.ml[60,2531+6]..[60,2531+11])
                expression (typing/includemod.ml[60,2531+12]..[60,2531+49]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (typing/includemod.ml[60,2531+12]..[60,2531+13])
                    Ppat_var "x" (typing/includemod.ml[60,2531+12]..[60,2531+13])
                  expression (typing/includemod.ml[60,2531+14]..[60,2531+49]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (typing/includemod.ml[60,2531+14]..[60,2531+15])
                      Ppat_var "y" (typing/includemod.ml[60,2531+14]..[60,2531+15])
                    expression (typing/includemod.ml[60,2531+18]..[60,2531+49])
                      Pexp_record
                      [
                        "got" (typing/includemod.ml[60,2531+19]..[60,2531+22])
                          expression (typing/includemod.ml[60,2531+23]..[60,2531+24])
                            Pexp_ident "x" (typing/includemod.ml[60,2531+23]..[60,2531+24])
                        "expected" (typing/includemod.ml[60,2531+26]..[60,2531+34])
                          expression (typing/includemod.ml[60,2531+35]..[60,2531+36])
                            Pexp_ident "y" (typing/includemod.ml[60,2531+35]..[60,2531+36])
                        "symptom" (typing/includemod.ml[60,2531+38]..[60,2531+45])
                          expression (typing/includemod.ml[60,2531+46]..[60,2531+48])
                            Pexp_construct "()" (typing/includemod.ml[60,2531+46]..[60,2531+48])
                            None
                      ]
                      None
            ]
          structure_item (typing/includemod.ml[62,2582+2]..[70,3015+64])
            Pstr_type Rec
            [
              type_declaration "core_sigitem_symptom" (typing/includemod.ml[62,2582+7]..[62,2582+27]) (typing/includemod.ml[62,2582+2]..[70,3015+64])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_variant
                    [
                      (typing/includemod.ml[63,2612+4]..[63,2612+80])
                        "Value_descriptions" (typing/includemod.ml[63,2612+6]..[63,2612+24])
                        [
                          core_type (typing/includemod.ml[63,2612+28]..[63,2612+80])
                            Ptyp_constr "diff" (typing/includemod.ml[63,2612+76]..[63,2612+80])
                            [
                              core_type (typing/includemod.ml[63,2612+29]..[63,2612+46])
                                Ptyp_constr "value_description" (typing/includemod.ml[63,2612+29]..[63,2612+46])
                                []
                              core_type (typing/includemod.ml[63,2612+48]..[63,2612+74])
                                Ptyp_constr "Includecore.value_mismatch" (typing/includemod.ml[63,2612+48]..[63,2612+74])
                                []
                            ]
                        ]
                        None
                      (typing/includemod.ml[64,2693+4]..[64,2693+77])
                        "Type_declarations" (typing/includemod.ml[64,2693+6]..[64,2693+23])
                        [
                          core_type (typing/includemod.ml[64,2693+27]..[64,2693+77])
                            Ptyp_constr "diff" (typing/includemod.ml[64,2693+73]..[64,2693+77])
                            [
                              core_type (typing/includemod.ml[64,2693+28]..[64,2693+44])
                                Ptyp_constr "type_declaration" (typing/includemod.ml[64,2693+28]..[64,2693+44])
                                []
                              core_type (typing/includemod.ml[64,2693+46]..[64,2693+71])
                                Ptyp_constr "Includecore.type_mismatch" (typing/includemod.ml[64,2693+46]..[64,2693+71])
                                []
                            ]
                        ]
                        None
                      (typing/includemod.ml[65,2771+4]..[66,2803+80])
                        "Extension_constructors" (typing/includemod.ml[65,2771+6]..[65,2771+28])
                        [
                          core_type (typing/includemod.ml[66,2803+8]..[66,2803+80])
                            Ptyp_constr "diff" (typing/includemod.ml[66,2803+76]..[66,2803+80])
                            [
                              core_type (typing/includemod.ml[66,2803+9]..[66,2803+30])
                                Ptyp_constr "extension_constructor" (typing/includemod.ml[66,2803+9]..[66,2803+30])
                                []
                              core_type (typing/includemod.ml[66,2803+32]..[66,2803+74])
                                Ptyp_constr "Includecore.extension_constructor_mismatch" (typing/includemod.ml[66,2803+32]..[66,2803+74])
                                []
                            ]
                        ]
                        None
                      (typing/includemod.ml[67,2884+4]..[68,2917+69])
                        "Class_type_declarations" (typing/includemod.ml[67,2884+6]..[67,2884+29])
                        [
                          core_type (typing/includemod.ml[68,2917+8]..[68,2917+69])
                            Ptyp_constr "diff" (typing/includemod.ml[68,2917+65]..[68,2917+69])
                            [
                              core_type (typing/includemod.ml[68,2917+9]..[68,2917+31])
                                Ptyp_constr "class_type_declaration" (typing/includemod.ml[68,2917+9]..[68,2917+31])
                                []
                              core_type (typing/includemod.ml[68,2917+33]..[68,2917+63])
                                Ptyp_constr "list" (typing/includemod.ml[68,2917+59]..[68,2917+63])
                                [
                                  core_type (typing/includemod.ml[68,2917+33]..[68,2917+58])
                                    Ptyp_constr "Ctype.class_match_failure" (typing/includemod.ml[68,2917+33]..[68,2917+58])
                                    []
                                ]
                            ]
                        ]
                        None
                      (typing/includemod.ml[69,2987+4]..[70,3015+64])
                        "Class_declarations" (typing/includemod.ml[69,2987+6]..[69,2987+24])
                        [
                          core_type (typing/includemod.ml[70,3015+8]..[70,3015+64])
                            Ptyp_constr "diff" (typing/includemod.ml[70,3015+60]..[70,3015+64])
                            [
                              core_type (typing/includemod.ml[70,3015+9]..[70,3015+26])
                                Ptyp_constr "class_declaration" (typing/includemod.ml[70,3015+9]..[70,3015+26])
                                []
                              core_type (typing/includemod.ml[70,3015+28]..[70,3015+58])
                                Ptyp_constr "list" (typing/includemod.ml[70,3015+54]..[70,3015+58])
                                [
                                  core_type (typing/includemod.ml[70,3015+28]..[70,3015+53])
                                    Ptyp_constr "Ctype.class_match_failure" (typing/includemod.ml[70,3015+28]..[70,3015+53])
                                    []
                                ]
                            ]
                        ]
                        None
                    ]
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          structure_item (typing/includemod.ml[72,3081+2]..[77,3212+35])
            Pstr_type Rec
            [
              type_declaration "core_module_type_symptom" (typing/includemod.ml[72,3081+7]..[72,3081+31]) (typing/includemod.ml[72,3081+2]..[77,3212+35])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_variant
                    [
                      (typing/includemod.ml[73,3115+4]..[73,3115+18])
                        "Not_an_alias" (typing/includemod.ml[73,3115+6]..[73,3115+18])
                        []
                        None
                      (typing/includemod.ml[74,3134+4]..[74,3134+23])
                        "Not_an_identifier" (typing/includemod.ml[74,3134+6]..[74,3134+23])
                        []
                        None
                      (typing/includemod.ml[75,3158+4]..[75,3158+26])
                        "Incompatible_aliases" (typing/includemod.ml[75,3158+6]..[75,3158+26])
                        []
                        None
                      (typing/includemod.ml[76,3185+4]..[76,3185+26])
                        "Abstract_module_type" (typing/includemod.ml[76,3185+6]..[76,3185+26])
                        []
                        None
                      (typing/includemod.ml[77,3212+4]..[77,3212+35])
                        "Unbound_module_path" (typing/includemod.ml[77,3212+6]..[77,3212+25])
                        [
                          core_type (typing/includemod.ml[77,3212+29]..[77,3212+35])
                            Ptyp_constr "Path.t" (typing/includemod.ml[77,3212+29]..[77,3212+35])
                            []
                        ]
                        None
                    ]
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          structure_item (typing/includemod.ml[79,3249+2]..[119,4512+68])
            Pstr_type Rec
            [
              type_declaration "module_type_symptom" (typing/includemod.ml[79,3249+7]..[79,3249+26]) (typing/includemod.ml[79,3249+2]..[84,3427+47])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_variant
                    [
                      (typing/includemod.ml[80,3278+4]..[80,3278+41])
                        "Mt_core" (typing/includemod.ml[80,3278+6]..[80,3278+13])
                        [
                          core_type (typing/includemod.ml[80,3278+17]..[80,3278+41])
                            Ptyp_constr "core_module_type_symptom" (typing/includemod.ml[80,3278+17]..[80,3278+41])
                            []
                        ]
                        None
                      (typing/includemod.ml[81,3320+4]..[81,3320+36])
                        "Signature" (typing/includemod.ml[81,3320+6]..[81,3320+15])
                        [
                          core_type (typing/includemod.ml[81,3320+19]..[81,3320+36])
                            Ptyp_constr "signature_symptom" (typing/includemod.ml[81,3320+19]..[81,3320+36])
                            []
                        ]
                        None
                      (typing/includemod.ml[82,3357+4]..[82,3357+32])
                        "Functor" (typing/includemod.ml[82,3357+6]..[82,3357+13])
                        [
                          core_type (typing/includemod.ml[82,3357+17]..[82,3357+32])
                            Ptyp_constr "functor_symptom" (typing/includemod.ml[82,3357+17]..[82,3357+32])
                            []
                        ]
                        None
                      (typing/includemod.ml[83,3390+4]..[83,3390+36])
                        "Invalid_module_alias" (typing/includemod.ml[83,3390+6]..[83,3390+26])
                        [
                          core_type (typing/includemod.ml[83,3390+30]..[83,3390+36])
                            Ptyp_constr "Path.t" (typing/includemod.ml[83,3390+30]..[83,3390+36])
                            []
                        ]
                        None
                      (typing/includemod.ml[84,3427+4]..[84,3427+47])
                        "After_alias_expansion" (typing/includemod.ml[84,3427+6]..[84,3427+27])
                        [
                          core_type (typing/includemod.ml[84,3427+31]..[84,3427+47])
                            Ptyp_constr "module_type_diff" (typing/includemod.ml[84,3427+31]..[84,3427+47])
                            []
                        ]
                        None
                    ]
                ptype_private = Public
                ptype_manifest =
                  None
              type_declaration "module_type_diff" (typing/includemod.ml[87,3477+6]..[87,3477+22]) (typing/includemod.ml[87,3477+2]..[87,3477+64])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  Some
                    core_type (typing/includemod.ml[87,3477+25]..[87,3477+64])
                      Ptyp_constr "diff" (typing/includemod.ml[87,3477+60]..[87,3477+64])
                      [
                        core_type (typing/includemod.ml[87,3477+26]..[87,3477+37])
                          Ptyp_constr "module_type" (typing/includemod.ml[87,3477+26]..[87,3477+37])
                          []
                        core_type (typing/includemod.ml[87,3477+39]..[87,3477+58])
                          Ptyp_constr "module_type_symptom" (typing/includemod.ml[87,3477+39]..[87,3477+58])
                          []
                      ]
              type_declaration "functor_symptom" (typing/includemod.ml[89,3543+6]..[89,3543+21]) (typing/includemod.ml[89,3543+2]..[91,3603+32])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_variant
                    [
                      (typing/includemod.ml[90,3567+4]..[90,3567+35])
                        "Params" (typing/includemod.ml[90,3567+6]..[90,3567+12])
                        [
                          core_type (typing/includemod.ml[90,3567+16]..[90,3567+35])
                            Ptyp_constr "functor_params_diff" (typing/includemod.ml[90,3567+16]..[90,3567+35])
                            []
                        ]
                        None
                      (typing/includemod.ml[91,3603+4]..[91,3603+32])
                        "Result" (typing/includemod.ml[91,3603+6]..[91,3603+12])
                        [
                          core_type (typing/includemod.ml[91,3603+16]..[91,3603+32])
                            Ptyp_constr "module_type_diff" (typing/includemod.ml[91,3603+16]..[91,3603+32])
                            []
                        ]
                        None
                    ]
                ptype_private = Public
                ptype_manifest =
                  None
              type_declaration "functor_param_symptom" (typing/includemod.ml[93,3637+19]..[93,3637+40]) (typing/includemod.ml[93,3637+2]..[95,3734+34])
                ptype_params =
                  [
                    core_type (typing/includemod.ml[93,3637+7]..[93,3637+11])
                      Ptyp_var arg
                    core_type (typing/includemod.ml[93,3637+12]..[93,3637+17])
                      Ptyp_var path
                  ]
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_variant
                    [
                      (typing/includemod.ml[94,3680+4]..[94,3680+53])
                        "Incompatible_params" (typing/includemod.ml[94,3680+6]..[94,3680+25])
                        [
                          core_type (typing/includemod.ml[94,3680+29]..[94,3680+33])
                            Ptyp_var arg
                          core_type (typing/includemod.ml[94,3680+36]..[94,3680+53])
                            Ptyp_constr "functor_parameter" (typing/includemod.ml[94,3680+36]..[94,3680+53])
                            []
                        ]
                        None
                      (typing/includemod.ml[95,3734+4]..[95,3734+34])
                        "Mismatch" (typing/includemod.ml[95,3734+6]..[95,3734+14])
                        [
                          core_type (typing/includemod.ml[95,3734+18]..[95,3734+34])
                            Ptyp_constr "module_type_diff" (typing/includemod.ml[95,3734+18]..[95,3734+34])
                            []
                        ]
                        None
                    ]
                ptype_private = Public
                ptype_manifest =
                  None
              type_declaration "arg_functor_param_symptom" (typing/includemod.ml[97,3770+6]..[97,3770+31]) (typing/includemod.ml[97,3770+2]..[98,3804+54])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  Some
                    core_type (typing/includemod.ml[98,3804+4]..[98,3804+54])
                      Ptyp_constr "functor_param_symptom" (typing/includemod.ml[98,3804+33]..[98,3804+54])
                      [
                        core_type (typing/includemod.ml[98,3804+5]..[98,3804+22])
                          Ptyp_constr "functor_parameter" (typing/includemod.ml[98,3804+5]..[98,3804+22])
                          []
                        core_type (typing/includemod.ml[98,3804+24]..[98,3804+31])
                          Ptyp_constr "Ident.t" (typing/includemod.ml[98,3804+24]..[98,3804+31])
                          []
                      ]
              type_declaration "functor_params_diff" (typing/includemod.ml[100,3860+6]..[100,3860+25]) (typing/includemod.ml[100,3860+2]..[100,3860+76])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  Some
                    core_type (typing/includemod.ml[100,3860+28]..[100,3860+76])
                      Ptyp_constr "core_diff" (typing/includemod.ml[100,3860+67]..[100,3860+76])
                      [
                        core_type (typing/includemod.ml[100,3860+29]..[100,3860+65])
                          Ptyp_tuple
                          [
                            core_type (typing/includemod.ml[100,3860+29]..[100,3860+51])
                              Ptyp_constr "list" (typing/includemod.ml[100,3860+47]..[100,3860+51])
                              [
                                core_type (typing/includemod.ml[100,3860+29]..[100,3860+46])
                                  Ptyp_constr "functor_parameter" (typing/includemod.ml[100,3860+29]..[100,3860+46])
                                  []
                              ]
                            core_type (typing/includemod.ml[100,3860+54]..[100,3860+65])
                              Ptyp_constr "module_type" (typing/includemod.ml[100,3860+54]..[100,3860+65])
                              []
                          ]
                      ]
              type_declaration "signature_symptom" (typing/includemod.ml[102,3938+6]..[102,3938+23]) (typing/includemod.ml[102,3938+2]..[107,4109+3])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_record
                    [
                      (typing/includemod.ml[103,3966+4]..[103,3966+15])
                        Immutable
                        "env" (typing/includemod.ml[103,3966+4]..[103,3966+7])                        core_type (typing/includemod.ml[103,3966+9]..[103,3966+14])
                          Ptyp_constr "Env.t" (typing/includemod.ml[103,3966+9]..[103,3966+14])
                          []
                      (typing/includemod.ml[104,3982+4]..[104,3982+34])
                        Immutable
                        "missings" (typing/includemod.ml[104,3982+4]..[104,3982+12])                        core_type (typing/includemod.ml[104,3982+14]..[104,3982+33])
                          Ptyp_constr "list" (typing/includemod.ml[104,3982+29]..[104,3982+33])
                          [
                            core_type (typing/includemod.ml[104,3982+14]..[104,3982+28])
                              Ptyp_constr "signature_item" (typing/includemod.ml[104,3982+14]..[104,3982+28])
                              []
                          ]
                      (typing/includemod.ml[105,4017+4]..[105,4017+52])
                        Immutable
                        "incompatibles" (typing/includemod.ml[105,4017+4]..[105,4017+17])                        core_type (typing/includemod.ml[105,4017+19]..[105,4017+51])
                          Ptyp_constr "list" (typing/includemod.ml[105,4017+47]..[105,4017+51])
                          [
                            core_type (typing/includemod.ml[105,4017+20]..[105,4017+45])
                              Ptyp_tuple
                              [
                                core_type (typing/includemod.ml[105,4017+20]..[105,4017+27])
                                  Ptyp_constr "Ident.t" (typing/includemod.ml[105,4017+20]..[105,4017+27])
                                  []
                                core_type (typing/includemod.ml[105,4017+30]..[105,4017+45])
                                  Ptyp_constr "sigitem_symptom" (typing/includemod.ml[105,4017+30]..[105,4017+45])
                                  []
                              ]
                          ]
                      (typing/includemod.ml[106,4070+4]..[106,4070+38])
                        Immutable
                        "oks" (typing/includemod.ml[106,4070+4]..[106,4070+7])                        core_type (typing/includemod.ml[106,4070+9]..[106,4070+37])
                          Ptyp_constr "list" (typing/includemod.ml[106,4070+33]..[106,4070+37])
                          [
                            core_type (typing/includemod.ml[106,4070+10]..[106,4070+31])
                              Ptyp_tuple
                              [
                                core_type (typing/includemod.ml[106,4070+10]..[106,4070+13])
                                  Ptyp_constr "int" (typing/includemod.ml[106,4070+10]..[106,4070+13])
                                  []
                                core_type (typing/includemod.ml[106,4070+16]..[106,4070+31])
                                  Ptyp_constr "module_coercion" (typing/includemod.ml[106,4070+16]..[106,4070+31])
                                  []
                              ]
                          ]
                    ]
                ptype_private = Public
                ptype_manifest =
                  None
              type_declaration "sigitem_symptom" (typing/includemod.ml[108,4113+6]..[108,4113+21]) (typing/includemod.ml[108,4113+2]..[112,4273+37])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_variant
                    [
                      (typing/includemod.ml[109,4137+4]..[109,4137+34])
                        "Core" (typing/includemod.ml[109,4137+6]..[109,4137+10])
                        [
                          core_type (typing/includemod.ml[109,4137+14]..[109,4137+34])
                            Ptyp_constr "core_sigitem_symptom" (typing/includemod.ml[109,4137+14]..[109,4137+34])
                            []
                        ]
                        None
                      (typing/includemod.ml[110,4172+4]..[111,4205+67])
                        "Module_type_declaration" (typing/includemod.ml[110,4172+6]..[110,4172+29])
                        [
                          core_type (typing/includemod.ml[111,4205+8]..[111,4205+67])
                            Ptyp_constr "diff" (typing/includemod.ml[111,4205+63]..[111,4205+67])
                            [
                              core_type (typing/includemod.ml[111,4205+9]..[111,4205+28])
                                Ptyp_constr "modtype_declaration" (typing/includemod.ml[111,4205+9]..[111,4205+28])
                                []
                              core_type (typing/includemod.ml[111,4205+30]..[111,4205+61])
                                Ptyp_constr "module_type_declaration_symptom" (typing/includemod.ml[111,4205+30]..[111,4205+61])
                                []
                            ]
                        ]
                        None
                      (typing/includemod.ml[112,4273+4]..[112,4273+37])
                        "Module_type" (typing/includemod.ml[112,4273+6]..[112,4273+17])
                        [
                          core_type (typing/includemod.ml[112,4273+21]..[112,4273+37])
                            Ptyp_constr "module_type_diff" (typing/includemod.ml[112,4273+21]..[112,4273+37])
                            []
                        ]
                        None
                    ]
                ptype_private = Public
                ptype_manifest =
                  None
              type_declaration "module_type_declaration_symptom" (typing/includemod.ml[114,4312+6]..[114,4312+37]) (typing/includemod.ml[114,4312+2]..[119,4512+68])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_variant
                    [
                      (typing/includemod.ml[115,4352+4]..[115,4352+54])
                        "Illegal_permutation" (typing/includemod.ml[115,4352+6]..[115,4352+25])
                        [
                          core_type (typing/includemod.ml[115,4352+29]..[115,4352+54])
                            Ptyp_constr "Typedtree.module_coercion" (typing/includemod.ml[115,4352+29]..[115,4352+54])
                            []
                        ]
                        None
                      (typing/includemod.ml[116,4407+4]..[116,4407+42])
                        "Not_greater_than" (typing/includemod.ml[116,4407+6]..[116,4407+22])
                        [
                          core_type (typing/includemod.ml[116,4407+26]..[116,4407+42])
                            Ptyp_constr "module_type_diff" (typing/includemod.ml[116,4407+26]..[116,4407+42])
                            []
                        ]
                        None
                      (typing/includemod.ml[117,4450+4]..[117,4450+39])
                        "Not_less_than" (typing/includemod.ml[117,4450+6]..[117,4450+19])
                        [
                          core_type (typing/includemod.ml[117,4450+23]..[117,4450+39])
                            Ptyp_constr "module_type_diff" (typing/includemod.ml[117,4450+23]..[117,4450+39])
                            []
                        ]
                        None
                      (typing/includemod.ml[118,4490+4]..[119,4512+68])
                        "Incomparable" (typing/includemod.ml[118,4490+6]..[118,4490+18])
                        [
                          (typing/includemod.ml[119,4512+9]..[119,4512+36])
                            Immutable
                            "less_than" (typing/includemod.ml[119,4512+9]..[119,4512+18])                            core_type (typing/includemod.ml[119,4512+19]..[119,4512+35])
                              Ptyp_constr "module_type_diff" (typing/includemod.ml[119,4512+19]..[119,4512+35])
                              []
                          (typing/includemod.ml[119,4512+37]..[119,4512+67])
                            Immutable
                            "greater_than" (typing/includemod.ml[119,4512+37]..[119,4512+49])                            core_type (typing/includemod.ml[119,4512+51]..[119,4512+67])
                              Ptyp_constr "module_type_diff" (typing/includemod.ml[119,4512+51]..[119,4512+67])
                              []
                        ]
                        None
                    ]
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          structure_item (typing/includemod.ml[122,4583+2]..[129,4911+46])
            Pstr_type Rec
            [
              type_declaration "all" (typing/includemod.ml[122,4583+7]..[122,4583+10]) (typing/includemod.ml[122,4583+2]..[129,4911+46])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_variant
                    [
                      (typing/includemod.ml[123,4596+4]..[123,4596+61])
                        "In_Compilation_unit" (typing/includemod.ml[123,4596+6]..[123,4596+25])
                        [
                          core_type (typing/includemod.ml[123,4596+29]..[123,4596+61])
                            Ptyp_constr "diff" (typing/includemod.ml[123,4596+57]..[123,4596+61])
                            [
                              core_type (typing/includemod.ml[123,4596+30]..[123,4596+36])
                                Ptyp_constr "string" (typing/includemod.ml[123,4596+30]..[123,4596+36])
                                []
                              core_type (typing/includemod.ml[123,4596+38]..[123,4596+55])
                                Ptyp_constr "signature_symptom" (typing/includemod.ml[123,4596+38]..[123,4596+55])
                                []
                            ]
                        ]
                        None
                      (typing/includemod.ml[124,4658+4]..[124,4658+39])
                        "In_Signature" (typing/includemod.ml[124,4658+6]..[124,4658+18])
                        [
                          core_type (typing/includemod.ml[124,4658+22]..[124,4658+39])
                            Ptyp_constr "signature_symptom" (typing/includemod.ml[124,4658+22]..[124,4658+39])
                            []
                        ]
                        None
                      (typing/includemod.ml[125,4698+4]..[125,4698+40])
                        "In_Module_type" (typing/includemod.ml[125,4698+6]..[125,4698+20])
                        [
                          core_type (typing/includemod.ml[125,4698+24]..[125,4698+40])
                            Ptyp_constr "module_type_diff" (typing/includemod.ml[125,4698+24]..[125,4698+40])
                            []
                        ]
                        None
                      (typing/includemod.ml[126,4739+4]..[127,4776+74])
                        "In_Module_type_substitution" (typing/includemod.ml[126,4739+6]..[126,4739+33])
                        [
                          core_type (typing/includemod.ml[127,4776+8]..[127,4776+15])
                            Ptyp_constr "Ident.t" (typing/includemod.ml[127,4776+8]..[127,4776+15])
                            []
                          core_type (typing/includemod.ml[127,4776+18]..[127,4776+74])
                            Ptyp_constr "diff" (typing/includemod.ml[127,4776+70]..[127,4776+74])
                            [
                              core_type (typing/includemod.ml[127,4776+19]..[127,4776+36])
                                Ptyp_constr "Types.module_type" (typing/includemod.ml[127,4776+19]..[127,4776+36])
                                []
                              core_type (typing/includemod.ml[127,4776+37]..[127,4776+68])
                                Ptyp_constr "module_type_declaration_symptom" (typing/includemod.ml[127,4776+37]..[127,4776+68])
                                []
                            ]
                        ]
                        None
                      (typing/includemod.ml[128,4851+4]..[128,4851+59])
                        "In_Type_declaration" (typing/includemod.ml[128,4851+6]..[128,4851+25])
                        [
                          core_type (typing/includemod.ml[128,4851+29]..[128,4851+36])
                            Ptyp_constr "Ident.t" (typing/includemod.ml[128,4851+29]..[128,4851+36])
                            []
                          core_type (typing/includemod.ml[128,4851+39]..[128,4851+59])
                            Ptyp_constr "core_sigitem_symptom" (typing/includemod.ml[128,4851+39]..[128,4851+59])
                            []
                        ]
                        None
                      (typing/includemod.ml[129,4911+4]..[129,4911+46])
                        "In_Expansion" (typing/includemod.ml[129,4911+6]..[129,4911+18])
                        [
                          core_type (typing/includemod.ml[129,4911+22]..[129,4911+46])
                            Ptyp_constr "core_module_type_symptom" (typing/includemod.ml[129,4911+22]..[129,4911+46])
                            []
                        ]
                        None
                    ]
                ptype_private = Public
                ptype_manifest =
                  None
            ]
        ]
  structure_item (typing/includemod.ml[133,4964+0]..[137,5026+16])
    Pstr_type Rec
    [
      type_declaration "mark" (typing/includemod.ml[133,4964+5]..[133,4964+9]) (typing/includemod.ml[133,4964+0]..[137,5026+16])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (typing/includemod.ml[134,4976+2]..[134,4976+13])
                "Mark_both" (typing/includemod.ml[134,4976+4]..[134,4976+13])
                []
                None
              (typing/includemod.ml[135,4990+2]..[135,4990+17])
                "Mark_positive" (typing/includemod.ml[135,4990+4]..[135,4990+17])
                []
                None
              (typing/includemod.ml[136,5008+2]..[136,5008+17])
                "Mark_negative" (typing/includemod.ml[136,5008+4]..[136,5008+17])
                []
                None
              (typing/includemod.ml[137,5026+2]..[137,5026+16])
                "Mark_neither" (typing/includemod.ml[137,5026+4]..[137,5026+16])
                []
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (typing/includemod.ml[139,5044+0]..[143,5168+32])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/includemod.ml[139,5044+4]..[139,5044+15])
          Ppat_var "negate_mark" (typing/includemod.ml[139,5044+4]..[139,5044+15])
        expression (typing/includemod.ml[139,5044+18]..[143,5168+32])
          Pexp_function
          [
            <case>
              pattern (typing/includemod.ml[140,5071+4]..[140,5071+13])
                Ppat_construct "Mark_both" (typing/includemod.ml[140,5071+4]..[140,5071+13])
                None
              expression (typing/includemod.ml[140,5071+17]..[140,5071+26])
                Pexp_construct "Mark_both" (typing/includemod.ml[140,5071+17]..[140,5071+26])
                None
            <case>
              pattern (typing/includemod.ml[141,5098+4]..[141,5098+17])
                Ppat_construct "Mark_positive" (typing/includemod.ml[141,5098+4]..[141,5098+17])
                None
              expression (typing/includemod.ml[141,5098+21]..[141,5098+34])
                Pexp_construct "Mark_negative" (typing/includemod.ml[141,5098+21]..[141,5098+34])
                None
            <case>
              pattern (typing/includemod.ml[142,5133+4]..[142,5133+17])
                Ppat_construct "Mark_negative" (typing/includemod.ml[142,5133+4]..[142,5133+17])
                None
              expression (typing/includemod.ml[142,5133+21]..[142,5133+34])
                Pexp_construct "Mark_positive" (typing/includemod.ml[142,5133+21]..[142,5133+34])
                None
            <case>
              pattern (typing/includemod.ml[143,5168+4]..[143,5168+16])
                Ppat_construct "Mark_neither" (typing/includemod.ml[143,5168+4]..[143,5168+16])
                None
              expression (typing/includemod.ml[143,5168+20]..[143,5168+32])
                Pexp_construct "Mark_neither" (typing/includemod.ml[143,5168+20]..[143,5168+32])
                None
          ]
    ]
  structure_item (typing/includemod.ml[145,5202+0]..[147,5269+41])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/includemod.ml[145,5202+4]..[145,5202+17])
          Ppat_var "mark_positive" (typing/includemod.ml[145,5202+4]..[145,5202+17])
        expression (typing/includemod.ml[145,5202+20]..[147,5269+41])
          Pexp_function
          [
            <case>
              pattern (typing/includemod.ml[146,5231+4]..[146,5231+29])
                Ppat_or
                pattern (typing/includemod.ml[146,5231+4]..[146,5231+13])
                  Ppat_construct "Mark_both" (typing/includemod.ml[146,5231+4]..[146,5231+13])
                  None
                pattern (typing/includemod.ml[146,5231+16]..[146,5231+29])
                  Ppat_construct "Mark_positive" (typing/includemod.ml[146,5231+16]..[146,5231+29])
                  None
              expression (typing/includemod.ml[146,5231+33]..[146,5231+37])
                Pexp_construct "true" (typing/includemod.ml[146,5231+33]..[146,5231+37])
                None
            <case>
              pattern (typing/includemod.ml[147,5269+4]..[147,5269+32])
                Ppat_or
                pattern (typing/includemod.ml[147,5269+4]..[147,5269+17])
                  Ppat_construct "Mark_negative" (typing/includemod.ml[147,5269+4]..[147,5269+17])
                  None
                pattern (typing/includemod.ml[147,5269+20]..[147,5269+32])
                  Ppat_construct "Mark_neither" (typing/includemod.ml[147,5269+20]..[147,5269+32])
                  None
              expression (typing/includemod.ml[147,5269+36]..[147,5269+41])
                Pexp_construct "false" (typing/includemod.ml[147,5269+36]..[147,5269+41])
                None
          ]
    ]
  structure_item (typing/includemod.ml[155,5570+0]..[163,5904+62])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/includemod.ml[155,5570+4]..[155,5570+22])
          Ppat_var "value_descriptions" (typing/includemod.ml[155,5570+4]..[155,5570+22])
        expression (typing/includemod.ml[155,5570+23]..[163,5904+62]) ghost
          Pexp_fun
          Labelled "loc"
          None
          pattern (typing/includemod.ml[155,5570+24]..[155,5570+27])
            Ppat_var "loc" (typing/includemod.ml[155,5570+24]..[155,5570+27])
          expression (typing/includemod.ml[155,5570+28]..[163,5904+62]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (typing/includemod.ml[155,5570+28]..[155,5570+31])
              Ppat_var "env" (typing/includemod.ml[155,5570+28]..[155,5570+31])
            expression (typing/includemod.ml[155,5570+32]..[163,5904+62]) ghost
              Pexp_fun
              Labelled "mark"
              None
              pattern (typing/includemod.ml[155,5570+33]..[155,5570+37])
                Ppat_var "mark" (typing/includemod.ml[155,5570+33]..[155,5570+37])
              expression (typing/includemod.ml[155,5570+38]..[163,5904+62]) ghost
                Pexp_fun
                Nolabel
                None
                pattern (typing/includemod.ml[155,5570+38]..[155,5570+43])
                  Ppat_var "subst" (typing/includemod.ml[155,5570+38]..[155,5570+43])
                expression (typing/includemod.ml[155,5570+44]..[163,5904+62]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (typing/includemod.ml[155,5570+44]..[155,5570+46])
                    Ppat_var "id" (typing/includemod.ml[155,5570+44]..[155,5570+46])
                  expression (typing/includemod.ml[155,5570+47]..[163,5904+62]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (typing/includemod.ml[155,5570+47]..[155,5570+50])
                      Ppat_var "vd1" (typing/includemod.ml[155,5570+47]..[155,5570+50])
                    expression (typing/includemod.ml[155,5570+51]..[163,5904+62]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (typing/includemod.ml[155,5570+51]..[155,5570+54])
                        Ppat_var "vd2" (typing/includemod.ml[155,5570+51]..[155,5570+54])
                      expression (typing/includemod.ml[156,5627+2]..[163,5904+62])
                        Pexp_sequence
                        expression (typing/includemod.ml[156,5627+2]..[156,5627+44])
                          Pexp_apply
                          expression (typing/includemod.ml[156,5627+2]..[156,5627+36])
                            Pexp_ident "Cmt_format.record_value_dependency" (typing/includemod.ml[156,5627+2]..[156,5627+36])
                          [
                            <arg>
                            Nolabel
                              expression (typing/includemod.ml[156,5627+37]..[156,5627+40])
                                Pexp_ident "vd1" (typing/includemod.ml[156,5627+37]..[156,5627+40])
                            <arg>
                            Nolabel
                              expression (typing/includemod.ml[156,5627+41]..[156,5627+44])
                                Pexp_ident "vd2" (typing/includemod.ml[156,5627+41]..[156,5627+44])
                          ]
                        expression (typing/includemod.ml[157,5673+2]..[163,5904+62])
                          Pexp_sequence
                          expression (typing/includemod.ml[157,5673+2]..[158,5702+35])
                            Pexp_ifthenelse
                            expression (typing/includemod.ml[157,5673+5]..[157,5673+23])
                              Pexp_apply
                              expression (typing/includemod.ml[157,5673+5]..[157,5673+18])
                                Pexp_ident "mark_positive" (typing/includemod.ml[157,5673+5]..[157,5673+18])
                              [
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[157,5673+19]..[157,5673+23])
                                    Pexp_ident "mark" (typing/includemod.ml[157,5673+19]..[157,5673+23])
                              ]
                            expression (typing/includemod.ml[158,5702+4]..[158,5702+35])
                              Pexp_apply
                              expression (typing/includemod.ml[158,5702+4]..[158,5702+23])
                                Pexp_ident "Env.mark_value_used" (typing/includemod.ml[158,5702+4]..[158,5702+23])
                              [
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[158,5702+24]..[158,5702+35])
                                    Pexp_field
                                    expression (typing/includemod.ml[158,5702+24]..[158,5702+27])
                                      Pexp_ident "vd1" (typing/includemod.ml[158,5702+24]..[158,5702+27])
                                    "val_uid" (typing/includemod.ml[158,5702+28]..[158,5702+35])
                              ]
                            None
                          expression (typing/includemod.ml[159,5739+2]..[163,5904+62])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (typing/includemod.ml[159,5739+6]..[159,5739+9])
                                  Ppat_var "vd2" (typing/includemod.ml[159,5739+6]..[159,5739+9])
                                expression (typing/includemod.ml[159,5739+12]..[159,5739+45])
                                  Pexp_apply
                                  expression (typing/includemod.ml[159,5739+12]..[159,5739+35])
                                    Pexp_ident "Subst.value_description" (typing/includemod.ml[159,5739+12]..[159,5739+35])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[159,5739+36]..[159,5739+41])
                                        Pexp_ident "subst" (typing/includemod.ml[159,5739+36]..[159,5739+41])
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[159,5739+42]..[159,5739+45])
                                        Pexp_ident "vd2" (typing/includemod.ml[159,5739+42]..[159,5739+45])
                                  ]
                            ]
                            expression (typing/includemod.ml[160,5788+2]..[163,5904+62])
                              Pexp_try
                              expression (typing/includemod.ml[161,5794+4]..[161,5794+72])
                                Pexp_construct "Ok" (typing/includemod.ml[161,5794+4]..[161,5794+6])
                                Some
                                  expression (typing/includemod.ml[161,5794+7]..[161,5794+72])
                                    Pexp_apply
                                    expression (typing/includemod.ml[161,5794+8]..[161,5794+38])
                                      Pexp_ident "Includecore.value_descriptions" (typing/includemod.ml[161,5794+8]..[161,5794+38])
                                    [
                                      <arg>
                                      Labelled "loc"
                                        expression (typing/includemod.ml[161,5794+40]..[161,5794+43])
                                          Pexp_ident "loc" (typing/includemod.ml[161,5794+40]..[161,5794+43])
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[161,5794+44]..[161,5794+47])
                                          Pexp_ident "env" (typing/includemod.ml[161,5794+44]..[161,5794+47])
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[161,5794+48]..[161,5794+63])
                                          Pexp_apply
                                          expression (typing/includemod.ml[161,5794+49]..[161,5794+59])
                                            Pexp_ident "Ident.name" (typing/includemod.ml[161,5794+49]..[161,5794+59])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (typing/includemod.ml[161,5794+60]..[161,5794+62])
                                                Pexp_ident "id" (typing/includemod.ml[161,5794+60]..[161,5794+62])
                                          ]
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[161,5794+64]..[161,5794+67])
                                          Pexp_ident "vd1" (typing/includemod.ml[161,5794+64]..[161,5794+67])
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[161,5794+68]..[161,5794+71])
                                          Pexp_ident "vd2" (typing/includemod.ml[161,5794+68]..[161,5794+71])
                                    ]
                              [
                                <case>
                                  pattern (typing/includemod.ml[162,5867+7]..[162,5867+33])
                                    Ppat_construct "Includecore.Dont_match" (typing/includemod.ml[162,5867+7]..[162,5867+29])
                                    Some
                                      []
                                      pattern (typing/includemod.ml[162,5867+30]..[162,5867+33])
                                        Ppat_var "err" (typing/includemod.ml[162,5867+30]..[162,5867+33])
                                  expression (typing/includemod.ml[163,5904+4]..[163,5904+62])
                                    Pexp_construct "Error" (typing/includemod.ml[163,5904+4]..[163,5904+9])
                                    Some
                                      expression (typing/includemod.ml[163,5904+10]..[163,5904+62])
                                        Pexp_open Fresh
                                        module_expr (typing/includemod.ml[163,5904+10]..[163,5904+15])
                                          Pmod_ident "Error" (typing/includemod.ml[163,5904+10]..[163,5904+15])
                                        expression (typing/includemod.ml[163,5904+17]..[163,5904+61])
                                          Pexp_construct "Core" (typing/includemod.ml[163,5904+17]..[163,5904+21])
                                          Some
                                            expression (typing/includemod.ml[163,5904+22]..[163,5904+61])
                                              Pexp_construct "Value_descriptions" (typing/includemod.ml[163,5904+23]..[163,5904+41])
                                              Some
                                                expression (typing/includemod.ml[163,5904+42]..[163,5904+60])
                                                  Pexp_apply
                                                  expression (typing/includemod.ml[163,5904+43]..[163,5904+47])
                                                    Pexp_ident "diff" (typing/includemod.ml[163,5904+43]..[163,5904+47])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (typing/includemod.ml[163,5904+48]..[163,5904+51])
                                                        Pexp_ident "vd1" (typing/includemod.ml[163,5904+48]..[163,5904+51])
                                                    <arg>
                                                    Nolabel
                                                      expression (typing/includemod.ml[163,5904+52]..[163,5904+55])
                                                        Pexp_ident "vd2" (typing/includemod.ml[163,5904+52]..[163,5904+55])
                                                    <arg>
                                                    Nolabel
                                                      expression (typing/includemod.ml[163,5904+56]..[163,5904+59])
                                                        Pexp_ident "err" (typing/includemod.ml[163,5904+56]..[163,5904+59])
                                                  ]
                              ]
    ]
  structure_item (typing/includemod.ml[167,6011+0]..[178,6382+66])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/includemod.ml[167,6011+4]..[167,6011+21])
          Ppat_var "type_declarations" (typing/includemod.ml[167,6011+4]..[167,6011+21])
        expression (typing/includemod.ml[167,6011+22]..[178,6382+66]) ghost
          Pexp_fun
          Labelled "loc"
          None
          pattern (typing/includemod.ml[167,6011+23]..[167,6011+26])
            Ppat_var "loc" (typing/includemod.ml[167,6011+23]..[167,6011+26])
          expression (typing/includemod.ml[167,6011+27]..[178,6382+66]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (typing/includemod.ml[167,6011+27]..[167,6011+30])
              Ppat_var "env" (typing/includemod.ml[167,6011+27]..[167,6011+30])
            expression (typing/includemod.ml[167,6011+31]..[178,6382+66]) ghost
              Pexp_fun
              Labelled "mark"
              None
              pattern (typing/includemod.ml[167,6011+32]..[167,6011+36])
                Ppat_var "mark" (typing/includemod.ml[167,6011+32]..[167,6011+36])
              expression (typing/includemod.ml[167,6011+37]..[178,6382+66]) ghost
                Pexp_fun
                Optional "old_env"
                None
                pattern (typing/includemod.ml[167,6011+46]..[167,6011+47])
                  Ppat_any
                expression (typing/includemod.ml[167,6011+48]..[178,6382+66]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (typing/includemod.ml[167,6011+48]..[167,6011+53])
                    Ppat_var "subst" (typing/includemod.ml[167,6011+48]..[167,6011+53])
                  expression (typing/includemod.ml[167,6011+54]..[178,6382+66]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (typing/includemod.ml[167,6011+54]..[167,6011+56])
                      Ppat_var "id" (typing/includemod.ml[167,6011+54]..[167,6011+56])
                    expression (typing/includemod.ml[167,6011+57]..[178,6382+66]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (typing/includemod.ml[167,6011+57]..[167,6011+62])
                        Ppat_var "decl1" (typing/includemod.ml[167,6011+57]..[167,6011+62])
                      expression (typing/includemod.ml[167,6011+63]..[178,6382+66]) ghost
                        Pexp_fun
                        Nolabel
                        None
                        pattern (typing/includemod.ml[167,6011+63]..[167,6011+68])
                          Ppat_var "decl2" (typing/includemod.ml[167,6011+63]..[167,6011+68])
                        expression (typing/includemod.ml[168,6082+2]..[178,6382+66])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (typing/includemod.ml[168,6082+6]..[168,6082+10])
                                Ppat_var "mark" (typing/includemod.ml[168,6082+6]..[168,6082+10])
                              expression (typing/includemod.ml[168,6082+13]..[168,6082+31])
                                Pexp_apply
                                expression (typing/includemod.ml[168,6082+13]..[168,6082+26])
                                  Pexp_ident "mark_positive" (typing/includemod.ml[168,6082+13]..[168,6082+26])
                                [
                                  <arg>
                                  Nolabel
                                    expression (typing/includemod.ml[168,6082+27]..[168,6082+31])
                                      Pexp_ident "mark" (typing/includemod.ml[168,6082+27]..[168,6082+31])
                                ]
                          ]
                          expression (typing/includemod.ml[169,6117+2]..[178,6382+66])
                            Pexp_sequence
                            expression (typing/includemod.ml[169,6117+2]..[170,6132+37])
                              Pexp_ifthenelse
                              expression (typing/includemod.ml[169,6117+5]..[169,6117+9])
                                Pexp_ident "mark" (typing/includemod.ml[169,6117+5]..[169,6117+9])
                              expression (typing/includemod.ml[170,6132+4]..[170,6132+37])
                                Pexp_apply
                                expression (typing/includemod.ml[170,6132+4]..[170,6132+22])
                                  Pexp_ident "Env.mark_type_used" (typing/includemod.ml[170,6132+4]..[170,6132+22])
                                [
                                  <arg>
                                  Nolabel
                                    expression (typing/includemod.ml[170,6132+23]..[170,6132+37])
                                      Pexp_field
                                      expression (typing/includemod.ml[170,6132+23]..[170,6132+28])
                                        Pexp_ident "decl1" (typing/includemod.ml[170,6132+23]..[170,6132+28])
                                      "type_uid" (typing/includemod.ml[170,6132+29]..[170,6132+37])
                                ]
                              None
                            expression (typing/includemod.ml[171,6171+2]..[178,6382+66])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (typing/includemod.ml[171,6171+6]..[171,6171+11])
                                    Ppat_var "decl2" (typing/includemod.ml[171,6171+6]..[171,6171+11])
                                  expression (typing/includemod.ml[171,6171+14]..[171,6171+48])
                                    Pexp_apply
                                    expression (typing/includemod.ml[171,6171+14]..[171,6171+36])
                                      Pexp_ident "Subst.type_declaration" (typing/includemod.ml[171,6171+14]..[171,6171+36])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[171,6171+37]..[171,6171+42])
                                          Pexp_ident "subst" (typing/includemod.ml[171,6171+37]..[171,6171+42])
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[171,6171+43]..[171,6171+48])
                                          Pexp_ident "decl2" (typing/includemod.ml[171,6171+43]..[171,6171+48])
                                    ]
                              ]
                              expression (typing/includemod.ml[172,6223+2]..[178,6382+66])
                                Pexp_match
                                expression (typing/includemod.ml[173,6231+4]..[174,6280+50])
                                  Pexp_apply
                                  expression (typing/includemod.ml[173,6231+4]..[173,6231+33])
                                    Pexp_ident "Includecore.type_declarations" (typing/includemod.ml[173,6231+4]..[173,6231+33])
                                  [
                                    <arg>
                                    Labelled "loc"
                                      expression (typing/includemod.ml[173,6231+35]..[173,6231+38])
                                        Pexp_ident "loc" (typing/includemod.ml[173,6231+35]..[173,6231+38])
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[173,6231+39]..[173,6231+42])
                                        Pexp_ident "env" (typing/includemod.ml[173,6231+39]..[173,6231+42])
                                    <arg>
                                    Labelled "mark"
                                      expression (typing/includemod.ml[173,6231+44]..[173,6231+48])
                                        Pexp_ident "mark" (typing/includemod.ml[173,6231+44]..[173,6231+48])
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[174,6280+6]..[174,6280+21])
                                        Pexp_apply
                                        expression (typing/includemod.ml[174,6280+7]..[174,6280+17])
                                          Pexp_ident "Ident.name" (typing/includemod.ml[174,6280+7]..[174,6280+17])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (typing/includemod.ml[174,6280+18]..[174,6280+20])
                                              Pexp_ident "id" (typing/includemod.ml[174,6280+18]..[174,6280+20])
                                        ]
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[174,6280+22]..[174,6280+27])
                                        Pexp_ident "decl1" (typing/includemod.ml[174,6280+22]..[174,6280+27])
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[174,6280+28]..[174,6280+44])
                                        Pexp_construct "Path.Pident" (typing/includemod.ml[174,6280+29]..[174,6280+40])
                                        Some
                                          expression (typing/includemod.ml[174,6280+41]..[174,6280+43])
                                            Pexp_ident "id" (typing/includemod.ml[174,6280+41]..[174,6280+43])
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[174,6280+45]..[174,6280+50])
                                        Pexp_ident "decl2" (typing/includemod.ml[174,6280+45]..[174,6280+50])
                                  ]
                                [
                                  <case>
                                    pattern (typing/includemod.ml[176,6338+4]..[176,6338+8])
                                      Ppat_construct "None" (typing/includemod.ml[176,6338+4]..[176,6338+8])
                                      None
                                    expression (typing/includemod.ml[176,6338+12]..[176,6338+27])
                                      Pexp_construct "Ok" (typing/includemod.ml[176,6338+12]..[176,6338+14])
                                      Some
                                        expression (typing/includemod.ml[176,6338+15]..[176,6338+27])
                                          Pexp_construct "Tcoerce_none" (typing/includemod.ml[176,6338+15]..[176,6338+27])
                                          None
                                  <case>
                                    pattern (typing/includemod.ml[177,6366+4]..[177,6366+12])
                                      Ppat_construct "Some" (typing/includemod.ml[177,6366+4]..[177,6366+8])
                                      Some
                                        []
                                        pattern (typing/includemod.ml[177,6366+9]..[177,6366+12])
                                          Ppat_var "err" (typing/includemod.ml[177,6366+9]..[177,6366+12])
                                    expression (typing/includemod.ml[178,6382+6]..[178,6382+66])
                                      Pexp_construct "Error" (typing/includemod.ml[178,6382+6]..[178,6382+11])
                                      Some
                                        expression (typing/includemod.ml[178,6382+12]..[178,6382+66])
                                          Pexp_open Fresh
                                          module_expr (typing/includemod.ml[178,6382+12]..[178,6382+17])
                                            Pmod_ident "Error" (typing/includemod.ml[178,6382+12]..[178,6382+17])
                                          expression (typing/includemod.ml[178,6382+19]..[178,6382+65])
                                            Pexp_construct "Core" (typing/includemod.ml[178,6382+19]..[178,6382+23])
                                            Some
                                              expression (typing/includemod.ml[178,6382+23]..[178,6382+65])
                                                Pexp_construct "Type_declarations" (typing/includemod.ml[178,6382+24]..[178,6382+41])
                                                Some
                                                  expression (typing/includemod.ml[178,6382+42]..[178,6382+64])
                                                    Pexp_apply
                                                    expression (typing/includemod.ml[178,6382+43]..[178,6382+47])
                                                      Pexp_ident "diff" (typing/includemod.ml[178,6382+43]..[178,6382+47])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (typing/includemod.ml[178,6382+48]..[178,6382+53])
                                                          Pexp_ident "decl1" (typing/includemod.ml[178,6382+48]..[178,6382+53])
                                                      <arg>
                                                      Nolabel
                                                        expression (typing/includemod.ml[178,6382+54]..[178,6382+59])
                                                          Pexp_ident "decl2" (typing/includemod.ml[178,6382+54]..[178,6382+59])
                                                      <arg>
                                                      Nolabel
                                                        expression (typing/includemod.ml[178,6382+60]..[178,6382+63])
                                                          Pexp_ident "err" (typing/includemod.ml[178,6382+60]..[178,6382+63])
                                                    ]
                                ]
    ]
  structure_item (typing/includemod.ml[182,6498+0]..[188,6772+68])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/includemod.ml[182,6498+4]..[182,6498+26])
          Ppat_var "extension_constructors" (typing/includemod.ml[182,6498+4]..[182,6498+26])
        expression (typing/includemod.ml[182,6498+27]..[188,6772+68]) ghost
          Pexp_fun
          Labelled "loc"
          None
          pattern (typing/includemod.ml[182,6498+28]..[182,6498+31])
            Ppat_var "loc" (typing/includemod.ml[182,6498+28]..[182,6498+31])
          expression (typing/includemod.ml[182,6498+32]..[188,6772+68]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (typing/includemod.ml[182,6498+32]..[182,6498+35])
              Ppat_var "env" (typing/includemod.ml[182,6498+32]..[182,6498+35])
            expression (typing/includemod.ml[182,6498+36]..[188,6772+68]) ghost
              Pexp_fun
              Labelled "mark"
              None
              pattern (typing/includemod.ml[182,6498+37]..[182,6498+41])
                Ppat_var "mark" (typing/includemod.ml[182,6498+37]..[182,6498+41])
              expression (typing/includemod.ml[182,6498+43]..[188,6772+68]) ghost
                Pexp_fun
                Nolabel
                None
                pattern (typing/includemod.ml[182,6498+43]..[182,6498+48])
                  Ppat_var "subst" (typing/includemod.ml[182,6498+43]..[182,6498+48])
                expression (typing/includemod.ml[182,6498+49]..[188,6772+68]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (typing/includemod.ml[182,6498+49]..[182,6498+51])
                    Ppat_var "id" (typing/includemod.ml[182,6498+49]..[182,6498+51])
                  expression (typing/includemod.ml[182,6498+52]..[188,6772+68]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (typing/includemod.ml[182,6498+52]..[182,6498+56])
                      Ppat_var "ext1" (typing/includemod.ml[182,6498+52]..[182,6498+56])
                    expression (typing/includemod.ml[182,6498+57]..[188,6772+68]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (typing/includemod.ml[182,6498+57]..[182,6498+61])
                        Ppat_var "ext2" (typing/includemod.ml[182,6498+57]..[182,6498+61])
                      expression (typing/includemod.ml[183,6562+2]..[188,6772+68])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (typing/includemod.ml[183,6562+6]..[183,6562+10])
                              Ppat_var "mark" (typing/includemod.ml[183,6562+6]..[183,6562+10])
                            expression (typing/includemod.ml[183,6562+13]..[183,6562+31])
                              Pexp_apply
                              expression (typing/includemod.ml[183,6562+13]..[183,6562+26])
                                Pexp_ident "mark_positive" (typing/includemod.ml[183,6562+13]..[183,6562+26])
                              [
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[183,6562+27]..[183,6562+31])
                                    Pexp_ident "mark" (typing/includemod.ml[183,6562+27]..[183,6562+31])
                              ]
                        ]
                        expression (typing/includemod.ml[184,6597+2]..[188,6772+68])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (typing/includemod.ml[184,6597+6]..[184,6597+10])
                                Ppat_var "ext2" (typing/includemod.ml[184,6597+6]..[184,6597+10])
                              expression (typing/includemod.ml[184,6597+13]..[184,6597+51])
                                Pexp_apply
                                expression (typing/includemod.ml[184,6597+13]..[184,6597+40])
                                  Pexp_ident "Subst.extension_constructor" (typing/includemod.ml[184,6597+13]..[184,6597+40])
                                [
                                  <arg>
                                  Nolabel
                                    expression (typing/includemod.ml[184,6597+41]..[184,6597+46])
                                      Pexp_ident "subst" (typing/includemod.ml[184,6597+41]..[184,6597+46])
                                  <arg>
                                  Nolabel
                                    expression (typing/includemod.ml[184,6597+47]..[184,6597+51])
                                      Pexp_ident "ext2" (typing/includemod.ml[184,6597+47]..[184,6597+51])
                                ]
                          ]
                          expression (typing/includemod.ml[185,6652+2]..[188,6772+68])
                            Pexp_match
                            expression (typing/includemod.ml[185,6652+8]..[185,6652+70])
                              Pexp_apply
                              expression (typing/includemod.ml[185,6652+8]..[185,6652+42])
                                Pexp_ident "Includecore.extension_constructors" (typing/includemod.ml[185,6652+8]..[185,6652+42])
                              [
                                <arg>
                                Labelled "loc"
                                  expression (typing/includemod.ml[185,6652+44]..[185,6652+47])
                                    Pexp_ident "loc" (typing/includemod.ml[185,6652+44]..[185,6652+47])
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[185,6652+48]..[185,6652+51])
                                    Pexp_ident "env" (typing/includemod.ml[185,6652+48]..[185,6652+51])
                                <arg>
                                Labelled "mark"
                                  expression (typing/includemod.ml[185,6652+53]..[185,6652+57])
                                    Pexp_ident "mark" (typing/includemod.ml[185,6652+53]..[185,6652+57])
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[185,6652+58]..[185,6652+60])
                                    Pexp_ident "id" (typing/includemod.ml[185,6652+58]..[185,6652+60])
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[185,6652+61]..[185,6652+65])
                                    Pexp_ident "ext1" (typing/includemod.ml[185,6652+61]..[185,6652+65])
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[185,6652+66]..[185,6652+70])
                                    Pexp_ident "ext2" (typing/includemod.ml[185,6652+66]..[185,6652+70])
                              ]
                            [
                              <case>
                                pattern (typing/includemod.ml[186,6728+4]..[186,6728+8])
                                  Ppat_construct "None" (typing/includemod.ml[186,6728+4]..[186,6728+8])
                                  None
                                expression (typing/includemod.ml[186,6728+12]..[186,6728+27])
                                  Pexp_construct "Ok" (typing/includemod.ml[186,6728+12]..[186,6728+14])
                                  Some
                                    expression (typing/includemod.ml[186,6728+15]..[186,6728+27])
                                      Pexp_construct "Tcoerce_none" (typing/includemod.ml[186,6728+15]..[186,6728+27])
                                      None
                              <case>
                                pattern (typing/includemod.ml[187,6756+4]..[187,6756+12])
                                  Ppat_construct "Some" (typing/includemod.ml[187,6756+4]..[187,6756+8])
                                  Some
                                    []
                                    pattern (typing/includemod.ml[187,6756+9]..[187,6756+12])
                                      Ppat_var "err" (typing/includemod.ml[187,6756+9]..[187,6756+12])
                                expression (typing/includemod.ml[188,6772+6]..[188,6772+68])
                                  Pexp_construct "Error" (typing/includemod.ml[188,6772+6]..[188,6772+11])
                                  Some
                                    expression (typing/includemod.ml[188,6772+12]..[188,6772+68])
                                      Pexp_open Fresh
                                      module_expr (typing/includemod.ml[188,6772+12]..[188,6772+17])
                                        Pmod_ident "Error" (typing/includemod.ml[188,6772+12]..[188,6772+17])
                                      expression (typing/includemod.ml[188,6772+19]..[188,6772+67])
                                        Pexp_construct "Core" (typing/includemod.ml[188,6772+19]..[188,6772+23])
                                        Some
                                          expression (typing/includemod.ml[188,6772+23]..[188,6772+67])
                                            Pexp_construct "Extension_constructors" (typing/includemod.ml[188,6772+24]..[188,6772+46])
                                            Some
                                              expression (typing/includemod.ml[188,6772+46]..[188,6772+66])
                                                Pexp_apply
                                                expression (typing/includemod.ml[188,6772+47]..[188,6772+51])
                                                  Pexp_ident "diff" (typing/includemod.ml[188,6772+47]..[188,6772+51])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (typing/includemod.ml[188,6772+52]..[188,6772+56])
                                                      Pexp_ident "ext1" (typing/includemod.ml[188,6772+52]..[188,6772+56])
                                                  <arg>
                                                  Nolabel
                                                    expression (typing/includemod.ml[188,6772+57]..[188,6772+61])
                                                      Pexp_ident "ext2" (typing/includemod.ml[188,6772+57]..[188,6772+61])
                                                  <arg>
                                                  Nolabel
                                                    expression (typing/includemod.ml[188,6772+62]..[188,6772+65])
                                                      Pexp_ident "err" (typing/includemod.ml[188,6772+62]..[188,6772+65])
                                                ]
                            ]
    ]
  structure_item (typing/includemod.ml[192,6886+0]..[197,7124+74])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/includemod.ml[192,6886+4]..[192,6886+27])
          Ppat_var "class_type_declarations" (typing/includemod.ml[192,6886+4]..[192,6886+27])
        expression (typing/includemod.ml[192,6886+28]..[197,7124+74]) ghost
          Pexp_fun
          Labelled "loc"
          None
          pattern (typing/includemod.ml[192,6886+29]..[192,6886+32])
            Ppat_var "loc" (typing/includemod.ml[192,6886+29]..[192,6886+32])
          expression (typing/includemod.ml[192,6886+33]..[197,7124+74]) ghost
            Pexp_fun
            Labelled "old_env"
            None
            pattern (typing/includemod.ml[192,6886+42]..[192,6886+43])
              Ppat_any
            expression (typing/includemod.ml[192,6886+44]..[197,7124+74]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (typing/includemod.ml[192,6886+44]..[192,6886+47])
                Ppat_var "env" (typing/includemod.ml[192,6886+44]..[192,6886+47])
              expression (typing/includemod.ml[192,6886+49]..[197,7124+74]) ghost
                Pexp_fun
                Nolabel
                None
                pattern (typing/includemod.ml[192,6886+49]..[192,6886+54])
                  Ppat_var "subst" (typing/includemod.ml[192,6886+49]..[192,6886+54])
                expression (typing/includemod.ml[192,6886+55]..[197,7124+74]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (typing/includemod.ml[192,6886+55]..[192,6886+60])
                    Ppat_var "decl1" (typing/includemod.ml[192,6886+55]..[192,6886+60])
                  expression (typing/includemod.ml[192,6886+61]..[197,7124+74]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (typing/includemod.ml[192,6886+61]..[192,6886+66])
                      Ppat_var "decl2" (typing/includemod.ml[192,6886+61]..[192,6886+66])
                    expression (typing/includemod.ml[193,6955+2]..[197,7124+74])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (typing/includemod.ml[193,6955+6]..[193,6955+11])
                            Ppat_var "decl2" (typing/includemod.ml[193,6955+6]..[193,6955+11])
                          expression (typing/includemod.ml[193,6955+14]..[193,6955+50])
                            Pexp_apply
                            expression (typing/includemod.ml[193,6955+14]..[193,6955+38])
                              Pexp_ident "Subst.cltype_declaration" (typing/includemod.ml[193,6955+14]..[193,6955+38])
                            [
                              <arg>
                              Nolabel
                                expression (typing/includemod.ml[193,6955+39]..[193,6955+44])
                                  Pexp_ident "subst" (typing/includemod.ml[193,6955+39]..[193,6955+44])
                              <arg>
                              Nolabel
                                expression (typing/includemod.ml[193,6955+45]..[193,6955+50])
                                  Pexp_ident "decl2" (typing/includemod.ml[193,6955+45]..[193,6955+50])
                            ]
                      ]
                      expression (typing/includemod.ml[194,7009+2]..[197,7124+74])
                        Pexp_match
                        expression (typing/includemod.ml[194,7009+8]..[194,7009+65])
                          Pexp_apply
                          expression (typing/includemod.ml[194,7009+8]..[194,7009+44])
                            Pexp_ident "Includeclass.class_type_declarations" (typing/includemod.ml[194,7009+8]..[194,7009+44])
                          [
                            <arg>
                            Labelled "loc"
                              expression (typing/includemod.ml[194,7009+46]..[194,7009+49])
                                Pexp_ident "loc" (typing/includemod.ml[194,7009+46]..[194,7009+49])
                            <arg>
                            Nolabel
                              expression (typing/includemod.ml[194,7009+50]..[194,7009+53])
                                Pexp_ident "env" (typing/includemod.ml[194,7009+50]..[194,7009+53])
                            <arg>
                            Nolabel
                              expression (typing/includemod.ml[194,7009+54]..[194,7009+59])
                                Pexp_ident "decl1" (typing/includemod.ml[194,7009+54]..[194,7009+59])
                            <arg>
                            Nolabel
                              expression (typing/includemod.ml[194,7009+60]..[194,7009+65])
                                Pexp_ident "decl2" (typing/includemod.ml[194,7009+60]..[194,7009+65])
                          ]
                        [
                          <case>
                            pattern (typing/includemod.ml[195,7080+4]..[195,7080+6])
                              Ppat_construct "[]" (typing/includemod.ml[195,7080+4]..[195,7080+6])
                              None
                            expression (typing/includemod.ml[195,7080+14]..[195,7080+29])
                              Pexp_construct "Ok" (typing/includemod.ml[195,7080+14]..[195,7080+16])
                              Some
                                expression (typing/includemod.ml[195,7080+17]..[195,7080+29])
                                  Pexp_construct "Tcoerce_none" (typing/includemod.ml[195,7080+17]..[195,7080+29])
                                  None
                          <case>
                            pattern (typing/includemod.ml[196,7110+4]..[196,7110+10])
                              Ppat_var "reason" (typing/includemod.ml[196,7110+4]..[196,7110+10])
                            expression (typing/includemod.ml[197,7124+6]..[197,7124+74])
                              Pexp_construct "Error" (typing/includemod.ml[197,7124+6]..[197,7124+11])
                              Some
                                expression (typing/includemod.ml[197,7124+12]..[197,7124+74])
                                  Pexp_open Fresh
                                  module_expr (typing/includemod.ml[197,7124+12]..[197,7124+17])
                                    Pmod_ident "Error" (typing/includemod.ml[197,7124+12]..[197,7124+17])
                                  expression (typing/includemod.ml[197,7124+19]..[197,7124+73])
                                    Pexp_construct "Core" (typing/includemod.ml[197,7124+19]..[197,7124+23])
                                    Some
                                      expression (typing/includemod.ml[197,7124+23]..[197,7124+73])
                                        Pexp_construct "Class_type_declarations" (typing/includemod.ml[197,7124+24]..[197,7124+47])
                                        Some
                                          expression (typing/includemod.ml[197,7124+47]..[197,7124+72])
                                            Pexp_apply
                                            expression (typing/includemod.ml[197,7124+48]..[197,7124+52])
                                              Pexp_ident "diff" (typing/includemod.ml[197,7124+48]..[197,7124+52])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (typing/includemod.ml[197,7124+53]..[197,7124+58])
                                                  Pexp_ident "decl1" (typing/includemod.ml[197,7124+53]..[197,7124+58])
                                              <arg>
                                              Nolabel
                                                expression (typing/includemod.ml[197,7124+59]..[197,7124+64])
                                                  Pexp_ident "decl2" (typing/includemod.ml[197,7124+59]..[197,7124+64])
                                              <arg>
                                              Nolabel
                                                expression (typing/includemod.ml[197,7124+65]..[197,7124+71])
                                                  Pexp_ident "reason" (typing/includemod.ml[197,7124+65]..[197,7124+71])
                                            ]
                        ]
    ]
  structure_item (typing/includemod.ml[199,7200+0]..[204,7417+68])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/includemod.ml[199,7200+4]..[199,7200+22])
          Ppat_var "class_declarations" (typing/includemod.ml[199,7200+4]..[199,7200+22])
        expression (typing/includemod.ml[199,7200+23]..[204,7417+68]) ghost
          Pexp_fun
          Labelled "old_env"
          None
          pattern (typing/includemod.ml[199,7200+32]..[199,7200+33])
            Ppat_any
          expression (typing/includemod.ml[199,7200+34]..[204,7417+68]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (typing/includemod.ml[199,7200+34]..[199,7200+37])
              Ppat_var "env" (typing/includemod.ml[199,7200+34]..[199,7200+37])
            expression (typing/includemod.ml[199,7200+39]..[204,7417+68]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (typing/includemod.ml[199,7200+39]..[199,7200+44])
                Ppat_var "subst" (typing/includemod.ml[199,7200+39]..[199,7200+44])
              expression (typing/includemod.ml[199,7200+45]..[204,7417+68]) ghost
                Pexp_fun
                Nolabel
                None
                pattern (typing/includemod.ml[199,7200+45]..[199,7200+50])
                  Ppat_var "decl1" (typing/includemod.ml[199,7200+45]..[199,7200+50])
                expression (typing/includemod.ml[199,7200+51]..[204,7417+68]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (typing/includemod.ml[199,7200+51]..[199,7200+56])
                    Ppat_var "decl2" (typing/includemod.ml[199,7200+51]..[199,7200+56])
                  expression (typing/includemod.ml[200,7259+2]..[204,7417+68])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (typing/includemod.ml[200,7259+6]..[200,7259+11])
                          Ppat_var "decl2" (typing/includemod.ml[200,7259+6]..[200,7259+11])
                        expression (typing/includemod.ml[200,7259+14]..[200,7259+49])
                          Pexp_apply
                          expression (typing/includemod.ml[200,7259+14]..[200,7259+37])
                            Pexp_ident "Subst.class_declaration" (typing/includemod.ml[200,7259+14]..[200,7259+37])
                          [
                            <arg>
                            Nolabel
                              expression (typing/includemod.ml[200,7259+38]..[200,7259+43])
                                Pexp_ident "subst" (typing/includemod.ml[200,7259+38]..[200,7259+43])
                            <arg>
                            Nolabel
                              expression (typing/includemod.ml[200,7259+44]..[200,7259+49])
                                Pexp_ident "decl2" (typing/includemod.ml[200,7259+44]..[200,7259+49])
                          ]
                    ]
                    expression (typing/includemod.ml[201,7312+2]..[204,7417+68])
                      Pexp_match
                      expression (typing/includemod.ml[201,7312+8]..[201,7312+55])
                        Pexp_apply
                        expression (typing/includemod.ml[201,7312+8]..[201,7312+39])
                          Pexp_ident "Includeclass.class_declarations" (typing/includemod.ml[201,7312+8]..[201,7312+39])
                        [
                          <arg>
                          Nolabel
                            expression (typing/includemod.ml[201,7312+40]..[201,7312+43])
                              Pexp_ident "env" (typing/includemod.ml[201,7312+40]..[201,7312+43])
                          <arg>
                          Nolabel
                            expression (typing/includemod.ml[201,7312+44]..[201,7312+49])
                              Pexp_ident "decl1" (typing/includemod.ml[201,7312+44]..[201,7312+49])
                          <arg>
                          Nolabel
                            expression (typing/includemod.ml[201,7312+50]..[201,7312+55])
                              Pexp_ident "decl2" (typing/includemod.ml[201,7312+50]..[201,7312+55])
                        ]
                      [
                        <case>
                          pattern (typing/includemod.ml[202,7373+4]..[202,7373+6])
                            Ppat_construct "[]" (typing/includemod.ml[202,7373+4]..[202,7373+6])
                            None
                          expression (typing/includemod.ml[202,7373+14]..[202,7373+29])
                            Pexp_construct "Ok" (typing/includemod.ml[202,7373+14]..[202,7373+16])
                            Some
                              expression (typing/includemod.ml[202,7373+17]..[202,7373+29])
                                Pexp_construct "Tcoerce_none" (typing/includemod.ml[202,7373+17]..[202,7373+29])
                                None
                        <case>
                          pattern (typing/includemod.ml[203,7403+4]..[203,7403+10])
                            Ppat_var "reason" (typing/includemod.ml[203,7403+4]..[203,7403+10])
                          expression (typing/includemod.ml[204,7417+5]..[204,7417+68])
                            Pexp_construct "Error" (typing/includemod.ml[204,7417+5]..[204,7417+10])
                            Some
                              expression (typing/includemod.ml[204,7417+11]..[204,7417+68])
                                Pexp_open Fresh
                                module_expr (typing/includemod.ml[204,7417+11]..[204,7417+16])
                                  Pmod_ident "Error" (typing/includemod.ml[204,7417+11]..[204,7417+16])
                                expression (typing/includemod.ml[204,7417+18]..[204,7417+67])
                                  Pexp_construct "Core" (typing/includemod.ml[204,7417+18]..[204,7417+22])
                                  Some
                                    expression (typing/includemod.ml[204,7417+22]..[204,7417+67])
                                      Pexp_construct "Class_declarations" (typing/includemod.ml[204,7417+23]..[204,7417+41])
                                      Some
                                        expression (typing/includemod.ml[204,7417+41]..[204,7417+66])
                                          Pexp_apply
                                          expression (typing/includemod.ml[204,7417+42]..[204,7417+46])
                                            Pexp_ident "diff" (typing/includemod.ml[204,7417+42]..[204,7417+46])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (typing/includemod.ml[204,7417+47]..[204,7417+52])
                                                Pexp_ident "decl1" (typing/includemod.ml[204,7417+47]..[204,7417+52])
                                            <arg>
                                            Nolabel
                                              expression (typing/includemod.ml[204,7417+53]..[204,7417+58])
                                                Pexp_ident "decl2" (typing/includemod.ml[204,7417+53]..[204,7417+58])
                                            <arg>
                                            Nolabel
                                              expression (typing/includemod.ml[204,7417+59]..[204,7417+65])
                                                Pexp_ident "reason" (typing/includemod.ml[204,7417+59]..[204,7417+65])
                                          ]
                      ]
    ]
  structure_item (typing/includemod.ml[208,7540+0]..[211,7660+18])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/includemod.ml[208,7540+4]..[208,7540+23])
          Ppat_var "expand_modtype_path" (typing/includemod.ml[208,7540+4]..[208,7540+23])
        expression (typing/includemod.ml[208,7540+24]..[211,7660+18]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (typing/includemod.ml[208,7540+24]..[208,7540+27])
            Ppat_var "env" (typing/includemod.ml[208,7540+24]..[208,7540+27])
          expression (typing/includemod.ml[208,7540+28]..[211,7660+18]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (typing/includemod.ml[208,7540+28]..[208,7540+32])
              Ppat_var "path" (typing/includemod.ml[208,7540+28]..[208,7540+32])
            expression (typing/includemod.ml[209,7575+3]..[211,7660+18])
              Pexp_match
              expression (typing/includemod.ml[209,7575+9]..[209,7575+44])
                Pexp_apply
                expression (typing/includemod.ml[209,7575+9]..[209,7575+35])
                  Pexp_ident "Env.find_modtype_expansion" (typing/includemod.ml[209,7575+9]..[209,7575+35])
                [
                  <arg>
                  Nolabel
                    expression (typing/includemod.ml[209,7575+36]..[209,7575+40])
                      Pexp_ident "path" (typing/includemod.ml[209,7575+36]..[209,7575+40])
                  <arg>
                  Nolabel
                    expression (typing/includemod.ml[209,7575+41]..[209,7575+44])
                      Pexp_ident "env" (typing/includemod.ml[209,7575+41]..[209,7575+44])
                ]
              [
                <case>
                  pattern (typing/includemod.ml[210,7625+7]..[210,7625+26])
                    Ppat_exception
                    pattern (typing/includemod.ml[210,7625+17]..[210,7625+26])
                      Ppat_construct "Not_found" (typing/includemod.ml[210,7625+17]..[210,7625+26])
                      None
                  expression (typing/includemod.ml[210,7625+30]..[210,7625+34])
                    Pexp_construct "None" (typing/includemod.ml[210,7625+30]..[210,7625+34])
                    None
                <case>
                  pattern (typing/includemod.ml[211,7660+7]..[211,7660+8])
                    Ppat_var "x" (typing/includemod.ml[211,7660+7]..[211,7660+8])
                  expression (typing/includemod.ml[211,7660+12]..[211,7660+18])
                    Pexp_construct "Some" (typing/includemod.ml[211,7660+12]..[211,7660+16])
                    Some
                      expression (typing/includemod.ml[211,7660+17]..[211,7660+18])
                        Pexp_ident "x" (typing/includemod.ml[211,7660+17]..[211,7660+18])
              ]
    ]
  structure_item (typing/includemod.ml[213,7680+0]..[216,7777+65])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/includemod.ml[213,7680+4]..[213,7680+23])
          Ppat_var "expand_module_alias" (typing/includemod.ml[213,7680+4]..[213,7680+23])
        expression (typing/includemod.ml[213,7680+24]..[216,7777+65]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (typing/includemod.ml[213,7680+24]..[213,7680+27])
            Ppat_var "env" (typing/includemod.ml[213,7680+24]..[213,7680+27])
          expression (typing/includemod.ml[213,7680+28]..[216,7777+65]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (typing/includemod.ml[213,7680+28]..[213,7680+32])
              Ppat_var "path" (typing/includemod.ml[213,7680+28]..[213,7680+32])
            expression (typing/includemod.ml[214,7715+2]..[216,7777+65])
              Pexp_match
              expression (typing/includemod.ml[214,7715+8]..[214,7715+42])
                Pexp_field
                expression (typing/includemod.ml[214,7715+8]..[214,7715+34])
                  Pexp_apply
                  expression (typing/includemod.ml[214,7715+9]..[214,7715+24])
                    Pexp_ident "Env.find_module" (typing/includemod.ml[214,7715+9]..[214,7715+24])
                  [
                    <arg>
                    Nolabel
                      expression (typing/includemod.ml[214,7715+25]..[214,7715+29])
                        Pexp_ident "path" (typing/includemod.ml[214,7715+25]..[214,7715+29])
                    <arg>
                    Nolabel
                      expression (typing/includemod.ml[214,7715+30]..[214,7715+33])
                        Pexp_ident "env" (typing/includemod.ml[214,7715+30]..[214,7715+33])
                  ]
                "md_type" (typing/includemod.ml[214,7715+35]..[214,7715+42])
              [
                <case>
                  pattern (typing/includemod.ml[215,7763+4]..[215,7763+5])
                    Ppat_var "x" (typing/includemod.ml[215,7763+4]..[215,7763+5])
                  expression (typing/includemod.ml[215,7763+9]..[215,7763+13])
                    Pexp_construct "Ok" (typing/includemod.ml[215,7763+9]..[215,7763+11])
                    Some
                      expression (typing/includemod.ml[215,7763+12]..[215,7763+13])
                        Pexp_ident "x" (typing/includemod.ml[215,7763+12]..[215,7763+13])
                <case>
                  pattern (typing/includemod.ml[216,7777+4]..[216,7777+23])
                    Ppat_exception
                    pattern (typing/includemod.ml[216,7777+14]..[216,7777+23])
                      Ppat_construct "Not_found" (typing/includemod.ml[216,7777+14]..[216,7777+23])
                      None
                  expression (typing/includemod.ml[216,7777+27]..[216,7777+65])
                    Pexp_construct "Error" (typing/includemod.ml[216,7777+27]..[216,7777+32])
                    Some
                      expression (typing/includemod.ml[216,7777+33]..[216,7777+65])
                        Pexp_construct "Error.Unbound_module_path" (typing/includemod.ml[216,7777+34]..[216,7777+59])
                        Some
                          expression (typing/includemod.ml[216,7777+60]..[216,7777+64])
                            Pexp_ident "path" (typing/includemod.ml[216,7777+60]..[216,7777+64])
              ]
    ]
  structure_item (typing/includemod.ml[220,7902+0]..[228,8039+19])
    Pstr_type Rec
    [
      type_declaration "field_kind" (typing/includemod.ml[220,7902+5]..[220,7902+15]) (typing/includemod.ml[220,7902+0]..[228,8039+19])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (typing/includemod.ml[221,7920+2]..[221,7920+15])
                "Field_value" (typing/includemod.ml[221,7920+4]..[221,7920+15])
                []
                None
              (typing/includemod.ml[222,7936+2]..[222,7936+14])
                "Field_type" (typing/includemod.ml[222,7936+4]..[222,7936+14])
                []
                None
              (typing/includemod.ml[223,7951+2]..[223,7951+19])
                "Field_exception" (typing/includemod.ml[223,7951+4]..[223,7951+19])
                []
                None
              (typing/includemod.ml[224,7971+2]..[224,7971+16])
                "Field_typext" (typing/includemod.ml[224,7971+4]..[224,7971+16])
                []
                None
              (typing/includemod.ml[225,7988+2]..[225,7988+16])
                "Field_module" (typing/includemod.ml[225,7988+4]..[225,7988+16])
                []
                None
              (typing/includemod.ml[226,8005+2]..[226,8005+17])
                "Field_modtype" (typing/includemod.ml[226,8005+4]..[226,8005+17])
                []
                None
              (typing/includemod.ml[227,8023+2]..[227,8023+15])
                "Field_class" (typing/includemod.ml[227,8023+4]..[227,8023+15])
                []
                None
              (typing/includemod.ml[228,8039+2]..[228,8039+19])
                "Field_classtype" (typing/includemod.ml[228,8039+4]..[228,8039+19])
                []
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (typing/includemod.ml[232,8062+0]..[232,8062+52])
    Pstr_type Rec
    [
      type_declaration "field_desc" (typing/includemod.ml[232,8062+5]..[232,8062+15]) (typing/includemod.ml[232,8062+0]..[232,8062+52])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (typing/includemod.ml[232,8062+20]..[232,8062+33])
                Immutable
                "name" (typing/includemod.ml[232,8062+20]..[232,8062+24])                core_type (typing/includemod.ml[232,8062+26]..[232,8062+32])
                  Ptyp_constr "string" (typing/includemod.ml[232,8062+26]..[232,8062+32])
                  []
              (typing/includemod.ml[232,8062+34]..[232,8062+50])
                Immutable
                "kind" (typing/includemod.ml[232,8062+34]..[232,8062+38])                core_type (typing/includemod.ml[232,8062+40]..[232,8062+50])
                  Ptyp_constr "field_kind" (typing/includemod.ml[232,8062+40]..[232,8062+50])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (typing/includemod.ml[234,8116+0]..[242,8385+35])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/includemod.ml[234,8116+4]..[234,8116+22])
          Ppat_var "kind_of_field_desc" (typing/includemod.ml[234,8116+4]..[234,8116+22])
        expression (typing/includemod.ml[234,8116+23]..[242,8385+35]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (typing/includemod.ml[234,8116+23]..[234,8116+25])
            Ppat_var "fd" (typing/includemod.ml[234,8116+23]..[234,8116+25])
          expression (typing/includemod.ml[234,8116+28]..[242,8385+35])
            Pexp_match
            expression (typing/includemod.ml[234,8116+34]..[234,8116+41])
              Pexp_field
              expression (typing/includemod.ml[234,8116+34]..[234,8116+36])
                Pexp_ident "fd" (typing/includemod.ml[234,8116+34]..[234,8116+36])
              "kind" (typing/includemod.ml[234,8116+37]..[234,8116+41])
            [
              <case>
                pattern (typing/includemod.ml[235,8163+4]..[235,8163+15])
                  Ppat_construct "Field_value" (typing/includemod.ml[235,8163+4]..[235,8163+15])
                  None
                expression (typing/includemod.ml[235,8163+19]..[235,8163+26])
                  Pexp_constant PConst_string("value",(typing/includemod.ml[235,8163+20]..[235,8163+25]),None)
              <case>
                pattern (typing/includemod.ml[236,8190+4]..[236,8190+14])
                  Ppat_construct "Field_type" (typing/includemod.ml[236,8190+4]..[236,8190+14])
                  None
                expression (typing/includemod.ml[236,8190+18]..[236,8190+24])
                  Pexp_constant PConst_string("type",(typing/includemod.ml[236,8190+19]..[236,8190+23]),None)
              <case>
                pattern (typing/includemod.ml[237,8215+4]..[237,8215+19])
                  Ppat_construct "Field_exception" (typing/includemod.ml[237,8215+4]..[237,8215+19])
                  None
                expression (typing/includemod.ml[237,8215+23]..[237,8215+34])
                  Pexp_constant PConst_string("exception",(typing/includemod.ml[237,8215+24]..[237,8215+33]),None)
              <case>
                pattern (typing/includemod.ml[238,8250+4]..[238,8250+16])
                  Ppat_construct "Field_typext" (typing/includemod.ml[238,8250+4]..[238,8250+16])
                  None
                expression (typing/includemod.ml[238,8250+20]..[238,8250+43])
                  Pexp_constant PConst_string("extension constructor",(typing/includemod.ml[238,8250+21]..[238,8250+42]),None)
              <case>
                pattern (typing/includemod.ml[239,8294+4]..[239,8294+16])
                  Ppat_construct "Field_module" (typing/includemod.ml[239,8294+4]..[239,8294+16])
                  None
                expression (typing/includemod.ml[239,8294+20]..[239,8294+28])
                  Pexp_constant PConst_string("module",(typing/includemod.ml[239,8294+21]..[239,8294+27]),None)
              <case>
                pattern (typing/includemod.ml[240,8323+4]..[240,8323+17])
                  Ppat_construct "Field_modtype" (typing/includemod.ml[240,8323+4]..[240,8323+17])
                  None
                expression (typing/includemod.ml[240,8323+21]..[240,8323+34])
                  Pexp_constant PConst_string("module type",(typing/includemod.ml[240,8323+22]..[240,8323+33]),None)
              <case>
                pattern (typing/includemod.ml[241,8358+4]..[241,8358+15])
                  Ppat_construct "Field_class" (typing/includemod.ml[241,8358+4]..[241,8358+15])
                  None
                expression (typing/includemod.ml[241,8358+19]..[241,8358+26])
                  Pexp_constant PConst_string("class",(typing/includemod.ml[241,8358+20]..[241,8358+25]),None)
              <case>
                pattern (typing/includemod.ml[242,8385+4]..[242,8385+19])
                  Ppat_construct "Field_classtype" (typing/includemod.ml[242,8385+4]..[242,8385+19])
                  None
                expression (typing/includemod.ml[242,8385+23]..[242,8385+35])
                  Pexp_constant PConst_string("class type",(typing/includemod.ml[242,8385+24]..[242,8385+34]),None)
            ]
    ]
  structure_item (typing/includemod.ml[244,8422+0]..[244,8422+55])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/includemod.ml[244,8422+4]..[244,8422+14])
          Ppat_var "field_desc" (typing/includemod.ml[244,8422+4]..[244,8422+14])
        expression (typing/includemod.ml[244,8422+15]..[244,8422+55]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (typing/includemod.ml[244,8422+15]..[244,8422+19])
            Ppat_var "kind" (typing/includemod.ml[244,8422+15]..[244,8422+19])
          expression (typing/includemod.ml[244,8422+20]..[244,8422+55]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (typing/includemod.ml[244,8422+20]..[244,8422+22])
              Ppat_var "id" (typing/includemod.ml[244,8422+20]..[244,8422+22])
            expression (typing/includemod.ml[244,8422+25]..[244,8422+55])
              Pexp_record
              [
                "kind" (typing/includemod.ml[244,8422+27]..[244,8422+31]) ghost
                  expression (typing/includemod.ml[244,8422+27]..[244,8422+31])
                    Pexp_ident "kind" (typing/includemod.ml[244,8422+27]..[244,8422+31])
                "name" (typing/includemod.ml[244,8422+33]..[244,8422+37])
                  expression (typing/includemod.ml[244,8422+40]..[244,8422+53])
                    Pexp_apply
                    expression (typing/includemod.ml[244,8422+40]..[244,8422+50])
                      Pexp_ident "Ident.name" (typing/includemod.ml[244,8422+40]..[244,8422+50])
                    [
                      <arg>
                      Nolabel
                        expression (typing/includemod.ml[244,8422+51]..[244,8422+53])
                          Pexp_ident "id" (typing/includemod.ml[244,8422+51]..[244,8422+53])
                    ]
              ]
              None
    ]
  structure_item (typing/includemod.ml[249,8622+0]..[252,8713+6])
    Pstr_module
    "FieldMap" (typing/includemod.ml[249,8622+7]..[249,8622+15])
      attribute "ocaml.doc"
        [
          structure_item (typing/includemod.ml[246,8479+0]..[248,8589+32])
            Pstr_eval
            expression (typing/includemod.ml[246,8479+0]..[248,8589+32])
              Pexp_constant PConst_string(" Map indexed by both field types and names.\n    This avoids name clashes between different sorts of fields\n    such as values and types. ",(typing/includemod.ml[246,8479+0]..[248,8589+32]),None)
        ]
      module_expr (typing/includemod.ml[249,8622+18]..[252,8713+6])
        Pmod_apply
        module_expr (typing/includemod.ml[249,8622+18]..[249,8622+26])
          Pmod_ident "Map.Make" (typing/includemod.ml[249,8622+18]..[249,8622+26])
        module_expr (typing/includemod.ml[249,8622+27]..[252,8713+5])
          Pmod_structure
          [
            structure_item (typing/includemod.ml[250,8656+4]..[250,8656+23])
              Pstr_type Rec
              [
                type_declaration "t" (typing/includemod.ml[250,8656+9]..[250,8656+10]) (typing/includemod.ml[250,8656+4]..[250,8656+23])
                  ptype_params =
                    []
                  ptype_cstrs =
                    []
                  ptype_kind =
                    Ptype_abstract
                  ptype_private = Public
                  ptype_manifest =
                    Some
                      core_type (typing/includemod.ml[250,8656+13]..[250,8656+23])
                        Ptyp_constr "field_desc" (typing/includemod.ml[250,8656+13]..[250,8656+23])
                        []
              ]
            structure_item (typing/includemod.ml[251,8680+4]..[251,8680+32])
              Pstr_value Nonrec
              [
                <def>
                  pattern (typing/includemod.ml[251,8680+8]..[251,8680+15])
                    Ppat_var "compare" (typing/includemod.ml[251,8680+8]..[251,8680+15])
                  expression (typing/includemod.ml[251,8680+18]..[251,8680+32])
                    Pexp_ident "Stdlib.compare" (typing/includemod.ml[251,8680+18]..[251,8680+32])
              ]
          ]
  structure_item (typing/includemod.ml[254,8721+0]..[268,9362+53])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/includemod.ml[254,8721+4]..[254,8721+19])
          Ppat_var "item_ident_name" (typing/includemod.ml[254,8721+4]..[254,8721+19])
        expression (typing/includemod.ml[254,8721+22]..[268,9362+53])
          Pexp_function
          [
            <case>
              pattern (typing/includemod.ml[255,8752+4]..[255,8752+23])
                Ppat_construct "Sig_value" (typing/includemod.ml[255,8752+4]..[255,8752+13])
                Some
                  []
                  pattern (typing/includemod.ml[255,8752+13]..[255,8752+23])
                    Ppat_tuple
                    [
                      pattern (typing/includemod.ml[255,8752+14]..[255,8752+16])
                        Ppat_var "id" (typing/includemod.ml[255,8752+14]..[255,8752+16])
                      pattern (typing/includemod.ml[255,8752+18]..[255,8752+19])
                        Ppat_var "d" (typing/includemod.ml[255,8752+18]..[255,8752+19])
                      pattern (typing/includemod.ml[255,8752+21]..[255,8752+22])
                        Ppat_any
                    ]
              expression (typing/includemod.ml[255,8752+27]..[255,8752+69])
                Pexp_tuple
                [
                  expression (typing/includemod.ml[255,8752+28]..[255,8752+30])
                    Pexp_ident "id" (typing/includemod.ml[255,8752+28]..[255,8752+30])
                  expression (typing/includemod.ml[255,8752+32]..[255,8752+41])
                    Pexp_field
                    expression (typing/includemod.ml[255,8752+32]..[255,8752+33])
                      Pexp_ident "d" (typing/includemod.ml[255,8752+32]..[255,8752+33])
                    "val_loc" (typing/includemod.ml[255,8752+34]..[255,8752+41])
                  expression (typing/includemod.ml[255,8752+43]..[255,8752+68])
                    Pexp_apply
                    expression (typing/includemod.ml[255,8752+43]..[255,8752+53])
                      Pexp_ident "field_desc" (typing/includemod.ml[255,8752+43]..[255,8752+53])
                    [
                      <arg>
                      Nolabel
                        expression (typing/includemod.ml[255,8752+54]..[255,8752+65])
                          Pexp_construct "Field_value" (typing/includemod.ml[255,8752+54]..[255,8752+65])
                          None
                      <arg>
                      Nolabel
                        expression (typing/includemod.ml[255,8752+66]..[255,8752+68])
                          Pexp_ident "id" (typing/includemod.ml[255,8752+66]..[255,8752+68])
                    ]
                ]
            <case>
              pattern (typing/includemod.ml[256,8822+4]..[256,8822+25])
                Ppat_construct "Sig_type" (typing/includemod.ml[256,8822+4]..[256,8822+12])
                Some
                  []
                  pattern (typing/includemod.ml[256,8822+12]..[256,8822+25])
                    Ppat_tuple
                    [
                      pattern (typing/includemod.ml[256,8822+13]..[256,8822+15])
                        Ppat_var "id" (typing/includemod.ml[256,8822+13]..[256,8822+15])
                      pattern (typing/includemod.ml[256,8822+17]..[256,8822+18])
                        Ppat_var "d" (typing/includemod.ml[256,8822+17]..[256,8822+18])
                      pattern (typing/includemod.ml[256,8822+20]..[256,8822+21])
                        Ppat_any
                      pattern (typing/includemod.ml[256,8822+23]..[256,8822+24])
                        Ppat_any
                    ]
              expression (typing/includemod.ml[256,8822+29]..[256,8822+73])
                Pexp_tuple
                [
                  expression (typing/includemod.ml[256,8822+30]..[256,8822+32])
                    Pexp_ident "id" (typing/includemod.ml[256,8822+30]..[256,8822+32])
                  expression (typing/includemod.ml[256,8822+34]..[256,8822+44])
                    Pexp_field
                    expression (typing/includemod.ml[256,8822+34]..[256,8822+35])
                      Pexp_ident "d" (typing/includemod.ml[256,8822+34]..[256,8822+35])
                    "type_loc" (typing/includemod.ml[256,8822+36]..[256,8822+44])
                  expression (typing/includemod.ml[256,8822+46]..[256,8822+71])
                    Pexp_apply
                    expression (typing/includemod.ml[256,8822+46]..[256,8822+56])
                      Pexp_ident "field_desc" (typing/includemod.ml[256,8822+46]..[256,8822+56])
                    [
                      <arg>
                      Nolabel
                        expression (typing/includemod.ml[256,8822+57]..[256,8822+67])
                          Pexp_construct "Field_type" (typing/includemod.ml[256,8822+57]..[256,8822+67])
                          None
                      <arg>
                      Nolabel
                        expression (typing/includemod.ml[256,8822+69]..[256,8822+71])
                          Pexp_ident "id" (typing/includemod.ml[256,8822+69]..[256,8822+71])
                    ]
                ]
            <case>
              pattern (typing/includemod.ml[257,8896+4]..[257,8896+27])
                Ppat_construct "Sig_typext" (typing/includemod.ml[257,8896+4]..[257,8896+14])
                Some
                  []
                  pattern (typing/includemod.ml[257,8896+14]..[257,8896+27])
                    Ppat_tuple
                    [
                      pattern (typing/includemod.ml[257,8896+15]..[257,8896+17])
                        Ppat_var "id" (typing/includemod.ml[257,8896+15]..[257,8896+17])
                      pattern (typing/includemod.ml[257,8896+19]..[257,8896+20])
                        Ppat_var "d" (typing/includemod.ml[257,8896+19]..[257,8896+20])
                      pattern (typing/includemod.ml[257,8896+22]..[257,8896+23])
                        Ppat_any
                      pattern (typing/includemod.ml[257,8896+25]..[257,8896+26])
                        Ppat_any
                    ]
              expression (typing/includemod.ml[258,8927+6]..[263,9061+41])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (typing/includemod.ml[258,8927+10]..[258,8927+14])
                      Ppat_var "kind" (typing/includemod.ml[258,8927+10]..[258,8927+14])
                    expression (typing/includemod.ml[259,8944+8]..[261,9026+25])
                      Pexp_ifthenelse
                      expression (typing/includemod.ml[259,8944+11]..[259,8944+52])
                        Pexp_apply
                        expression (typing/includemod.ml[259,8944+11]..[259,8944+20])
                          Pexp_ident "Path.same" (typing/includemod.ml[259,8944+11]..[259,8944+20])
                        [
                          <arg>
                          Nolabel
                            expression (typing/includemod.ml[259,8944+21]..[259,8944+36])
                              Pexp_field
                              expression (typing/includemod.ml[259,8944+21]..[259,8944+22])
                                Pexp_ident "d" (typing/includemod.ml[259,8944+21]..[259,8944+22])
                              "ext_type_path" (typing/includemod.ml[259,8944+23]..[259,8944+36])
                          <arg>
                          Nolabel
                            expression (typing/includemod.ml[259,8944+37]..[259,8944+52])
                              Pexp_ident "Predef.path_exn" (typing/includemod.ml[259,8944+37]..[259,8944+52])
                        ]
                      expression (typing/includemod.ml[260,8997+13]..[260,8997+28])
                        Pexp_construct "Field_exception" (typing/includemod.ml[260,8997+13]..[260,8997+28])
                        None
                      Some
                        expression (typing/includemod.ml[261,9026+13]..[261,9026+25])
                          Pexp_construct "Field_typext" (typing/includemod.ml[261,9026+13]..[261,9026+25])
                          None
                ]
                expression (typing/includemod.ml[263,9061+6]..[263,9061+41])
                  Pexp_tuple
                  [
                    expression (typing/includemod.ml[263,9061+7]..[263,9061+9])
                      Pexp_ident "id" (typing/includemod.ml[263,9061+7]..[263,9061+9])
                    expression (typing/includemod.ml[263,9061+11]..[263,9061+20])
                      Pexp_field
                      expression (typing/includemod.ml[263,9061+11]..[263,9061+12])
                        Pexp_ident "d" (typing/includemod.ml[263,9061+11]..[263,9061+12])
                      "ext_loc" (typing/includemod.ml[263,9061+13]..[263,9061+20])
                    expression (typing/includemod.ml[263,9061+22]..[263,9061+40])
                      Pexp_apply
                      expression (typing/includemod.ml[263,9061+22]..[263,9061+32])
                        Pexp_ident "field_desc" (typing/includemod.ml[263,9061+22]..[263,9061+32])
                      [
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[263,9061+33]..[263,9061+37])
                            Pexp_ident "kind" (typing/includemod.ml[263,9061+33]..[263,9061+37])
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[263,9061+38]..[263,9061+40])
                            Pexp_ident "id" (typing/includemod.ml[263,9061+38]..[263,9061+40])
                      ]
                  ]
            <case>
              pattern (typing/includemod.ml[264,9103+4]..[264,9103+30])
                Ppat_construct "Sig_module" (typing/includemod.ml[264,9103+4]..[264,9103+14])
                Some
                  []
                  pattern (typing/includemod.ml[264,9103+14]..[264,9103+30])
                    Ppat_tuple
                    [
                      pattern (typing/includemod.ml[264,9103+15]..[264,9103+17])
                        Ppat_var "id" (typing/includemod.ml[264,9103+15]..[264,9103+17])
                      pattern (typing/includemod.ml[264,9103+19]..[264,9103+20])
                        Ppat_any
                      pattern (typing/includemod.ml[264,9103+22]..[264,9103+23])
                        Ppat_var "d" (typing/includemod.ml[264,9103+22]..[264,9103+23])
                      pattern (typing/includemod.ml[264,9103+25]..[264,9103+26])
                        Ppat_any
                      pattern (typing/includemod.ml[264,9103+28]..[264,9103+29])
                        Ppat_any
                    ]
              expression (typing/includemod.ml[264,9103+34]..[264,9103+76])
                Pexp_tuple
                [
                  expression (typing/includemod.ml[264,9103+35]..[264,9103+37])
                    Pexp_ident "id" (typing/includemod.ml[264,9103+35]..[264,9103+37])
                  expression (typing/includemod.ml[264,9103+39]..[264,9103+47])
                    Pexp_field
                    expression (typing/includemod.ml[264,9103+39]..[264,9103+40])
                      Pexp_ident "d" (typing/includemod.ml[264,9103+39]..[264,9103+40])
                    "md_loc" (typing/includemod.ml[264,9103+41]..[264,9103+47])
                  expression (typing/includemod.ml[264,9103+49]..[264,9103+75])
                    Pexp_apply
                    expression (typing/includemod.ml[264,9103+49]..[264,9103+59])
                      Pexp_ident "field_desc" (typing/includemod.ml[264,9103+49]..[264,9103+59])
                    [
                      <arg>
                      Nolabel
                        expression (typing/includemod.ml[264,9103+60]..[264,9103+72])
                          Pexp_construct "Field_module" (typing/includemod.ml[264,9103+60]..[264,9103+72])
                          None
                      <arg>
                      Nolabel
                        expression (typing/includemod.ml[264,9103+73]..[264,9103+75])
                          Pexp_ident "id" (typing/includemod.ml[264,9103+73]..[264,9103+75])
                    ]
                ]
            <case>
              pattern (typing/includemod.ml[265,9180+4]..[265,9180+25])
                Ppat_construct "Sig_modtype" (typing/includemod.ml[265,9180+4]..[265,9180+15])
                Some
                  []
                  pattern (typing/includemod.ml[265,9180+15]..[265,9180+25])
                    Ppat_tuple
                    [
                      pattern (typing/includemod.ml[265,9180+16]..[265,9180+18])
                        Ppat_var "id" (typing/includemod.ml[265,9180+16]..[265,9180+18])
                      pattern (typing/includemod.ml[265,9180+20]..[265,9180+21])
                        Ppat_var "d" (typing/includemod.ml[265,9180+20]..[265,9180+21])
                      pattern (typing/includemod.ml[265,9180+23]..[265,9180+24])
                        Ppat_any
                    ]
              expression (typing/includemod.ml[265,9180+29]..[265,9180+73])
                Pexp_tuple
                [
                  expression (typing/includemod.ml[265,9180+30]..[265,9180+32])
                    Pexp_ident "id" (typing/includemod.ml[265,9180+30]..[265,9180+32])
                  expression (typing/includemod.ml[265,9180+34]..[265,9180+43])
                    Pexp_field
                    expression (typing/includemod.ml[265,9180+34]..[265,9180+35])
                      Pexp_ident "d" (typing/includemod.ml[265,9180+34]..[265,9180+35])
                    "mtd_loc" (typing/includemod.ml[265,9180+36]..[265,9180+43])
                  expression (typing/includemod.ml[265,9180+45]..[265,9180+72])
                    Pexp_apply
                    expression (typing/includemod.ml[265,9180+45]..[265,9180+55])
                      Pexp_ident "field_desc" (typing/includemod.ml[265,9180+45]..[265,9180+55])
                    [
                      <arg>
                      Nolabel
                        expression (typing/includemod.ml[265,9180+56]..[265,9180+69])
                          Pexp_construct "Field_modtype" (typing/includemod.ml[265,9180+56]..[265,9180+69])
                          None
                      <arg>
                      Nolabel
                        expression (typing/includemod.ml[265,9180+70]..[265,9180+72])
                          Pexp_ident "id" (typing/includemod.ml[265,9180+70]..[265,9180+72])
                    ]
                ]
            <case>
              pattern (typing/includemod.ml[266,9254+4]..[266,9254+26])
                Ppat_construct "Sig_class" (typing/includemod.ml[266,9254+4]..[266,9254+13])
                Some
                  []
                  pattern (typing/includemod.ml[266,9254+13]..[266,9254+26])
                    Ppat_tuple
                    [
                      pattern (typing/includemod.ml[266,9254+14]..[266,9254+16])
                        Ppat_var "id" (typing/includemod.ml[266,9254+14]..[266,9254+16])
                      pattern (typing/includemod.ml[266,9254+18]..[266,9254+19])
                        Ppat_var "d" (typing/includemod.ml[266,9254+18]..[266,9254+19])
                      pattern (typing/includemod.ml[266,9254+21]..[266,9254+22])
                        Ppat_any
                      pattern (typing/includemod.ml[266,9254+24]..[266,9254+25])
                        Ppat_any
                    ]
              expression (typing/includemod.ml[266,9254+30]..[266,9254+72])
                Pexp_tuple
                [
                  expression (typing/includemod.ml[266,9254+31]..[266,9254+33])
                    Pexp_ident "id" (typing/includemod.ml[266,9254+31]..[266,9254+33])
                  expression (typing/includemod.ml[266,9254+35]..[266,9254+44])
                    Pexp_field
                    expression (typing/includemod.ml[266,9254+35]..[266,9254+36])
                      Pexp_ident "d" (typing/includemod.ml[266,9254+35]..[266,9254+36])
                    "cty_loc" (typing/includemod.ml[266,9254+37]..[266,9254+44])
                  expression (typing/includemod.ml[266,9254+46]..[266,9254+71])
                    Pexp_apply
                    expression (typing/includemod.ml[266,9254+46]..[266,9254+56])
                      Pexp_ident "field_desc" (typing/includemod.ml[266,9254+46]..[266,9254+56])
                    [
                      <arg>
                      Nolabel
                        expression (typing/includemod.ml[266,9254+57]..[266,9254+68])
                          Pexp_construct "Field_class" (typing/includemod.ml[266,9254+57]..[266,9254+68])
                          None
                      <arg>
                      Nolabel
                        expression (typing/includemod.ml[266,9254+69]..[266,9254+71])
                          Pexp_ident "id" (typing/includemod.ml[266,9254+69]..[266,9254+71])
                    ]
                ]
            <case>
              pattern (typing/includemod.ml[267,9327+4]..[267,9327+31])
                Ppat_construct "Sig_class_type" (typing/includemod.ml[267,9327+4]..[267,9327+18])
                Some
                  []
                  pattern (typing/includemod.ml[267,9327+18]..[267,9327+31])
                    Ppat_tuple
                    [
                      pattern (typing/includemod.ml[267,9327+19]..[267,9327+21])
                        Ppat_var "id" (typing/includemod.ml[267,9327+19]..[267,9327+21])
                      pattern (typing/includemod.ml[267,9327+23]..[267,9327+24])
                        Ppat_var "d" (typing/includemod.ml[267,9327+23]..[267,9327+24])
                      pattern (typing/includemod.ml[267,9327+26]..[267,9327+27])
                        Ppat_any
                      pattern (typing/includemod.ml[267,9327+29]..[267,9327+30])
                        Ppat_any
                    ]
              expression (typing/includemod.ml[268,9362+6]..[268,9362+53])
                Pexp_tuple
                [
                  expression (typing/includemod.ml[268,9362+7]..[268,9362+9])
                    Pexp_ident "id" (typing/includemod.ml[268,9362+7]..[268,9362+9])
                  expression (typing/includemod.ml[268,9362+11]..[268,9362+21])
                    Pexp_field
                    expression (typing/includemod.ml[268,9362+11]..[268,9362+12])
                      Pexp_ident "d" (typing/includemod.ml[268,9362+11]..[268,9362+12])
                    "clty_loc" (typing/includemod.ml[268,9362+13]..[268,9362+21])
                  expression (typing/includemod.ml[268,9362+23]..[268,9362+52])
                    Pexp_apply
                    expression (typing/includemod.ml[268,9362+23]..[268,9362+33])
                      Pexp_ident "field_desc" (typing/includemod.ml[268,9362+23]..[268,9362+33])
                    [
                      <arg>
                      Nolabel
                        expression (typing/includemod.ml[268,9362+34]..[268,9362+49])
                          Pexp_construct "Field_classtype" (typing/includemod.ml[268,9362+34]..[268,9362+49])
                          None
                      <arg>
                      Nolabel
                        expression (typing/includemod.ml[268,9362+50]..[268,9362+52])
                          Pexp_ident "id" (typing/includemod.ml[268,9362+50]..[268,9362+52])
                    ]
                ]
          ]
    ]
  structure_item (typing/includemod.ml[270,9417+0]..[279,9693+30])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/includemod.ml[270,9417+4]..[270,9417+24])
          Ppat_var "is_runtime_component" (typing/includemod.ml[270,9417+4]..[270,9417+24])
        expression (typing/includemod.ml[270,9417+27]..[279,9693+30])
          Pexp_function
          [
            <case>
              pattern (typing/includemod.ml[271,9453+4]..[275,9576+27])
                Ppat_or
                pattern (typing/includemod.ml[271,9453+4]..[274,9553+22])
                  Ppat_or
                  pattern (typing/includemod.ml[271,9453+4]..[273,9519+33])
                    Ppat_or
                    pattern (typing/includemod.ml[271,9453+4]..[272,9497+21])
                      Ppat_or
                      pattern (typing/includemod.ml[271,9453+4]..[271,9453+43])
                        Ppat_construct "Sig_value" (typing/includemod.ml[271,9453+4]..[271,9453+13])
                        Some
                          []
                          pattern (typing/includemod.ml[271,9453+13]..[271,9453+43])
                            Ppat_tuple
                            [
                              pattern (typing/includemod.ml[271,9453+14]..[271,9453+15])
                                Ppat_any
                              pattern (typing/includemod.ml[271,9453+16]..[271,9453+39])
                                Ppat_record Closed
                                [
                                  "val_kind" (typing/includemod.ml[271,9453+17]..[271,9453+25])
                                    pattern (typing/includemod.ml[271,9453+28]..[271,9453+38])
                                      Ppat_construct "Val_prim" (typing/includemod.ml[271,9453+28]..[271,9453+36])
                                      Some
                                        []
                                        pattern (typing/includemod.ml[271,9453+37]..[271,9453+38])
                                          Ppat_any
                                ]
                              pattern (typing/includemod.ml[271,9453+41]..[271,9453+42])
                                Ppat_any
                            ]
                      pattern (typing/includemod.ml[272,9497+4]..[272,9497+21])
                        Ppat_construct "Sig_type" (typing/includemod.ml[272,9497+4]..[272,9497+12])
                        Some
                          []
                          pattern (typing/includemod.ml[272,9497+12]..[272,9497+21])
                            Ppat_tuple
                            [
                              pattern (typing/includemod.ml[272,9497+13]..[272,9497+14])
                                Ppat_any
                              pattern (typing/includemod.ml[272,9497+15]..[272,9497+16])
                                Ppat_any
                              pattern (typing/includemod.ml[272,9497+17]..[272,9497+18])
                                Ppat_any
                              pattern (typing/includemod.ml[272,9497+19]..[272,9497+20])
                                Ppat_any
                            ]
                    pattern (typing/includemod.ml[273,9519+4]..[273,9519+33])
                      Ppat_construct "Sig_module" (typing/includemod.ml[273,9519+4]..[273,9519+14])
                      Some
                        []
                        pattern (typing/includemod.ml[273,9519+14]..[273,9519+33])
                          Ppat_tuple
                          [
                            pattern (typing/includemod.ml[273,9519+15]..[273,9519+16])
                              Ppat_any
                            pattern (typing/includemod.ml[273,9519+17]..[273,9519+26])
                              Ppat_construct "Mp_absent" (typing/includemod.ml[273,9519+17]..[273,9519+26])
                              None
                            pattern (typing/includemod.ml[273,9519+27]..[273,9519+28])
                              Ppat_any
                            pattern (typing/includemod.ml[273,9519+29]..[273,9519+30])
                              Ppat_any
                            pattern (typing/includemod.ml[273,9519+31]..[273,9519+32])
                              Ppat_any
                          ]
                  pattern (typing/includemod.ml[274,9553+4]..[274,9553+22])
                    Ppat_construct "Sig_modtype" (typing/includemod.ml[274,9553+4]..[274,9553+15])
                    Some
                      []
                      pattern (typing/includemod.ml[274,9553+15]..[274,9553+22])
                        Ppat_tuple
                        [
                          pattern (typing/includemod.ml[274,9553+16]..[274,9553+17])
                            Ppat_any
                          pattern (typing/includemod.ml[274,9553+18]..[274,9553+19])
                            Ppat_any
                          pattern (typing/includemod.ml[274,9553+20]..[274,9553+21])
                            Ppat_any
                        ]
                pattern (typing/includemod.ml[275,9576+4]..[275,9576+27])
                  Ppat_construct "Sig_class_type" (typing/includemod.ml[275,9576+4]..[275,9576+18])
                  Some
                    []
                    pattern (typing/includemod.ml[275,9576+18]..[275,9576+27])
                      Ppat_tuple
                      [
                        pattern (typing/includemod.ml[275,9576+19]..[275,9576+20])
                          Ppat_any
                        pattern (typing/includemod.ml[275,9576+21]..[275,9576+22])
                          Ppat_any
                        pattern (typing/includemod.ml[275,9576+23]..[275,9576+24])
                          Ppat_any
                        pattern (typing/includemod.ml[275,9576+25]..[275,9576+26])
                          Ppat_any
                      ]
              expression (typing/includemod.ml[275,9576+31]..[275,9576+36])
                Pexp_construct "false" (typing/includemod.ml[275,9576+31]..[275,9576+36])
                None
            <case>
              pattern (typing/includemod.ml[276,9613+4]..[279,9693+22])
                Ppat_or
                pattern (typing/includemod.ml[276,9613+4]..[278,9658+34])
                  Ppat_or
                  pattern (typing/includemod.ml[276,9613+4]..[277,9634+23])
                    Ppat_or
                    pattern (typing/includemod.ml[276,9613+4]..[276,9613+20])
                      Ppat_construct "Sig_value" (typing/includemod.ml[276,9613+4]..[276,9613+13])
                      Some
                        []
                        pattern (typing/includemod.ml[276,9613+13]..[276,9613+20])
                          Ppat_tuple
                          [
                            pattern (typing/includemod.ml[276,9613+14]..[276,9613+15])
                              Ppat_any
                            pattern (typing/includemod.ml[276,9613+16]..[276,9613+17])
                              Ppat_any
                            pattern (typing/includemod.ml[276,9613+18]..[276,9613+19])
                              Ppat_any
                          ]
                    pattern (typing/includemod.ml[277,9634+4]..[277,9634+23])
                      Ppat_construct "Sig_typext" (typing/includemod.ml[277,9634+4]..[277,9634+14])
                      Some
                        []
                        pattern (typing/includemod.ml[277,9634+14]..[277,9634+23])
                          Ppat_tuple
                          [
                            pattern (typing/includemod.ml[277,9634+15]..[277,9634+16])
                              Ppat_any
                            pattern (typing/includemod.ml[277,9634+17]..[277,9634+18])
                              Ppat_any
                            pattern (typing/includemod.ml[277,9634+19]..[277,9634+20])
                              Ppat_any
                            pattern (typing/includemod.ml[277,9634+21]..[277,9634+22])
                              Ppat_any
                          ]
                  pattern (typing/includemod.ml[278,9658+4]..[278,9658+34])
                    Ppat_construct "Sig_module" (typing/includemod.ml[278,9658+4]..[278,9658+14])
                    Some
                      []
                      pattern (typing/includemod.ml[278,9658+14]..[278,9658+34])
                        Ppat_tuple
                        [
                          pattern (typing/includemod.ml[278,9658+15]..[278,9658+16])
                            Ppat_any
                          pattern (typing/includemod.ml[278,9658+17]..[278,9658+27])
                            Ppat_construct "Mp_present" (typing/includemod.ml[278,9658+17]..[278,9658+27])
                            None
                          pattern (typing/includemod.ml[278,9658+28]..[278,9658+29])
                            Ppat_any
                          pattern (typing/includemod.ml[278,9658+30]..[278,9658+31])
                            Ppat_any
                          pattern (typing/includemod.ml[278,9658+32]..[278,9658+33])
                            Ppat_any
                        ]
                pattern (typing/includemod.ml[279,9693+4]..[279,9693+22])
                  Ppat_construct "Sig_class" (typing/includemod.ml[279,9693+4]..[279,9693+13])
                  Some
                    []
                    pattern (typing/includemod.ml[279,9693+13]..[279,9693+22])
                      Ppat_tuple
                      [
                        pattern (typing/includemod.ml[279,9693+14]..[279,9693+15])
                          Ppat_any
                        pattern (typing/includemod.ml[279,9693+16]..[279,9693+17])
                          Ppat_any
                        pattern (typing/includemod.ml[279,9693+18]..[279,9693+19])
                          Ppat_any
                        pattern (typing/includemod.ml[279,9693+20]..[279,9693+21])
                          Ppat_any
                      ]
              expression (typing/includemod.ml[279,9693+26]..[279,9693+30])
                Pexp_construct "true" (typing/includemod.ml[279,9693+26]..[279,9693+30])
                None
          ]
    ]
  structure_item (typing/includemod.ml[283,9749+0]..[286,9819+69])
    Pstr_value Rec
    [
      <def>
        pattern (typing/includemod.ml[283,9749+8]..[283,9749+18])
          Ppat_var "print_list" (typing/includemod.ml[283,9749+8]..[283,9749+18])
        expression (typing/includemod.ml[283,9749+19]..[286,9819+69]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (typing/includemod.ml[283,9749+19]..[283,9749+21])
            Ppat_var "pr" (typing/includemod.ml[283,9749+19]..[283,9749+21])
          expression (typing/includemod.ml[283,9749+22]..[286,9819+69]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (typing/includemod.ml[283,9749+22]..[283,9749+25])
              Ppat_var "ppf" (typing/includemod.ml[283,9749+22]..[283,9749+25])
            expression (typing/includemod.ml[283,9749+28]..[286,9819+69])
              Pexp_function
              [
                <case>
                  pattern (typing/includemod.ml[284,9786+4]..[284,9786+6])
                    Ppat_construct "[]" (typing/includemod.ml[284,9786+4]..[284,9786+6])
                    None
                  expression (typing/includemod.ml[284,9786+10]..[284,9786+12])
                    Pexp_construct "()" (typing/includemod.ml[284,9786+10]..[284,9786+12])
                    None
                <case>
                  pattern (typing/includemod.ml[285,9799+4]..[285,9799+7])
                    Ppat_construct "::" (typing/includemod.ml[285,9799+5]..[285,9799+7]) ghost
                    Some
                      []
                      pattern (typing/includemod.ml[285,9799+5]..[285,9799+7]) ghost
                        Ppat_tuple
                        [
                          pattern (typing/includemod.ml[285,9799+5]..[285,9799+6])
                            Ppat_var "a" (typing/includemod.ml[285,9799+5]..[285,9799+6])
                          pattern (typing/includemod.ml[285,9799+6]..[285,9799+7]) ghost
                            Ppat_construct "[]" (typing/includemod.ml[285,9799+6]..[285,9799+7]) ghost
                            None
                        ]
                  expression (typing/includemod.ml[285,9799+11]..[285,9799+19])
                    Pexp_apply
                    expression (typing/includemod.ml[285,9799+11]..[285,9799+13])
                      Pexp_ident "pr" (typing/includemod.ml[285,9799+11]..[285,9799+13])
                    [
                      <arg>
                      Nolabel
                        expression (typing/includemod.ml[285,9799+14]..[285,9799+17])
                          Pexp_ident "ppf" (typing/includemod.ml[285,9799+14]..[285,9799+17])
                      <arg>
                      Nolabel
                        expression (typing/includemod.ml[285,9799+18]..[285,9799+19])
                          Pexp_ident "a" (typing/includemod.ml[285,9799+18]..[285,9799+19])
                    ]
                <case>
                  pattern (typing/includemod.ml[286,9819+4]..[286,9819+10])
                    Ppat_construct "::" (typing/includemod.ml[286,9819+6]..[286,9819+8])
                    Some
                      []
                      pattern (typing/includemod.ml[286,9819+4]..[286,9819+10]) ghost
                        Ppat_tuple
                        [
                          pattern (typing/includemod.ml[286,9819+4]..[286,9819+5])
                            Ppat_var "a" (typing/includemod.ml[286,9819+4]..[286,9819+5])
                          pattern (typing/includemod.ml[286,9819+9]..[286,9819+10])
                            Ppat_var "l" (typing/includemod.ml[286,9819+9]..[286,9819+10])
                        ]
                  expression (typing/includemod.ml[286,9819+14]..[286,9819+69])
                    Pexp_sequence
                    expression (typing/includemod.ml[286,9819+14]..[286,9819+22])
                      Pexp_apply
                      expression (typing/includemod.ml[286,9819+14]..[286,9819+16])
                        Pexp_ident "pr" (typing/includemod.ml[286,9819+14]..[286,9819+16])
                      [
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[286,9819+17]..[286,9819+20])
                            Pexp_ident "ppf" (typing/includemod.ml[286,9819+17]..[286,9819+20])
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[286,9819+21]..[286,9819+22])
                            Pexp_ident "a" (typing/includemod.ml[286,9819+21]..[286,9819+22])
                      ]
                    expression (typing/includemod.ml[286,9819+24]..[286,9819+69])
                      Pexp_sequence
                      expression (typing/includemod.ml[286,9819+24]..[286,9819+48])
                        Pexp_apply
                        expression (typing/includemod.ml[286,9819+24]..[286,9819+38])
                          Pexp_ident "Format.fprintf" (typing/includemod.ml[286,9819+24]..[286,9819+38])
                        [
                          <arg>
                          Nolabel
                            expression (typing/includemod.ml[286,9819+39]..[286,9819+42])
                              Pexp_ident "ppf" (typing/includemod.ml[286,9819+39]..[286,9819+42])
                          <arg>
                          Nolabel
                            expression (typing/includemod.ml[286,9819+43]..[286,9819+48])
                              Pexp_constant PConst_string(";@ ",(typing/includemod.ml[286,9819+44]..[286,9819+47]),None)
                        ]
                      expression (typing/includemod.ml[286,9819+50]..[286,9819+69])
                        Pexp_apply
                        expression (typing/includemod.ml[286,9819+50]..[286,9819+60])
                          Pexp_ident "print_list" (typing/includemod.ml[286,9819+50]..[286,9819+60])
                        [
                          <arg>
                          Nolabel
                            expression (typing/includemod.ml[286,9819+61]..[286,9819+63])
                              Pexp_ident "pr" (typing/includemod.ml[286,9819+61]..[286,9819+63])
                          <arg>
                          Nolabel
                            expression (typing/includemod.ml[286,9819+64]..[286,9819+67])
                              Pexp_ident "ppf" (typing/includemod.ml[286,9819+64]..[286,9819+67])
                          <arg>
                          Nolabel
                            expression (typing/includemod.ml[286,9819+68]..[286,9819+69])
                              Pexp_ident "l" (typing/includemod.ml[286,9819+68]..[286,9819+69])
                        ]
              ]
    ]
  structure_item (typing/includemod.ml[287,9889+0]..[288,9915+49])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/includemod.ml[287,9889+4]..[287,9889+14])
          Ppat_var "print_list" (typing/includemod.ml[287,9889+4]..[287,9889+14])
        expression (typing/includemod.ml[287,9889+15]..[288,9915+49]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (typing/includemod.ml[287,9889+15]..[287,9889+17])
            Ppat_var "pr" (typing/includemod.ml[287,9889+15]..[287,9889+17])
          expression (typing/includemod.ml[287,9889+18]..[288,9915+49]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (typing/includemod.ml[287,9889+18]..[287,9889+21])
              Ppat_var "ppf" (typing/includemod.ml[287,9889+18]..[287,9889+21])
            expression (typing/includemod.ml[287,9889+22]..[288,9915+49]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (typing/includemod.ml[287,9889+22]..[287,9889+23])
                Ppat_var "l" (typing/includemod.ml[287,9889+22]..[287,9889+23])
              expression (typing/includemod.ml[288,9915+2]..[288,9915+49])
                Pexp_apply
                expression (typing/includemod.ml[288,9915+2]..[288,9915+16])
                  Pexp_ident "Format.fprintf" (typing/includemod.ml[288,9915+2]..[288,9915+16])
                [
                  <arg>
                  Nolabel
                    expression (typing/includemod.ml[288,9915+17]..[288,9915+20])
                      Pexp_ident "ppf" (typing/includemod.ml[288,9915+17]..[288,9915+20])
                  <arg>
                  Nolabel
                    expression (typing/includemod.ml[288,9915+21]..[288,9915+31])
                      Pexp_constant PConst_string("[@[%a@]]",(typing/includemod.ml[288,9915+22]..[288,9915+30]),None)
                  <arg>
                  Nolabel
                    expression (typing/includemod.ml[288,9915+32]..[288,9915+47])
                      Pexp_apply
                      expression (typing/includemod.ml[288,9915+33]..[288,9915+43])
                        Pexp_ident "print_list" (typing/includemod.ml[288,9915+33]..[288,9915+43])
                      [
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[288,9915+44]..[288,9915+46])
                            Pexp_ident "pr" (typing/includemod.ml[288,9915+44]..[288,9915+46])
                      ]
                  <arg>
                  Nolabel
                    expression (typing/includemod.ml[288,9915+48]..[288,9915+49])
                      Pexp_ident "l" (typing/includemod.ml[288,9915+48]..[288,9915+49])
                ]
    ]
  structure_item (typing/includemod.ml[290,9966+0]..[313,10778+44])
    Pstr_value Rec
    [
      <def>
        pattern (typing/includemod.ml[290,9966+8]..[290,9966+22])
          Ppat_var "print_coercion" (typing/includemod.ml[290,9966+8]..[290,9966+22])
        expression (typing/includemod.ml[290,9966+23]..[308,10591+24]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (typing/includemod.ml[290,9966+23]..[290,9966+26])
            Ppat_var "ppf" (typing/includemod.ml[290,9966+23]..[290,9966+26])
          expression (typing/includemod.ml[290,9966+27]..[308,10591+24]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (typing/includemod.ml[290,9966+27]..[290,9966+28])
              Ppat_var "c" (typing/includemod.ml[290,9966+27]..[290,9966+28])
            expression (typing/includemod.ml[291,9997+2]..[308,10591+24])
              Pexp_let Nonrec
              [
                <def>
                  pattern (typing/includemod.ml[291,9997+6]..[291,9997+8])
                    Ppat_var "pr" (typing/includemod.ml[291,9997+6]..[291,9997+8])
                  expression (typing/includemod.ml[291,9997+9]..[291,9997+37]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (typing/includemod.ml[291,9997+9]..[291,9997+12])
                      Ppat_var "fmt" (typing/includemod.ml[291,9997+9]..[291,9997+12])
                    expression (typing/includemod.ml[291,9997+15]..[291,9997+37])
                      Pexp_apply
                      expression (typing/includemod.ml[291,9997+15]..[291,9997+29])
                        Pexp_ident "Format.fprintf" (typing/includemod.ml[291,9997+15]..[291,9997+29])
                      [
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[291,9997+30]..[291,9997+33])
                            Pexp_ident "ppf" (typing/includemod.ml[291,9997+30]..[291,9997+33])
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[291,9997+34]..[291,9997+37])
                            Pexp_ident "fmt" (typing/includemod.ml[291,9997+34]..[291,9997+37])
                      ]
              ]
              expression (typing/includemod.ml[292,10038+2]..[308,10591+24])
                Pexp_match
                expression (typing/includemod.ml[292,10038+8]..[292,10038+9])
                  Pexp_ident "c" (typing/includemod.ml[292,10038+8]..[292,10038+9])
                [
                  <case>
                    pattern (typing/includemod.ml[293,10053+4]..[293,10053+16])
                      Ppat_construct "Tcoerce_none" (typing/includemod.ml[293,10053+4]..[293,10053+16])
                      None
                    expression (typing/includemod.ml[293,10053+20]..[293,10053+27])
                      Pexp_apply
                      expression (typing/includemod.ml[293,10053+20]..[293,10053+22])
                        Pexp_ident "pr" (typing/includemod.ml[293,10053+20]..[293,10053+22])
                      [
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[293,10053+23]..[293,10053+27])
                            Pexp_constant PConst_string("id",(typing/includemod.ml[293,10053+24]..[293,10053+26]),None)
                      ]
                  <case>
                    pattern (typing/includemod.ml[294,10081+4]..[294,10081+30])
                      Ppat_construct "Tcoerce_structure" (typing/includemod.ml[294,10081+4]..[294,10081+21])
                      Some
                        []
                        pattern (typing/includemod.ml[294,10081+22]..[294,10081+30])
                          Ppat_tuple
                          [
                            pattern (typing/includemod.ml[294,10081+23]..[294,10081+25])
                              Ppat_var "fl" (typing/includemod.ml[294,10081+23]..[294,10081+25])
                            pattern (typing/includemod.ml[294,10081+27]..[294,10081+29])
                              Ppat_var "nl" (typing/includemod.ml[294,10081+27]..[294,10081+29])
                          ]
                    expression (typing/includemod.ml[295,10115+6]..[297,10188+39])
                      Pexp_apply
                      expression (typing/includemod.ml[295,10115+6]..[295,10115+8])
                        Pexp_ident "pr" (typing/includemod.ml[295,10115+6]..[295,10115+8])
                      [
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[295,10115+9]..[295,10115+32])
                            Pexp_constant PConst_string("@[<2>struct@ %a@ %a@]",(typing/includemod.ml[295,10115+10]..[295,10115+31]),None)
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[296,10148+8]..[296,10148+36])
                            Pexp_apply
                            expression (typing/includemod.ml[296,10148+9]..[296,10148+19])
                              Pexp_ident "print_list" (typing/includemod.ml[296,10148+9]..[296,10148+19])
                            [
                              <arg>
                              Nolabel
                                expression (typing/includemod.ml[296,10148+20]..[296,10148+35])
                                  Pexp_ident "print_coercion2" (typing/includemod.ml[296,10148+20]..[296,10148+35])
                            ]
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[296,10148+37]..[296,10148+39])
                            Pexp_ident "fl" (typing/includemod.ml[296,10148+37]..[296,10148+39])
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[297,10188+8]..[297,10188+36])
                            Pexp_apply
                            expression (typing/includemod.ml[297,10188+9]..[297,10188+19])
                              Pexp_ident "print_list" (typing/includemod.ml[297,10188+9]..[297,10188+19])
                            [
                              <arg>
                              Nolabel
                                expression (typing/includemod.ml[297,10188+20]..[297,10188+35])
                                  Pexp_ident "print_coercion3" (typing/includemod.ml[297,10188+20]..[297,10188+35])
                            ]
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[297,10188+37]..[297,10188+39])
                            Pexp_ident "nl" (typing/includemod.ml[297,10188+37]..[297,10188+39])
                      ]
                  <case>
                    pattern (typing/includemod.ml[298,10228+4]..[298,10228+30])
                      Ppat_construct "Tcoerce_functor" (typing/includemod.ml[298,10228+4]..[298,10228+19])
                      Some
                        []
                        pattern (typing/includemod.ml[298,10228+20]..[298,10228+30])
                          Ppat_tuple
                          [
                            pattern (typing/includemod.ml[298,10228+21]..[298,10228+24])
                              Ppat_var "inp" (typing/includemod.ml[298,10228+21]..[298,10228+24])
                            pattern (typing/includemod.ml[298,10228+26]..[298,10228+29])
                              Ppat_var "out" (typing/includemod.ml[298,10228+26]..[298,10228+29])
                          ]
                    expression (typing/includemod.ml[299,10262+6]..[301,10327+26])
                      Pexp_apply
                      expression (typing/includemod.ml[299,10262+6]..[299,10262+8])
                        Pexp_ident "pr" (typing/includemod.ml[299,10262+6]..[299,10262+8])
                      [
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[299,10262+9]..[299,10262+37])
                            Pexp_constant PConst_string("@[<2>functor@ (%a)@ (%a)@]",(typing/includemod.ml[299,10262+10]..[299,10262+36]),None)
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[300,10300+8]..[300,10300+22])
                            Pexp_ident "print_coercion" (typing/includemod.ml[300,10300+8]..[300,10300+22])
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[300,10300+23]..[300,10300+26])
                            Pexp_ident "inp" (typing/includemod.ml[300,10300+23]..[300,10300+26])
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[301,10327+8]..[301,10327+22])
                            Pexp_ident "print_coercion" (typing/includemod.ml[301,10327+8]..[301,10327+22])
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[301,10327+23]..[301,10327+26])
                            Pexp_ident "out" (typing/includemod.ml[301,10327+23]..[301,10327+26])
                      ]
                  <case>
                    pattern (typing/includemod.ml[302,10354+4]..[302,10354+52])
                      Ppat_construct "Tcoerce_primitive" (typing/includemod.ml[302,10354+4]..[302,10354+21])
                      Some
                        []
                        pattern (typing/includemod.ml[302,10354+22]..[302,10354+52])
                          Ppat_record Closed
                          [
                            "pc_desc" (typing/includemod.ml[302,10354+23]..[302,10354+30]) ghost
                              pattern (typing/includemod.ml[302,10354+23]..[302,10354+30])
                                Ppat_var "pc_desc" (typing/includemod.ml[302,10354+23]..[302,10354+30])
                            "pc_env" (typing/includemod.ml[302,10354+32]..[302,10354+38])
                              pattern (typing/includemod.ml[302,10354+41]..[302,10354+42])
                                Ppat_any
                            "pc_type" (typing/includemod.ml[302,10354+44]..[302,10354+51]) ghost
                              pattern (typing/includemod.ml[302,10354+44]..[302,10354+51])
                                Ppat_var "pc_type" (typing/includemod.ml[302,10354+44]..[302,10354+51])
                          ]
                    expression (typing/includemod.ml[303,10411+6]..[304,10464+38])
                      Pexp_apply
                      expression (typing/includemod.ml[303,10411+6]..[303,10411+8])
                        Pexp_ident "pr" (typing/includemod.ml[303,10411+6]..[303,10411+8])
                      [
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[303,10411+9]..[303,10411+24])
                            Pexp_constant PConst_string("prim %s@ (%a)",(typing/includemod.ml[303,10411+10]..[303,10411+23]),None)
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[303,10411+25]..[303,10411+52])
                            Pexp_field
                            expression (typing/includemod.ml[303,10411+25]..[303,10411+32])
                              Pexp_ident "pc_desc" (typing/includemod.ml[303,10411+25]..[303,10411+32])
                            "Primitive.prim_name" (typing/includemod.ml[303,10411+33]..[303,10411+52])
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[304,10464+8]..[304,10464+30])
                            Pexp_ident "Printtyp.raw_type_expr" (typing/includemod.ml[304,10464+8]..[304,10464+30])
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[304,10464+31]..[304,10464+38])
                            Pexp_ident "pc_type" (typing/includemod.ml[304,10464+31]..[304,10464+38])
                      ]
                  <case>
                    pattern (typing/includemod.ml[305,10503+4]..[305,10503+27])
                      Ppat_construct "Tcoerce_alias" (typing/includemod.ml[305,10503+4]..[305,10503+17])
                      Some
                        []
                        pattern (typing/includemod.ml[305,10503+18]..[305,10503+27])
                          Ppat_tuple
                          [
                            pattern (typing/includemod.ml[305,10503+19]..[305,10503+20])
                              Ppat_any
                            pattern (typing/includemod.ml[305,10503+22]..[305,10503+23])
                              Ppat_var "p" (typing/includemod.ml[305,10503+22]..[305,10503+23])
                            pattern (typing/includemod.ml[305,10503+25]..[305,10503+26])
                              Ppat_var "c" (typing/includemod.ml[305,10503+25]..[305,10503+26])
                          ]
                    expression (typing/includemod.ml[306,10534+6]..[308,10591+24])
                      Pexp_apply
                      expression (typing/includemod.ml[306,10534+6]..[306,10534+8])
                        Pexp_ident "pr" (typing/includemod.ml[306,10534+6]..[306,10534+8])
                      [
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[306,10534+9]..[306,10534+32])
                            Pexp_constant PConst_string("@[<2>alias %a@ (%a)@]",(typing/includemod.ml[306,10534+10]..[306,10534+31]),None)
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[307,10567+8]..[307,10567+21])
                            Pexp_ident "Printtyp.path" (typing/includemod.ml[307,10567+8]..[307,10567+21])
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[307,10567+22]..[307,10567+23])
                            Pexp_ident "p" (typing/includemod.ml[307,10567+22]..[307,10567+23])
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[308,10591+8]..[308,10591+22])
                            Pexp_ident "print_coercion" (typing/includemod.ml[308,10591+8]..[308,10591+22])
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[308,10591+23]..[308,10591+24])
                            Pexp_ident "c" (typing/includemod.ml[308,10591+23]..[308,10591+24])
                      ]
                ]
      <def>
        pattern (typing/includemod.ml[309,10616+4]..[309,10616+19])
          Ppat_var "print_coercion2" (typing/includemod.ml[309,10616+4]..[309,10616+19])
        expression (typing/includemod.ml[309,10616+20]..[310,10649+53]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (typing/includemod.ml[309,10616+20]..[309,10616+23])
            Ppat_var "ppf" (typing/includemod.ml[309,10616+20]..[309,10616+23])
          expression (typing/includemod.ml[309,10616+24]..[310,10649+53]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (typing/includemod.ml[309,10616+24]..[309,10616+30])
              Ppat_tuple
              [
                pattern (typing/includemod.ml[309,10616+25]..[309,10616+26])
                  Ppat_var "n" (typing/includemod.ml[309,10616+25]..[309,10616+26])
                pattern (typing/includemod.ml[309,10616+28]..[309,10616+29])
                  Ppat_var "c" (typing/includemod.ml[309,10616+28]..[309,10616+29])
              ]
            expression (typing/includemod.ml[310,10649+2]..[310,10649+53])
              Pexp_apply
              expression (typing/includemod.ml[310,10649+2]..[310,10649+16])
                Pexp_ident "Format.fprintf" (typing/includemod.ml[310,10649+2]..[310,10649+16])
              [
                <arg>
                Nolabel
                  expression (typing/includemod.ml[310,10649+17]..[310,10649+20])
                    Pexp_ident "ppf" (typing/includemod.ml[310,10649+17]..[310,10649+20])
                <arg>
                Nolabel
                  expression (typing/includemod.ml[310,10649+21]..[310,10649+34])
                    Pexp_constant PConst_string("@[%d,@ %a@]",(typing/includemod.ml[310,10649+22]..[310,10649+33]),None)
                <arg>
                Nolabel
                  expression (typing/includemod.ml[310,10649+35]..[310,10649+36])
                    Pexp_ident "n" (typing/includemod.ml[310,10649+35]..[310,10649+36])
                <arg>
                Nolabel
                  expression (typing/includemod.ml[310,10649+37]..[310,10649+51])
                    Pexp_ident "print_coercion" (typing/includemod.ml[310,10649+37]..[310,10649+51])
                <arg>
                Nolabel
                  expression (typing/includemod.ml[310,10649+52]..[310,10649+53])
                    Pexp_ident "c" (typing/includemod.ml[310,10649+52]..[310,10649+53])
              ]
      <def>
        pattern (typing/includemod.ml[311,10703+4]..[311,10703+19])
          Ppat_var "print_coercion3" (typing/includemod.ml[311,10703+4]..[311,10703+19])
        expression (typing/includemod.ml[311,10703+20]..[313,10778+44]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (typing/includemod.ml[311,10703+20]..[311,10703+23])
            Ppat_var "ppf" (typing/includemod.ml[311,10703+20]..[311,10703+23])
          expression (typing/includemod.ml[311,10703+24]..[313,10778+44]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (typing/includemod.ml[311,10703+24]..[311,10703+33])
              Ppat_tuple
              [
                pattern (typing/includemod.ml[311,10703+25]..[311,10703+26])
                  Ppat_var "i" (typing/includemod.ml[311,10703+25]..[311,10703+26])
                pattern (typing/includemod.ml[311,10703+28]..[311,10703+29])
                  Ppat_var "n" (typing/includemod.ml[311,10703+28]..[311,10703+29])
                pattern (typing/includemod.ml[311,10703+31]..[311,10703+32])
                  Ppat_var "c" (typing/includemod.ml[311,10703+31]..[311,10703+32])
              ]
            expression (typing/includemod.ml[312,10739+2]..[313,10778+44])
              Pexp_apply
              expression (typing/includemod.ml[312,10739+2]..[312,10739+16])
                Pexp_ident "Format.fprintf" (typing/includemod.ml[312,10739+2]..[312,10739+16])
              [
                <arg>
                Nolabel
                  expression (typing/includemod.ml[312,10739+17]..[312,10739+20])
                    Pexp_ident "ppf" (typing/includemod.ml[312,10739+17]..[312,10739+20])
                <arg>
                Nolabel
                  expression (typing/includemod.ml[312,10739+21]..[312,10739+38])
                    Pexp_constant PConst_string("@[%s, %d,@ %a@]",(typing/includemod.ml[312,10739+22]..[312,10739+37]),None)
                <arg>
                Nolabel
                  expression (typing/includemod.ml[313,10778+4]..[313,10778+25])
                    Pexp_apply
                    expression (typing/includemod.ml[313,10778+5]..[313,10778+22])
                      Pexp_ident "Ident.unique_name" (typing/includemod.ml[313,10778+5]..[313,10778+22])
                    [
                      <arg>
                      Nolabel
                        expression (typing/includemod.ml[313,10778+23]..[313,10778+24])
                          Pexp_ident "i" (typing/includemod.ml[313,10778+23]..[313,10778+24])
                    ]
                <arg>
                Nolabel
                  expression (typing/includemod.ml[313,10778+26]..[313,10778+27])
                    Pexp_ident "n" (typing/includemod.ml[313,10778+26]..[313,10778+27])
                <arg>
                Nolabel
                  expression (typing/includemod.ml[313,10778+28]..[313,10778+42])
                    Pexp_ident "print_coercion" (typing/includemod.ml[313,10778+28]..[313,10778+42])
                <arg>
                Nolabel
                  expression (typing/includemod.ml[313,10778+43]..[313,10778+44])
                    Pexp_ident "c" (typing/includemod.ml[313,10778+43]..[313,10778+44])
              ]
    ]
  structure_item (typing/includemod.ml[317,10861+0]..[321,11018+39])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/includemod.ml[317,10861+4]..[317,10861+22])
          Ppat_var "equal_module_paths" (typing/includemod.ml[317,10861+4]..[317,10861+22])
        expression (typing/includemod.ml[317,10861+23]..[321,11018+39]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (typing/includemod.ml[317,10861+23]..[317,10861+26])
            Ppat_var "env" (typing/includemod.ml[317,10861+23]..[317,10861+26])
          expression (typing/includemod.ml[317,10861+27]..[321,11018+39]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (typing/includemod.ml[317,10861+27]..[317,10861+29])
              Ppat_var "p1" (typing/includemod.ml[317,10861+27]..[317,10861+29])
            expression (typing/includemod.ml[317,10861+30]..[321,11018+39]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (typing/includemod.ml[317,10861+30]..[317,10861+35])
                Ppat_var "subst" (typing/includemod.ml[317,10861+30]..[317,10861+35])
              expression (typing/includemod.ml[317,10861+36]..[321,11018+39]) ghost
                Pexp_fun
                Nolabel
                None
                pattern (typing/includemod.ml[317,10861+36]..[317,10861+38])
                  Ppat_var "p2" (typing/includemod.ml[317,10861+36]..[317,10861+38])
                expression (typing/includemod.ml[318,10902+2]..[321,11018+39])
                  Pexp_apply
                  expression (typing/includemod.ml[319,10920+2]..[319,10920+4])
                    Pexp_ident "||" (typing/includemod.ml[319,10920+2]..[319,10920+4])
                  [
                    <arg>
                    Nolabel
                      expression (typing/includemod.ml[318,10902+2]..[318,10902+17])
                        Pexp_apply
                        expression (typing/includemod.ml[318,10902+2]..[318,10902+11])
                          Pexp_ident "Path.same" (typing/includemod.ml[318,10902+2]..[318,10902+11])
                        [
                          <arg>
                          Nolabel
                            expression (typing/includemod.ml[318,10902+12]..[318,10902+14])
                              Pexp_ident "p1" (typing/includemod.ml[318,10902+12]..[318,10902+14])
                          <arg>
                          Nolabel
                            expression (typing/includemod.ml[318,10902+15]..[318,10902+17])
                              Pexp_ident "p2" (typing/includemod.ml[318,10902+15]..[318,10902+17])
                        ]
                    <arg>
                    Nolabel
                      expression (typing/includemod.ml[319,10920+5]..[321,11018+39])
                        Pexp_apply
                        expression (typing/includemod.ml[319,10920+5]..[319,10920+14])
                          Pexp_ident "Path.same" (typing/includemod.ml[319,10920+5]..[319,10920+14])
                        [
                          <arg>
                          Nolabel
                            expression (typing/includemod.ml[319,10920+15]..[319,10920+54])
                              Pexp_apply
                              expression (typing/includemod.ml[319,10920+16]..[319,10920+41])
                                Pexp_ident "Env.normalize_module_path" (typing/includemod.ml[319,10920+16]..[319,10920+41])
                              [
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[319,10920+42]..[319,10920+46])
                                    Pexp_construct "None" (typing/includemod.ml[319,10920+42]..[319,10920+46])
                                    None
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[319,10920+47]..[319,10920+50])
                                    Pexp_ident "env" (typing/includemod.ml[319,10920+47]..[319,10920+50])
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[319,10920+51]..[319,10920+53])
                                    Pexp_ident "p1" (typing/includemod.ml[319,10920+51]..[319,10920+53])
                              ]
                          <arg>
                          Nolabel
                            expression (typing/includemod.ml[320,10975+7]..[321,11018+39])
                              Pexp_apply
                              expression (typing/includemod.ml[320,10975+8]..[320,10975+33])
                                Pexp_ident "Env.normalize_module_path" (typing/includemod.ml[320,10975+8]..[320,10975+33])
                              [
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[320,10975+34]..[320,10975+38])
                                    Pexp_construct "None" (typing/includemod.ml[320,10975+34]..[320,10975+38])
                                    None
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[320,10975+39]..[320,10975+42])
                                    Pexp_ident "env" (typing/includemod.ml[320,10975+39]..[320,10975+42])
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[321,11018+10]..[321,11018+38])
                                    Pexp_apply
                                    expression (typing/includemod.ml[321,11018+11]..[321,11018+28])
                                      Pexp_ident "Subst.module_path" (typing/includemod.ml[321,11018+11]..[321,11018+28])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[321,11018+29]..[321,11018+34])
                                          Pexp_ident "subst" (typing/includemod.ml[321,11018+29]..[321,11018+34])
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[321,11018+35]..[321,11018+37])
                                          Pexp_ident "p2" (typing/includemod.ml[321,11018+35]..[321,11018+37])
                                    ]
                              ]
                        ]
                  ]
    ]
  structure_item (typing/includemod.ml[323,11059+0]..[327,11209+40])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/includemod.ml[323,11059+4]..[323,11059+23])
          Ppat_var "equal_modtype_paths" (typing/includemod.ml[323,11059+4]..[323,11059+23])
        expression (typing/includemod.ml[323,11059+24]..[327,11209+40]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (typing/includemod.ml[323,11059+24]..[323,11059+27])
            Ppat_var "env" (typing/includemod.ml[323,11059+24]..[323,11059+27])
          expression (typing/includemod.ml[323,11059+28]..[327,11209+40]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (typing/includemod.ml[323,11059+28]..[323,11059+30])
              Ppat_var "p1" (typing/includemod.ml[323,11059+28]..[323,11059+30])
            expression (typing/includemod.ml[323,11059+31]..[327,11209+40]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (typing/includemod.ml[323,11059+31]..[323,11059+36])
                Ppat_var "subst" (typing/includemod.ml[323,11059+31]..[323,11059+36])
              expression (typing/includemod.ml[323,11059+37]..[327,11209+40]) ghost
                Pexp_fun
                Nolabel
                None
                pattern (typing/includemod.ml[323,11059+37]..[323,11059+39])
                  Ppat_var "p2" (typing/includemod.ml[323,11059+37]..[323,11059+39])
                expression (typing/includemod.ml[324,11101+2]..[327,11209+40])
                  Pexp_apply
                  expression (typing/includemod.ml[325,11119+2]..[325,11119+4])
                    Pexp_ident "||" (typing/includemod.ml[325,11119+2]..[325,11119+4])
                  [
                    <arg>
                    Nolabel
                      expression (typing/includemod.ml[324,11101+2]..[324,11101+17])
                        Pexp_apply
                        expression (typing/includemod.ml[324,11101+2]..[324,11101+11])
                          Pexp_ident "Path.same" (typing/includemod.ml[324,11101+2]..[324,11101+11])
                        [
                          <arg>
                          Nolabel
                            expression (typing/includemod.ml[324,11101+12]..[324,11101+14])
                              Pexp_ident "p1" (typing/includemod.ml[324,11101+12]..[324,11101+14])
                          <arg>
                          Nolabel
                            expression (typing/includemod.ml[324,11101+15]..[324,11101+17])
                              Pexp_ident "p2" (typing/includemod.ml[324,11101+15]..[324,11101+17])
                        ]
                    <arg>
                    Nolabel
                      expression (typing/includemod.ml[325,11119+5]..[327,11209+40])
                        Pexp_apply
                        expression (typing/includemod.ml[325,11119+5]..[325,11119+14])
                          Pexp_ident "Path.same" (typing/includemod.ml[325,11119+5]..[325,11119+14])
                        [
                          <arg>
                          Nolabel
                            expression (typing/includemod.ml[325,11119+15]..[325,11119+50])
                              Pexp_apply
                              expression (typing/includemod.ml[325,11119+16]..[325,11119+42])
                                Pexp_ident "Env.normalize_modtype_path" (typing/includemod.ml[325,11119+16]..[325,11119+42])
                              [
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[325,11119+43]..[325,11119+46])
                                    Pexp_ident "env" (typing/includemod.ml[325,11119+43]..[325,11119+46])
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[325,11119+47]..[325,11119+49])
                                    Pexp_ident "p1" (typing/includemod.ml[325,11119+47]..[325,11119+49])
                              ]
                          <arg>
                          Nolabel
                            expression (typing/includemod.ml[326,11170+7]..[327,11209+40])
                              Pexp_apply
                              expression (typing/includemod.ml[326,11170+8]..[326,11170+34])
                                Pexp_ident "Env.normalize_modtype_path" (typing/includemod.ml[326,11170+8]..[326,11170+34])
                              [
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[326,11170+35]..[326,11170+38])
                                    Pexp_ident "env" (typing/includemod.ml[326,11170+35]..[326,11170+38])
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[327,11209+10]..[327,11209+39])
                                    Pexp_apply
                                    expression (typing/includemod.ml[327,11209+11]..[327,11209+29])
                                      Pexp_ident "Subst.modtype_path" (typing/includemod.ml[327,11209+11]..[327,11209+29])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[327,11209+30]..[327,11209+35])
                                          Pexp_ident "subst" (typing/includemod.ml[327,11209+30]..[327,11209+35])
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[327,11209+36]..[327,11209+38])
                                          Pexp_ident "p2" (typing/includemod.ml[327,11209+36]..[327,11209+38])
                                    ]
                              ]
                        ]
                  ]
    ]
  structure_item (typing/includemod.ml[329,11251+0]..[337,11514+42])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/includemod.ml[329,11251+4]..[329,11251+31])
          Ppat_var "simplify_structure_coercion" (typing/includemod.ml[329,11251+4]..[329,11251+31])
        expression (typing/includemod.ml[329,11251+32]..[337,11514+42]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (typing/includemod.ml[329,11251+32]..[329,11251+34])
            Ppat_var "cc" (typing/includemod.ml[329,11251+32]..[329,11251+34])
          expression (typing/includemod.ml[329,11251+35]..[337,11514+42]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (typing/includemod.ml[329,11251+35]..[329,11251+46])
              Ppat_var "id_pos_list" (typing/includemod.ml[329,11251+35]..[329,11251+46])
            expression (typing/includemod.ml[330,11300+2]..[337,11514+42])
              Pexp_let Rec
              [
                <def>
                  pattern (typing/includemod.ml[330,11300+10]..[330,11300+30])
                    Ppat_var "is_identity_coercion" (typing/includemod.ml[330,11300+10]..[330,11300+30])
                  expression (typing/includemod.ml[330,11300+31]..[334,11388+71]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (typing/includemod.ml[330,11300+31]..[330,11300+34])
                      Ppat_var "pos" (typing/includemod.ml[330,11300+31]..[330,11300+34])
                    expression (typing/includemod.ml[330,11300+37]..[334,11388+71])
                      Pexp_function
                      [
                        <case>
                          pattern (typing/includemod.ml[331,11346+4]..[331,11346+6])
                            Ppat_construct "[]" (typing/includemod.ml[331,11346+4]..[331,11346+6])
                            None
                          expression (typing/includemod.ml[332,11356+6]..[332,11356+10])
                            Pexp_construct "true" (typing/includemod.ml[332,11356+6]..[332,11356+10])
                            None
                        <case>
                          pattern (typing/includemod.ml[333,11367+4]..[333,11367+17])
                            Ppat_construct "::" (typing/includemod.ml[333,11367+11]..[333,11367+13])
                            Some
                              []
                              pattern (typing/includemod.ml[333,11367+4]..[333,11367+17]) ghost
                                Ppat_tuple
                                [
                                  pattern (typing/includemod.ml[333,11367+4]..[333,11367+10])
                                    Ppat_tuple
                                    [
                                      pattern (typing/includemod.ml[333,11367+5]..[333,11367+6])
                                        Ppat_var "n" (typing/includemod.ml[333,11367+5]..[333,11367+6])
                                      pattern (typing/includemod.ml[333,11367+8]..[333,11367+9])
                                        Ppat_var "c" (typing/includemod.ml[333,11367+8]..[333,11367+9])
                                    ]
                                  pattern (typing/includemod.ml[333,11367+14]..[333,11367+17])
                                    Ppat_var "rem" (typing/includemod.ml[333,11367+14]..[333,11367+17])
                                ]
                          expression (typing/includemod.ml[334,11388+6]..[334,11388+71])
                            Pexp_apply
                            expression (typing/includemod.ml[334,11388+14]..[334,11388+16])
                              Pexp_ident "&&" (typing/includemod.ml[334,11388+14]..[334,11388+16])
                            [
                              <arg>
                              Nolabel
                                expression (typing/includemod.ml[334,11388+6]..[334,11388+13])
                                  Pexp_apply
                                  expression (typing/includemod.ml[334,11388+8]..[334,11388+9])
                                    Pexp_ident "=" (typing/includemod.ml[334,11388+8]..[334,11388+9])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[334,11388+6]..[334,11388+7])
                                        Pexp_ident "n" (typing/includemod.ml[334,11388+6]..[334,11388+7])
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[334,11388+10]..[334,11388+13])
                                        Pexp_ident "pos" (typing/includemod.ml[334,11388+10]..[334,11388+13])
                                  ]
                              <arg>
                              Nolabel
                                expression (typing/includemod.ml[334,11388+17]..[334,11388+71])
                                  Pexp_apply
                                  expression (typing/includemod.ml[334,11388+34]..[334,11388+36])
                                    Pexp_ident "&&" (typing/includemod.ml[334,11388+34]..[334,11388+36])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[334,11388+17]..[334,11388+33])
                                        Pexp_apply
                                        expression (typing/includemod.ml[334,11388+19]..[334,11388+20])
                                          Pexp_ident "=" (typing/includemod.ml[334,11388+19]..[334,11388+20])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (typing/includemod.ml[334,11388+17]..[334,11388+18])
                                              Pexp_ident "c" (typing/includemod.ml[334,11388+17]..[334,11388+18])
                                          <arg>
                                          Nolabel
                                            expression (typing/includemod.ml[334,11388+21]..[334,11388+33])
                                              Pexp_construct "Tcoerce_none" (typing/includemod.ml[334,11388+21]..[334,11388+33])
                                              None
                                        ]
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[334,11388+37]..[334,11388+71])
                                        Pexp_apply
                                        expression (typing/includemod.ml[334,11388+37]..[334,11388+57])
                                          Pexp_ident "is_identity_coercion" (typing/includemod.ml[334,11388+37]..[334,11388+57])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (typing/includemod.ml[334,11388+58]..[334,11388+67])
                                              Pexp_apply
                                              expression (typing/includemod.ml[334,11388+63]..[334,11388+64])
                                                Pexp_ident "+" (typing/includemod.ml[334,11388+63]..[334,11388+64])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[334,11388+59]..[334,11388+62])
                                                    Pexp_ident "pos" (typing/includemod.ml[334,11388+59]..[334,11388+62])
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[334,11388+65]..[334,11388+66])
                                                    Pexp_constant PConst_int (1,None)
                                              ]
                                          <arg>
                                          Nolabel
                                            expression (typing/includemod.ml[334,11388+68]..[334,11388+71])
                                              Pexp_ident "rem" (typing/includemod.ml[334,11388+68]..[334,11388+71])
                                        ]
                                  ]
                            ]
                      ]
              ]
              expression (typing/includemod.ml[335,11463+2]..[337,11514+42])
                Pexp_ifthenelse
                expression (typing/includemod.ml[335,11463+5]..[335,11463+30])
                  Pexp_apply
                  expression (typing/includemod.ml[335,11463+5]..[335,11463+25])
                    Pexp_ident "is_identity_coercion" (typing/includemod.ml[335,11463+5]..[335,11463+25])
                  [
                    <arg>
                    Nolabel
                      expression (typing/includemod.ml[335,11463+26]..[335,11463+27])
                        Pexp_constant PConst_int (0,None)
                    <arg>
                    Nolabel
                      expression (typing/includemod.ml[335,11463+28]..[335,11463+30])
                        Pexp_ident "cc" (typing/includemod.ml[335,11463+28]..[335,11463+30])
                  ]
                expression (typing/includemod.ml[336,11494+7]..[336,11494+19])
                  Pexp_construct "Tcoerce_none" (typing/includemod.ml[336,11494+7]..[336,11494+19])
                  None
                Some
                  expression (typing/includemod.ml[337,11514+7]..[337,11514+42])
                    Pexp_construct "Tcoerce_structure" (typing/includemod.ml[337,11514+7]..[337,11514+24])
                    Some
                      expression (typing/includemod.ml[337,11514+25]..[337,11514+42])
                        Pexp_tuple
                        [
                          expression (typing/includemod.ml[337,11514+26]..[337,11514+28])
                            Pexp_ident "cc" (typing/includemod.ml[337,11514+26]..[337,11514+28])
                          expression (typing/includemod.ml[337,11514+30]..[337,11514+41])
                            Pexp_ident "id_pos_list" (typing/includemod.ml[337,11514+30]..[337,11514+41])
                        ]
    ]
  structure_item (typing/includemod.ml[339,11558+0]..[355,12174+36])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/includemod.ml[339,11558+4]..[339,11558+27])
          Ppat_var "retrieve_functor_params" (typing/includemod.ml[339,11558+4]..[339,11558+27])
        expression (typing/includemod.ml[339,11558+28]..[355,12174+36]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (typing/includemod.ml[339,11558+28]..[339,11558+31])
            Ppat_var "env" (typing/includemod.ml[339,11558+28]..[339,11558+31])
          expression (typing/includemod.ml[339,11558+32]..[355,12174+36]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (typing/includemod.ml[339,11558+32]..[339,11558+35])
              Ppat_var "mty" (typing/includemod.ml[339,11558+32]..[339,11558+35])
            expression (typing/includemod.ml[340,11596+2]..[355,12174+36])
              Pexp_let Rec
              [
                <def>
                  pattern (typing/includemod.ml[340,11596+10]..[340,11596+33])
                    Ppat_var "retrieve_functor_params" (typing/includemod.ml[340,11596+10]..[340,11596+33])
                  expression (typing/includemod.ml[340,11596+34]..[353,12116+52]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (typing/includemod.ml[340,11596+34]..[340,11596+40])
                      Ppat_var "before" (typing/includemod.ml[340,11596+34]..[340,11596+40])
                    expression (typing/includemod.ml[340,11596+41]..[353,12116+52]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (typing/includemod.ml[340,11596+41]..[340,11596+44])
                        Ppat_var "env" (typing/includemod.ml[340,11596+41]..[340,11596+44])
                      expression (typing/includemod.ml[341,11643+4]..[353,12116+52])
                        Pexp_function
                        [
                          <case>
                            pattern (typing/includemod.ml[342,11656+6]..[342,11656+24])
                              Ppat_alias "res" (typing/includemod.ml[342,11656+21]..[342,11656+24])
                              pattern (typing/includemod.ml[342,11656+6]..[342,11656+17])
                                Ppat_construct "Mty_ident" (typing/includemod.ml[342,11656+6]..[342,11656+15])
                                Some
                                  []
                                  pattern (typing/includemod.ml[342,11656+16]..[342,11656+17])
                                    Ppat_var "p" (typing/includemod.ml[342,11656+16]..[342,11656+17])
                            expression (typing/includemod.ml[343,11684+8]..[346,11835+11])
                              Pexp_match
                              expression (typing/includemod.ml[343,11684+20]..[343,11684+45])
                                Pexp_apply
                                expression (typing/includemod.ml[343,11684+20]..[343,11684+39])
                                  Pexp_ident "expand_modtype_path" (typing/includemod.ml[343,11684+20]..[343,11684+39])
                                [
                                  <arg>
                                  Nolabel
                                    expression (typing/includemod.ml[343,11684+40]..[343,11684+43])
                                      Pexp_ident "env" (typing/includemod.ml[343,11684+40]..[343,11684+43])
                                  <arg>
                                  Nolabel
                                    expression (typing/includemod.ml[343,11684+44]..[343,11684+45])
                                      Pexp_ident "p" (typing/includemod.ml[343,11684+44]..[343,11684+45])
                                ]
                              [
                                <case>
                                  pattern (typing/includemod.ml[344,11735+10]..[344,11735+18])
                                    Ppat_construct "Some" (typing/includemod.ml[344,11735+10]..[344,11735+14])
                                    Some
                                      []
                                      pattern (typing/includemod.ml[344,11735+15]..[344,11735+18])
                                        Ppat_var "mty" (typing/includemod.ml[344,11735+15]..[344,11735+18])
                                  expression (typing/includemod.ml[344,11735+22]..[344,11735+60])
                                    Pexp_apply
                                    expression (typing/includemod.ml[344,11735+22]..[344,11735+45])
                                      Pexp_ident "retrieve_functor_params" (typing/includemod.ml[344,11735+22]..[344,11735+45])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[344,11735+46]..[344,11735+52])
                                          Pexp_ident "before" (typing/includemod.ml[344,11735+46]..[344,11735+52])
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[344,11735+53]..[344,11735+56])
                                          Pexp_ident "env" (typing/includemod.ml[344,11735+53]..[344,11735+56])
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[344,11735+57]..[344,11735+60])
                                          Pexp_ident "mty" (typing/includemod.ml[344,11735+57]..[344,11735+60])
                                    ]
                                <case>
                                  pattern (typing/includemod.ml[345,11796+10]..[345,11796+14])
                                    Ppat_construct "None" (typing/includemod.ml[345,11796+10]..[345,11796+14])
                                    None
                                  expression (typing/includemod.ml[345,11796+18]..[345,11796+38])
                                    Pexp_tuple
                                    [
                                      expression (typing/includemod.ml[345,11796+18]..[345,11796+33])
                                        Pexp_apply
                                        expression (typing/includemod.ml[345,11796+18]..[345,11796+26])
                                          Pexp_ident "List.rev" (typing/includemod.ml[345,11796+18]..[345,11796+26])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (typing/includemod.ml[345,11796+27]..[345,11796+33])
                                              Pexp_ident "before" (typing/includemod.ml[345,11796+27]..[345,11796+33])
                                        ]
                                      expression (typing/includemod.ml[345,11796+35]..[345,11796+38])
                                        Pexp_ident "res" (typing/includemod.ml[345,11796+35]..[345,11796+38])
                                    ]
                              ]
                          <case>
                            pattern (typing/includemod.ml[347,11847+6]..[347,11847+24])
                              Ppat_alias "res" (typing/includemod.ml[347,11847+21]..[347,11847+24])
                              pattern (typing/includemod.ml[347,11847+6]..[347,11847+17])
                                Ppat_construct "Mty_alias" (typing/includemod.ml[347,11847+6]..[347,11847+15])
                                Some
                                  []
                                  pattern (typing/includemod.ml[347,11847+16]..[347,11847+17])
                                    Ppat_var "p" (typing/includemod.ml[347,11847+16]..[347,11847+17])
                            expression (typing/includemod.ml[348,11875+8]..[351,12028+11])
                              Pexp_match
                              expression (typing/includemod.ml[348,11875+20]..[348,11875+45])
                                Pexp_apply
                                expression (typing/includemod.ml[348,11875+20]..[348,11875+39])
                                  Pexp_ident "expand_module_alias" (typing/includemod.ml[348,11875+20]..[348,11875+39])
                                [
                                  <arg>
                                  Nolabel
                                    expression (typing/includemod.ml[348,11875+40]..[348,11875+43])
                                      Pexp_ident "env" (typing/includemod.ml[348,11875+40]..[348,11875+43])
                                  <arg>
                                  Nolabel
                                    expression (typing/includemod.ml[348,11875+44]..[348,11875+45])
                                      Pexp_ident "p" (typing/includemod.ml[348,11875+44]..[348,11875+45])
                                ]
                              [
                                <case>
                                  pattern (typing/includemod.ml[349,11926+10]..[349,11926+16])
                                    Ppat_construct "Ok" (typing/includemod.ml[349,11926+10]..[349,11926+12])
                                    Some
                                      []
                                      pattern (typing/includemod.ml[349,11926+13]..[349,11926+16])
                                        Ppat_var "mty" (typing/includemod.ml[349,11926+13]..[349,11926+16])
                                  expression (typing/includemod.ml[349,11926+21]..[349,11926+59])
                                    Pexp_apply
                                    expression (typing/includemod.ml[349,11926+21]..[349,11926+44])
                                      Pexp_ident "retrieve_functor_params" (typing/includemod.ml[349,11926+21]..[349,11926+44])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[349,11926+45]..[349,11926+51])
                                          Pexp_ident "before" (typing/includemod.ml[349,11926+45]..[349,11926+51])
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[349,11926+52]..[349,11926+55])
                                          Pexp_ident "env" (typing/includemod.ml[349,11926+52]..[349,11926+55])
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[349,11926+56]..[349,11926+59])
                                          Pexp_ident "mty" (typing/includemod.ml[349,11926+56]..[349,11926+59])
                                    ]
                                <case>
                                  pattern (typing/includemod.ml[350,11986+10]..[350,11986+17])
                                    Ppat_construct "Error" (typing/includemod.ml[350,11986+10]..[350,11986+15])
                                    Some
                                      []
                                      pattern (typing/includemod.ml[350,11986+16]..[350,11986+17])
                                        Ppat_any
                                  expression (typing/includemod.ml[350,11986+21]..[350,11986+41])
                                    Pexp_tuple
                                    [
                                      expression (typing/includemod.ml[350,11986+21]..[350,11986+36])
                                        Pexp_apply
                                        expression (typing/includemod.ml[350,11986+21]..[350,11986+29])
                                          Pexp_ident "List.rev" (typing/includemod.ml[350,11986+21]..[350,11986+29])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (typing/includemod.ml[350,11986+30]..[350,11986+36])
                                              Pexp_ident "before" (typing/includemod.ml[350,11986+30]..[350,11986+36])
                                        ]
                                      expression (typing/includemod.ml[350,11986+38]..[350,11986+41])
                                        Pexp_ident "res" (typing/includemod.ml[350,11986+38]..[350,11986+41])
                                    ]
                              ]
                          <case>
                            pattern (typing/includemod.ml[352,12040+6]..[352,12040+26])
                              Ppat_construct "Mty_functor" (typing/includemod.ml[352,12040+6]..[352,12040+17])
                              Some
                                []
                                pattern (typing/includemod.ml[352,12040+18]..[352,12040+26])
                                  Ppat_tuple
                                  [
                                    pattern (typing/includemod.ml[352,12040+19]..[352,12040+20])
                                      Ppat_var "p" (typing/includemod.ml[352,12040+19]..[352,12040+20])
                                    pattern (typing/includemod.ml[352,12040+22]..[352,12040+25])
                                      Ppat_var "res" (typing/includemod.ml[352,12040+22]..[352,12040+25])
                                  ]
                            expression (typing/includemod.ml[352,12040+30]..[352,12040+75])
                              Pexp_apply
                              expression (typing/includemod.ml[352,12040+30]..[352,12040+53])
                                Pexp_ident "retrieve_functor_params" (typing/includemod.ml[352,12040+30]..[352,12040+53])
                              [
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[352,12040+54]..[352,12040+67])
                                    Pexp_construct "::" (typing/includemod.ml[352,12040+57]..[352,12040+59])
                                    Some
                                      expression (typing/includemod.ml[352,12040+55]..[352,12040+66]) ghost
                                        Pexp_tuple
                                        [
                                          expression (typing/includemod.ml[352,12040+55]..[352,12040+56])
                                            Pexp_ident "p" (typing/includemod.ml[352,12040+55]..[352,12040+56])
                                          expression (typing/includemod.ml[352,12040+60]..[352,12040+66])
                                            Pexp_ident "before" (typing/includemod.ml[352,12040+60]..[352,12040+66])
                                        ]
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[352,12040+68]..[352,12040+71])
                                    Pexp_ident "env" (typing/includemod.ml[352,12040+68]..[352,12040+71])
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[352,12040+72]..[352,12040+75])
                                    Pexp_ident "res" (typing/includemod.ml[352,12040+72]..[352,12040+75])
                              ]
                          <case>
                            pattern (typing/includemod.ml[353,12116+6]..[353,12116+28])
                              Ppat_alias "res" (typing/includemod.ml[353,12116+25]..[353,12116+28])
                              pattern (typing/includemod.ml[353,12116+6]..[353,12116+21])
                                Ppat_construct "Mty_signature" (typing/includemod.ml[353,12116+6]..[353,12116+19])
                                Some
                                  []
                                  pattern (typing/includemod.ml[353,12116+20]..[353,12116+21])
                                    Ppat_any
                            expression (typing/includemod.ml[353,12116+32]..[353,12116+52])
                              Pexp_tuple
                              [
                                expression (typing/includemod.ml[353,12116+32]..[353,12116+47])
                                  Pexp_apply
                                  expression (typing/includemod.ml[353,12116+32]..[353,12116+40])
                                    Pexp_ident "List.rev" (typing/includemod.ml[353,12116+32]..[353,12116+40])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[353,12116+41]..[353,12116+47])
                                        Pexp_ident "before" (typing/includemod.ml[353,12116+41]..[353,12116+47])
                                  ]
                                expression (typing/includemod.ml[353,12116+49]..[353,12116+52])
                                  Pexp_ident "res" (typing/includemod.ml[353,12116+49]..[353,12116+52])
                              ]
                        ]
              ]
              expression (typing/includemod.ml[355,12174+2]..[355,12174+36])
                Pexp_apply
                expression (typing/includemod.ml[355,12174+2]..[355,12174+25])
                  Pexp_ident "retrieve_functor_params" (typing/includemod.ml[355,12174+2]..[355,12174+25])
                [
                  <arg>
                  Nolabel
                    expression (typing/includemod.ml[355,12174+26]..[355,12174+28])
                      Pexp_construct "[]" (typing/includemod.ml[355,12174+26]..[355,12174+28])
                      None
                  <arg>
                  Nolabel
                    expression (typing/includemod.ml[355,12174+29]..[355,12174+32])
                      Pexp_ident "env" (typing/includemod.ml[355,12174+29]..[355,12174+32])
                  <arg>
                  Nolabel
                    expression (typing/includemod.ml[355,12174+33]..[355,12174+36])
                      Pexp_ident "mty" (typing/includemod.ml[355,12174+33]..[355,12174+36])
                ]
    ]
  structure_item (typing/includemod.ml[361,12357+0]..[723,26631+58])
    Pstr_value Rec
    [
      <def>
        pattern (typing/includemod.ml[361,12357+8]..[361,12357+16])
          Ppat_var "modtypes" (typing/includemod.ml[361,12357+8]..[361,12357+16])
        expression (typing/includemod.ml[361,12357+17]..[366,12559+39]) ghost
          Pexp_fun
          Labelled "loc"
          None
          pattern (typing/includemod.ml[361,12357+18]..[361,12357+21])
            Ppat_var "loc" (typing/includemod.ml[361,12357+18]..[361,12357+21])
          expression (typing/includemod.ml[361,12357+22]..[366,12559+39]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (typing/includemod.ml[361,12357+22]..[361,12357+25])
              Ppat_var "env" (typing/includemod.ml[361,12357+22]..[361,12357+25])
            expression (typing/includemod.ml[361,12357+26]..[366,12559+39]) ghost
              Pexp_fun
              Labelled "mark"
              None
              pattern (typing/includemod.ml[361,12357+27]..[361,12357+31])
                Ppat_var "mark" (typing/includemod.ml[361,12357+27]..[361,12357+31])
              expression (typing/includemod.ml[361,12357+32]..[366,12559+39]) ghost
                Pexp_fun
                Nolabel
                None
                pattern (typing/includemod.ml[361,12357+32]..[361,12357+37])
                  Ppat_var "subst" (typing/includemod.ml[361,12357+32]..[361,12357+37])
                expression (typing/includemod.ml[361,12357+38]..[366,12559+39]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (typing/includemod.ml[361,12357+38]..[361,12357+42])
                    Ppat_var "mty1" (typing/includemod.ml[361,12357+38]..[361,12357+42])
                  expression (typing/includemod.ml[361,12357+43]..[366,12559+39]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (typing/includemod.ml[361,12357+43]..[361,12357+47])
                      Ppat_var "mty2" (typing/includemod.ml[361,12357+43]..[361,12357+47])
                    expression (typing/includemod.ml[362,12407+2]..[366,12559+39])
                      Pexp_match
                      expression (typing/includemod.ml[362,12407+8]..[362,12407+51])
                        Pexp_apply
                        expression (typing/includemod.ml[362,12407+8]..[362,12407+20])
                          Pexp_ident "try_modtypes" (typing/includemod.ml[362,12407+8]..[362,12407+20])
                        [
                          <arg>
                          Labelled "loc"
                            expression (typing/includemod.ml[362,12407+22]..[362,12407+25])
                              Pexp_ident "loc" (typing/includemod.ml[362,12407+22]..[362,12407+25])
                          <arg>
                          Nolabel
                            expression (typing/includemod.ml[362,12407+26]..[362,12407+29])
                              Pexp_ident "env" (typing/includemod.ml[362,12407+26]..[362,12407+29])
                          <arg>
                          Labelled "mark"
                            expression (typing/includemod.ml[362,12407+31]..[362,12407+35])
                              Pexp_ident "mark" (typing/includemod.ml[362,12407+31]..[362,12407+35])
                          <arg>
                          Nolabel
                            expression (typing/includemod.ml[362,12407+36]..[362,12407+41])
                              Pexp_ident "subst" (typing/includemod.ml[362,12407+36]..[362,12407+41])
                          <arg>
                          Nolabel
                            expression (typing/includemod.ml[362,12407+42]..[362,12407+46])
                              Pexp_ident "mty1" (typing/includemod.ml[362,12407+42]..[362,12407+46])
                          <arg>
                          Nolabel
                            expression (typing/includemod.ml[362,12407+47]..[362,12407+51])
                              Pexp_ident "mty2" (typing/includemod.ml[362,12407+47]..[362,12407+51])
                        ]
                      [
                        <case>
                          pattern (typing/includemod.ml[363,12464+4]..[363,12464+14])
                            Ppat_alias "ok" (typing/includemod.ml[363,12464+12]..[363,12464+14])
                            pattern (typing/includemod.ml[363,12464+4]..[363,12464+8])
                              Ppat_construct "Ok" (typing/includemod.ml[363,12464+4]..[363,12464+6])
                              Some
                                []
                                pattern (typing/includemod.ml[363,12464+7]..[363,12464+8])
                                  Ppat_any
                          expression (typing/includemod.ml[363,12464+18]..[363,12464+20])
                            Pexp_ident "ok" (typing/includemod.ml[363,12464+18]..[363,12464+20])
                        <case>
                          pattern (typing/includemod.ml[364,12485+4]..[364,12485+16])
                            Ppat_construct "Error" (typing/includemod.ml[364,12485+4]..[364,12485+9])
                            Some
                              []
                              pattern (typing/includemod.ml[364,12485+10]..[364,12485+16])
                                Ppat_var "reason" (typing/includemod.ml[364,12485+10]..[364,12485+16])
                          expression (typing/includemod.ml[365,12505+4]..[366,12559+39])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (typing/includemod.ml[365,12505+8]..[365,12505+12])
                                  Ppat_var "mty2" (typing/includemod.ml[365,12505+8]..[365,12505+12])
                                expression (typing/includemod.ml[365,12505+15]..[365,12505+50])
                                  Pexp_apply
                                  expression (typing/includemod.ml[365,12505+15]..[365,12505+28])
                                    Pexp_ident "Subst.modtype" (typing/includemod.ml[365,12505+15]..[365,12505+28])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[365,12505+29]..[365,12505+39])
                                        Pexp_construct "Make_local" (typing/includemod.ml[365,12505+29]..[365,12505+39])
                                        None
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[365,12505+40]..[365,12505+45])
                                        Pexp_ident "subst" (typing/includemod.ml[365,12505+40]..[365,12505+45])
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[365,12505+46]..[365,12505+50])
                                        Pexp_ident "mty2" (typing/includemod.ml[365,12505+46]..[365,12505+50])
                                  ]
                            ]
                            expression (typing/includemod.ml[366,12559+4]..[366,12559+39])
                              Pexp_construct "Error" (typing/includemod.ml[366,12559+4]..[366,12559+9])
                              Some
                                expression (typing/includemod.ml[366,12559+10]..[366,12559+39])
                                  Pexp_open Fresh
                                  module_expr (typing/includemod.ml[366,12559+10]..[366,12559+15])
                                    Pmod_ident "Error" (typing/includemod.ml[366,12559+10]..[366,12559+15])
                                  expression (typing/includemod.ml[366,12559+17]..[366,12559+38])
                                    Pexp_apply
                                    expression (typing/includemod.ml[366,12559+17]..[366,12559+21])
                                      Pexp_ident "diff" (typing/includemod.ml[366,12559+17]..[366,12559+21])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[366,12559+22]..[366,12559+26])
                                          Pexp_ident "mty1" (typing/includemod.ml[366,12559+22]..[366,12559+26])
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[366,12559+27]..[366,12559+31])
                                          Pexp_ident "mty2" (typing/includemod.ml[366,12559+27]..[366,12559+31])
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[366,12559+32]..[366,12559+38])
                                          Pexp_ident "reason" (typing/includemod.ml[366,12559+32]..[366,12559+38])
                                    ]
                      ]
      <def>
        pattern (typing/includemod.ml[368,12600+4]..[368,12600+16])
          Ppat_var "try_modtypes" (typing/includemod.ml[368,12600+4]..[368,12600+16])
        expression (typing/includemod.ml[368,12600+17]..[458,16440+46]) ghost
          Pexp_fun
          Labelled "loc"
          None
          pattern (typing/includemod.ml[368,12600+18]..[368,12600+21])
            Ppat_var "loc" (typing/includemod.ml[368,12600+18]..[368,12600+21])
          expression (typing/includemod.ml[368,12600+22]..[458,16440+46]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (typing/includemod.ml[368,12600+22]..[368,12600+25])
              Ppat_var "env" (typing/includemod.ml[368,12600+22]..[368,12600+25])
            expression (typing/includemod.ml[368,12600+26]..[458,16440+46]) ghost
              Pexp_fun
              Labelled "mark"
              None
              pattern (typing/includemod.ml[368,12600+27]..[368,12600+31])
                Ppat_var "mark" (typing/includemod.ml[368,12600+27]..[368,12600+31])
              expression (typing/includemod.ml[368,12600+32]..[458,16440+46]) ghost
                Pexp_fun
                Nolabel
                None
                pattern (typing/includemod.ml[368,12600+32]..[368,12600+37])
                  Ppat_var "subst" (typing/includemod.ml[368,12600+32]..[368,12600+37])
                expression (typing/includemod.ml[368,12600+38]..[458,16440+46]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (typing/includemod.ml[368,12600+38]..[368,12600+42])
                    Ppat_var "mty1" (typing/includemod.ml[368,12600+38]..[368,12600+42])
                  expression (typing/includemod.ml[368,12600+43]..[458,16440+46]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (typing/includemod.ml[368,12600+43]..[368,12600+47])
                      Ppat_var "mty2" (typing/includemod.ml[368,12600+43]..[368,12600+47])
                    expression (typing/includemod.ml[369,12650+2]..[458,16440+46])
                      Pexp_match
                      expression (typing/includemod.ml[369,12650+8]..[369,12650+18])
                        Pexp_tuple
                        [
                          expression (typing/includemod.ml[369,12650+8]..[369,12650+12])
                            Pexp_ident "mty1" (typing/includemod.ml[369,12650+8]..[369,12650+12])
                          expression (typing/includemod.ml[369,12650+14]..[369,12650+18])
                            Pexp_ident "mty2" (typing/includemod.ml[369,12650+14]..[369,12650+18])
                        ]
                      [
                        <case>
                          pattern (typing/includemod.ml[370,12674+4]..[370,12674+32])
                            Ppat_tuple
                            [
                              pattern (typing/includemod.ml[370,12674+5]..[370,12674+17])
                                Ppat_construct "Mty_alias" (typing/includemod.ml[370,12674+5]..[370,12674+14])
                                Some
                                  []
                                  pattern (typing/includemod.ml[370,12674+15]..[370,12674+17])
                                    Ppat_var "p1" (typing/includemod.ml[370,12674+15]..[370,12674+17])
                              pattern (typing/includemod.ml[370,12674+19]..[370,12674+31])
                                Ppat_construct "Mty_alias" (typing/includemod.ml[370,12674+19]..[370,12674+28])
                                Some
                                  []
                                  pattern (typing/includemod.ml[370,12674+29]..[370,12674+31])
                                    Ppat_var "p2" (typing/includemod.ml[370,12674+29]..[370,12674+31])
                            ]
                          expression (typing/includemod.ml[371,12710+6]..[375,12909+26])
                            Pexp_ifthenelse
                            expression (typing/includemod.ml[371,12710+9]..[371,12710+34])
                              Pexp_apply
                              expression (typing/includemod.ml[371,12710+9]..[371,12710+27])
                                Pexp_ident "Env.is_functor_arg" (typing/includemod.ml[371,12710+9]..[371,12710+27])
                              [
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[371,12710+28]..[371,12710+30])
                                    Pexp_ident "p2" (typing/includemod.ml[371,12710+28]..[371,12710+30])
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[371,12710+31]..[371,12710+34])
                                    Pexp_ident "env" (typing/includemod.ml[371,12710+31]..[371,12710+34])
                              ]
                            expression (typing/includemod.ml[372,12750+8]..[372,12750+45])
                              Pexp_construct "Error" (typing/includemod.ml[372,12750+8]..[372,12750+13])
                              Some
                                expression (typing/includemod.ml[372,12750+14]..[372,12750+45])
                                  Pexp_construct "Error.Invalid_module_alias" (typing/includemod.ml[372,12750+15]..[372,12750+41])
                                  Some
                                    expression (typing/includemod.ml[372,12750+42]..[372,12750+44])
                                      Pexp_ident "p2" (typing/includemod.ml[372,12750+42]..[372,12750+44])
                            Some
                              expression (typing/includemod.ml[373,12796+11]..[375,12909+26])
                                Pexp_ifthenelse
                                expression (typing/includemod.ml[373,12796+14]..[373,12796+54])
                                  Pexp_apply
                                  expression (typing/includemod.ml[373,12796+14]..[373,12796+17])
                                    Pexp_ident "not" (typing/includemod.ml[373,12796+14]..[373,12796+17])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[373,12796+18]..[373,12796+54])
                                        Pexp_apply
                                        expression (typing/includemod.ml[373,12796+19]..[373,12796+37])
                                          Pexp_ident "equal_module_paths" (typing/includemod.ml[373,12796+19]..[373,12796+37])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (typing/includemod.ml[373,12796+38]..[373,12796+41])
                                              Pexp_ident "env" (typing/includemod.ml[373,12796+38]..[373,12796+41])
                                          <arg>
                                          Nolabel
                                            expression (typing/includemod.ml[373,12796+42]..[373,12796+44])
                                              Pexp_ident "p1" (typing/includemod.ml[373,12796+42]..[373,12796+44])
                                          <arg>
                                          Nolabel
                                            expression (typing/includemod.ml[373,12796+45]..[373,12796+50])
                                              Pexp_ident "subst" (typing/includemod.ml[373,12796+45]..[373,12796+50])
                                          <arg>
                                          Nolabel
                                            expression (typing/includemod.ml[373,12796+51]..[373,12796+53])
                                              Pexp_ident "p2" (typing/includemod.ml[373,12796+51]..[373,12796+53])
                                        ]
                                  ]
                                expression (typing/includemod.ml[374,12856+10]..[374,12856+52])
                                  Pexp_construct "Error" (typing/includemod.ml[374,12856+10]..[374,12856+15])
                                  Some
                                    expression (typing/includemod.ml[374,12856+16]..[374,12856+52])
                                      Pexp_open Fresh
                                      module_expr (typing/includemod.ml[374,12856+16]..[374,12856+21])
                                        Pmod_ident "Error" (typing/includemod.ml[374,12856+16]..[374,12856+21])
                                      expression (typing/includemod.ml[374,12856+23]..[374,12856+51])
                                        Pexp_construct "Mt_core" (typing/includemod.ml[374,12856+23]..[374,12856+30])
                                        Some
                                          expression (typing/includemod.ml[374,12856+31]..[374,12856+51])
                                            Pexp_construct "Incompatible_aliases" (typing/includemod.ml[374,12856+31]..[374,12856+51])
                                            None
                                Some
                                  expression (typing/includemod.ml[375,12909+11]..[375,12909+26])
                                    Pexp_construct "Ok" (typing/includemod.ml[375,12909+11]..[375,12909+13])
                                    Some
                                      expression (typing/includemod.ml[375,12909+14]..[375,12909+26])
                                        Pexp_construct "Tcoerce_none" (typing/includemod.ml[375,12909+14]..[375,12909+26])
                                        None
                        <case>
                          pattern (typing/includemod.ml[376,12936+4]..[376,12936+21])
                            Ppat_tuple
                            [
                              pattern (typing/includemod.ml[376,12936+5]..[376,12936+17])
                                Ppat_construct "Mty_alias" (typing/includemod.ml[376,12936+5]..[376,12936+14])
                                Some
                                  []
                                  pattern (typing/includemod.ml[376,12936+15]..[376,12936+17])
                                    Ppat_var "p1" (typing/includemod.ml[376,12936+15]..[376,12936+17])
                              pattern (typing/includemod.ml[376,12936+19]..[376,12936+20])
                                Ppat_any
                            ]
                          expression (typing/includemod.ml[376,12936+25]..[392,13567+7])
                            Pexp_match
                            expression (typing/includemod.ml[378,12979+8]..[378,12979+61])
                              Pexp_apply
                              expression (typing/includemod.ml[378,12979+8]..[378,12979+33])
                                Pexp_ident "Env.normalize_module_path" (typing/includemod.ml[378,12979+8]..[378,12979+33])
                              [
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[378,12979+34]..[378,12979+54])
                                    Pexp_construct "Some" (typing/includemod.ml[378,12979+35]..[378,12979+39])
                                    Some
                                      expression (typing/includemod.ml[378,12979+40]..[378,12979+53])
                                        Pexp_ident "Location.none" (typing/includemod.ml[378,12979+40]..[378,12979+53])
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[378,12979+55]..[378,12979+58])
                                    Pexp_ident "env" (typing/includemod.ml[378,12979+55]..[378,12979+58])
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[378,12979+59]..[378,12979+61])
                                    Pexp_ident "p1" (typing/includemod.ml[378,12979+59]..[378,12979+61])
                              ]
                            [
                              <case>
                                pattern (typing/includemod.ml[380,13052+8]..[380,13052+61])
                                  Ppat_exception
                                  pattern (typing/includemod.ml[380,13052+18]..[380,13052+61])
                                    Ppat_construct "Env.Error" (typing/includemod.ml[380,13052+18]..[380,13052+27])
                                    Some
                                      []
                                      pattern (typing/includemod.ml[380,13052+28]..[380,13052+61])
                                        Ppat_construct "Env.Missing_module" (typing/includemod.ml[380,13052+29]..[380,13052+47])
                                        Some
                                          []
                                          pattern (typing/includemod.ml[380,13052+48]..[380,13052+60])
                                            Ppat_tuple
                                            [
                                              pattern (typing/includemod.ml[380,13052+49]..[380,13052+50])
                                                Ppat_any
                                              pattern (typing/includemod.ml[380,13052+52]..[380,13052+53])
                                                Ppat_any
                                              pattern (typing/includemod.ml[380,13052+55]..[380,13052+59])
                                                Ppat_var "path" (typing/includemod.ml[380,13052+55]..[380,13052+59])
                                            ]
                                expression (typing/includemod.ml[381,13117+10]..[381,13117+57])
                                  Pexp_construct "Error" (typing/includemod.ml[381,13117+10]..[381,13117+15])
                                  Some
                                    expression (typing/includemod.ml[381,13117+16]..[381,13117+57])
                                      Pexp_open Fresh
                                      module_expr (typing/includemod.ml[381,13117+16]..[381,13117+21])
                                        Pmod_ident "Error" (typing/includemod.ml[381,13117+16]..[381,13117+21])
                                      expression (typing/includemod.ml[381,13117+23]..[381,13117+56])
                                        Pexp_construct "Mt_core" (typing/includemod.ml[381,13117+23]..[381,13117+30])
                                        Some
                                          expression (typing/includemod.ml[381,13117+30]..[381,13117+56])
                                            Pexp_construct "Unbound_module_path" (typing/includemod.ml[381,13117+31]..[381,13117+50])
                                            Some
                                              expression (typing/includemod.ml[381,13117+51]..[381,13117+55])
                                                Pexp_ident "path" (typing/includemod.ml[381,13117+51]..[381,13117+55])
                              <case>
                                pattern (typing/includemod.ml[382,13175+8]..[382,13175+10])
                                  Ppat_var "p1" (typing/includemod.ml[382,13175+8]..[382,13175+10])
                                expression (typing/includemod.ml[383,13189+10]..[391,13553+13])
                                  Pexp_match
                                  expression (typing/includemod.ml[383,13189+22]..[383,13189+49])
                                    Pexp_apply
                                    expression (typing/includemod.ml[383,13189+22]..[383,13189+41])
                                      Pexp_ident "expand_module_alias" (typing/includemod.ml[383,13189+22]..[383,13189+41])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[383,13189+42]..[383,13189+45])
                                          Pexp_ident "env" (typing/includemod.ml[383,13189+42]..[383,13189+45])
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[383,13189+47]..[383,13189+49])
                                          Pexp_ident "p1" (typing/includemod.ml[383,13189+47]..[383,13189+49])
                                    ]
                                  [
                                    <case>
                                      pattern (typing/includemod.ml[384,13244+12]..[384,13244+19])
                                        Ppat_construct "Error" (typing/includemod.ml[384,13244+12]..[384,13244+17])
                                        Some
                                          []
                                          pattern (typing/includemod.ml[384,13244+18]..[384,13244+19])
                                            Ppat_var "e" (typing/includemod.ml[384,13244+18]..[384,13244+19])
                                      expression (typing/includemod.ml[384,13244+23]..[384,13244+46])
                                        Pexp_construct "Error" (typing/includemod.ml[384,13244+23]..[384,13244+28])
                                        Some
                                          expression (typing/includemod.ml[384,13244+29]..[384,13244+46])
                                            Pexp_construct "Error.Mt_core" (typing/includemod.ml[384,13244+30]..[384,13244+43])
                                            Some
                                              expression (typing/includemod.ml[384,13244+44]..[384,13244+45])
                                                Pexp_ident "e" (typing/includemod.ml[384,13244+44]..[384,13244+45])
                                    <case>
                                      pattern (typing/includemod.ml[385,13291+12]..[385,13291+19])
                                        Ppat_construct "Ok" (typing/includemod.ml[385,13291+12]..[385,13291+14])
                                        Some
                                          []
                                          pattern (typing/includemod.ml[385,13291+15]..[385,13291+19])
                                            Ppat_var "mty1" (typing/includemod.ml[385,13291+15]..[385,13291+19])
                                      expression (typing/includemod.ml[386,13314+14]..[390,13478+74])
                                        Pexp_match
                                        expression (typing/includemod.ml[386,13314+20]..[387,13387+40])
                                          Pexp_apply
                                          expression (typing/includemod.ml[386,13314+20]..[386,13314+41])
                                            Pexp_ident "strengthened_modtypes" (typing/includemod.ml[386,13314+20]..[386,13314+41])
                                          [
                                            <arg>
                                            Labelled "loc"
                                              expression (typing/includemod.ml[386,13314+43]..[386,13314+46])
                                                Pexp_ident "loc" (typing/includemod.ml[386,13314+43]..[386,13314+46])
                                            <arg>
                                            Labelled "aliasable"
                                              expression (typing/includemod.ml[386,13314+58]..[386,13314+62])
                                                Pexp_construct "true" (typing/includemod.ml[386,13314+58]..[386,13314+62])
                                                None
                                            <arg>
                                            Nolabel
                                              expression (typing/includemod.ml[386,13314+63]..[386,13314+66])
                                                Pexp_ident "env" (typing/includemod.ml[386,13314+63]..[386,13314+66])
                                            <arg>
                                            Labelled "mark"
                                              expression (typing/includemod.ml[386,13314+68]..[386,13314+72])
                                                Pexp_ident "mark" (typing/includemod.ml[386,13314+68]..[386,13314+72])
                                            <arg>
                                            Nolabel
                                              expression (typing/includemod.ml[387,13387+22]..[387,13387+27])
                                                Pexp_ident "subst" (typing/includemod.ml[387,13387+22]..[387,13387+27])
                                            <arg>
                                            Nolabel
                                              expression (typing/includemod.ml[387,13387+28]..[387,13387+32])
                                                Pexp_ident "mty1" (typing/includemod.ml[387,13387+28]..[387,13387+32])
                                            <arg>
                                            Nolabel
                                              expression (typing/includemod.ml[387,13387+33]..[387,13387+35])
                                                Pexp_ident "p1" (typing/includemod.ml[387,13387+33]..[387,13387+35])
                                            <arg>
                                            Nolabel
                                              expression (typing/includemod.ml[387,13387+36]..[387,13387+40])
                                                Pexp_ident "mty2" (typing/includemod.ml[387,13387+36]..[387,13387+40])
                                          ]
                                        [
                                          <case>
                                            pattern (typing/includemod.ml[389,13447+16]..[389,13447+25])
                                              Ppat_alias "x" (typing/includemod.ml[389,13447+24]..[389,13447+25])
                                              pattern (typing/includemod.ml[389,13447+16]..[389,13447+20])
                                                Ppat_construct "Ok" (typing/includemod.ml[389,13447+16]..[389,13447+18])
                                                Some
                                                  []
                                                  pattern (typing/includemod.ml[389,13447+19]..[389,13447+20])
                                                    Ppat_any
                                            expression (typing/includemod.ml[389,13447+29]..[389,13447+30])
                                              Pexp_ident "x" (typing/includemod.ml[389,13447+29]..[389,13447+30])
                                          <case>
                                            pattern (typing/includemod.ml[390,13478+16]..[390,13478+28])
                                              Ppat_construct "Error" (typing/includemod.ml[390,13478+16]..[390,13478+21])
                                              Some
                                                []
                                                pattern (typing/includemod.ml[390,13478+22]..[390,13478+28])
                                                  Ppat_var "reason" (typing/includemod.ml[390,13478+22]..[390,13478+28])
                                            expression (typing/includemod.ml[390,13478+32]..[390,13478+74])
                                              Pexp_construct "Error" (typing/includemod.ml[390,13478+32]..[390,13478+37])
                                              Some
                                                expression (typing/includemod.ml[390,13478+38]..[390,13478+74])
                                                  Pexp_construct "Error.After_alias_expansion" (typing/includemod.ml[390,13478+39]..[390,13478+66])
                                                  Some
                                                    expression (typing/includemod.ml[390,13478+67]..[390,13478+73])
                                                      Pexp_ident "reason" (typing/includemod.ml[390,13478+67]..[390,13478+73])
                                        ]
                                  ]
                            ]
                        <case>
                          pattern (typing/includemod.ml[393,13575+4]..[393,13575+32])
                            Ppat_tuple
                            [
                              pattern (typing/includemod.ml[393,13575+5]..[393,13575+17])
                                Ppat_construct "Mty_ident" (typing/includemod.ml[393,13575+5]..[393,13575+14])
                                Some
                                  []
                                  pattern (typing/includemod.ml[393,13575+15]..[393,13575+17])
                                    Ppat_var "p1" (typing/includemod.ml[393,13575+15]..[393,13575+17])
                              pattern (typing/includemod.ml[393,13575+19]..[393,13575+31])
                                Ppat_construct "Mty_ident" (typing/includemod.ml[393,13575+19]..[393,13575+28])
                                Some
                                  []
                                  pattern (typing/includemod.ml[393,13575+29]..[393,13575+31])
                                    Ppat_var "p2" (typing/includemod.ml[393,13575+29]..[393,13575+31])
                            ]
                          expression (typing/includemod.ml[394,13611+6]..[402,14044+11])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (typing/includemod.ml[394,13611+10]..[394,13611+12])
                                  Ppat_var "p1" (typing/includemod.ml[394,13611+10]..[394,13611+12])
                                expression (typing/includemod.ml[394,13611+15]..[394,13611+48])
                                  Pexp_apply
                                  expression (typing/includemod.ml[394,13611+15]..[394,13611+41])
                                    Pexp_ident "Env.normalize_modtype_path" (typing/includemod.ml[394,13611+15]..[394,13611+41])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[394,13611+42]..[394,13611+45])
                                        Pexp_ident "env" (typing/includemod.ml[394,13611+42]..[394,13611+45])
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[394,13611+46]..[394,13611+48])
                                        Pexp_ident "p1" (typing/includemod.ml[394,13611+46]..[394,13611+48])
                                  ]
                            ]
                            expression (typing/includemod.ml[395,13663+6]..[402,14044+11])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (typing/includemod.ml[395,13663+10]..[395,13663+12])
                                    Ppat_var "p2" (typing/includemod.ml[395,13663+10]..[395,13663+12])
                                  expression (typing/includemod.ml[395,13663+15]..[395,13663+75])
                                    Pexp_apply
                                    expression (typing/includemod.ml[395,13663+15]..[395,13663+41])
                                      Pexp_ident "Env.normalize_modtype_path" (typing/includemod.ml[395,13663+15]..[395,13663+41])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[395,13663+42]..[395,13663+45])
                                          Pexp_ident "env" (typing/includemod.ml[395,13663+42]..[395,13663+45])
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[395,13663+46]..[395,13663+75])
                                          Pexp_apply
                                          expression (typing/includemod.ml[395,13663+47]..[395,13663+65])
                                            Pexp_ident "Subst.modtype_path" (typing/includemod.ml[395,13663+47]..[395,13663+65])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (typing/includemod.ml[395,13663+66]..[395,13663+71])
                                                Pexp_ident "subst" (typing/includemod.ml[395,13663+66]..[395,13663+71])
                                            <arg>
                                            Nolabel
                                              expression (typing/includemod.ml[395,13663+72]..[395,13663+74])
                                                Pexp_ident "p2" (typing/includemod.ml[395,13663+72]..[395,13663+74])
                                          ]
                                    ]
                              ]
                              expression (typing/includemod.ml[396,13742+6]..[402,14044+11])
                                Pexp_ifthenelse
                                expression (typing/includemod.ml[396,13742+9]..[396,13742+24])
                                  Pexp_apply
                                  expression (typing/includemod.ml[396,13742+9]..[396,13742+18])
                                    Pexp_ident "Path.same" (typing/includemod.ml[396,13742+9]..[396,13742+18])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[396,13742+19]..[396,13742+21])
                                        Pexp_ident "p1" (typing/includemod.ml[396,13742+19]..[396,13742+21])
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[396,13742+22]..[396,13742+24])
                                        Pexp_ident "p2" (typing/includemod.ml[396,13742+22]..[396,13742+24])
                                  ]
                                expression (typing/includemod.ml[396,13742+30]..[396,13742+45])
                                  Pexp_construct "Ok" (typing/includemod.ml[396,13742+30]..[396,13742+32])
                                  Some
                                    expression (typing/includemod.ml[396,13742+33]..[396,13742+45])
                                      Pexp_construct "Tcoerce_none" (typing/includemod.ml[396,13742+33]..[396,13742+45])
                                      None
                                Some
                                  expression (typing/includemod.ml[398,13799+8]..[402,14044+11])
                                    Pexp_match
                                    expression (typing/includemod.ml[398,13799+20]..[398,13799+74])
                                      Pexp_tuple
                                      [
                                        expression (typing/includemod.ml[398,13799+20]..[398,13799+46])
                                          Pexp_apply
                                          expression (typing/includemod.ml[398,13799+20]..[398,13799+39])
                                            Pexp_ident "expand_modtype_path" (typing/includemod.ml[398,13799+20]..[398,13799+39])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (typing/includemod.ml[398,13799+40]..[398,13799+43])
                                                Pexp_ident "env" (typing/includemod.ml[398,13799+40]..[398,13799+43])
                                            <arg>
                                            Nolabel
                                              expression (typing/includemod.ml[398,13799+44]..[398,13799+46])
                                                Pexp_ident "p1" (typing/includemod.ml[398,13799+44]..[398,13799+46])
                                          ]
                                        expression (typing/includemod.ml[398,13799+48]..[398,13799+74])
                                          Pexp_apply
                                          expression (typing/includemod.ml[398,13799+48]..[398,13799+67])
                                            Pexp_ident "expand_modtype_path" (typing/includemod.ml[398,13799+48]..[398,13799+67])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (typing/includemod.ml[398,13799+68]..[398,13799+71])
                                                Pexp_ident "env" (typing/includemod.ml[398,13799+68]..[398,13799+71])
                                            <arg>
                                            Nolabel
                                              expression (typing/includemod.ml[398,13799+72]..[398,13799+74])
                                                Pexp_ident "p2" (typing/includemod.ml[398,13799+72]..[398,13799+74])
                                          ]
                                      ]
                                    [
                                      <case>
                                        pattern (typing/includemod.ml[399,13879+10]..[399,13879+30])
                                          Ppat_tuple
                                          [
                                            pattern (typing/includemod.ml[399,13879+10]..[399,13879+19])
                                              Ppat_construct "Some" (typing/includemod.ml[399,13879+10]..[399,13879+14])
                                              Some
                                                []
                                                pattern (typing/includemod.ml[399,13879+15]..[399,13879+19])
                                                  Ppat_var "mty1" (typing/includemod.ml[399,13879+15]..[399,13879+19])
                                            pattern (typing/includemod.ml[399,13879+21]..[399,13879+30])
                                              Ppat_construct "Some" (typing/includemod.ml[399,13879+21]..[399,13879+25])
                                              Some
                                                []
                                                pattern (typing/includemod.ml[399,13879+26]..[399,13879+30])
                                                  Ppat_var "mty2" (typing/includemod.ml[399,13879+26]..[399,13879+30])
                                          ]
                                        expression (typing/includemod.ml[400,13913+12]..[400,13913+55])
                                          Pexp_apply
                                          expression (typing/includemod.ml[400,13913+12]..[400,13913+24])
                                            Pexp_ident "try_modtypes" (typing/includemod.ml[400,13913+12]..[400,13913+24])
                                          [
                                            <arg>
                                            Labelled "loc"
                                              expression (typing/includemod.ml[400,13913+26]..[400,13913+29])
                                                Pexp_ident "loc" (typing/includemod.ml[400,13913+26]..[400,13913+29])
                                            <arg>
                                            Nolabel
                                              expression (typing/includemod.ml[400,13913+30]..[400,13913+33])
                                                Pexp_ident "env" (typing/includemod.ml[400,13913+30]..[400,13913+33])
                                            <arg>
                                            Labelled "mark"
                                              expression (typing/includemod.ml[400,13913+35]..[400,13913+39])
                                                Pexp_ident "mark" (typing/includemod.ml[400,13913+35]..[400,13913+39])
                                            <arg>
                                            Nolabel
                                              expression (typing/includemod.ml[400,13913+40]..[400,13913+45])
                                                Pexp_ident "subst" (typing/includemod.ml[400,13913+40]..[400,13913+45])
                                            <arg>
                                            Nolabel
                                              expression (typing/includemod.ml[400,13913+46]..[400,13913+50])
                                                Pexp_ident "mty1" (typing/includemod.ml[400,13913+46]..[400,13913+50])
                                            <arg>
                                            Nolabel
                                              expression (typing/includemod.ml[400,13913+51]..[400,13913+55])
                                                Pexp_ident "mty2" (typing/includemod.ml[400,13913+51]..[400,13913+55])
                                          ]
                                      <case>
                                        pattern (typing/includemod.ml[401,13969+10]..[401,13969+28])
                                          Ppat_or
                                          pattern (typing/includemod.ml[401,13969+10]..[401,13969+17])
                                            Ppat_tuple
                                            [
                                              pattern (typing/includemod.ml[401,13969+10]..[401,13969+14])
                                                Ppat_construct "None" (typing/includemod.ml[401,13969+10]..[401,13969+14])
                                                None
                                              pattern (typing/includemod.ml[401,13969+16]..[401,13969+17])
                                                Ppat_any
                                            ]
                                          pattern (typing/includemod.ml[401,13969+21]..[401,13969+28])
                                            Ppat_tuple
                                            [
                                              pattern (typing/includemod.ml[401,13969+21]..[401,13969+22])
                                                Ppat_any
                                              pattern (typing/includemod.ml[401,13969+24]..[401,13969+28])
                                                Ppat_construct "None" (typing/includemod.ml[401,13969+24]..[401,13969+28])
                                                None
                                            ]
                                        expression (typing/includemod.ml[401,13969+32]..[401,13969+74])
                                          Pexp_construct "Error" (typing/includemod.ml[401,13969+32]..[401,13969+37])
                                          Some
                                            expression (typing/includemod.ml[401,13969+38]..[401,13969+74])
                                              Pexp_construct "Error.Mt_core" (typing/includemod.ml[401,13969+39]..[401,13969+52])
                                              Some
                                                expression (typing/includemod.ml[401,13969+53]..[401,13969+73])
                                                  Pexp_construct "Abstract_module_type" (typing/includemod.ml[401,13969+53]..[401,13969+73])
                                                  None
                                    ]
                        <case>
                          pattern (typing/includemod.ml[403,14056+4]..[403,14056+21])
                            Ppat_tuple
                            [
                              pattern (typing/includemod.ml[403,14056+5]..[403,14056+17])
                                Ppat_construct "Mty_ident" (typing/includemod.ml[403,14056+5]..[403,14056+14])
                                Some
                                  []
                                  pattern (typing/includemod.ml[403,14056+15]..[403,14056+17])
                                    Ppat_var "p1" (typing/includemod.ml[403,14056+15]..[403,14056+17])
                              pattern (typing/includemod.ml[403,14056+19]..[403,14056+20])
                                Ppat_any
                            ]
                          expression (typing/includemod.ml[404,14081+6]..[409,14313+9])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (typing/includemod.ml[404,14081+10]..[404,14081+12])
                                  Ppat_var "p1" (typing/includemod.ml[404,14081+10]..[404,14081+12])
                                expression (typing/includemod.ml[404,14081+15]..[404,14081+48])
                                  Pexp_apply
                                  expression (typing/includemod.ml[404,14081+15]..[404,14081+41])
                                    Pexp_ident "Env.normalize_modtype_path" (typing/includemod.ml[404,14081+15]..[404,14081+41])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[404,14081+42]..[404,14081+45])
                                        Pexp_ident "env" (typing/includemod.ml[404,14081+42]..[404,14081+45])
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[404,14081+46]..[404,14081+48])
                                        Pexp_ident "p1" (typing/includemod.ml[404,14081+46]..[404,14081+48])
                                  ]
                            ]
                            expression (typing/includemod.ml[405,14133+6]..[409,14313+9])
                              Pexp_match
                              expression (typing/includemod.ml[405,14133+18]..[405,14133+44])
                                Pexp_apply
                                expression (typing/includemod.ml[405,14133+18]..[405,14133+37])
                                  Pexp_ident "expand_modtype_path" (typing/includemod.ml[405,14133+18]..[405,14133+37])
                                [
                                  <arg>
                                  Nolabel
                                    expression (typing/includemod.ml[405,14133+38]..[405,14133+41])
                                      Pexp_ident "env" (typing/includemod.ml[405,14133+38]..[405,14133+41])
                                  <arg>
                                  Nolabel
                                    expression (typing/includemod.ml[405,14133+42]..[405,14133+44])
                                      Pexp_ident "p1" (typing/includemod.ml[405,14133+42]..[405,14133+44])
                                ]
                              [
                                <case>
                                  pattern (typing/includemod.ml[406,14183+8]..[406,14183+15])
                                    Ppat_construct "Some" (typing/includemod.ml[406,14183+8]..[406,14183+12])
                                    Some
                                      []
                                      pattern (typing/includemod.ml[406,14183+13]..[406,14183+15])
                                        Ppat_var "p1" (typing/includemod.ml[406,14183+13]..[406,14183+15])
                                  expression (typing/includemod.ml[407,14202+10]..[407,14202+51])
                                    Pexp_apply
                                    expression (typing/includemod.ml[407,14202+10]..[407,14202+22])
                                      Pexp_ident "try_modtypes" (typing/includemod.ml[407,14202+10]..[407,14202+22])
                                    [
                                      <arg>
                                      Labelled "loc"
                                        expression (typing/includemod.ml[407,14202+24]..[407,14202+27])
                                          Pexp_ident "loc" (typing/includemod.ml[407,14202+24]..[407,14202+27])
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[407,14202+28]..[407,14202+31])
                                          Pexp_ident "env" (typing/includemod.ml[407,14202+28]..[407,14202+31])
                                      <arg>
                                      Labelled "mark"
                                        expression (typing/includemod.ml[407,14202+33]..[407,14202+37])
                                          Pexp_ident "mark" (typing/includemod.ml[407,14202+33]..[407,14202+37])
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[407,14202+38]..[407,14202+43])
                                          Pexp_ident "subst" (typing/includemod.ml[407,14202+38]..[407,14202+43])
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[407,14202+44]..[407,14202+46])
                                          Pexp_ident "p1" (typing/includemod.ml[407,14202+44]..[407,14202+46])
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[407,14202+47]..[407,14202+51])
                                          Pexp_ident "mty2" (typing/includemod.ml[407,14202+47]..[407,14202+51])
                                    ]
                                <case>
                                  pattern (typing/includemod.ml[408,14254+8]..[408,14254+12])
                                    Ppat_construct "None" (typing/includemod.ml[408,14254+8]..[408,14254+12])
                                    None
                                  expression (typing/includemod.ml[408,14254+16]..[408,14254+58])
                                    Pexp_construct "Error" (typing/includemod.ml[408,14254+16]..[408,14254+21])
                                    Some
                                      expression (typing/includemod.ml[408,14254+22]..[408,14254+58])
                                        Pexp_construct "Error.Mt_core" (typing/includemod.ml[408,14254+23]..[408,14254+36])
                                        Some
                                          expression (typing/includemod.ml[408,14254+37]..[408,14254+57])
                                            Pexp_construct "Abstract_module_type" (typing/includemod.ml[408,14254+37]..[408,14254+57])
                                            None
                              ]
                        <case>
                          pattern (typing/includemod.ml[410,14323+4]..[410,14323+21])
                            Ppat_tuple
                            [
                              pattern (typing/includemod.ml[410,14323+5]..[410,14323+6])
                                Ppat_any
                              pattern (typing/includemod.ml[410,14323+8]..[410,14323+20])
                                Ppat_construct "Mty_ident" (typing/includemod.ml[410,14323+8]..[410,14323+17])
                                Some
                                  []
                                  pattern (typing/includemod.ml[410,14323+18]..[410,14323+20])
                                    Ppat_var "p2" (typing/includemod.ml[410,14323+18]..[410,14323+20])
                            ]
                          expression (typing/includemod.ml[411,14348+6]..[422,14852+9])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (typing/includemod.ml[411,14348+10]..[411,14348+12])
                                  Ppat_var "p2" (typing/includemod.ml[411,14348+10]..[411,14348+12])
                                expression (typing/includemod.ml[411,14348+15]..[411,14348+75])
                                  Pexp_apply
                                  expression (typing/includemod.ml[411,14348+15]..[411,14348+41])
                                    Pexp_ident "Env.normalize_modtype_path" (typing/includemod.ml[411,14348+15]..[411,14348+41])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[411,14348+42]..[411,14348+45])
                                        Pexp_ident "env" (typing/includemod.ml[411,14348+42]..[411,14348+45])
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[411,14348+46]..[411,14348+75])
                                        Pexp_apply
                                        expression (typing/includemod.ml[411,14348+47]..[411,14348+65])
                                          Pexp_ident "Subst.modtype_path" (typing/includemod.ml[411,14348+47]..[411,14348+65])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (typing/includemod.ml[411,14348+66]..[411,14348+71])
                                              Pexp_ident "subst" (typing/includemod.ml[411,14348+66]..[411,14348+71])
                                          <arg>
                                          Nolabel
                                            expression (typing/includemod.ml[411,14348+72]..[411,14348+74])
                                              Pexp_ident "p2" (typing/includemod.ml[411,14348+72]..[411,14348+74])
                                        ]
                                  ]
                            ]
                            expression (typing/includemod.ml[412,14427+6]..[422,14852+9])
                              Pexp_match
                              expression (typing/includemod.ml[412,14427+18]..[412,14427+44])
                                Pexp_apply
                                expression (typing/includemod.ml[412,14427+18]..[412,14427+37])
                                  Pexp_ident "expand_modtype_path" (typing/includemod.ml[412,14427+18]..[412,14427+37])
                                [
                                  <arg>
                                  Nolabel
                                    expression (typing/includemod.ml[412,14427+38]..[412,14427+41])
                                      Pexp_ident "env" (typing/includemod.ml[412,14427+38]..[412,14427+41])
                                  <arg>
                                  Nolabel
                                    expression (typing/includemod.ml[412,14427+42]..[412,14427+44])
                                      Pexp_ident "p2" (typing/includemod.ml[412,14427+42]..[412,14427+44])
                                ]
                              [
                                <case>
                                  pattern (typing/includemod.ml[413,14477+8]..[413,14477+15])
                                    Ppat_construct "Some" (typing/includemod.ml[413,14477+8]..[413,14477+12])
                                    Some
                                      []
                                      pattern (typing/includemod.ml[413,14477+13]..[413,14477+15])
                                        Ppat_var "p2" (typing/includemod.ml[413,14477+13]..[413,14477+15])
                                  expression (typing/includemod.ml[413,14477+19]..[413,14477+60])
                                    Pexp_apply
                                    expression (typing/includemod.ml[413,14477+19]..[413,14477+31])
                                      Pexp_ident "try_modtypes" (typing/includemod.ml[413,14477+19]..[413,14477+31])
                                    [
                                      <arg>
                                      Labelled "loc"
                                        expression (typing/includemod.ml[413,14477+33]..[413,14477+36])
                                          Pexp_ident "loc" (typing/includemod.ml[413,14477+33]..[413,14477+36])
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[413,14477+37]..[413,14477+40])
                                          Pexp_ident "env" (typing/includemod.ml[413,14477+37]..[413,14477+40])
                                      <arg>
                                      Labelled "mark"
                                        expression (typing/includemod.ml[413,14477+42]..[413,14477+46])
                                          Pexp_ident "mark" (typing/includemod.ml[413,14477+42]..[413,14477+46])
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[413,14477+47]..[413,14477+52])
                                          Pexp_ident "subst" (typing/includemod.ml[413,14477+47]..[413,14477+52])
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[413,14477+53]..[413,14477+57])
                                          Pexp_ident "mty1" (typing/includemod.ml[413,14477+53]..[413,14477+57])
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[413,14477+58]..[413,14477+60])
                                          Pexp_ident "p2" (typing/includemod.ml[413,14477+58]..[413,14477+60])
                                    ]
                                <case>
                                  pattern (typing/includemod.ml[414,14538+8]..[414,14538+12])
                                    Ppat_construct "None" (typing/includemod.ml[414,14538+8]..[414,14538+12])
                                    None
                                  expression (typing/includemod.ml[415,14554+10]..[421,14838+13])
                                    Pexp_match
                                    expression (typing/includemod.ml[415,14554+22]..[415,14554+26])
                                      Pexp_ident "mty1" (typing/includemod.ml[415,14554+22]..[415,14554+26])
                                    [
                                      <case>
                                        pattern (typing/includemod.ml[416,14586+12]..[416,14586+25])
                                          Ppat_construct "Mty_functor" (typing/includemod.ml[416,14586+12]..[416,14586+23])
                                          Some
                                            []
                                            pattern (typing/includemod.ml[416,14586+24]..[416,14586+25])
                                              Ppat_any
                                        expression (typing/includemod.ml[417,14615+14]..[419,14734+46])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (typing/includemod.ml[417,14615+18]..[417,14615+25])
                                                Ppat_var "params1" (typing/includemod.ml[417,14615+18]..[417,14615+25])
                                              expression (typing/includemod.ml[417,14615+28]..[417,14615+60])
                                                Pexp_apply
                                                expression (typing/includemod.ml[417,14615+28]..[417,14615+51])
                                                  Pexp_ident "retrieve_functor_params" (typing/includemod.ml[417,14615+28]..[417,14615+51])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (typing/includemod.ml[417,14615+52]..[417,14615+55])
                                                      Pexp_ident "env" (typing/includemod.ml[417,14615+52]..[417,14615+55])
                                                  <arg>
                                                  Nolabel
                                                    expression (typing/includemod.ml[417,14615+56]..[417,14615+60])
                                                      Pexp_ident "mty1" (typing/includemod.ml[417,14615+56]..[417,14615+60])
                                                ]
                                          ]
                                          expression (typing/includemod.ml[418,14679+14]..[419,14734+46])
                                            Pexp_let Nonrec
                                            [
                                              <def>
                                                pattern (typing/includemod.ml[418,14679+18]..[418,14679+19])
                                                  Ppat_var "d" (typing/includemod.ml[418,14679+18]..[418,14679+19])
                                                expression (typing/includemod.ml[418,14679+22]..[418,14679+51])
                                                  Pexp_apply
                                                  expression (typing/includemod.ml[418,14679+22]..[418,14679+33])
                                                    Pexp_ident "Error.sdiff" (typing/includemod.ml[418,14679+22]..[418,14679+33])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (typing/includemod.ml[418,14679+34]..[418,14679+41])
                                                        Pexp_ident "params1" (typing/includemod.ml[418,14679+34]..[418,14679+41])
                                                    <arg>
                                                    Nolabel
                                                      expression (typing/includemod.ml[418,14679+42]..[418,14679+51])
                                                        Pexp_tuple
                                                        [
                                                          expression (typing/includemod.ml[418,14679+43]..[418,14679+45])
                                                            Pexp_construct "[]" (typing/includemod.ml[418,14679+43]..[418,14679+45])
                                                            None
                                                          expression (typing/includemod.ml[418,14679+46]..[418,14679+50])
                                                            Pexp_ident "mty2" (typing/includemod.ml[418,14679+46]..[418,14679+50])
                                                        ]
                                                  ]
                                            ]
                                            expression (typing/includemod.ml[419,14734+14]..[419,14734+46])
                                              Pexp_construct "Error" (typing/includemod.ml[419,14734+14]..[419,14734+19])
                                              Some
                                                expression (typing/includemod.ml[419,14734+20]..[419,14734+46])
                                                  Pexp_open Fresh
                                                  module_expr (typing/includemod.ml[419,14734+20]..[419,14734+25])
                                                    Pmod_ident "Error" (typing/includemod.ml[419,14734+20]..[419,14734+25])
                                                  expression (typing/includemod.ml[419,14734+27]..[419,14734+45])
                                                    Pexp_construct "Functor" (typing/includemod.ml[419,14734+27]..[419,14734+34])
                                                    Some
                                                      expression (typing/includemod.ml[419,14734+35]..[419,14734+45])
                                                        Pexp_construct "Params" (typing/includemod.ml[419,14734+36]..[419,14734+42])
                                                        Some
                                                          expression (typing/includemod.ml[419,14734+43]..[419,14734+44])
                                                            Pexp_ident "d" (typing/includemod.ml[419,14734+43]..[419,14734+44])
                                      <case>
                                        pattern (typing/includemod.ml[420,14781+12]..[420,14781+13])
                                          Ppat_any
                                        expression (typing/includemod.ml[420,14781+17]..[420,14781+56])
                                          Pexp_construct "Error" (typing/includemod.ml[420,14781+17]..[420,14781+22])
                                          Some
                                            expression (typing/includemod.ml[420,14781+23]..[420,14781+56])
                                              Pexp_open Fresh
                                              module_expr (typing/includemod.ml[420,14781+23]..[420,14781+28])
                                                Pmod_ident "Error" (typing/includemod.ml[420,14781+23]..[420,14781+28])
                                              expression (typing/includemod.ml[420,14781+30]..[420,14781+55])
                                                Pexp_construct "Mt_core" (typing/includemod.ml[420,14781+30]..[420,14781+37])
                                                Some
                                                  expression (typing/includemod.ml[420,14781+38]..[420,14781+55])
                                                    Pexp_construct "Not_an_identifier" (typing/includemod.ml[420,14781+38]..[420,14781+55])
                                                    None
                                    ]
                              ]
                        <case>
                          pattern (typing/includemod.ml[423,14862+4]..[423,14862+44])
                            Ppat_tuple
                            [
                              pattern (typing/includemod.ml[423,14862+5]..[423,14862+23])
                                Ppat_construct "Mty_signature" (typing/includemod.ml[423,14862+5]..[423,14862+18])
                                Some
                                  []
                                  pattern (typing/includemod.ml[423,14862+19]..[423,14862+23])
                                    Ppat_var "sig1" (typing/includemod.ml[423,14862+19]..[423,14862+23])
                              pattern (typing/includemod.ml[423,14862+25]..[423,14862+43])
                                Ppat_construct "Mty_signature" (typing/includemod.ml[423,14862+25]..[423,14862+38])
                                Some
                                  []
                                  pattern (typing/includemod.ml[423,14862+39]..[423,14862+43])
                                    Ppat_var "sig2" (typing/includemod.ml[423,14862+39]..[423,14862+43])
                            ]
                          expression (typing/includemod.ml[424,14910+6]..[427,15045+9])
                            Pexp_match
                            expression (typing/includemod.ml[424,14910+18]..[424,14910+59])
                              Pexp_apply
                              expression (typing/includemod.ml[424,14910+18]..[424,14910+28])
                                Pexp_ident "signatures" (typing/includemod.ml[424,14910+18]..[424,14910+28])
                              [
                                <arg>
                                Labelled "loc"
                                  expression (typing/includemod.ml[424,14910+30]..[424,14910+33])
                                    Pexp_ident "loc" (typing/includemod.ml[424,14910+30]..[424,14910+33])
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[424,14910+34]..[424,14910+37])
                                    Pexp_ident "env" (typing/includemod.ml[424,14910+34]..[424,14910+37])
                                <arg>
                                Labelled "mark"
                                  expression (typing/includemod.ml[424,14910+39]..[424,14910+43])
                                    Pexp_ident "mark" (typing/includemod.ml[424,14910+39]..[424,14910+43])
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[424,14910+44]..[424,14910+49])
                                    Pexp_ident "subst" (typing/includemod.ml[424,14910+44]..[424,14910+49])
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[424,14910+50]..[424,14910+54])
                                    Pexp_ident "sig1" (typing/includemod.ml[424,14910+50]..[424,14910+54])
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[424,14910+55]..[424,14910+59])
                                    Pexp_ident "sig2" (typing/includemod.ml[424,14910+55]..[424,14910+59])
                              ]
                            [
                              <case>
                                pattern (typing/includemod.ml[425,14975+8]..[425,14975+18])
                                  Ppat_alias "ok" (typing/includemod.ml[425,14975+16]..[425,14975+18])
                                  pattern (typing/includemod.ml[425,14975+8]..[425,14975+12])
                                    Ppat_construct "Ok" (typing/includemod.ml[425,14975+8]..[425,14975+10])
                                    Some
                                      []
                                      pattern (typing/includemod.ml[425,14975+11]..[425,14975+12])
                                        Ppat_any
                                expression (typing/includemod.ml[425,14975+22]..[425,14975+24])
                                  Pexp_ident "ok" (typing/includemod.ml[425,14975+22]..[425,14975+24])
                              <case>
                                pattern (typing/includemod.ml[426,15000+8]..[426,15000+15])
                                  Ppat_construct "Error" (typing/includemod.ml[426,15000+8]..[426,15000+13])
                                  Some
                                    []
                                    pattern (typing/includemod.ml[426,15000+14]..[426,15000+15])
                                      Ppat_var "e" (typing/includemod.ml[426,15000+14]..[426,15000+15])
                                expression (typing/includemod.ml[426,15000+19]..[426,15000+44])
                                  Pexp_construct "Error" (typing/includemod.ml[426,15000+19]..[426,15000+24])
                                  Some
                                    expression (typing/includemod.ml[426,15000+25]..[426,15000+44])
                                      Pexp_construct "Error.Signature" (typing/includemod.ml[426,15000+26]..[426,15000+41])
                                      Some
                                        expression (typing/includemod.ml[426,15000+42]..[426,15000+43])
                                          Pexp_ident "e" (typing/includemod.ml[426,15000+42]..[426,15000+43])
                            ]
                        <case>
                          pattern (typing/includemod.ml[428,15055+4]..[428,15055+58])
                            Ppat_tuple
                            [
                              pattern (typing/includemod.ml[428,15055+4]..[428,15055+30])
                                Ppat_construct "Mty_functor" (typing/includemod.ml[428,15055+4]..[428,15055+15])
                                Some
                                  []
                                  pattern (typing/includemod.ml[428,15055+16]..[428,15055+30])
                                    Ppat_tuple
                                    [
                                      pattern (typing/includemod.ml[428,15055+17]..[428,15055+23])
                                        Ppat_var "param1" (typing/includemod.ml[428,15055+17]..[428,15055+23])
                                      pattern (typing/includemod.ml[428,15055+25]..[428,15055+29])
                                        Ppat_var "res1" (typing/includemod.ml[428,15055+25]..[428,15055+29])
                                    ]
                              pattern (typing/includemod.ml[428,15055+32]..[428,15055+58])
                                Ppat_construct "Mty_functor" (typing/includemod.ml[428,15055+32]..[428,15055+43])
                                Some
                                  []
                                  pattern (typing/includemod.ml[428,15055+44]..[428,15055+58])
                                    Ppat_tuple
                                    [
                                      pattern (typing/includemod.ml[428,15055+45]..[428,15055+51])
                                        Ppat_var "param2" (typing/includemod.ml[428,15055+45]..[428,15055+51])
                                      pattern (typing/includemod.ml[428,15055+53]..[428,15055+57])
                                        Ppat_var "res2" (typing/includemod.ml[428,15055+53]..[428,15055+57])
                                    ]
                            ]
                          expression (typing/includemod.ml[429,15117+6]..[450,16167+9])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (typing/includemod.ml[429,15117+10]..[429,15117+28])
                                  Ppat_tuple
                                  [
                                    pattern (typing/includemod.ml[429,15117+10]..[429,15117+16])
                                      Ppat_var "cc_arg" (typing/includemod.ml[429,15117+10]..[429,15117+16])
                                    pattern (typing/includemod.ml[429,15117+18]..[429,15117+21])
                                      Ppat_var "env" (typing/includemod.ml[429,15117+18]..[429,15117+21])
                                    pattern (typing/includemod.ml[429,15117+23]..[429,15117+28])
                                      Ppat_var "subst" (typing/includemod.ml[429,15117+23]..[429,15117+28])
                                  ]
                                expression (typing/includemod.ml[430,15148+8]..[430,15148+75])
                                  Pexp_apply
                                  expression (typing/includemod.ml[430,15148+8]..[430,15148+21])
                                    Pexp_ident "functor_param" (typing/includemod.ml[430,15148+8]..[430,15148+21])
                                  [
                                    <arg>
                                    Labelled "loc"
                                      expression (typing/includemod.ml[430,15148+23]..[430,15148+26])
                                        Pexp_ident "loc" (typing/includemod.ml[430,15148+23]..[430,15148+26])
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[430,15148+27]..[430,15148+30])
                                        Pexp_ident "env" (typing/includemod.ml[430,15148+27]..[430,15148+30])
                                    <arg>
                                    Labelled "mark"
                                      expression (typing/includemod.ml[430,15148+37]..[430,15148+55])
                                        Pexp_apply
                                        expression (typing/includemod.ml[430,15148+38]..[430,15148+49])
                                          Pexp_ident "negate_mark" (typing/includemod.ml[430,15148+38]..[430,15148+49])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (typing/includemod.ml[430,15148+50]..[430,15148+54])
                                              Pexp_ident "mark" (typing/includemod.ml[430,15148+50]..[430,15148+54])
                                        ]
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[430,15148+56]..[430,15148+61])
                                        Pexp_ident "subst" (typing/includemod.ml[430,15148+56]..[430,15148+61])
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[430,15148+62]..[430,15148+68])
                                        Pexp_ident "param1" (typing/includemod.ml[430,15148+62]..[430,15148+68])
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[430,15148+69]..[430,15148+75])
                                        Pexp_ident "param2" (typing/includemod.ml[430,15148+69]..[430,15148+75])
                                  ]
                            ]
                            expression (typing/includemod.ml[432,15233+6]..[450,16167+9])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (typing/includemod.ml[432,15233+10]..[432,15233+16])
                                    Ppat_var "cc_res" (typing/includemod.ml[432,15233+10]..[432,15233+16])
                                  expression (typing/includemod.ml[432,15233+19]..[432,15233+58])
                                    Pexp_apply
                                    expression (typing/includemod.ml[432,15233+19]..[432,15233+27])
                                      Pexp_ident "modtypes" (typing/includemod.ml[432,15233+19]..[432,15233+27])
                                    [
                                      <arg>
                                      Labelled "loc"
                                        expression (typing/includemod.ml[432,15233+29]..[432,15233+32])
                                          Pexp_ident "loc" (typing/includemod.ml[432,15233+29]..[432,15233+32])
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[432,15233+33]..[432,15233+36])
                                          Pexp_ident "env" (typing/includemod.ml[432,15233+33]..[432,15233+36])
                                      <arg>
                                      Labelled "mark"
                                        expression (typing/includemod.ml[432,15233+38]..[432,15233+42])
                                          Pexp_ident "mark" (typing/includemod.ml[432,15233+38]..[432,15233+42])
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[432,15233+43]..[432,15233+48])
                                          Pexp_ident "subst" (typing/includemod.ml[432,15233+43]..[432,15233+48])
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[432,15233+49]..[432,15233+53])
                                          Pexp_ident "res1" (typing/includemod.ml[432,15233+49]..[432,15233+53])
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[432,15233+54]..[432,15233+58])
                                          Pexp_ident "res2" (typing/includemod.ml[432,15233+54]..[432,15233+58])
                                    ]
                              ]
                              expression (typing/includemod.ml[433,15295+6]..[450,16167+9])
                                Pexp_match
                                expression (typing/includemod.ml[433,15295+18]..[433,15295+32])
                                  Pexp_tuple
                                  [
                                    expression (typing/includemod.ml[433,15295+18]..[433,15295+24])
                                      Pexp_ident "cc_arg" (typing/includemod.ml[433,15295+18]..[433,15295+24])
                                    expression (typing/includemod.ml[433,15295+26]..[433,15295+32])
                                      Pexp_ident "cc_res" (typing/includemod.ml[433,15295+26]..[433,15295+32])
                                  ]
                                [
                                  <case>
                                    pattern (typing/includemod.ml[434,15333+8]..[434,15333+40])
                                      Ppat_tuple
                                      [
                                        pattern (typing/includemod.ml[434,15333+8]..[434,15333+23])
                                          Ppat_construct "Ok" (typing/includemod.ml[434,15333+8]..[434,15333+10])
                                          Some
                                            []
                                            pattern (typing/includemod.ml[434,15333+11]..[434,15333+23])
                                              Ppat_construct "Tcoerce_none" (typing/includemod.ml[434,15333+11]..[434,15333+23])
                                              None
                                        pattern (typing/includemod.ml[434,15333+25]..[434,15333+40])
                                          Ppat_construct "Ok" (typing/includemod.ml[434,15333+25]..[434,15333+27])
                                          Some
                                            []
                                            pattern (typing/includemod.ml[434,15333+28]..[434,15333+40])
                                              Ppat_construct "Tcoerce_none" (typing/includemod.ml[434,15333+28]..[434,15333+40])
                                              None
                                      ]
                                    expression (typing/includemod.ml[434,15333+44]..[434,15333+59])
                                      Pexp_construct "Ok" (typing/includemod.ml[434,15333+44]..[434,15333+46])
                                      Some
                                        expression (typing/includemod.ml[434,15333+47]..[434,15333+59])
                                          Pexp_construct "Tcoerce_none" (typing/includemod.ml[434,15333+47]..[434,15333+59])
                                          None
                                  <case>
                                    pattern (typing/includemod.ml[435,15393+8]..[435,15393+28])
                                      Ppat_tuple
                                      [
                                        pattern (typing/includemod.ml[435,15393+8]..[435,15393+17])
                                          Ppat_construct "Ok" (typing/includemod.ml[435,15393+8]..[435,15393+10])
                                          Some
                                            []
                                            pattern (typing/includemod.ml[435,15393+11]..[435,15393+17])
                                              Ppat_var "cc_arg" (typing/includemod.ml[435,15393+11]..[435,15393+17])
                                        pattern (typing/includemod.ml[435,15393+19]..[435,15393+28])
                                          Ppat_construct "Ok" (typing/includemod.ml[435,15393+19]..[435,15393+21])
                                          Some
                                            []
                                            pattern (typing/includemod.ml[435,15393+22]..[435,15393+28])
                                              Ppat_var "cc_res" (typing/includemod.ml[435,15393+22]..[435,15393+28])
                                      ]
                                    expression (typing/includemod.ml[435,15393+32]..[435,15393+68])
                                      Pexp_construct "Ok" (typing/includemod.ml[435,15393+32]..[435,15393+34])
                                      Some
                                        expression (typing/includemod.ml[435,15393+35]..[435,15393+68])
                                          Pexp_construct "Tcoerce_functor" (typing/includemod.ml[435,15393+36]..[435,15393+51])
                                          Some
                                            expression (typing/includemod.ml[435,15393+51]..[435,15393+67])
                                              Pexp_tuple
                                              [
                                                expression (typing/includemod.ml[435,15393+52]..[435,15393+58])
                                                  Pexp_ident "cc_arg" (typing/includemod.ml[435,15393+52]..[435,15393+58])
                                                expression (typing/includemod.ml[435,15393+60]..[435,15393+66])
                                                  Pexp_ident "cc_res" (typing/includemod.ml[435,15393+60]..[435,15393+66])
                                              ]
                                  <case>
                                    pattern (typing/includemod.ml[436,15462+8]..[436,15462+68])
                                      Ppat_tuple
                                      [
                                        pattern (typing/includemod.ml[436,15462+8]..[436,15462+9])
                                          Ppat_any
                                        pattern (typing/includemod.ml[436,15462+11]..[436,15462+68])
                                          Ppat_construct "Error" (typing/includemod.ml[436,15462+11]..[436,15462+16])
                                          Some
                                            []
                                            pattern (typing/includemod.ml[436,15462+17]..[436,15462+68])
                                              Ppat_record Open
                                              [
                                                "Error.symptom" (typing/includemod.ml[436,15462+18]..[436,15462+31])
                                                  pattern (typing/includemod.ml[436,15462+34]..[436,15462+64])
                                                    Ppat_construct "Error.Functor" (typing/includemod.ml[436,15462+34]..[436,15462+47])
                                                    Some
                                                      []
                                                      pattern (typing/includemod.ml[436,15462+48]..[436,15462+64])
                                                        Ppat_construct "Error.Params" (typing/includemod.ml[436,15462+48]..[436,15462+60])
                                                        Some
                                                          []
                                                          pattern (typing/includemod.ml[436,15462+61]..[436,15462+64])
                                                            Ppat_var "res" (typing/includemod.ml[436,15462+61]..[436,15462+64])
                                              ]
                                      ]
                                    expression (typing/includemod.ml[437,15534+10]..[442,15774+42])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (typing/includemod.ml[437,15534+14]..[437,15534+33])
                                            Ppat_tuple
                                            [
                                              pattern (typing/includemod.ml[437,15534+14]..[437,15534+24])
                                                Ppat_var "got_params" (typing/includemod.ml[437,15534+14]..[437,15534+24])
                                              pattern (typing/includemod.ml[437,15534+26]..[437,15534+33])
                                                Ppat_var "got_res" (typing/includemod.ml[437,15534+26]..[437,15534+33])
                                            ]
                                          expression (typing/includemod.ml[437,15534+36]..[437,15534+43])
                                            Pexp_field
                                            expression (typing/includemod.ml[437,15534+36]..[437,15534+39])
                                              Pexp_ident "res" (typing/includemod.ml[437,15534+36]..[437,15534+39])
                                            "got" (typing/includemod.ml[437,15534+40]..[437,15534+43])
                                      ]
                                      expression (typing/includemod.ml[438,15581+10]..[442,15774+42])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (typing/includemod.ml[438,15581+14]..[438,15581+43])
                                              Ppat_tuple
                                              [
                                                pattern (typing/includemod.ml[438,15581+14]..[438,15581+29])
                                                  Ppat_var "expected_params" (typing/includemod.ml[438,15581+14]..[438,15581+29])
                                                pattern (typing/includemod.ml[438,15581+31]..[438,15581+43])
                                                  Ppat_var "expected_res" (typing/includemod.ml[438,15581+31]..[438,15581+43])
                                              ]
                                            expression (typing/includemod.ml[438,15581+46]..[438,15581+58])
                                              Pexp_field
                                              expression (typing/includemod.ml[438,15581+46]..[438,15581+49])
                                                Pexp_ident "res" (typing/includemod.ml[438,15581+46]..[438,15581+49])
                                              "expected" (typing/includemod.ml[438,15581+50]..[438,15581+58])
                                        ]
                                        expression (typing/includemod.ml[439,15643+10]..[442,15774+42])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (typing/includemod.ml[439,15643+14]..[439,15643+15])
                                                Ppat_var "d" (typing/includemod.ml[439,15643+14]..[439,15643+15])
                                              expression (typing/includemod.ml[439,15643+18]..[441,15717+53])
                                                Pexp_apply
                                                expression (typing/includemod.ml[439,15643+18]..[439,15643+29])
                                                  Pexp_ident "Error.sdiff" (typing/includemod.ml[439,15643+18]..[439,15643+29])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (typing/includemod.ml[440,15673+14]..[440,15673+43])
                                                      Pexp_tuple
                                                      [
                                                        expression (typing/includemod.ml[440,15673+15]..[440,15673+33])
                                                          Pexp_construct "::" (typing/includemod.ml[440,15673+21]..[440,15673+23])
                                                          Some
                                                            expression (typing/includemod.ml[440,15673+15]..[440,15673+33]) ghost
                                                              Pexp_tuple
                                                              [
                                                                expression (typing/includemod.ml[440,15673+15]..[440,15673+21])
                                                                  Pexp_ident "param1" (typing/includemod.ml[440,15673+15]..[440,15673+21])
                                                                expression (typing/includemod.ml[440,15673+23]..[440,15673+33])
                                                                  Pexp_ident "got_params" (typing/includemod.ml[440,15673+23]..[440,15673+33])
                                                              ]
                                                        expression (typing/includemod.ml[440,15673+35]..[440,15673+42])
                                                          Pexp_ident "got_res" (typing/includemod.ml[440,15673+35]..[440,15673+42])
                                                      ]
                                                  <arg>
                                                  Nolabel
                                                    expression (typing/includemod.ml[441,15717+14]..[441,15717+53])
                                                      Pexp_tuple
                                                      [
                                                        expression (typing/includemod.ml[441,15717+15]..[441,15717+38])
                                                          Pexp_construct "::" (typing/includemod.ml[441,15717+21]..[441,15717+23])
                                                          Some
                                                            expression (typing/includemod.ml[441,15717+15]..[441,15717+38]) ghost
                                                              Pexp_tuple
                                                              [
                                                                expression (typing/includemod.ml[441,15717+15]..[441,15717+21])
                                                                  Pexp_ident "param2" (typing/includemod.ml[441,15717+15]..[441,15717+21])
                                                                expression (typing/includemod.ml[441,15717+23]..[441,15717+38])
                                                                  Pexp_ident "expected_params" (typing/includemod.ml[441,15717+23]..[441,15717+38])
                                                              ]
                                                        expression (typing/includemod.ml[441,15717+40]..[441,15717+52])
                                                          Pexp_ident "expected_res" (typing/includemod.ml[441,15717+40]..[441,15717+52])
                                                      ]
                                                ]
                                          ]
                                          expression (typing/includemod.ml[442,15774+10]..[442,15774+42])
                                            Pexp_construct "Error" (typing/includemod.ml[442,15774+10]..[442,15774+15])
                                            Some
                                              expression (typing/includemod.ml[442,15774+16]..[442,15774+42])
                                                Pexp_open Fresh
                                                module_expr (typing/includemod.ml[442,15774+16]..[442,15774+21])
                                                  Pmod_ident "Error" (typing/includemod.ml[442,15774+16]..[442,15774+21])
                                                expression (typing/includemod.ml[442,15774+23]..[442,15774+41])
                                                  Pexp_construct "Functor" (typing/includemod.ml[442,15774+23]..[442,15774+30])
                                                  Some
                                                    expression (typing/includemod.ml[442,15774+31]..[442,15774+41])
                                                      Pexp_construct "Params" (typing/includemod.ml[442,15774+32]..[442,15774+38])
                                                      Some
                                                        expression (typing/includemod.ml[442,15774+39]..[442,15774+40])
                                                          Pexp_ident "d" (typing/includemod.ml[442,15774+39]..[442,15774+40])
                                  <case>
                                    pattern (typing/includemod.ml[443,15817+8]..[443,15817+18])
                                      Ppat_tuple
                                      [
                                        pattern (typing/includemod.ml[443,15817+8]..[443,15817+15])
                                          Ppat_construct "Error" (typing/includemod.ml[443,15817+8]..[443,15817+13])
                                          Some
                                            []
                                            pattern (typing/includemod.ml[443,15817+14]..[443,15817+15])
                                              Ppat_any
                                        pattern (typing/includemod.ml[443,15817+17]..[443,15817+18])
                                          Ppat_any
                                      ]
                                    expression (typing/includemod.ml[444,15839+10]..[447,16052+42])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (typing/includemod.ml[444,15839+14]..[444,15839+27])
                                            Ppat_tuple
                                            [
                                              pattern (typing/includemod.ml[444,15839+14]..[444,15839+21])
                                                Ppat_var "params1" (typing/includemod.ml[444,15839+14]..[444,15839+21])
                                              pattern (typing/includemod.ml[444,15839+23]..[444,15839+27])
                                                Ppat_var "res1" (typing/includemod.ml[444,15839+23]..[444,15839+27])
                                            ]
                                          expression (typing/includemod.ml[444,15839+30]..[444,15839+62])
                                            Pexp_apply
                                            expression (typing/includemod.ml[444,15839+30]..[444,15839+53])
                                              Pexp_ident "retrieve_functor_params" (typing/includemod.ml[444,15839+30]..[444,15839+53])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (typing/includemod.ml[444,15839+54]..[444,15839+57])
                                                  Pexp_ident "env" (typing/includemod.ml[444,15839+54]..[444,15839+57])
                                              <arg>
                                              Nolabel
                                                expression (typing/includemod.ml[444,15839+58]..[444,15839+62])
                                                  Pexp_ident "res1" (typing/includemod.ml[444,15839+58]..[444,15839+62])
                                            ]
                                      ]
                                      expression (typing/includemod.ml[445,15905+10]..[447,16052+42])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (typing/includemod.ml[445,15905+14]..[445,15905+27])
                                              Ppat_tuple
                                              [
                                                pattern (typing/includemod.ml[445,15905+14]..[445,15905+21])
                                                  Ppat_var "params2" (typing/includemod.ml[445,15905+14]..[445,15905+21])
                                                pattern (typing/includemod.ml[445,15905+23]..[445,15905+27])
                                                  Ppat_var "res2" (typing/includemod.ml[445,15905+23]..[445,15905+27])
                                              ]
                                            expression (typing/includemod.ml[445,15905+30]..[445,15905+62])
                                              Pexp_apply
                                              expression (typing/includemod.ml[445,15905+30]..[445,15905+53])
                                                Pexp_ident "retrieve_functor_params" (typing/includemod.ml[445,15905+30]..[445,15905+53])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[445,15905+54]..[445,15905+57])
                                                    Pexp_ident "env" (typing/includemod.ml[445,15905+54]..[445,15905+57])
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[445,15905+58]..[445,15905+62])
                                                    Pexp_ident "res2" (typing/includemod.ml[445,15905+58]..[445,15905+62])
                                              ]
                                        ]
                                        expression (typing/includemod.ml[446,15971+10]..[447,16052+42])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (typing/includemod.ml[446,15971+14]..[446,15971+15])
                                                Ppat_var "d" (typing/includemod.ml[446,15971+14]..[446,15971+15])
                                              expression (typing/includemod.ml[446,15971+18]..[446,15971+77])
                                                Pexp_apply
                                                expression (typing/includemod.ml[446,15971+18]..[446,15971+29])
                                                  Pexp_ident "Error.sdiff" (typing/includemod.ml[446,15971+18]..[446,15971+29])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (typing/includemod.ml[446,15971+30]..[446,15971+53])
                                                      Pexp_tuple
                                                      [
                                                        expression (typing/includemod.ml[446,15971+31]..[446,15971+46])
                                                          Pexp_construct "::" (typing/includemod.ml[446,15971+37]..[446,15971+39])
                                                          Some
                                                            expression (typing/includemod.ml[446,15971+31]..[446,15971+46]) ghost
                                                              Pexp_tuple
                                                              [
                                                                expression (typing/includemod.ml[446,15971+31]..[446,15971+37])
                                                                  Pexp_ident "param1" (typing/includemod.ml[446,15971+31]..[446,15971+37])
                                                                expression (typing/includemod.ml[446,15971+39]..[446,15971+46])
                                                                  Pexp_ident "params1" (typing/includemod.ml[446,15971+39]..[446,15971+46])
                                                              ]
                                                        expression (typing/includemod.ml[446,15971+48]..[446,15971+52])
                                                          Pexp_ident "res1" (typing/includemod.ml[446,15971+48]..[446,15971+52])
                                                      ]
                                                  <arg>
                                                  Nolabel
                                                    expression (typing/includemod.ml[446,15971+54]..[446,15971+77])
                                                      Pexp_tuple
                                                      [
                                                        expression (typing/includemod.ml[446,15971+55]..[446,15971+70])
                                                          Pexp_construct "::" (typing/includemod.ml[446,15971+61]..[446,15971+63])
                                                          Some
                                                            expression (typing/includemod.ml[446,15971+55]..[446,15971+70]) ghost
                                                              Pexp_tuple
                                                              [
                                                                expression (typing/includemod.ml[446,15971+55]..[446,15971+61])
                                                                  Pexp_ident "param2" (typing/includemod.ml[446,15971+55]..[446,15971+61])
                                                                expression (typing/includemod.ml[446,15971+63]..[446,15971+70])
                                                                  Pexp_ident "params2" (typing/includemod.ml[446,15971+63]..[446,15971+70])
                                                              ]
                                                        expression (typing/includemod.ml[446,15971+72]..[446,15971+76])
                                                          Pexp_ident "res2" (typing/includemod.ml[446,15971+72]..[446,15971+76])
                                                      ]
                                                ]
                                          ]
                                          expression (typing/includemod.ml[447,16052+10]..[447,16052+42])
                                            Pexp_construct "Error" (typing/includemod.ml[447,16052+10]..[447,16052+15])
                                            Some
                                              expression (typing/includemod.ml[447,16052+16]..[447,16052+42])
                                                Pexp_open Fresh
                                                module_expr (typing/includemod.ml[447,16052+16]..[447,16052+21])
                                                  Pmod_ident "Error" (typing/includemod.ml[447,16052+16]..[447,16052+21])
                                                expression (typing/includemod.ml[447,16052+23]..[447,16052+41])
                                                  Pexp_construct "Functor" (typing/includemod.ml[447,16052+23]..[447,16052+30])
                                                  Some
                                                    expression (typing/includemod.ml[447,16052+31]..[447,16052+41])
                                                      Pexp_construct "Params" (typing/includemod.ml[447,16052+32]..[447,16052+38])
                                                      Some
                                                        expression (typing/includemod.ml[447,16052+39]..[447,16052+40])
                                                          Pexp_ident "d" (typing/includemod.ml[447,16052+39]..[447,16052+40])
                                  <case>
                                    pattern (typing/includemod.ml[448,16095+8]..[448,16095+23])
                                      Ppat_tuple
                                      [
                                        pattern (typing/includemod.ml[448,16095+8]..[448,16095+12])
                                          Ppat_construct "Ok" (typing/includemod.ml[448,16095+8]..[448,16095+10])
                                          Some
                                            []
                                            pattern (typing/includemod.ml[448,16095+11]..[448,16095+12])
                                              Ppat_any
                                        pattern (typing/includemod.ml[448,16095+14]..[448,16095+23])
                                          Ppat_construct "Error" (typing/includemod.ml[448,16095+14]..[448,16095+19])
                                          Some
                                            []
                                            pattern (typing/includemod.ml[448,16095+20]..[448,16095+23])
                                              Ppat_var "res" (typing/includemod.ml[448,16095+20]..[448,16095+23])
                                      ]
                                    expression (typing/includemod.ml[449,16122+10]..[449,16122+44])
                                      Pexp_construct "Error" (typing/includemod.ml[449,16122+10]..[449,16122+15])
                                      Some
                                        expression (typing/includemod.ml[449,16122+16]..[449,16122+44])
                                          Pexp_open Fresh
                                          module_expr (typing/includemod.ml[449,16122+16]..[449,16122+21])
                                            Pmod_ident "Error" (typing/includemod.ml[449,16122+16]..[449,16122+21])
                                          expression (typing/includemod.ml[449,16122+23]..[449,16122+43])
                                            Pexp_construct "Functor" (typing/includemod.ml[449,16122+23]..[449,16122+30])
                                            Some
                                              expression (typing/includemod.ml[449,16122+31]..[449,16122+43])
                                                Pexp_construct "Result" (typing/includemod.ml[449,16122+32]..[449,16122+38])
                                                Some
                                                  expression (typing/includemod.ml[449,16122+39]..[449,16122+42])
                                                    Pexp_ident "res" (typing/includemod.ml[449,16122+39]..[449,16122+42])
                                ]
                        <case>
                          pattern (typing/includemod.ml[451,16177+4]..[452,16198+20])
                            Ppat_or
                            pattern (typing/includemod.ml[451,16177+4]..[451,16177+20])
                              Ppat_tuple
                              [
                                pattern (typing/includemod.ml[451,16177+4]..[451,16177+17])
                                  Ppat_construct "Mty_functor" (typing/includemod.ml[451,16177+4]..[451,16177+15])
                                  Some
                                    []
                                    pattern (typing/includemod.ml[451,16177+16]..[451,16177+17])
                                      Ppat_any
                                pattern (typing/includemod.ml[451,16177+19]..[451,16177+20])
                                  Ppat_any
                              ]
                            pattern (typing/includemod.ml[452,16198+4]..[452,16198+20])
                              Ppat_tuple
                              [
                                pattern (typing/includemod.ml[452,16198+4]..[452,16198+5])
                                  Ppat_any
                                pattern (typing/includemod.ml[452,16198+7]..[452,16198+20])
                                  Ppat_construct "Mty_functor" (typing/includemod.ml[452,16198+7]..[452,16198+18])
                                  Some
                                    []
                                    pattern (typing/includemod.ml[452,16198+19]..[452,16198+20])
                                      Ppat_any
                              ]
                          expression (typing/includemod.ml[453,16222+6]..[456,16379+38])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (typing/includemod.ml[453,16222+10]..[453,16222+17])
                                  Ppat_var "params1" (typing/includemod.ml[453,16222+10]..[453,16222+17])
                                expression (typing/includemod.ml[453,16222+20]..[453,16222+52])
                                  Pexp_apply
                                  expression (typing/includemod.ml[453,16222+20]..[453,16222+43])
                                    Pexp_ident "retrieve_functor_params" (typing/includemod.ml[453,16222+20]..[453,16222+43])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[453,16222+44]..[453,16222+47])
                                        Pexp_ident "env" (typing/includemod.ml[453,16222+44]..[453,16222+47])
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[453,16222+48]..[453,16222+52])
                                        Pexp_ident "mty1" (typing/includemod.ml[453,16222+48]..[453,16222+52])
                                  ]
                            ]
                            expression (typing/includemod.ml[454,16278+6]..[456,16379+38])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (typing/includemod.ml[454,16278+10]..[454,16278+17])
                                    Ppat_var "params2" (typing/includemod.ml[454,16278+10]..[454,16278+17])
                                  expression (typing/includemod.ml[454,16278+20]..[454,16278+52])
                                    Pexp_apply
                                    expression (typing/includemod.ml[454,16278+20]..[454,16278+43])
                                      Pexp_ident "retrieve_functor_params" (typing/includemod.ml[454,16278+20]..[454,16278+43])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[454,16278+44]..[454,16278+47])
                                          Pexp_ident "env" (typing/includemod.ml[454,16278+44]..[454,16278+47])
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[454,16278+48]..[454,16278+52])
                                          Pexp_ident "mty2" (typing/includemod.ml[454,16278+48]..[454,16278+52])
                                    ]
                              ]
                              expression (typing/includemod.ml[455,16334+6]..[456,16379+38])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (typing/includemod.ml[455,16334+10]..[455,16334+11])
                                      Ppat_var "d" (typing/includemod.ml[455,16334+10]..[455,16334+11])
                                    expression (typing/includemod.ml[455,16334+14]..[455,16334+41])
                                      Pexp_apply
                                      expression (typing/includemod.ml[455,16334+14]..[455,16334+25])
                                        Pexp_ident "Error.sdiff" (typing/includemod.ml[455,16334+14]..[455,16334+25])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (typing/includemod.ml[455,16334+26]..[455,16334+33])
                                            Pexp_ident "params1" (typing/includemod.ml[455,16334+26]..[455,16334+33])
                                        <arg>
                                        Nolabel
                                          expression (typing/includemod.ml[455,16334+34]..[455,16334+41])
                                            Pexp_ident "params2" (typing/includemod.ml[455,16334+34]..[455,16334+41])
                                      ]
                                ]
                                expression (typing/includemod.ml[456,16379+6]..[456,16379+38])
                                  Pexp_construct "Error" (typing/includemod.ml[456,16379+6]..[456,16379+11])
                                  Some
                                    expression (typing/includemod.ml[456,16379+12]..[456,16379+38])
                                      Pexp_open Fresh
                                      module_expr (typing/includemod.ml[456,16379+12]..[456,16379+17])
                                        Pmod_ident "Error" (typing/includemod.ml[456,16379+12]..[456,16379+17])
                                      expression (typing/includemod.ml[456,16379+19]..[456,16379+37])
                                        Pexp_construct "Functor" (typing/includemod.ml[456,16379+19]..[456,16379+26])
                                        Some
                                          expression (typing/includemod.ml[456,16379+27]..[456,16379+37])
                                            Pexp_construct "Params" (typing/includemod.ml[456,16379+28]..[456,16379+34])
                                            Some
                                              expression (typing/includemod.ml[456,16379+35]..[456,16379+36])
                                                Pexp_ident "d" (typing/includemod.ml[456,16379+35]..[456,16379+36])
                        <case>
                          pattern (typing/includemod.ml[457,16418+4]..[457,16418+18])
                            Ppat_tuple
                            [
                              pattern (typing/includemod.ml[457,16418+4]..[457,16418+5])
                                Ppat_any
                              pattern (typing/includemod.ml[457,16418+7]..[457,16418+18])
                                Ppat_construct "Mty_alias" (typing/includemod.ml[457,16418+7]..[457,16418+16])
                                Some
                                  []
                                  pattern (typing/includemod.ml[457,16418+17]..[457,16418+18])
                                    Ppat_any
                            ]
                          expression (typing/includemod.ml[458,16440+6]..[458,16440+46])
                            Pexp_construct "Error" (typing/includemod.ml[458,16440+6]..[458,16440+11])
                            Some
                              expression (typing/includemod.ml[458,16440+12]..[458,16440+46])
                                Pexp_construct "Error.Mt_core" (typing/includemod.ml[458,16440+13]..[458,16440+26])
                                Some
                                  expression (typing/includemod.ml[458,16440+27]..[458,16440+45])
                                    Pexp_construct "Error.Not_an_alias" (typing/includemod.ml[458,16440+27]..[458,16440+45])
                                    None
                      ]
      <def>
        pattern (typing/includemod.ml[462,16514+4]..[462,16514+17])
          Ppat_var "functor_param" (typing/includemod.ml[462,16514+4]..[462,16514+17])
        expression (typing/includemod.ml[462,16514+18]..[486,17382+68]) ghost
          Pexp_fun
          Labelled "loc"
          None
          pattern (typing/includemod.ml[462,16514+19]..[462,16514+22])
            Ppat_var "loc" (typing/includemod.ml[462,16514+19]..[462,16514+22])
          expression (typing/includemod.ml[462,16514+23]..[486,17382+68]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (typing/includemod.ml[462,16514+23]..[462,16514+26])
              Ppat_var "env" (typing/includemod.ml[462,16514+23]..[462,16514+26])
            expression (typing/includemod.ml[462,16514+27]..[486,17382+68]) ghost
              Pexp_fun
              Labelled "mark"
              None
              pattern (typing/includemod.ml[462,16514+28]..[462,16514+32])
                Ppat_var "mark" (typing/includemod.ml[462,16514+28]..[462,16514+32])
              expression (typing/includemod.ml[462,16514+33]..[486,17382+68]) ghost
                Pexp_fun
                Nolabel
                None
                pattern (typing/includemod.ml[462,16514+33]..[462,16514+38])
                  Ppat_var "subst" (typing/includemod.ml[462,16514+33]..[462,16514+38])
                expression (typing/includemod.ml[462,16514+39]..[486,17382+68]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (typing/includemod.ml[462,16514+39]..[462,16514+45])
                    Ppat_var "param1" (typing/includemod.ml[462,16514+39]..[462,16514+45])
                  expression (typing/includemod.ml[462,16514+46]..[486,17382+68]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (typing/includemod.ml[462,16514+46]..[462,16514+52])
                      Ppat_var "param2" (typing/includemod.ml[462,16514+46]..[462,16514+52])
                    expression (typing/includemod.ml[462,16514+55]..[486,17382+68])
                      Pexp_match
                      expression (typing/includemod.ml[462,16514+61]..[462,16514+75])
                        Pexp_tuple
                        [
                          expression (typing/includemod.ml[462,16514+61]..[462,16514+67])
                            Pexp_ident "param1" (typing/includemod.ml[462,16514+61]..[462,16514+67])
                          expression (typing/includemod.ml[462,16514+69]..[462,16514+75])
                            Pexp_ident "param2" (typing/includemod.ml[462,16514+69]..[462,16514+75])
                        ]
                      [
                        <case>
                          pattern (typing/includemod.ml[463,16595+4]..[463,16595+14])
                            Ppat_tuple
                            [
                              pattern (typing/includemod.ml[463,16595+4]..[463,16595+8])
                                Ppat_construct "Unit" (typing/includemod.ml[463,16595+4]..[463,16595+8])
                                None
                              pattern (typing/includemod.ml[463,16595+10]..[463,16595+14])
                                Ppat_construct "Unit" (typing/includemod.ml[463,16595+10]..[463,16595+14])
                                None
                            ]
                          expression (typing/includemod.ml[464,16613+6]..[464,16613+33])
                            Pexp_tuple
                            [
                              expression (typing/includemod.ml[464,16613+6]..[464,16613+21])
                                Pexp_construct "Ok" (typing/includemod.ml[464,16613+6]..[464,16613+8])
                                Some
                                  expression (typing/includemod.ml[464,16613+9]..[464,16613+21])
                                    Pexp_construct "Tcoerce_none" (typing/includemod.ml[464,16613+9]..[464,16613+21])
                                    None
                              expression (typing/includemod.ml[464,16613+23]..[464,16613+26])
                                Pexp_ident "env" (typing/includemod.ml[464,16613+23]..[464,16613+26])
                              expression (typing/includemod.ml[464,16613+28]..[464,16613+33])
                                Pexp_ident "subst" (typing/includemod.ml[464,16613+28]..[464,16613+33])
                            ]
                        <case>
                          pattern (typing/includemod.ml[465,16647+4]..[465,16647+44])
                            Ppat_tuple
                            [
                              pattern (typing/includemod.ml[465,16647+4]..[465,16647+23])
                                Ppat_construct "Named" (typing/includemod.ml[465,16647+4]..[465,16647+9])
                                Some
                                  []
                                  pattern (typing/includemod.ml[465,16647+10]..[465,16647+23])
                                    Ppat_tuple
                                    [
                                      pattern (typing/includemod.ml[465,16647+11]..[465,16647+16])
                                        Ppat_var "name1" (typing/includemod.ml[465,16647+11]..[465,16647+16])
                                      pattern (typing/includemod.ml[465,16647+18]..[465,16647+22])
                                        Ppat_var "arg1" (typing/includemod.ml[465,16647+18]..[465,16647+22])
                                    ]
                              pattern (typing/includemod.ml[465,16647+25]..[465,16647+44])
                                Ppat_construct "Named" (typing/includemod.ml[465,16647+25]..[465,16647+30])
                                Some
                                  []
                                  pattern (typing/includemod.ml[465,16647+31]..[465,16647+44])
                                    Ppat_tuple
                                    [
                                      pattern (typing/includemod.ml[465,16647+32]..[465,16647+37])
                                        Ppat_var "name2" (typing/includemod.ml[465,16647+32]..[465,16647+37])
                                      pattern (typing/includemod.ml[465,16647+39]..[465,16647+43])
                                        Ppat_var "arg2" (typing/includemod.ml[465,16647+39]..[465,16647+43])
                                    ]
                            ]
                          expression (typing/includemod.ml[466,16695+6]..[484,17345+24])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (typing/includemod.ml[466,16695+10]..[466,16695+15])
                                  Ppat_var "arg2'" (typing/includemod.ml[466,16695+10]..[466,16695+15])
                                expression (typing/includemod.ml[466,16695+18]..[466,16695+47])
                                  Pexp_apply
                                  expression (typing/includemod.ml[466,16695+18]..[466,16695+31])
                                    Pexp_ident "Subst.modtype" (typing/includemod.ml[466,16695+18]..[466,16695+31])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[466,16695+32]..[466,16695+36])
                                        Pexp_construct "Keep" (typing/includemod.ml[466,16695+32]..[466,16695+36])
                                        None
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[466,16695+37]..[466,16695+42])
                                        Pexp_ident "subst" (typing/includemod.ml[466,16695+37]..[466,16695+42])
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[466,16695+43]..[466,16695+47])
                                        Pexp_ident "arg2" (typing/includemod.ml[466,16695+43]..[466,16695+47])
                                  ]
                            ]
                            expression (typing/includemod.ml[467,16746+6]..[484,17345+24])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (typing/includemod.ml[467,16746+10]..[467,16746+16])
                                    Ppat_var "cc_arg" (typing/includemod.ml[467,16746+10]..[467,16746+16])
                                  expression (typing/includemod.ml[468,16765+8]..[470,16859+49])
                                    Pexp_match
                                    expression (typing/includemod.ml[468,16765+14]..[468,16765+63])
                                      Pexp_apply
                                      expression (typing/includemod.ml[468,16765+14]..[468,16765+22])
                                        Pexp_ident "modtypes" (typing/includemod.ml[468,16765+14]..[468,16765+22])
                                      [
                                        <arg>
                                        Labelled "loc"
                                          expression (typing/includemod.ml[468,16765+24]..[468,16765+27])
                                            Pexp_ident "loc" (typing/includemod.ml[468,16765+24]..[468,16765+27])
                                        <arg>
                                        Nolabel
                                          expression (typing/includemod.ml[468,16765+28]..[468,16765+31])
                                            Pexp_ident "env" (typing/includemod.ml[468,16765+28]..[468,16765+31])
                                        <arg>
                                        Labelled "mark"
                                          expression (typing/includemod.ml[468,16765+33]..[468,16765+37])
                                            Pexp_ident "mark" (typing/includemod.ml[468,16765+33]..[468,16765+37])
                                        <arg>
                                        Nolabel
                                          expression (typing/includemod.ml[468,16765+38]..[468,16765+52])
                                            Pexp_ident "Subst.identity" (typing/includemod.ml[468,16765+38]..[468,16765+52])
                                        <arg>
                                        Nolabel
                                          expression (typing/includemod.ml[468,16765+53]..[468,16765+58])
                                            Pexp_ident "arg2'" (typing/includemod.ml[468,16765+53]..[468,16765+58])
                                        <arg>
                                        Nolabel
                                          expression (typing/includemod.ml[468,16765+59]..[468,16765+63])
                                            Pexp_ident "arg1" (typing/includemod.ml[468,16765+59]..[468,16765+63])
                                      ]
                                    [
                                      <case>
                                        pattern (typing/includemod.ml[469,16834+10]..[469,16834+15])
                                          Ppat_construct "Ok" (typing/includemod.ml[469,16834+10]..[469,16834+12])
                                          Some
                                            []
                                            pattern (typing/includemod.ml[469,16834+13]..[469,16834+15])
                                              Ppat_var "cc" (typing/includemod.ml[469,16834+13]..[469,16834+15])
                                        expression (typing/includemod.ml[469,16834+19]..[469,16834+24])
                                          Pexp_construct "Ok" (typing/includemod.ml[469,16834+19]..[469,16834+21])
                                          Some
                                            expression (typing/includemod.ml[469,16834+22]..[469,16834+24])
                                              Pexp_ident "cc" (typing/includemod.ml[469,16834+22]..[469,16834+24])
                                      <case>
                                        pattern (typing/includemod.ml[470,16859+10]..[470,16859+19])
                                          Ppat_construct "Error" (typing/includemod.ml[470,16859+10]..[470,16859+15])
                                          Some
                                            []
                                            pattern (typing/includemod.ml[470,16859+16]..[470,16859+19])
                                              Ppat_var "err" (typing/includemod.ml[470,16859+16]..[470,16859+19])
                                        expression (typing/includemod.ml[470,16859+23]..[470,16859+49])
                                          Pexp_construct "Error" (typing/includemod.ml[470,16859+23]..[470,16859+28])
                                          Some
                                            expression (typing/includemod.ml[470,16859+29]..[470,16859+49])
                                              Pexp_construct "Error.Mismatch" (typing/includemod.ml[470,16859+30]..[470,16859+44])
                                              Some
                                                expression (typing/includemod.ml[470,16859+45]..[470,16859+48])
                                                  Pexp_ident "err" (typing/includemod.ml[470,16859+45]..[470,16859+48])
                                    ]
                              ]
                              expression (typing/includemod.ml[472,16918+6]..[484,17345+24])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (typing/includemod.ml[472,16918+10]..[472,16918+20])
                                      Ppat_tuple
                                      [
                                        pattern (typing/includemod.ml[472,16918+10]..[472,16918+13])
                                          Ppat_var "env" (typing/includemod.ml[472,16918+10]..[472,16918+13])
                                        pattern (typing/includemod.ml[472,16918+15]..[472,16918+20])
                                          Ppat_var "subst" (typing/includemod.ml[472,16918+15]..[472,16918+20])
                                      ]
                                    expression (typing/includemod.ml[473,16941+8]..[482,17313+22])
                                      Pexp_match
                                      expression (typing/includemod.ml[473,16941+14]..[473,16941+26])
                                        Pexp_tuple
                                        [
                                          expression (typing/includemod.ml[473,16941+14]..[473,16941+19])
                                            Pexp_ident "name1" (typing/includemod.ml[473,16941+14]..[473,16941+19])
                                          expression (typing/includemod.ml[473,16941+21]..[473,16941+26])
                                            Pexp_ident "name2" (typing/includemod.ml[473,16941+21]..[473,16941+26])
                                        ]
                                      [
                                        <case>
                                          pattern (typing/includemod.ml[474,16973+10]..[474,16973+28])
                                            Ppat_tuple
                                            [
                                              pattern (typing/includemod.ml[474,16973+10]..[474,16973+18])
                                                Ppat_construct "Some" (typing/includemod.ml[474,16973+10]..[474,16973+14])
                                                Some
                                                  []
                                                  pattern (typing/includemod.ml[474,16973+15]..[474,16973+18])
                                                    Ppat_var "id1" (typing/includemod.ml[474,16973+15]..[474,16973+18])
                                              pattern (typing/includemod.ml[474,16973+20]..[474,16973+28])
                                                Ppat_construct "Some" (typing/includemod.ml[474,16973+20]..[474,16973+24])
                                                Some
                                                  []
                                                  pattern (typing/includemod.ml[474,16973+25]..[474,16973+28])
                                                    Ppat_var "id2" (typing/includemod.ml[474,16973+25]..[474,16973+28])
                                            ]
                                          expression (typing/includemod.ml[475,17005+12]..[476,17058+56])
                                            Pexp_tuple
                                            [
                                              expression (typing/includemod.ml[475,17005+12]..[475,17005+51])
                                                Pexp_apply
                                                expression (typing/includemod.ml[475,17005+12]..[475,17005+26])
                                                  Pexp_ident "Env.add_module" (typing/includemod.ml[475,17005+12]..[475,17005+26])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (typing/includemod.ml[475,17005+27]..[475,17005+30])
                                                      Pexp_ident "id1" (typing/includemod.ml[475,17005+27]..[475,17005+30])
                                                  <arg>
                                                  Nolabel
                                                    expression (typing/includemod.ml[475,17005+31]..[475,17005+41])
                                                      Pexp_construct "Mp_present" (typing/includemod.ml[475,17005+31]..[475,17005+41])
                                                      None
                                                  <arg>
                                                  Nolabel
                                                    expression (typing/includemod.ml[475,17005+42]..[475,17005+47])
                                                      Pexp_ident "arg2'" (typing/includemod.ml[475,17005+42]..[475,17005+47])
                                                  <arg>
                                                  Nolabel
                                                    expression (typing/includemod.ml[475,17005+48]..[475,17005+51])
                                                      Pexp_ident "env" (typing/includemod.ml[475,17005+48]..[475,17005+51])
                                                ]
                                              expression (typing/includemod.ml[476,17058+12]..[476,17058+56])
                                                Pexp_apply
                                                expression (typing/includemod.ml[476,17058+12]..[476,17058+28])
                                                  Pexp_ident "Subst.add_module" (typing/includemod.ml[476,17058+12]..[476,17058+28])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (typing/includemod.ml[476,17058+29]..[476,17058+32])
                                                      Pexp_ident "id2" (typing/includemod.ml[476,17058+29]..[476,17058+32])
                                                  <arg>
                                                  Nolabel
                                                    expression (typing/includemod.ml[476,17058+33]..[476,17058+50])
                                                      Pexp_construct "Path.Pident" (typing/includemod.ml[476,17058+34]..[476,17058+45])
                                                      Some
                                                        expression (typing/includemod.ml[476,17058+46]..[476,17058+49])
                                                          Pexp_ident "id1" (typing/includemod.ml[476,17058+46]..[476,17058+49])
                                                  <arg>
                                                  Nolabel
                                                    expression (typing/includemod.ml[476,17058+51]..[476,17058+56])
                                                      Pexp_ident "subst" (typing/includemod.ml[476,17058+51]..[476,17058+56])
                                                ]
                                            ]
                                        <case>
                                          pattern (typing/includemod.ml[477,17115+10]..[477,17115+24])
                                            Ppat_tuple
                                            [
                                              pattern (typing/includemod.ml[477,17115+10]..[477,17115+14])
                                                Ppat_construct "None" (typing/includemod.ml[477,17115+10]..[477,17115+14])
                                                None
                                              pattern (typing/includemod.ml[477,17115+16]..[477,17115+24])
                                                Ppat_construct "Some" (typing/includemod.ml[477,17115+16]..[477,17115+20])
                                                Some
                                                  []
                                                  pattern (typing/includemod.ml[477,17115+21]..[477,17115+24])
                                                    Ppat_var "id2" (typing/includemod.ml[477,17115+21]..[477,17115+24])
                                            ]
                                          expression (typing/includemod.ml[478,17143+12]..[478,17143+58])
                                            Pexp_tuple
                                            [
                                              expression (typing/includemod.ml[478,17143+12]..[478,17143+51])
                                                Pexp_apply
                                                expression (typing/includemod.ml[478,17143+12]..[478,17143+26])
                                                  Pexp_ident "Env.add_module" (typing/includemod.ml[478,17143+12]..[478,17143+26])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (typing/includemod.ml[478,17143+27]..[478,17143+30])
                                                      Pexp_ident "id2" (typing/includemod.ml[478,17143+27]..[478,17143+30])
                                                  <arg>
                                                  Nolabel
                                                    expression (typing/includemod.ml[478,17143+31]..[478,17143+41])
                                                      Pexp_construct "Mp_present" (typing/includemod.ml[478,17143+31]..[478,17143+41])
                                                      None
                                                  <arg>
                                                  Nolabel
                                                    expression (typing/includemod.ml[478,17143+42]..[478,17143+47])
                                                      Pexp_ident "arg2'" (typing/includemod.ml[478,17143+42]..[478,17143+47])
                                                  <arg>
                                                  Nolabel
                                                    expression (typing/includemod.ml[478,17143+48]..[478,17143+51])
                                                      Pexp_ident "env" (typing/includemod.ml[478,17143+48]..[478,17143+51])
                                                ]
                                              expression (typing/includemod.ml[478,17143+53]..[478,17143+58])
                                                Pexp_ident "subst" (typing/includemod.ml[478,17143+53]..[478,17143+58])
                                            ]
                                        <case>
                                          pattern (typing/includemod.ml[479,17202+10]..[479,17202+24])
                                            Ppat_tuple
                                            [
                                              pattern (typing/includemod.ml[479,17202+10]..[479,17202+18])
                                                Ppat_construct "Some" (typing/includemod.ml[479,17202+10]..[479,17202+14])
                                                Some
                                                  []
                                                  pattern (typing/includemod.ml[479,17202+15]..[479,17202+18])
                                                    Ppat_var "id1" (typing/includemod.ml[479,17202+15]..[479,17202+18])
                                              pattern (typing/includemod.ml[479,17202+20]..[479,17202+24])
                                                Ppat_construct "None" (typing/includemod.ml[479,17202+20]..[479,17202+24])
                                                None
                                            ]
                                          expression (typing/includemod.ml[480,17230+12]..[480,17230+58])
                                            Pexp_tuple
                                            [
                                              expression (typing/includemod.ml[480,17230+12]..[480,17230+51])
                                                Pexp_apply
                                                expression (typing/includemod.ml[480,17230+12]..[480,17230+26])
                                                  Pexp_ident "Env.add_module" (typing/includemod.ml[480,17230+12]..[480,17230+26])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (typing/includemod.ml[480,17230+27]..[480,17230+30])
                                                      Pexp_ident "id1" (typing/includemod.ml[480,17230+27]..[480,17230+30])
                                                  <arg>
                                                  Nolabel
                                                    expression (typing/includemod.ml[480,17230+31]..[480,17230+41])
                                                      Pexp_construct "Mp_present" (typing/includemod.ml[480,17230+31]..[480,17230+41])
                                                      None
                                                  <arg>
                                                  Nolabel
                                                    expression (typing/includemod.ml[480,17230+42]..[480,17230+47])
                                                      Pexp_ident "arg2'" (typing/includemod.ml[480,17230+42]..[480,17230+47])
                                                  <arg>
                                                  Nolabel
                                                    expression (typing/includemod.ml[480,17230+48]..[480,17230+51])
                                                      Pexp_ident "env" (typing/includemod.ml[480,17230+48]..[480,17230+51])
                                                ]
                                              expression (typing/includemod.ml[480,17230+53]..[480,17230+58])
                                                Pexp_ident "subst" (typing/includemod.ml[480,17230+53]..[480,17230+58])
                                            ]
                                        <case>
                                          pattern (typing/includemod.ml[481,17289+10]..[481,17289+20])
                                            Ppat_tuple
                                            [
                                              pattern (typing/includemod.ml[481,17289+10]..[481,17289+14])
                                                Ppat_construct "None" (typing/includemod.ml[481,17289+10]..[481,17289+14])
                                                None
                                              pattern (typing/includemod.ml[481,17289+16]..[481,17289+20])
                                                Ppat_construct "None" (typing/includemod.ml[481,17289+16]..[481,17289+20])
                                                None
                                            ]
                                          expression (typing/includemod.ml[482,17313+12]..[482,17313+22])
                                            Pexp_tuple
                                            [
                                              expression (typing/includemod.ml[482,17313+12]..[482,17313+15])
                                                Pexp_ident "env" (typing/includemod.ml[482,17313+12]..[482,17313+15])
                                              expression (typing/includemod.ml[482,17313+17]..[482,17313+22])
                                                Pexp_ident "subst" (typing/includemod.ml[482,17313+17]..[482,17313+22])
                                            ]
                                      ]
                                ]
                                expression (typing/includemod.ml[484,17345+6]..[484,17345+24])
                                  Pexp_tuple
                                  [
                                    expression (typing/includemod.ml[484,17345+6]..[484,17345+12])
                                      Pexp_ident "cc_arg" (typing/includemod.ml[484,17345+6]..[484,17345+12])
                                    expression (typing/includemod.ml[484,17345+14]..[484,17345+17])
                                      Pexp_ident "env" (typing/includemod.ml[484,17345+14]..[484,17345+17])
                                    expression (typing/includemod.ml[484,17345+19]..[484,17345+24])
                                      Pexp_ident "subst" (typing/includemod.ml[484,17345+19]..[484,17345+24])
                                  ]
                        <case>
                          pattern (typing/includemod.ml[485,17370+4]..[485,17370+8])
                            Ppat_tuple
                            [
                              pattern (typing/includemod.ml[485,17370+4]..[485,17370+5])
                                Ppat_any
                              pattern (typing/includemod.ml[485,17370+7]..[485,17370+8])
                                Ppat_any
                            ]
                          expression (typing/includemod.ml[486,17382+6]..[486,17382+68])
                            Pexp_tuple
                            [
                              expression (typing/includemod.ml[486,17382+6]..[486,17382+56])
                                Pexp_construct "Error" (typing/includemod.ml[486,17382+6]..[486,17382+11])
                                Some
                                  expression (typing/includemod.ml[486,17382+12]..[486,17382+56])
                                    Pexp_construct "Error.Incompatible_params" (typing/includemod.ml[486,17382+13]..[486,17382+38])
                                    Some
                                      expression (typing/includemod.ml[486,17382+39]..[486,17382+55])
                                        Pexp_tuple
                                        [
                                          expression (typing/includemod.ml[486,17382+40]..[486,17382+46])
                                            Pexp_ident "param1" (typing/includemod.ml[486,17382+40]..[486,17382+46])
                                          expression (typing/includemod.ml[486,17382+48]..[486,17382+54])
                                            Pexp_ident "param2" (typing/includemod.ml[486,17382+48]..[486,17382+54])
                                        ]
                              expression (typing/includemod.ml[486,17382+58]..[486,17382+61])
                                Pexp_ident "env" (typing/includemod.ml[486,17382+58]..[486,17382+61])
                              expression (typing/includemod.ml[486,17382+63]..[486,17382+68])
                                Pexp_ident "subst" (typing/includemod.ml[486,17382+63]..[486,17382+68])
                            ]
                      ]
      <def>
        pattern (typing/includemod.ml[488,17452+4]..[488,17452+25])
          Ppat_var "strengthened_modtypes" (typing/includemod.ml[488,17452+4]..[488,17452+25])
        expression (typing/includemod.ml[488,17452+26]..[494,17724+45]) ghost
          Pexp_fun
          Labelled "loc"
          None
          pattern (typing/includemod.ml[488,17452+27]..[488,17452+30])
            Ppat_var "loc" (typing/includemod.ml[488,17452+27]..[488,17452+30])
          expression (typing/includemod.ml[488,17452+31]..[494,17724+45]) ghost
            Pexp_fun
            Labelled "aliasable"
            None
            pattern (typing/includemod.ml[488,17452+32]..[488,17452+41])
              Ppat_var "aliasable" (typing/includemod.ml[488,17452+32]..[488,17452+41])
            expression (typing/includemod.ml[488,17452+42]..[494,17724+45]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (typing/includemod.ml[488,17452+42]..[488,17452+45])
                Ppat_var "env" (typing/includemod.ml[488,17452+42]..[488,17452+45])
              expression (typing/includemod.ml[488,17452+46]..[494,17724+45]) ghost
                Pexp_fun
                Labelled "mark"
                None
                pattern (typing/includemod.ml[488,17452+47]..[488,17452+51])
                  Ppat_var "mark" (typing/includemod.ml[488,17452+47]..[488,17452+51])
                expression (typing/includemod.ml[488,17452+52]..[494,17724+45]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (typing/includemod.ml[488,17452+52]..[488,17452+57])
                    Ppat_var "subst" (typing/includemod.ml[488,17452+52]..[488,17452+57])
                  expression (typing/includemod.ml[488,17452+58]..[494,17724+45]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (typing/includemod.ml[488,17452+58]..[488,17452+62])
                      Ppat_var "mty1" (typing/includemod.ml[488,17452+58]..[488,17452+62])
                    expression (typing/includemod.ml[488,17452+63]..[494,17724+45]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (typing/includemod.ml[488,17452+63]..[488,17452+68])
                        Ppat_var "path1" (typing/includemod.ml[488,17452+63]..[488,17452+68])
                      expression (typing/includemod.ml[488,17452+69]..[494,17724+45]) ghost
                        Pexp_fun
                        Nolabel
                        None
                        pattern (typing/includemod.ml[488,17452+69]..[488,17452+73])
                          Ppat_var "mty2" (typing/includemod.ml[488,17452+69]..[488,17452+73])
                        expression (typing/includemod.ml[489,17528+2]..[494,17724+45])
                          Pexp_match
                          expression (typing/includemod.ml[489,17528+8]..[489,17528+18])
                            Pexp_tuple
                            [
                              expression (typing/includemod.ml[489,17528+8]..[489,17528+12])
                                Pexp_ident "mty1" (typing/includemod.ml[489,17528+8]..[489,17528+12])
                              expression (typing/includemod.ml[489,17528+14]..[489,17528+18])
                                Pexp_ident "mty2" (typing/includemod.ml[489,17528+14]..[489,17528+18])
                            ]
                          [
                            <case>
                              pattern (typing/includemod.ml[490,17552+4]..[490,17552+30])
                                Ppat_tuple
                                [
                                  pattern (typing/includemod.ml[490,17552+4]..[490,17552+16])
                                    Ppat_construct "Mty_ident" (typing/includemod.ml[490,17552+4]..[490,17552+13])
                                    Some
                                      []
                                      pattern (typing/includemod.ml[490,17552+14]..[490,17552+16])
                                        Ppat_var "p1" (typing/includemod.ml[490,17552+14]..[490,17552+16])
                                  pattern (typing/includemod.ml[490,17552+18]..[490,17552+30])
                                    Ppat_construct "Mty_ident" (typing/includemod.ml[490,17552+18]..[490,17552+27])
                                    Some
                                      []
                                      pattern (typing/includemod.ml[490,17552+28]..[490,17552+30])
                                        Ppat_var "p2" (typing/includemod.ml[490,17552+28]..[490,17552+30])
                                ]
                              <when>
                                expression (typing/includemod.ml[490,17552+36]..[490,17552+71])
                                  Pexp_apply
                                  expression (typing/includemod.ml[490,17552+36]..[490,17552+55])
                                    Pexp_ident "equal_modtype_paths" (typing/includemod.ml[490,17552+36]..[490,17552+55])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[490,17552+56]..[490,17552+59])
                                        Pexp_ident "env" (typing/includemod.ml[490,17552+56]..[490,17552+59])
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[490,17552+60]..[490,17552+62])
                                        Pexp_ident "p1" (typing/includemod.ml[490,17552+60]..[490,17552+62])
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[490,17552+63]..[490,17552+68])
                                        Pexp_ident "subst" (typing/includemod.ml[490,17552+63]..[490,17552+68])
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[490,17552+69]..[490,17552+71])
                                        Pexp_ident "p2" (typing/includemod.ml[490,17552+69]..[490,17552+71])
                                  ]
                              expression (typing/includemod.ml[491,17627+6]..[491,17627+21])
                                Pexp_construct "Ok" (typing/includemod.ml[491,17627+6]..[491,17627+8])
                                Some
                                  expression (typing/includemod.ml[491,17627+9]..[491,17627+21])
                                    Pexp_construct "Tcoerce_none" (typing/includemod.ml[491,17627+9]..[491,17627+21])
                                    None
                            <case>
                              pattern (typing/includemod.ml[492,17649+4]..[492,17649+8])
                                Ppat_tuple
                                [
                                  pattern (typing/includemod.ml[492,17649+4]..[492,17649+5])
                                    Ppat_any
                                  pattern (typing/includemod.ml[492,17649+7]..[492,17649+8])
                                    Ppat_any
                                ]
                              expression (typing/includemod.ml[493,17661+6]..[494,17724+45])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (typing/includemod.ml[493,17661+10]..[493,17661+14])
                                      Ppat_var "mty1" (typing/includemod.ml[493,17661+10]..[493,17661+14])
                                    expression (typing/includemod.ml[493,17661+17]..[493,17661+59])
                                      Pexp_apply
                                      expression (typing/includemod.ml[493,17661+17]..[493,17661+33])
                                        Pexp_ident "Mtype.strengthen" (typing/includemod.ml[493,17661+17]..[493,17661+33])
                                      [
                                        <arg>
                                        Labelled "aliasable"
                                          expression (typing/includemod.ml[493,17661+35]..[493,17661+44])
                                            Pexp_ident "aliasable" (typing/includemod.ml[493,17661+35]..[493,17661+44])
                                        <arg>
                                        Nolabel
                                          expression (typing/includemod.ml[493,17661+45]..[493,17661+48])
                                            Pexp_ident "env" (typing/includemod.ml[493,17661+45]..[493,17661+48])
                                        <arg>
                                        Nolabel
                                          expression (typing/includemod.ml[493,17661+49]..[493,17661+53])
                                            Pexp_ident "mty1" (typing/includemod.ml[493,17661+49]..[493,17661+53])
                                        <arg>
                                        Nolabel
                                          expression (typing/includemod.ml[493,17661+54]..[493,17661+59])
                                            Pexp_ident "path1" (typing/includemod.ml[493,17661+54]..[493,17661+59])
                                      ]
                                ]
                                expression (typing/includemod.ml[494,17724+6]..[494,17724+45])
                                  Pexp_apply
                                  expression (typing/includemod.ml[494,17724+6]..[494,17724+14])
                                    Pexp_ident "modtypes" (typing/includemod.ml[494,17724+6]..[494,17724+14])
                                  [
                                    <arg>
                                    Labelled "loc"
                                      expression (typing/includemod.ml[494,17724+16]..[494,17724+19])
                                        Pexp_ident "loc" (typing/includemod.ml[494,17724+16]..[494,17724+19])
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[494,17724+20]..[494,17724+23])
                                        Pexp_ident "env" (typing/includemod.ml[494,17724+20]..[494,17724+23])
                                    <arg>
                                    Labelled "mark"
                                      expression (typing/includemod.ml[494,17724+25]..[494,17724+29])
                                        Pexp_ident "mark" (typing/includemod.ml[494,17724+25]..[494,17724+29])
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[494,17724+30]..[494,17724+35])
                                        Pexp_ident "subst" (typing/includemod.ml[494,17724+30]..[494,17724+35])
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[494,17724+36]..[494,17724+40])
                                        Pexp_ident "mty1" (typing/includemod.ml[494,17724+36]..[494,17724+40])
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[494,17724+41]..[494,17724+45])
                                        Pexp_ident "mty2" (typing/includemod.ml[494,17724+41]..[494,17724+45])
                                  ]
                          ]
      <def>
        pattern (typing/includemod.ml[496,17771+4]..[496,17771+28])
          Ppat_var "strengthened_module_decl" (typing/includemod.ml[496,17771+4]..[496,17771+28])
        expression (typing/includemod.ml[496,17771+29]..[502,18061+59]) ghost
          Pexp_fun
          Labelled "loc"
          None
          pattern (typing/includemod.ml[496,17771+30]..[496,17771+33])
            Ppat_var "loc" (typing/includemod.ml[496,17771+30]..[496,17771+33])
          expression (typing/includemod.ml[496,17771+34]..[502,18061+59]) ghost
            Pexp_fun
            Labelled "aliasable"
            None
            pattern (typing/includemod.ml[496,17771+35]..[496,17771+44])
              Ppat_var "aliasable" (typing/includemod.ml[496,17771+35]..[496,17771+44])
            expression (typing/includemod.ml[496,17771+45]..[502,18061+59]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (typing/includemod.ml[496,17771+45]..[496,17771+48])
                Ppat_var "env" (typing/includemod.ml[496,17771+45]..[496,17771+48])
              expression (typing/includemod.ml[496,17771+49]..[502,18061+59]) ghost
                Pexp_fun
                Labelled "mark"
                None
                pattern (typing/includemod.ml[496,17771+50]..[496,17771+54])
                  Ppat_var "mark" (typing/includemod.ml[496,17771+50]..[496,17771+54])
                expression (typing/includemod.ml[496,17771+55]..[502,18061+59]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (typing/includemod.ml[496,17771+55]..[496,17771+60])
                    Ppat_var "subst" (typing/includemod.ml[496,17771+55]..[496,17771+60])
                  expression (typing/includemod.ml[496,17771+61]..[502,18061+59]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (typing/includemod.ml[496,17771+61]..[496,17771+64])
                      Ppat_var "md1" (typing/includemod.ml[496,17771+61]..[496,17771+64])
                    expression (typing/includemod.ml[496,17771+65]..[502,18061+59]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (typing/includemod.ml[496,17771+65]..[496,17771+70])
                        Ppat_var "path1" (typing/includemod.ml[496,17771+65]..[496,17771+70])
                      expression (typing/includemod.ml[496,17771+71]..[502,18061+59]) ghost
                        Pexp_fun
                        Nolabel
                        None
                        pattern (typing/includemod.ml[496,17771+71]..[496,17771+74])
                          Ppat_var "md2" (typing/includemod.ml[496,17771+71]..[496,17771+74])
                        expression (typing/includemod.ml[497,17848+2]..[502,18061+59])
                          Pexp_match
                          expression (typing/includemod.ml[497,17848+8]..[497,17848+32])
                            Pexp_tuple
                            [
                              expression (typing/includemod.ml[497,17848+8]..[497,17848+19])
                                Pexp_field
                                expression (typing/includemod.ml[497,17848+8]..[497,17848+11])
                                  Pexp_ident "md1" (typing/includemod.ml[497,17848+8]..[497,17848+11])
                                "md_type" (typing/includemod.ml[497,17848+12]..[497,17848+19])
                              expression (typing/includemod.ml[497,17848+21]..[497,17848+32])
                                Pexp_field
                                expression (typing/includemod.ml[497,17848+21]..[497,17848+24])
                                  Pexp_ident "md2" (typing/includemod.ml[497,17848+21]..[497,17848+24])
                                "md_type" (typing/includemod.ml[497,17848+25]..[497,17848+32])
                            ]
                          [
                            <case>
                              pattern (typing/includemod.ml[498,17886+4]..[498,17886+30])
                                Ppat_tuple
                                [
                                  pattern (typing/includemod.ml[498,17886+4]..[498,17886+16])
                                    Ppat_construct "Mty_ident" (typing/includemod.ml[498,17886+4]..[498,17886+13])
                                    Some
                                      []
                                      pattern (typing/includemod.ml[498,17886+14]..[498,17886+16])
                                        Ppat_var "p1" (typing/includemod.ml[498,17886+14]..[498,17886+16])
                                  pattern (typing/includemod.ml[498,17886+18]..[498,17886+30])
                                    Ppat_construct "Mty_ident" (typing/includemod.ml[498,17886+18]..[498,17886+27])
                                    Some
                                      []
                                      pattern (typing/includemod.ml[498,17886+28]..[498,17886+30])
                                        Ppat_var "p2" (typing/includemod.ml[498,17886+28]..[498,17886+30])
                                ]
                              <when>
                                expression (typing/includemod.ml[498,17886+36]..[498,17886+71])
                                  Pexp_apply
                                  expression (typing/includemod.ml[498,17886+36]..[498,17886+55])
                                    Pexp_ident "equal_modtype_paths" (typing/includemod.ml[498,17886+36]..[498,17886+55])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[498,17886+56]..[498,17886+59])
                                        Pexp_ident "env" (typing/includemod.ml[498,17886+56]..[498,17886+59])
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[498,17886+60]..[498,17886+62])
                                        Pexp_ident "p1" (typing/includemod.ml[498,17886+60]..[498,17886+62])
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[498,17886+63]..[498,17886+68])
                                        Pexp_ident "subst" (typing/includemod.ml[498,17886+63]..[498,17886+68])
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[498,17886+69]..[498,17886+71])
                                        Pexp_ident "p2" (typing/includemod.ml[498,17886+69]..[498,17886+71])
                                  ]
                              expression (typing/includemod.ml[499,17961+6]..[499,17961+21])
                                Pexp_construct "Ok" (typing/includemod.ml[499,17961+6]..[499,17961+8])
                                Some
                                  expression (typing/includemod.ml[499,17961+9]..[499,17961+21])
                                    Pexp_construct "Tcoerce_none" (typing/includemod.ml[499,17961+9]..[499,17961+21])
                                    None
                            <case>
                              pattern (typing/includemod.ml[500,17983+4]..[500,17983+8])
                                Ppat_tuple
                                [
                                  pattern (typing/includemod.ml[500,17983+4]..[500,17983+5])
                                    Ppat_any
                                  pattern (typing/includemod.ml[500,17983+7]..[500,17983+8])
                                    Ppat_any
                                ]
                              expression (typing/includemod.ml[501,17995+6]..[502,18061+59])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (typing/includemod.ml[501,17995+10]..[501,17995+13])
                                      Ppat_var "md1" (typing/includemod.ml[501,17995+10]..[501,17995+13])
                                    expression (typing/includemod.ml[501,17995+16]..[501,17995+62])
                                      Pexp_apply
                                      expression (typing/includemod.ml[501,17995+16]..[501,17995+37])
                                        Pexp_ident "Mtype.strengthen_decl" (typing/includemod.ml[501,17995+16]..[501,17995+37])
                                      [
                                        <arg>
                                        Labelled "aliasable"
                                          expression (typing/includemod.ml[501,17995+39]..[501,17995+48])
                                            Pexp_ident "aliasable" (typing/includemod.ml[501,17995+39]..[501,17995+48])
                                        <arg>
                                        Nolabel
                                          expression (typing/includemod.ml[501,17995+49]..[501,17995+52])
                                            Pexp_ident "env" (typing/includemod.ml[501,17995+49]..[501,17995+52])
                                        <arg>
                                        Nolabel
                                          expression (typing/includemod.ml[501,17995+53]..[501,17995+56])
                                            Pexp_ident "md1" (typing/includemod.ml[501,17995+53]..[501,17995+56])
                                        <arg>
                                        Nolabel
                                          expression (typing/includemod.ml[501,17995+57]..[501,17995+62])
                                            Pexp_ident "path1" (typing/includemod.ml[501,17995+57]..[501,17995+62])
                                      ]
                                ]
                                expression (typing/includemod.ml[502,18061+6]..[502,18061+59])
                                  Pexp_apply
                                  expression (typing/includemod.ml[502,18061+6]..[502,18061+14])
                                    Pexp_ident "modtypes" (typing/includemod.ml[502,18061+6]..[502,18061+14])
                                  [
                                    <arg>
                                    Labelled "loc"
                                      expression (typing/includemod.ml[502,18061+16]..[502,18061+19])
                                        Pexp_ident "loc" (typing/includemod.ml[502,18061+16]..[502,18061+19])
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[502,18061+20]..[502,18061+23])
                                        Pexp_ident "env" (typing/includemod.ml[502,18061+20]..[502,18061+23])
                                    <arg>
                                    Labelled "mark"
                                      expression (typing/includemod.ml[502,18061+25]..[502,18061+29])
                                        Pexp_ident "mark" (typing/includemod.ml[502,18061+25]..[502,18061+29])
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[502,18061+30]..[502,18061+35])
                                        Pexp_ident "subst" (typing/includemod.ml[502,18061+30]..[502,18061+35])
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[502,18061+36]..[502,18061+47])
                                        Pexp_field
                                        expression (typing/includemod.ml[502,18061+36]..[502,18061+39])
                                          Pexp_ident "md1" (typing/includemod.ml[502,18061+36]..[502,18061+39])
                                        "md_type" (typing/includemod.ml[502,18061+40]..[502,18061+47])
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[502,18061+48]..[502,18061+59])
                                        Pexp_field
                                        expression (typing/includemod.ml[502,18061+48]..[502,18061+51])
                                          Pexp_ident "md2" (typing/includemod.ml[502,18061+48]..[502,18061+51])
                                        "md_type" (typing/includemod.ml[502,18061+52]..[502,18061+59])
                                  ]
                          ]
      <def>
        pattern (typing/includemod.ml[506,18158+4]..[506,18158+14])
          Ppat_var "signatures" (typing/includemod.ml[506,18158+4]..[506,18158+14])
        expression (typing/includemod.ml[506,18158+15]..[602,22072+34]) ghost
          Pexp_fun
          Labelled "loc"
          None
          pattern (typing/includemod.ml[506,18158+16]..[506,18158+19])
            Ppat_var "loc" (typing/includemod.ml[506,18158+16]..[506,18158+19])
          expression (typing/includemod.ml[506,18158+20]..[602,22072+34]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (typing/includemod.ml[506,18158+20]..[506,18158+23])
              Ppat_var "env" (typing/includemod.ml[506,18158+20]..[506,18158+23])
            expression (typing/includemod.ml[506,18158+24]..[602,22072+34]) ghost
              Pexp_fun
              Labelled "mark"
              None
              pattern (typing/includemod.ml[506,18158+25]..[506,18158+29])
                Ppat_var "mark" (typing/includemod.ml[506,18158+25]..[506,18158+29])
              expression (typing/includemod.ml[506,18158+30]..[602,22072+34]) ghost
                Pexp_fun
                Nolabel
                None
                pattern (typing/includemod.ml[506,18158+30]..[506,18158+35])
                  Ppat_var "subst" (typing/includemod.ml[506,18158+30]..[506,18158+35])
                expression (typing/includemod.ml[506,18158+36]..[602,22072+34]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (typing/includemod.ml[506,18158+36]..[506,18158+40])
                    Ppat_var "sig1" (typing/includemod.ml[506,18158+36]..[506,18158+40])
                  expression (typing/includemod.ml[506,18158+41]..[602,22072+34]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (typing/includemod.ml[506,18158+41]..[506,18158+45])
                      Ppat_var "sig2" (typing/includemod.ml[506,18158+41]..[506,18158+45])
                    expression (typing/includemod.ml[508,18264+2]..[602,22072+34])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (typing/includemod.ml[508,18264+6]..[508,18264+13])
                            Ppat_var "new_env" (typing/includemod.ml[508,18264+6]..[508,18264+13])
                          expression (typing/includemod.ml[509,18280+4]..[509,18280+54])
                            Pexp_apply
                            expression (typing/includemod.ml[509,18280+4]..[509,18280+21])
                              Pexp_ident "Env.add_signature" (typing/includemod.ml[509,18280+4]..[509,18280+21])
                            [
                              <arg>
                              Nolabel
                                expression (typing/includemod.ml[509,18280+22]..[509,18280+26])
                                  Pexp_ident "sig1" (typing/includemod.ml[509,18280+22]..[509,18280+26])
                              <arg>
                              Nolabel
                                expression (typing/includemod.ml[509,18280+27]..[509,18280+54])
                                  Pexp_apply
                                  expression (typing/includemod.ml[509,18280+28]..[509,18280+44])
                                    Pexp_ident "Env.in_signature" (typing/includemod.ml[509,18280+28]..[509,18280+44])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[509,18280+45]..[509,18280+49])
                                        Pexp_construct "true" (typing/includemod.ml[509,18280+45]..[509,18280+49])
                                        None
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[509,18280+50]..[509,18280+53])
                                        Pexp_ident "env" (typing/includemod.ml[509,18280+50]..[509,18280+53])
                                  ]
                            ]
                      ]
                      expression (typing/includemod.ml[511,18374+2]..[602,22072+34])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (typing/includemod.ml[511,18374+6]..[511,18374+21])
                              Ppat_tuple
                              [
                                pattern (typing/includemod.ml[511,18374+7]..[511,18374+18])
                                  Ppat_var "id_pos_list" (typing/includemod.ml[511,18374+7]..[511,18374+18])
                                pattern (typing/includemod.ml[511,18374+19]..[511,18374+20])
                                  Ppat_any
                              ]
                            expression (typing/includemod.ml[512,18398+4]..[517,18618+18])
                              Pexp_apply
                              expression (typing/includemod.ml[512,18398+4]..[512,18398+18])
                                Pexp_ident "List.fold_left" (typing/includemod.ml[512,18398+4]..[512,18398+18])
                              [
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[513,18417+6]..[516,18545+72])
                                    Pexp_fun
                                    Nolabel
                                    None
                                    pattern (typing/includemod.ml[513,18417+11]..[513,18417+18])
                                      Ppat_tuple
                                      [
                                        pattern (typing/includemod.ml[513,18417+12]..[513,18417+13])
                                          Ppat_var "l" (typing/includemod.ml[513,18417+12]..[513,18417+13])
                                        pattern (typing/includemod.ml[513,18417+14]..[513,18417+17])
                                          Ppat_var "pos" (typing/includemod.ml[513,18417+14]..[513,18417+17])
                                      ]
                                    expression (typing/includemod.ml[513,18417+22]..[516,18545+71])
                                      Pexp_function
                                      [
                                        <case>
                                          pattern (typing/includemod.ml[514,18448+10]..[514,18448+46])
                                            Ppat_construct "Sig_module" (typing/includemod.ml[514,18448+10]..[514,18448+20])
                                            Some
                                              []
                                              pattern (typing/includemod.ml[514,18448+21]..[514,18448+46])
                                                Ppat_tuple
                                                [
                                                  pattern (typing/includemod.ml[514,18448+22]..[514,18448+24])
                                                    Ppat_var "id" (typing/includemod.ml[514,18448+22]..[514,18448+24])
                                                  pattern (typing/includemod.ml[514,18448+26]..[514,18448+36])
                                                    Ppat_construct "Mp_present" (typing/includemod.ml[514,18448+26]..[514,18448+36])
                                                    None
                                                  pattern (typing/includemod.ml[514,18448+38]..[514,18448+39])
                                                    Ppat_any
                                                  pattern (typing/includemod.ml[514,18448+41]..[514,18448+42])
                                                    Ppat_any
                                                  pattern (typing/includemod.ml[514,18448+44]..[514,18448+45])
                                                    Ppat_any
                                                ]
                                          expression (typing/includemod.ml[515,18498+12]..[515,18498+46])
                                            Pexp_tuple
                                            [
                                              expression (typing/includemod.ml[515,18498+13]..[515,18498+37])
                                                Pexp_construct "::" (typing/includemod.ml[515,18498+34]..[515,18498+36])
                                                Some
                                                  expression (typing/includemod.ml[515,18498+13]..[515,18498+37]) ghost
                                                    Pexp_tuple
                                                    [
                                                      expression (typing/includemod.ml[515,18498+13]..[515,18498+34])
                                                        Pexp_tuple
                                                        [
                                                          expression (typing/includemod.ml[515,18498+14]..[515,18498+16])
                                                            Pexp_ident "id" (typing/includemod.ml[515,18498+14]..[515,18498+16])
                                                          expression (typing/includemod.ml[515,18498+17]..[515,18498+20])
                                                            Pexp_ident "pos" (typing/includemod.ml[515,18498+17]..[515,18498+20])
                                                          expression (typing/includemod.ml[515,18498+21]..[515,18498+33])
                                                            Pexp_construct "Tcoerce_none" (typing/includemod.ml[515,18498+21]..[515,18498+33])
                                                            None
                                                        ]
                                                      expression (typing/includemod.ml[515,18498+36]..[515,18498+37])
                                                        Pexp_ident "l" (typing/includemod.ml[515,18498+36]..[515,18498+37])
                                                    ]
                                              expression (typing/includemod.ml[515,18498+40]..[515,18498+45])
                                                Pexp_apply
                                                expression (typing/includemod.ml[515,18498+43]..[515,18498+44])
                                                  Pexp_ident "+" (typing/includemod.ml[515,18498+43]..[515,18498+44])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (typing/includemod.ml[515,18498+40]..[515,18498+43])
                                                      Pexp_ident "pos" (typing/includemod.ml[515,18498+40]..[515,18498+43])
                                                  <arg>
                                                  Nolabel
                                                    expression (typing/includemod.ml[515,18498+44]..[515,18498+45])
                                                      Pexp_constant PConst_int (1,None)
                                                ]
                                            ]
                                        <case>
                                          pattern (typing/includemod.ml[516,18545+10]..[516,18545+14])
                                            Ppat_var "item" (typing/includemod.ml[516,18545+10]..[516,18545+14])
                                          expression (typing/includemod.ml[516,18545+18]..[516,18545+71])
                                            Pexp_tuple
                                            [
                                              expression (typing/includemod.ml[516,18545+19]..[516,18545+20])
                                                Pexp_ident "l" (typing/includemod.ml[516,18545+19]..[516,18545+20])
                                              expression (typing/includemod.ml[516,18545+22]..[516,18545+70])
                                                Pexp_ifthenelse
                                                expression (typing/includemod.ml[516,18545+25]..[516,18545+50])
                                                  Pexp_apply
                                                  expression (typing/includemod.ml[516,18545+25]..[516,18545+45])
                                                    Pexp_ident "is_runtime_component" (typing/includemod.ml[516,18545+25]..[516,18545+45])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (typing/includemod.ml[516,18545+46]..[516,18545+50])
                                                        Pexp_ident "item" (typing/includemod.ml[516,18545+46]..[516,18545+50])
                                                  ]
                                                expression (typing/includemod.ml[516,18545+56]..[516,18545+61])
                                                  Pexp_apply
                                                  expression (typing/includemod.ml[516,18545+59]..[516,18545+60])
                                                    Pexp_ident "+" (typing/includemod.ml[516,18545+59]..[516,18545+60])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (typing/includemod.ml[516,18545+56]..[516,18545+59])
                                                        Pexp_ident "pos" (typing/includemod.ml[516,18545+56]..[516,18545+59])
                                                    <arg>
                                                    Nolabel
                                                      expression (typing/includemod.ml[516,18545+60]..[516,18545+61])
                                                        Pexp_constant PConst_int (1,None)
                                                  ]
                                                Some
                                                  expression (typing/includemod.ml[516,18545+67]..[516,18545+70])
                                                    Pexp_ident "pos" (typing/includemod.ml[516,18545+67]..[516,18545+70])
                                            ]
                                      ]
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[517,18618+6]..[517,18618+13])
                                    Pexp_tuple
                                    [
                                      expression (typing/includemod.ml[517,18618+7]..[517,18618+9])
                                        Pexp_construct "[]" (typing/includemod.ml[517,18618+7]..[517,18618+9])
                                        None
                                      expression (typing/includemod.ml[517,18618+11]..[517,18618+12])
                                        Pexp_constant PConst_int (0,None)
                                    ]
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[517,18618+14]..[517,18618+18])
                                    Pexp_ident "sig1" (typing/includemod.ml[517,18618+14]..[517,18618+18])
                              ]
                        ]
                        expression (typing/includemod.ml[520,18773+2]..[602,22072+34])
                          Pexp_let Rec
                          [
                            <def>
                              pattern (typing/includemod.ml[520,18773+10]..[520,18773+31])
                                Ppat_var "build_component_table" (typing/includemod.ml[520,18773+10]..[520,18773+31])
                              expression (typing/includemod.ml[520,18773+32]..[539,19500+73]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (typing/includemod.ml[520,18773+32]..[520,18773+35])
                                  Ppat_var "pos" (typing/includemod.ml[520,18773+32]..[520,18773+35])
                                expression (typing/includemod.ml[520,18773+36]..[539,19500+73]) ghost
                                  Pexp_fun
                                  Nolabel
                                  None
                                  pattern (typing/includemod.ml[520,18773+36]..[520,18773+39])
                                    Ppat_var "tbl" (typing/includemod.ml[520,18773+36]..[520,18773+39])
                                  expression (typing/includemod.ml[520,18773+42]..[539,19500+73])
                                    Pexp_function
                                    [
                                      <case>
                                        pattern (typing/includemod.ml[521,18824+6]..[521,18824+8])
                                          Ppat_construct "[]" (typing/includemod.ml[521,18824+6]..[521,18824+8])
                                          None
                                        expression (typing/includemod.ml[521,18824+12]..[521,18824+20])
                                          Pexp_tuple
                                          [
                                            expression (typing/includemod.ml[521,18824+12]..[521,18824+15])
                                              Pexp_ident "pos" (typing/includemod.ml[521,18824+12]..[521,18824+15])
                                            expression (typing/includemod.ml[521,18824+17]..[521,18824+20])
                                              Pexp_ident "tbl" (typing/includemod.ml[521,18824+17]..[521,18824+20])
                                          ]
                                      <case>
                                        pattern (typing/includemod.ml[522,18845+6]..[529,19095+22])
                                          Ppat_construct "::" (typing/includemod.ml[529,19095+16]..[529,19095+18])
                                          Some
                                            []
                                            pattern (typing/includemod.ml[522,18845+6]..[529,19095+22]) ghost
                                              Ppat_tuple
                                              [
                                                pattern (typing/includemod.ml[522,18845+6]..[529,19095+15])
                                                  Ppat_alias "item" (typing/includemod.ml[529,19095+11]..[529,19095+15])
                                                  pattern (typing/includemod.ml[522,18845+6]..[529,19095+7])
                                                    Ppat_or
                                                    pattern (typing/includemod.ml[522,18845+7]..[527,19020+34])
                                                      Ppat_or
                                                      pattern (typing/includemod.ml[522,18845+7]..[526,18986+33])
                                                        Ppat_or
                                                        pattern (typing/includemod.ml[522,18845+7]..[525,18947+38])
                                                          Ppat_or
                                                          pattern (typing/includemod.ml[522,18845+7]..[524,18911+35])
                                                            Ppat_or
                                                            pattern (typing/includemod.ml[522,18845+7]..[523,18877+33])
                                                              Ppat_or
                                                              pattern (typing/includemod.ml[522,18845+7]..[522,18845+31])
                                                                Ppat_construct "Sig_value" (typing/includemod.ml[522,18845+7]..[522,18845+16])
                                                                Some
                                                                  []
                                                                  pattern (typing/includemod.ml[522,18845+17]..[522,18845+31])
                                                                    Ppat_tuple
                                                                    [
                                                                      pattern (typing/includemod.ml[522,18845+18]..[522,18845+19])
Ppat_any
                                                                      pattern (typing/includemod.ml[522,18845+21]..[522,18845+22])
Ppat_any
                                                                      pattern (typing/includemod.ml[522,18845+24]..[522,18845+30])
Ppat_construct "Hidden" (typing/includemod.ml[522,18845+24]..[522,18845+30])
None
                                                                    ]
                                                              pattern (typing/includemod.ml[523,18877+7]..[523,18877+33])
                                                                Ppat_construct "Sig_type" (typing/includemod.ml[523,18877+7]..[523,18877+15])
                                                                Some
                                                                  []
                                                                  pattern (typing/includemod.ml[523,18877+16]..[523,18877+33])
                                                                    Ppat_tuple
                                                                    [
                                                                      pattern (typing/includemod.ml[523,18877+17]..[523,18877+18])
Ppat_any
                                                                      pattern (typing/includemod.ml[523,18877+20]..[523,18877+21])
Ppat_any
                                                                      pattern (typing/includemod.ml[523,18877+23]..[523,18877+24])
Ppat_any
                                                                      pattern (typing/includemod.ml[523,18877+26]..[523,18877+32])
Ppat_construct "Hidden" (typing/includemod.ml[523,18877+26]..[523,18877+32])
None
                                                                    ]
                                                            pattern (typing/includemod.ml[524,18911+7]..[524,18911+35])
                                                              Ppat_construct "Sig_typext" (typing/includemod.ml[524,18911+7]..[524,18911+17])
                                                              Some
                                                                []
                                                                pattern (typing/includemod.ml[524,18911+18]..[524,18911+35])
                                                                  Ppat_tuple
                                                                  [
                                                                    pattern (typing/includemod.ml[524,18911+19]..[524,18911+20])
                                                                      Ppat_any
                                                                    pattern (typing/includemod.ml[524,18911+22]..[524,18911+23])
                                                                      Ppat_any
                                                                    pattern (typing/includemod.ml[524,18911+25]..[524,18911+26])
                                                                      Ppat_any
                                                                    pattern (typing/includemod.ml[524,18911+28]..[524,18911+34])
                                                                      Ppat_construct "Hidden" (typing/includemod.ml[524,18911+28]..[524,18911+34])
                                                                      None
                                                                  ]
                                                          pattern (typing/includemod.ml[525,18947+7]..[525,18947+38])
                                                            Ppat_construct "Sig_module" (typing/includemod.ml[525,18947+7]..[525,18947+17])
                                                            Some
                                                              []
                                                              pattern (typing/includemod.ml[525,18947+18]..[525,18947+38])
                                                                Ppat_tuple
                                                                [
                                                                  pattern (typing/includemod.ml[525,18947+19]..[525,18947+20])
                                                                    Ppat_any
                                                                  pattern (typing/includemod.ml[525,18947+22]..[525,18947+23])
                                                                    Ppat_any
                                                                  pattern (typing/includemod.ml[525,18947+25]..[525,18947+26])
                                                                    Ppat_any
                                                                  pattern (typing/includemod.ml[525,18947+28]..[525,18947+29])
                                                                    Ppat_any
                                                                  pattern (typing/includemod.ml[525,18947+31]..[525,18947+37])
                                                                    Ppat_construct "Hidden" (typing/includemod.ml[525,18947+31]..[525,18947+37])
                                                                    None
                                                                ]
                                                        pattern (typing/includemod.ml[526,18986+7]..[526,18986+33])
                                                          Ppat_construct "Sig_modtype" (typing/includemod.ml[526,18986+7]..[526,18986+18])
                                                          Some
                                                            []
                                                            pattern (typing/includemod.ml[526,18986+19]..[526,18986+33])
                                                              Ppat_tuple
                                                              [
                                                                pattern (typing/includemod.ml[526,18986+20]..[526,18986+21])
                                                                  Ppat_any
                                                                pattern (typing/includemod.ml[526,18986+23]..[526,18986+24])
                                                                  Ppat_any
                                                                pattern (typing/includemod.ml[526,18986+26]..[526,18986+32])
                                                                  Ppat_construct "Hidden" (typing/includemod.ml[526,18986+26]..[526,18986+32])
                                                                  None
                                                              ]
                                                      pattern (typing/includemod.ml[527,19020+7]..[527,19020+34])
                                                        Ppat_construct "Sig_class" (typing/includemod.ml[527,19020+7]..[527,19020+16])
                                                        Some
                                                          []
                                                          pattern (typing/includemod.ml[527,19020+17]..[527,19020+34])
                                                            Ppat_tuple
                                                            [
                                                              pattern (typing/includemod.ml[527,19020+18]..[527,19020+19])
                                                                Ppat_any
                                                              pattern (typing/includemod.ml[527,19020+21]..[527,19020+22])
                                                                Ppat_any
                                                              pattern (typing/includemod.ml[527,19020+24]..[527,19020+25])
                                                                Ppat_any
                                                              pattern (typing/includemod.ml[527,19020+27]..[527,19020+33])
                                                                Ppat_construct "Hidden" (typing/includemod.ml[527,19020+27]..[527,19020+33])
                                                                None
                                                            ]
                                                    pattern (typing/includemod.ml[528,19055+7]..[528,19055+39])
                                                      Ppat_construct "Sig_class_type" (typing/includemod.ml[528,19055+7]..[528,19055+21])
                                                      Some
                                                        []
                                                        pattern (typing/includemod.ml[528,19055+22]..[528,19055+39])
                                                          Ppat_tuple
                                                          [
                                                            pattern (typing/includemod.ml[528,19055+23]..[528,19055+24])
                                                              Ppat_any
                                                            pattern (typing/includemod.ml[528,19055+26]..[528,19055+27])
                                                              Ppat_any
                                                            pattern (typing/includemod.ml[528,19055+29]..[528,19055+30])
                                                              Ppat_any
                                                            pattern (typing/includemod.ml[528,19055+32]..[528,19055+38])
                                                              Ppat_construct "Hidden" (typing/includemod.ml[528,19055+32]..[528,19055+38])
                                                              None
                                                          ]
                                                pattern (typing/includemod.ml[529,19095+19]..[529,19095+22])
                                                  Ppat_var "rem" (typing/includemod.ml[529,19095+19]..[529,19095+22])
                                              ]
                                        expression (typing/includemod.ml[530,19121+8]..[531,19193+41])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (typing/includemod.ml[530,19121+12]..[530,19121+15])
                                                Ppat_var "pos" (typing/includemod.ml[530,19121+12]..[530,19121+15])
                                              expression (typing/includemod.ml[530,19121+18]..[530,19121+68])
                                                Pexp_ifthenelse
                                                expression (typing/includemod.ml[530,19121+21]..[530,19121+46])
                                                  Pexp_apply
                                                  expression (typing/includemod.ml[530,19121+21]..[530,19121+41])
                                                    Pexp_ident "is_runtime_component" (typing/includemod.ml[530,19121+21]..[530,19121+41])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (typing/includemod.ml[530,19121+42]..[530,19121+46])
                                                        Pexp_ident "item" (typing/includemod.ml[530,19121+42]..[530,19121+46])
                                                  ]
                                                expression (typing/includemod.ml[530,19121+52]..[530,19121+59])
                                                  Pexp_apply
                                                  expression (typing/includemod.ml[530,19121+56]..[530,19121+57])
                                                    Pexp_ident "+" (typing/includemod.ml[530,19121+56]..[530,19121+57])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (typing/includemod.ml[530,19121+52]..[530,19121+55])
                                                        Pexp_ident "pos" (typing/includemod.ml[530,19121+52]..[530,19121+55])
                                                    <arg>
                                                    Nolabel
                                                      expression (typing/includemod.ml[530,19121+58]..[530,19121+59])
                                                        Pexp_constant PConst_int (1,None)
                                                  ]
                                                Some
                                                  expression (typing/includemod.ml[530,19121+65]..[530,19121+68])
                                                    Pexp_ident "pos" (typing/includemod.ml[530,19121+65]..[530,19121+68])
                                          ]
                                          expression (typing/includemod.ml[531,19193+8]..[531,19193+41])
                                            Pexp_apply
                                            expression (typing/includemod.ml[531,19193+8]..[531,19193+29])
                                              Pexp_ident "build_component_table" (typing/includemod.ml[531,19193+8]..[531,19193+29])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (typing/includemod.ml[531,19193+30]..[531,19193+33])
                                                  Pexp_ident "pos" (typing/includemod.ml[531,19193+30]..[531,19193+33])
                                              <arg>
                                              Nolabel
                                                expression (typing/includemod.ml[531,19193+34]..[531,19193+37])
                                                  Pexp_ident "tbl" (typing/includemod.ml[531,19193+34]..[531,19193+37])
                                              <arg>
                                              Nolabel
                                                expression (typing/includemod.ml[531,19193+38]..[531,19193+41])
                                                  Pexp_ident "rem" (typing/includemod.ml[531,19193+38]..[531,19193+41])
                                            ]
                                      <case>
                                        pattern (typing/includemod.ml[532,19268+6]..[532,19268+17])
                                          Ppat_construct "::" (typing/includemod.ml[532,19268+11]..[532,19268+13])
                                          Some
                                            []
                                            pattern (typing/includemod.ml[532,19268+6]..[532,19268+17]) ghost
                                              Ppat_tuple
                                              [
                                                pattern (typing/includemod.ml[532,19268+6]..[532,19268+10])
                                                  Ppat_var "item" (typing/includemod.ml[532,19268+6]..[532,19268+10])
                                                pattern (typing/includemod.ml[532,19268+14]..[532,19268+17])
                                                  Ppat_var "rem" (typing/includemod.ml[532,19268+14]..[532,19268+17])
                                              ]
                                        expression (typing/includemod.ml[533,19289+8]..[539,19500+73])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (typing/includemod.ml[533,19289+12]..[533,19289+28])
                                                Ppat_tuple
                                                [
                                                  pattern (typing/includemod.ml[533,19289+13]..[533,19289+15])
                                                    Ppat_var "id" (typing/includemod.ml[533,19289+13]..[533,19289+15])
                                                  pattern (typing/includemod.ml[533,19289+17]..[533,19289+21])
                                                    Ppat_var "_loc" (typing/includemod.ml[533,19289+17]..[533,19289+21])
                                                  pattern (typing/includemod.ml[533,19289+23]..[533,19289+27])
                                                    Ppat_var "name" (typing/includemod.ml[533,19289+23]..[533,19289+27])
                                                ]
                                              expression (typing/includemod.ml[533,19289+31]..[533,19289+51])
                                                Pexp_apply
                                                expression (typing/includemod.ml[533,19289+31]..[533,19289+46])
                                                  Pexp_ident "item_ident_name" (typing/includemod.ml[533,19289+31]..[533,19289+46])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (typing/includemod.ml[533,19289+47]..[533,19289+51])
                                                      Pexp_ident "item" (typing/includemod.ml[533,19289+47]..[533,19289+51])
                                                ]
                                          ]
                                          expression (typing/includemod.ml[534,19344+8]..[539,19500+73])
                                            Pexp_let Nonrec
                                            [
                                              <def>
                                                pattern (typing/includemod.ml[534,19344+12]..[534,19344+24])
                                                  Ppat_tuple
                                                  [
                                                    pattern (typing/includemod.ml[534,19344+12]..[534,19344+15])
                                                      Ppat_var "pos" (typing/includemod.ml[534,19344+12]..[534,19344+15])
                                                    pattern (typing/includemod.ml[534,19344+17]..[534,19344+24])
                                                      Ppat_var "nextpos" (typing/includemod.ml[534,19344+17]..[534,19344+24])
                                                  ]
                                                expression (typing/includemod.ml[535,19371+10]..[536,19428+22])
                                                  Pexp_ifthenelse
                                                  expression (typing/includemod.ml[535,19371+13]..[535,19371+38])
                                                    Pexp_apply
                                                    expression (typing/includemod.ml[535,19371+13]..[535,19371+33])
                                                      Pexp_ident "is_runtime_component" (typing/includemod.ml[535,19371+13]..[535,19371+33])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (typing/includemod.ml[535,19371+34]..[535,19371+38])
                                                          Pexp_ident "item" (typing/includemod.ml[535,19371+34]..[535,19371+38])
                                                    ]
                                                  expression (typing/includemod.ml[535,19371+44]..[535,19371+56])
                                                    Pexp_tuple
                                                    [
                                                      expression (typing/includemod.ml[535,19371+44]..[535,19371+47])
                                                        Pexp_ident "pos" (typing/includemod.ml[535,19371+44]..[535,19371+47])
                                                      expression (typing/includemod.ml[535,19371+49]..[535,19371+56])
                                                        Pexp_apply
                                                        expression (typing/includemod.ml[535,19371+53]..[535,19371+54])
                                                          Pexp_ident "+" (typing/includemod.ml[535,19371+53]..[535,19371+54])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (typing/includemod.ml[535,19371+49]..[535,19371+52])
                                                              Pexp_ident "pos" (typing/includemod.ml[535,19371+49]..[535,19371+52])
                                                          <arg>
                                                          Nolabel
                                                            expression (typing/includemod.ml[535,19371+55]..[535,19371+56])
                                                              Pexp_constant PConst_int (1,None)
                                                        ]
                                                    ]
                                                  Some
                                                    expression (typing/includemod.ml[536,19428+15]..[536,19428+22])
                                                      Pexp_tuple
                                                      [
                                                        expression (typing/includemod.ml[536,19428+15]..[536,19428+17])
                                                          Pexp_constant PConst_int (-1,None)
                                                        expression (typing/includemod.ml[536,19428+19]..[536,19428+22])
                                                          Pexp_ident "pos" (typing/includemod.ml[536,19428+19]..[536,19428+22])
                                                      ]
                                            ]
                                            expression (typing/includemod.ml[538,19462+8]..[539,19500+73])
                                              Pexp_apply
                                              expression (typing/includemod.ml[538,19462+8]..[538,19462+29])
                                                Pexp_ident "build_component_table" (typing/includemod.ml[538,19462+8]..[538,19462+29])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[538,19462+30]..[538,19462+37])
                                                    Pexp_ident "nextpos" (typing/includemod.ml[538,19462+30]..[538,19462+37])
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[539,19500+30]..[539,19500+69])
                                                    Pexp_apply
                                                    expression (typing/includemod.ml[539,19500+31]..[539,19500+43])
                                                      Pexp_ident "FieldMap.add" (typing/includemod.ml[539,19500+31]..[539,19500+43])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (typing/includemod.ml[539,19500+44]..[539,19500+48])
                                                          Pexp_ident "name" (typing/includemod.ml[539,19500+44]..[539,19500+48])
                                                      <arg>
                                                      Nolabel
                                                        expression (typing/includemod.ml[539,19500+49]..[539,19500+64])
                                                          Pexp_tuple
                                                          [
                                                            expression (typing/includemod.ml[539,19500+50]..[539,19500+52])
                                                              Pexp_ident "id" (typing/includemod.ml[539,19500+50]..[539,19500+52])
                                                            expression (typing/includemod.ml[539,19500+54]..[539,19500+58])
                                                              Pexp_ident "item" (typing/includemod.ml[539,19500+54]..[539,19500+58])
                                                            expression (typing/includemod.ml[539,19500+60]..[539,19500+63])
                                                              Pexp_ident "pos" (typing/includemod.ml[539,19500+60]..[539,19500+63])
                                                          ]
                                                      <arg>
                                                      Nolabel
                                                        expression (typing/includemod.ml[539,19500+65]..[539,19500+68])
                                                          Pexp_ident "tbl" (typing/includemod.ml[539,19500+65]..[539,19500+68])
                                                    ]
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[539,19500+70]..[539,19500+73])
                                                    Pexp_ident "rem" (typing/includemod.ml[539,19500+70]..[539,19500+73])
                                              ]
                                    ]
                          ]
                          expression (typing/includemod.ml[540,19577+2]..[602,22072+34])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (typing/includemod.ml[540,19577+6]..[540,19577+18])
                                  Ppat_tuple
                                  [
                                    pattern (typing/includemod.ml[540,19577+6]..[540,19577+10])
                                      Ppat_var "len1" (typing/includemod.ml[540,19577+6]..[540,19577+10])
                                    pattern (typing/includemod.ml[540,19577+12]..[540,19577+18])
                                      Ppat_var "comps1" (typing/includemod.ml[540,19577+12]..[540,19577+18])
                                  ]
                                expression (typing/includemod.ml[541,19598+4]..[541,19598+47])
                                  Pexp_apply
                                  expression (typing/includemod.ml[541,19598+4]..[541,19598+25])
                                    Pexp_ident "build_component_table" (typing/includemod.ml[541,19598+4]..[541,19598+25])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[541,19598+26]..[541,19598+27])
                                        Pexp_constant PConst_int (0,None)
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[541,19598+28]..[541,19598+42])
                                        Pexp_ident "FieldMap.empty" (typing/includemod.ml[541,19598+28]..[541,19598+42])
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[541,19598+43]..[541,19598+47])
                                        Pexp_ident "sig1" (typing/includemod.ml[541,19598+43]..[541,19598+47])
                                  ]
                            ]
                            expression (typing/includemod.ml[542,19649+2]..[602,22072+34])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (typing/includemod.ml[542,19649+6]..[542,19649+10])
                                    Ppat_var "len2" (typing/includemod.ml[542,19649+6]..[542,19649+10])
                                  expression (typing/includemod.ml[543,19662+4]..[546,19752+10])
                                    Pexp_apply
                                    expression (typing/includemod.ml[543,19662+4]..[543,19662+18])
                                      Pexp_ident "List.fold_left" (typing/includemod.ml[543,19662+4]..[543,19662+18])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[544,19681+6]..[544,19681+62])
                                          Pexp_fun
                                          Nolabel
                                          None
                                          pattern (typing/includemod.ml[544,19681+11]..[544,19681+12])
                                            Ppat_var "n" (typing/includemod.ml[544,19681+11]..[544,19681+12])
                                          expression (typing/includemod.ml[544,19681+13]..[544,19681+61]) ghost
                                            Pexp_fun
                                            Nolabel
                                            None
                                            pattern (typing/includemod.ml[544,19681+13]..[544,19681+14])
                                              Ppat_var "i" (typing/includemod.ml[544,19681+13]..[544,19681+14])
                                            expression (typing/includemod.ml[544,19681+18]..[544,19681+61])
                                              Pexp_ifthenelse
                                              expression (typing/includemod.ml[544,19681+21]..[544,19681+43])
                                                Pexp_apply
                                                expression (typing/includemod.ml[544,19681+21]..[544,19681+41])
                                                  Pexp_ident "is_runtime_component" (typing/includemod.ml[544,19681+21]..[544,19681+41])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (typing/includemod.ml[544,19681+42]..[544,19681+43])
                                                      Pexp_ident "i" (typing/includemod.ml[544,19681+42]..[544,19681+43])
                                                ]
                                              expression (typing/includemod.ml[544,19681+49]..[544,19681+54])
                                                Pexp_apply
                                                expression (typing/includemod.ml[544,19681+51]..[544,19681+52])
                                                  Pexp_ident "+" (typing/includemod.ml[544,19681+51]..[544,19681+52])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (typing/includemod.ml[544,19681+49]..[544,19681+50])
                                                      Pexp_ident "n" (typing/includemod.ml[544,19681+49]..[544,19681+50])
                                                  <arg>
                                                  Nolabel
                                                    expression (typing/includemod.ml[544,19681+53]..[544,19681+54])
                                                      Pexp_constant PConst_int (1,None)
                                                ]
                                              Some
                                                expression (typing/includemod.ml[544,19681+60]..[544,19681+61])
                                                  Pexp_ident "n" (typing/includemod.ml[544,19681+60]..[544,19681+61])
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[545,19744+6]..[545,19744+7])
                                          Pexp_constant PConst_int (0,None)
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[546,19752+6]..[546,19752+10])
                                          Pexp_ident "sig2" (typing/includemod.ml[546,19752+6]..[546,19752+10])
                                    ]
                              ]
                              expression (typing/includemod.ml[553,20054+2]..[602,22072+34])
                                Pexp_let Rec
                                [
                                  <def>
                                    pattern (typing/includemod.ml[553,20054+10]..[553,20054+25])
                                      Ppat_var "pair_components" (typing/includemod.ml[553,20054+10]..[553,20054+25])
                                    expression (typing/includemod.ml[553,20054+26]..[600,21990+11]) ghost
                                      Pexp_fun
                                      Nolabel
                                      None
                                      pattern (typing/includemod.ml[553,20054+26]..[553,20054+31])
                                        Ppat_var "subst" (typing/includemod.ml[553,20054+26]..[553,20054+31])
                                      expression (typing/includemod.ml[553,20054+32]..[600,21990+11]) ghost
                                        Pexp_fun
                                        Nolabel
                                        None
                                        pattern (typing/includemod.ml[553,20054+32]..[553,20054+38])
                                          Ppat_var "paired" (typing/includemod.ml[553,20054+32]..[553,20054+38])
                                        expression (typing/includemod.ml[553,20054+39]..[600,21990+11]) ghost
                                          Pexp_fun
                                          Nolabel
                                          None
                                          pattern (typing/includemod.ml[553,20054+39]..[553,20054+47])
                                            Ppat_var "unpaired" (typing/includemod.ml[553,20054+39]..[553,20054+47])
                                          expression (typing/includemod.ml[553,20054+50]..[600,21990+11])
                                            Pexp_function
                                            [
                                              <case>
                                                pattern (typing/includemod.ml[554,20113+6]..[554,20113+8])
                                                  Ppat_construct "[]" (typing/includemod.ml[554,20113+6]..[554,20113+8])
                                                  None
                                                expression (typing/includemod.ml[555,20125+8]..[565,20629+11])
                                                  Pexp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (typing/includemod.ml[555,20125+12]..[555,20125+23])
                                                        Ppat_tuple
                                                        [
                                                          pattern (typing/includemod.ml[555,20125+12]..[555,20125+15])
                                                            Ppat_var "oks" (typing/includemod.ml[555,20125+12]..[555,20125+15])
                                                          pattern (typing/includemod.ml[555,20125+17]..[555,20125+23])
                                                            Ppat_var "errors" (typing/includemod.ml[555,20125+17]..[555,20125+23])
                                                        ]
                                                      expression (typing/includemod.ml[556,20151+10]..[556,20151+77])
                                                        Pexp_apply
                                                        expression (typing/includemod.ml[556,20151+10]..[556,20151+30])
                                                          Pexp_ident "signature_components" (typing/includemod.ml[556,20151+10]..[556,20151+30])
                                                        [
                                                          <arg>
                                                          Labelled "loc"
                                                            expression (typing/includemod.ml[556,20151+32]..[556,20151+35])
                                                              Pexp_ident "loc" (typing/includemod.ml[556,20151+32]..[556,20151+35])
                                                          <arg>
                                                          Nolabel
                                                            expression (typing/includemod.ml[556,20151+36]..[556,20151+39])
                                                              Pexp_ident "env" (typing/includemod.ml[556,20151+36]..[556,20151+39])
                                                          <arg>
                                                          Labelled "mark"
                                                            expression (typing/includemod.ml[556,20151+41]..[556,20151+45])
                                                              Pexp_ident "mark" (typing/includemod.ml[556,20151+41]..[556,20151+45])
                                                          <arg>
                                                          Nolabel
                                                            expression (typing/includemod.ml[556,20151+46]..[556,20151+53])
                                                              Pexp_ident "new_env" (typing/includemod.ml[556,20151+46]..[556,20151+53])
                                                          <arg>
                                                          Nolabel
                                                            expression (typing/includemod.ml[556,20151+54]..[556,20151+59])
                                                              Pexp_ident "subst" (typing/includemod.ml[556,20151+54]..[556,20151+59])
                                                          <arg>
                                                          Nolabel
                                                            expression (typing/includemod.ml[556,20151+60]..[556,20151+77])
                                                              Pexp_apply
                                                              expression (typing/includemod.ml[556,20151+61]..[556,20151+69])
                                                                Pexp_ident "List.rev" (typing/includemod.ml[556,20151+61]..[556,20151+69])
                                                              [
                                                                <arg>
                                                                Nolabel
                                                                  expression (typing/includemod.ml[556,20151+70]..[556,20151+76])
                                                                    Pexp_ident "paired" (typing/includemod.ml[556,20151+70]..[556,20151+76])
                                                              ]
                                                        ]
                                                  ]
                                                  expression (typing/includemod.ml[557,20232+8]..[565,20629+11])
                                                    Pexp_match
                                                    expression (typing/includemod.ml[557,20232+20]..[557,20232+41])
                                                      Pexp_tuple
                                                      [
                                                        expression (typing/includemod.ml[557,20232+20]..[557,20232+28])
                                                          Pexp_ident "unpaired" (typing/includemod.ml[557,20232+20]..[557,20232+28])
                                                        expression (typing/includemod.ml[557,20232+30]..[557,20232+36])
                                                          Pexp_ident "errors" (typing/includemod.ml[557,20232+30]..[557,20232+36])
                                                        expression (typing/includemod.ml[557,20232+38]..[557,20232+41])
                                                          Pexp_ident "oks" (typing/includemod.ml[557,20232+38]..[557,20232+41])
                                                      ]
                                                    [
                                                      <case>
                                                        pattern (typing/includemod.ml[558,20279+14]..[558,20279+24])
                                                          Ppat_tuple
                                                          [
                                                            pattern (typing/includemod.ml[558,20279+14]..[558,20279+16])
                                                              Ppat_construct "[]" (typing/includemod.ml[558,20279+14]..[558,20279+16])
                                                              None
                                                            pattern (typing/includemod.ml[558,20279+18]..[558,20279+20])
                                                              Ppat_construct "[]" (typing/includemod.ml[558,20279+18]..[558,20279+20])
                                                              None
                                                            pattern (typing/includemod.ml[558,20279+22]..[558,20279+24])
                                                              Ppat_var "cc" (typing/includemod.ml[558,20279+22]..[558,20279+24])
                                                          ]
                                                        expression (typing/includemod.ml[559,20307+16]..[562,20448+58])
                                                          Pexp_ifthenelse
                                                          expression (typing/includemod.ml[559,20307+19]..[559,20307+30])
                                                            Pexp_apply
                                                            expression (typing/includemod.ml[559,20307+24]..[559,20307+25])
                                                              Pexp_ident "=" (typing/includemod.ml[559,20307+24]..[559,20307+25])
                                                            [
                                                              <arg>
                                                              Nolabel
                                                                expression (typing/includemod.ml[559,20307+19]..[559,20307+23])
                                                                  Pexp_ident "len1" (typing/includemod.ml[559,20307+19]..[559,20307+23])
                                                              <arg>
                                                              Nolabel
                                                                expression (typing/includemod.ml[559,20307+26]..[559,20307+30])
                                                                  Pexp_ident "len2" (typing/includemod.ml[559,20307+26]..[559,20307+30])
                                                            ]
                                                          expression (typing/includemod.ml[560,20361+18]..[560,20361+65])
                                                            Pexp_construct "Ok" (typing/includemod.ml[560,20361+18]..[560,20361+20])
                                                            Some
                                                              expression (typing/includemod.ml[560,20361+21]..[560,20361+65])
                                                                Pexp_apply
                                                                expression (typing/includemod.ml[560,20361+22]..[560,20361+49])
                                                                  Pexp_ident "simplify_structure_coercion" (typing/includemod.ml[560,20361+22]..[560,20361+49])
                                                                [
                                                                  <arg>
                                                                  Nolabel
                                                                    expression (typing/includemod.ml[560,20361+50]..[560,20361+52])
                                                                      Pexp_ident "cc" (typing/includemod.ml[560,20361+50]..[560,20361+52])
                                                                  <arg>
                                                                  Nolabel
                                                                    expression (typing/includemod.ml[560,20361+53]..[560,20361+64])
                                                                      Pexp_ident "id_pos_list" (typing/includemod.ml[560,20361+53]..[560,20361+64])
                                                                ]
                                                          Some
                                                            expression (typing/includemod.ml[562,20448+18]..[562,20448+58])
                                                              Pexp_construct "Ok" (typing/includemod.ml[562,20448+18]..[562,20448+20])
                                                              Some
                                                                expression (typing/includemod.ml[562,20448+21]..[562,20448+58])
                                                                  Pexp_construct "Tcoerce_structure" (typing/includemod.ml[562,20448+22]..[562,20448+39])
                                                                  Some
                                                                    expression (typing/includemod.ml[562,20448+40]..[562,20448+57])
                                                                      Pexp_tuple
                                                                      [
expression (typing/includemod.ml[562,20448+41]..[562,20448+43])
  Pexp_ident "cc" (typing/includemod.ml[562,20448+41]..[562,20448+43])
expression (typing/includemod.ml[562,20448+45]..[562,20448+56])
  Pexp_ident "id_pos_list" (typing/includemod.ml[562,20448+45]..[562,20448+56])
                                                                      ]
                                                      <case>
                                                        pattern (typing/includemod.ml[563,20507+14]..[563,20507+41])
                                                          Ppat_tuple
                                                          [
                                                            pattern (typing/includemod.ml[563,20507+14]..[563,20507+22])
                                                              Ppat_var "missings" (typing/includemod.ml[563,20507+14]..[563,20507+22])
                                                            pattern (typing/includemod.ml[563,20507+24]..[563,20507+37])
                                                              Ppat_var "incompatibles" (typing/includemod.ml[563,20507+24]..[563,20507+37])
                                                            pattern (typing/includemod.ml[563,20507+39]..[563,20507+41])
                                                              Ppat_var "cc" (typing/includemod.ml[563,20507+39]..[563,20507+41])
                                                          ]
                                                        expression (typing/includemod.ml[564,20552+16]..[564,20552+76])
                                                          Pexp_construct "Error" (typing/includemod.ml[564,20552+16]..[564,20552+21])
                                                          Some
                                                            expression (typing/includemod.ml[564,20552+22]..[564,20552+76])
                                                              Pexp_record
                                                              [
                                                                "env" (typing/includemod.ml[564,20552+24]..[564,20552+27])
                                                                  expression (typing/includemod.ml[564,20552+28]..[564,20552+35])
                                                                    Pexp_ident "new_env" (typing/includemod.ml[564,20552+28]..[564,20552+35])
                                                                "Error.missings" (typing/includemod.ml[564,20552+37]..[564,20552+51]) ghost
                                                                  expression (typing/includemod.ml[564,20552+37]..[564,20552+51])
                                                                    Pexp_ident "missings" (typing/includemod.ml[564,20552+37]..[564,20552+51])
                                                                "incompatibles" (typing/includemod.ml[564,20552+53]..[564,20552+66]) ghost
                                                                  expression (typing/includemod.ml[564,20552+53]..[564,20552+66])
                                                                    Pexp_ident "incompatibles" (typing/includemod.ml[564,20552+53]..[564,20552+66])
                                                                "oks" (typing/includemod.ml[564,20552+68]..[564,20552+71])
                                                                  expression (typing/includemod.ml[564,20552+72]..[564,20552+74])
                                                                    Pexp_ident "cc" (typing/includemod.ml[564,20552+72]..[564,20552+74])
                                                              ]
                                                              None
                                                    ]
                                              <case>
                                                pattern (typing/includemod.ml[566,20641+6]..[566,20641+18])
                                                  Ppat_construct "::" (typing/includemod.ml[566,20641+12]..[566,20641+14])
                                                  Some
                                                    []
                                                    pattern (typing/includemod.ml[566,20641+6]..[566,20641+18]) ghost
                                                      Ppat_tuple
                                                      [
                                                        pattern (typing/includemod.ml[566,20641+6]..[566,20641+11])
                                                          Ppat_var "item2" (typing/includemod.ml[566,20641+6]..[566,20641+11])
                                                        pattern (typing/includemod.ml[566,20641+15]..[566,20641+18])
                                                          Ppat_var "rem" (typing/includemod.ml[566,20641+15]..[566,20641+18])
                                                      ]
                                                expression (typing/includemod.ml[567,20663+8]..[600,21990+11])
                                                  Pexp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (typing/includemod.ml[567,20663+12]..[567,20663+30])
                                                        Ppat_tuple
                                                        [
                                                          pattern (typing/includemod.ml[567,20663+13]..[567,20663+16])
                                                            Ppat_var "id2" (typing/includemod.ml[567,20663+13]..[567,20663+16])
                                                          pattern (typing/includemod.ml[567,20663+18]..[567,20663+22])
                                                            Ppat_var "_loc" (typing/includemod.ml[567,20663+18]..[567,20663+22])
                                                          pattern (typing/includemod.ml[567,20663+24]..[567,20663+29])
                                                            Ppat_var "name2" (typing/includemod.ml[567,20663+24]..[567,20663+29])
                                                        ]
                                                      expression (typing/includemod.ml[567,20663+33]..[567,20663+54])
                                                        Pexp_apply
                                                        expression (typing/includemod.ml[567,20663+33]..[567,20663+48])
                                                          Pexp_ident "item_ident_name" (typing/includemod.ml[567,20663+33]..[567,20663+48])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (typing/includemod.ml[567,20663+49]..[567,20663+54])
                                                              Pexp_ident "item2" (typing/includemod.ml[567,20663+49]..[567,20663+54])
                                                        ]
                                                  ]
                                                  expression (typing/includemod.ml[568,20721+8]..[600,21990+11])
                                                    Pexp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (typing/includemod.ml[568,20721+12]..[568,20721+25])
                                                          Ppat_tuple
                                                          [
                                                            pattern (typing/includemod.ml[568,20721+12]..[568,20721+17])
                                                              Ppat_var "name2" (typing/includemod.ml[568,20721+12]..[568,20721+17])
                                                            pattern (typing/includemod.ml[568,20721+19]..[568,20721+25])
                                                              Ppat_var "report" (typing/includemod.ml[568,20721+19]..[568,20721+25])
                                                          ]
                                                        expression (typing/includemod.ml[569,20749+10]..[576,21112+28])
                                                          Pexp_match
                                                          expression (typing/includemod.ml[569,20749+16]..[569,20749+28])
                                                            Pexp_tuple
                                                            [
                                                              expression (typing/includemod.ml[569,20749+16]..[569,20749+21])
                                                                Pexp_ident "item2" (typing/includemod.ml[569,20749+16]..[569,20749+21])
                                                              expression (typing/includemod.ml[569,20749+23]..[569,20749+28])
                                                                Pexp_ident "name2" (typing/includemod.ml[569,20749+23]..[569,20749+28])
                                                            ]
                                                          [
                                                            <case>
                                                              pattern (typing/includemod.ml[570,20783+12]..[570,20783+79])
                                                                Ppat_tuple
                                                                [
                                                                  pattern (typing/includemod.ml[570,20783+12]..[570,20783+52])
                                                                    Ppat_construct "Sig_type" (typing/includemod.ml[570,20783+12]..[570,20783+20])
                                                                    Some
                                                                      []
                                                                      pattern (typing/includemod.ml[570,20783+21]..[570,20783+52])
Ppat_tuple
[
  pattern (typing/includemod.ml[570,20783+22]..[570,20783+23])
    Ppat_any
  pattern (typing/includemod.ml[570,20783+25]..[570,20783+45])
    Ppat_record Closed
    [
      "type_manifest" (typing/includemod.ml[570,20783+26]..[570,20783+39])
        pattern (typing/includemod.ml[570,20783+40]..[570,20783+44])
          Ppat_construct "None" (typing/includemod.ml[570,20783+40]..[570,20783+44])
          None
    ]
  pattern (typing/includemod.ml[570,20783+47]..[570,20783+48])
    Ppat_any
  pattern (typing/includemod.ml[570,20783+50]..[570,20783+51])
    Ppat_any
]
                                                                  pattern (typing/includemod.ml[570,20783+54]..[570,20783+79])
                                                                    Ppat_record Closed
                                                                    [
                                                                      "name" (typing/includemod.ml[570,20783+55]..[570,20783+59])
pattern (typing/includemod.ml[570,20783+60]..[570,20783+61])
  Ppat_var "s" (typing/includemod.ml[570,20783+60]..[570,20783+61])
                                                                      "kind" (typing/includemod.ml[570,20783+63]..[570,20783+67])
pattern (typing/includemod.ml[570,20783+68]..[570,20783+78])
  Ppat_construct "Field_type" (typing/includemod.ml[570,20783+68]..[570,20783+78])
  None
                                                                    ]
                                                                ]
                                                              <when>
                                                                expression (typing/includemod.ml[571,20863+17]..[571,20863+36])
                                                                  Pexp_apply
                                                                  expression (typing/includemod.ml[571,20863+17]..[571,20863+34])
                                                                    Pexp_ident "Btype.is_row_name" (typing/includemod.ml[571,20863+17]..[571,20863+34])
                                                                  [
                                                                    <arg>
                                                                    Nolabel
                                                                      expression (typing/includemod.ml[571,20863+35]..[571,20863+36])
Pexp_ident "s" (typing/includemod.ml[571,20863+35]..[571,20863+36])
                                                                  ]
                                                              expression (typing/includemod.ml[574,21014+14]..[575,21092+19])
                                                                Pexp_tuple
                                                                [
                                                                  expression (typing/includemod.ml[574,21014+14]..[574,21014+76])
                                                                    Pexp_record
                                                                    [
                                                                      "kind" (typing/includemod.ml[574,21014+16]..[574,21014+20])
expression (typing/includemod.ml[574,21014+21]..[574,21014+31])
  Pexp_construct "Field_type" (typing/includemod.ml[574,21014+21]..[574,21014+31])
  None
                                                                      "name" (typing/includemod.ml[574,21014+33]..[574,21014+37])
expression (typing/includemod.ml[574,21014+38]..[574,21014+74])
  Pexp_apply
  expression (typing/includemod.ml[574,21014+38]..[574,21014+48])
    Pexp_ident "String.sub" (typing/includemod.ml[574,21014+38]..[574,21014+48])
  [
    <arg>
    Nolabel
      expression (typing/includemod.ml[574,21014+49]..[574,21014+50])
        Pexp_ident "s" (typing/includemod.ml[574,21014+49]..[574,21014+50])
    <arg>
    Nolabel
      expression (typing/includemod.ml[574,21014+51]..[574,21014+52])
        Pexp_constant PConst_int (0,None)
    <arg>
    Nolabel
      expression (typing/includemod.ml[574,21014+53]..[574,21014+74])
        Pexp_apply
        expression (typing/includemod.ml[574,21014+70]..[574,21014+71])
          Pexp_ident "-" (typing/includemod.ml[574,21014+70]..[574,21014+71])
        [
          <arg>
          Nolabel
            expression (typing/includemod.ml[574,21014+54]..[574,21014+69])
              Pexp_apply
              expression (typing/includemod.ml[574,21014+54]..[574,21014+67])
                Pexp_ident "String.length" (typing/includemod.ml[574,21014+54]..[574,21014+67])
              [
                <arg>
                Nolabel
                  expression (typing/includemod.ml[574,21014+68]..[574,21014+69])
                    Pexp_ident "s" (typing/includemod.ml[574,21014+68]..[574,21014+69])
              ]
          <arg>
          Nolabel
            expression (typing/includemod.ml[574,21014+72]..[574,21014+73])
              Pexp_constant PConst_int (4,None)
        ]
  ]
                                                                    ]
                                                                    None
                                                                  expression (typing/includemod.ml[575,21092+14]..[575,21092+19])
                                                                    Pexp_construct "false" (typing/includemod.ml[575,21092+14]..[575,21092+19])
                                                                    None
                                                                ]
                                                            <case>
                                                              pattern (typing/includemod.ml[576,21112+12]..[576,21112+13])
                                                                Ppat_any
                                                              expression (typing/includemod.ml[576,21112+17]..[576,21112+28])
                                                                Pexp_tuple
                                                                [
                                                                  expression (typing/includemod.ml[576,21112+17]..[576,21112+22])
                                                                    Pexp_ident "name2" (typing/includemod.ml[576,21112+17]..[576,21112+22])
                                                                  expression (typing/includemod.ml[576,21112+24]..[576,21112+28])
                                                                    Pexp_construct "true" (typing/includemod.ml[576,21112+24]..[576,21112+28])
                                                                    None
                                                                ]
                                                          ]
                                                    ]
                                                    expression (typing/includemod.ml[578,21152+8]..[600,21990+11])
                                                      Pexp_match
                                                      expression (typing/includemod.ml[578,21152+20]..[578,21152+46])
                                                        Pexp_apply
                                                        expression (typing/includemod.ml[578,21152+20]..[578,21152+33])
                                                          Pexp_ident "FieldMap.find" (typing/includemod.ml[578,21152+20]..[578,21152+33])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (typing/includemod.ml[578,21152+34]..[578,21152+39])
                                                              Pexp_ident "name2" (typing/includemod.ml[578,21152+34]..[578,21152+39])
                                                          <arg>
                                                          Nolabel
                                                            expression (typing/includemod.ml[578,21152+40]..[578,21152+46])
                                                              Pexp_ident "comps1" (typing/includemod.ml[578,21152+40]..[578,21152+46])
                                                        ]
                                                      [
                                                        <case>
                                                          pattern (typing/includemod.ml[579,21204+10]..[579,21204+28])
                                                            Ppat_tuple
                                                            [
                                                              pattern (typing/includemod.ml[579,21204+11]..[579,21204+14])
                                                                Ppat_var "id1" (typing/includemod.ml[579,21204+11]..[579,21204+14])
                                                              pattern (typing/includemod.ml[579,21204+16]..[579,21204+21])
                                                                Ppat_var "item1" (typing/includemod.ml[579,21204+16]..[579,21204+21])
                                                              pattern (typing/includemod.ml[579,21204+23]..[579,21204+27])
                                                                Ppat_var "pos1" (typing/includemod.ml[579,21204+23]..[579,21204+27])
                                                            ]
                                                          expression (typing/includemod.ml[580,21236+10]..[593,21734+57])
                                                            Pexp_let Nonrec
                                                            [
                                                              <def>
                                                                pattern (typing/includemod.ml[580,21236+14]..[580,21236+23])
                                                                  Ppat_var "new_subst" (typing/includemod.ml[580,21236+14]..[580,21236+23])
                                                                expression (typing/includemod.ml[581,21262+12]..[590,21663+21])
                                                                  Pexp_match
                                                                  expression (typing/includemod.ml[581,21262+18]..[581,21262+23])
                                                                    Pexp_ident "item2" (typing/includemod.ml[581,21262+18]..[581,21262+23])
                                                                  [
                                                                    <case>
                                                                      pattern (typing/includemod.ml[582,21291+14]..[582,21291+24])
Ppat_construct "Sig_type" (typing/includemod.ml[582,21291+14]..[582,21291+22])
Some
  []
  pattern (typing/includemod.ml[582,21291+23]..[582,21291+24])
    Ppat_any
                                                                      expression (typing/includemod.ml[583,21319+16]..[583,21319+58])
Pexp_apply
expression (typing/includemod.ml[583,21319+16]..[583,21319+30])
  Pexp_ident "Subst.add_type" (typing/includemod.ml[583,21319+16]..[583,21319+30])
[
  <arg>
  Nolabel
    expression (typing/includemod.ml[583,21319+31]..[583,21319+34])
      Pexp_ident "id2" (typing/includemod.ml[583,21319+31]..[583,21319+34])
  <arg>
  Nolabel
    expression (typing/includemod.ml[583,21319+35]..[583,21319+52])
      Pexp_construct "Path.Pident" (typing/includemod.ml[583,21319+36]..[583,21319+47])
      Some
        expression (typing/includemod.ml[583,21319+48]..[583,21319+51])
          Pexp_ident "id1" (typing/includemod.ml[583,21319+48]..[583,21319+51])
  <arg>
  Nolabel
    expression (typing/includemod.ml[583,21319+53]..[583,21319+58])
      Pexp_ident "subst" (typing/includemod.ml[583,21319+53]..[583,21319+58])
]
                                                                    <case>
                                                                      pattern (typing/includemod.ml[584,21378+14]..[584,21378+26])
Ppat_construct "Sig_module" (typing/includemod.ml[584,21378+14]..[584,21378+24])
Some
  []
  pattern (typing/includemod.ml[584,21378+25]..[584,21378+26])
    Ppat_any
                                                                      expression (typing/includemod.ml[585,21408+16]..[585,21408+60])
Pexp_apply
expression (typing/includemod.ml[585,21408+16]..[585,21408+32])
  Pexp_ident "Subst.add_module" (typing/includemod.ml[585,21408+16]..[585,21408+32])
[
  <arg>
  Nolabel
    expression (typing/includemod.ml[585,21408+33]..[585,21408+36])
      Pexp_ident "id2" (typing/includemod.ml[585,21408+33]..[585,21408+36])
  <arg>
  Nolabel
    expression (typing/includemod.ml[585,21408+37]..[585,21408+54])
      Pexp_construct "Path.Pident" (typing/includemod.ml[585,21408+38]..[585,21408+49])
      Some
        expression (typing/includemod.ml[585,21408+50]..[585,21408+53])
          Pexp_ident "id1" (typing/includemod.ml[585,21408+50]..[585,21408+53])
  <arg>
  Nolabel
    expression (typing/includemod.ml[585,21408+55]..[585,21408+60])
      Pexp_ident "subst" (typing/includemod.ml[585,21408+55]..[585,21408+60])
]
                                                                    <case>
                                                                      pattern (typing/includemod.ml[586,21469+14]..[586,21469+27])
Ppat_construct "Sig_modtype" (typing/includemod.ml[586,21469+14]..[586,21469+25])
Some
  []
  pattern (typing/includemod.ml[586,21469+26]..[586,21469+27])
    Ppat_any
                                                                      expression (typing/includemod.ml[587,21500+16]..[587,21500+73])
Pexp_apply
expression (typing/includemod.ml[587,21500+16]..[587,21500+33])
  Pexp_ident "Subst.add_modtype" (typing/includemod.ml[587,21500+16]..[587,21500+33])
[
  <arg>
  Nolabel
    expression (typing/includemod.ml[587,21500+34]..[587,21500+37])
      Pexp_ident "id2" (typing/includemod.ml[587,21500+34]..[587,21500+37])
  <arg>
  Nolabel
    expression (typing/includemod.ml[587,21500+38]..[587,21500+67])
      Pexp_construct "Mty_ident" (typing/includemod.ml[587,21500+39]..[587,21500+48])
      Some
        expression (typing/includemod.ml[587,21500+49]..[587,21500+66])
          Pexp_construct "Path.Pident" (typing/includemod.ml[587,21500+50]..[587,21500+61])
          Some
            expression (typing/includemod.ml[587,21500+62]..[587,21500+65])
              Pexp_ident "id1" (typing/includemod.ml[587,21500+62]..[587,21500+65])
  <arg>
  Nolabel
    expression (typing/includemod.ml[587,21500+68]..[587,21500+73])
      Pexp_ident "subst" (typing/includemod.ml[587,21500+68]..[587,21500+73])
]
                                                                    <case>
                                                                      pattern (typing/includemod.ml[588,21574+14]..[589,21615+44])
Ppat_or
pattern (typing/includemod.ml[588,21574+14]..[589,21615+25])
  Ppat_or
  pattern (typing/includemod.ml[588,21574+14]..[588,21574+40])
    Ppat_or
    pattern (typing/includemod.ml[588,21574+14]..[588,21574+25])
      Ppat_construct "Sig_value" (typing/includemod.ml[588,21574+14]..[588,21574+23])
      Some
        []
        pattern (typing/includemod.ml[588,21574+24]..[588,21574+25])
          Ppat_any
    pattern (typing/includemod.ml[588,21574+28]..[588,21574+40])
      Ppat_construct "Sig_typext" (typing/includemod.ml[588,21574+28]..[588,21574+38])
      Some
        []
        pattern (typing/includemod.ml[588,21574+39]..[588,21574+40])
          Ppat_any
  pattern (typing/includemod.ml[589,21615+14]..[589,21615+25])
    Ppat_construct "Sig_class" (typing/includemod.ml[589,21615+14]..[589,21615+23])
    Some
      []
      pattern (typing/includemod.ml[589,21615+24]..[589,21615+25])
        Ppat_any
pattern (typing/includemod.ml[589,21615+28]..[589,21615+44])
  Ppat_construct "Sig_class_type" (typing/includemod.ml[589,21615+28]..[589,21615+42])
  Some
    []
    pattern (typing/includemod.ml[589,21615+43]..[589,21615+44])
      Ppat_any
                                                                      expression (typing/includemod.ml[590,21663+16]..[590,21663+21])
Pexp_ident "subst" (typing/includemod.ml[590,21663+16]..[590,21663+21])
                                                                  ]
                                                            ]
                                                            expression (typing/includemod.ml[592,21698+10]..[593,21734+57])
                                                              Pexp_apply
                                                              expression (typing/includemod.ml[592,21698+10]..[592,21698+25])
                                                                Pexp_ident "pair_components" (typing/includemod.ml[592,21698+10]..[592,21698+25])
                                                              [
                                                                <arg>
                                                                Nolabel
                                                                  expression (typing/includemod.ml[592,21698+26]..[592,21698+35])
                                                                    Pexp_ident "new_subst" (typing/includemod.ml[592,21698+26]..[592,21698+35])
                                                                <arg>
                                                                Nolabel
                                                                  expression (typing/includemod.ml[593,21734+12]..[593,21734+44])
                                                                    Pexp_construct "::" (typing/includemod.ml[593,21734+34]..[593,21734+36])
                                                                    Some
                                                                      expression (typing/includemod.ml[593,21734+13]..[593,21734+43]) ghost
Pexp_tuple
[
  expression (typing/includemod.ml[593,21734+13]..[593,21734+33])
    Pexp_tuple
    [
      expression (typing/includemod.ml[593,21734+14]..[593,21734+19])
        Pexp_ident "item1" (typing/includemod.ml[593,21734+14]..[593,21734+19])
      expression (typing/includemod.ml[593,21734+21]..[593,21734+26])
        Pexp_ident "item2" (typing/includemod.ml[593,21734+21]..[593,21734+26])
      expression (typing/includemod.ml[593,21734+28]..[593,21734+32])
        Pexp_ident "pos1" (typing/includemod.ml[593,21734+28]..[593,21734+32])
    ]
  expression (typing/includemod.ml[593,21734+37]..[593,21734+43])
    Pexp_ident "paired" (typing/includemod.ml[593,21734+37]..[593,21734+43])
]
                                                                <arg>
                                                                Nolabel
                                                                  expression (typing/includemod.ml[593,21734+45]..[593,21734+53])
                                                                    Pexp_ident "unpaired" (typing/includemod.ml[593,21734+45]..[593,21734+53])
                                                                <arg>
                                                                Nolabel
                                                                  expression (typing/includemod.ml[593,21734+54]..[593,21734+57])
                                                                    Pexp_ident "rem" (typing/includemod.ml[593,21734+54]..[593,21734+57])
                                                              ]
                                                        <case>
                                                          pattern (typing/includemod.ml[594,21792+10]..[594,21792+29])
                                                            Ppat_exception
                                                            pattern (typing/includemod.ml[594,21792+20]..[594,21792+29])
                                                              Ppat_construct "Not_found" (typing/includemod.ml[594,21792+20]..[594,21792+29])
                                                              None
                                                          expression (typing/includemod.ml[595,21825+10]..[599,21938+51])
                                                            Pexp_let Nonrec
                                                            [
                                                              <def>
                                                                pattern (typing/includemod.ml[595,21825+14]..[595,21825+22])
                                                                  Ppat_var "unpaired" (typing/includemod.ml[595,21825+14]..[595,21825+22])
                                                                expression (typing/includemod.ml[596,21850+12]..[598,21909+25])
                                                                  Pexp_ifthenelse
                                                                  expression (typing/includemod.ml[596,21850+15]..[596,21850+21])
                                                                    Pexp_ident "report" (typing/includemod.ml[596,21850+15]..[596,21850+21])
                                                                  expression (typing/includemod.ml[597,21877+14]..[597,21877+31])
                                                                    Pexp_construct "::" (typing/includemod.ml[597,21877+20]..[597,21877+22])
                                                                    Some
                                                                      expression (typing/includemod.ml[597,21877+14]..[597,21877+31]) ghost
Pexp_tuple
[
  expression (typing/includemod.ml[597,21877+14]..[597,21877+19])
    Pexp_ident "item2" (typing/includemod.ml[597,21877+14]..[597,21877+19])
  expression (typing/includemod.ml[597,21877+23]..[597,21877+31])
    Pexp_ident "unpaired" (typing/includemod.ml[597,21877+23]..[597,21877+31])
]
                                                                  Some
                                                                    expression (typing/includemod.ml[598,21909+17]..[598,21909+25])
                                                                      Pexp_ident "unpaired" (typing/includemod.ml[598,21909+17]..[598,21909+25])
                                                            ]
                                                            expression (typing/includemod.ml[599,21938+10]..[599,21938+51])
                                                              Pexp_apply
                                                              expression (typing/includemod.ml[599,21938+10]..[599,21938+25])
                                                                Pexp_ident "pair_components" (typing/includemod.ml[599,21938+10]..[599,21938+25])
                                                              [
                                                                <arg>
                                                                Nolabel
                                                                  expression (typing/includemod.ml[599,21938+26]..[599,21938+31])
                                                                    Pexp_ident "subst" (typing/includemod.ml[599,21938+26]..[599,21938+31])
                                                                <arg>
                                                                Nolabel
                                                                  expression (typing/includemod.ml[599,21938+32]..[599,21938+38])
                                                                    Pexp_ident "paired" (typing/includemod.ml[599,21938+32]..[599,21938+38])
                                                                <arg>
                                                                Nolabel
                                                                  expression (typing/includemod.ml[599,21938+39]..[599,21938+47])
                                                                    Pexp_ident "unpaired" (typing/includemod.ml[599,21938+39]..[599,21938+47])
                                                                <arg>
                                                                Nolabel
                                                                  expression (typing/includemod.ml[599,21938+48]..[599,21938+51])
                                                                    Pexp_ident "rem" (typing/includemod.ml[599,21938+48]..[599,21938+51])
                                                              ]
                                                      ]
                                            ]
                                ]
                                expression (typing/includemod.ml[602,22072+2]..[602,22072+34])
                                  Pexp_apply
                                  expression (typing/includemod.ml[602,22072+2]..[602,22072+17])
                                    Pexp_ident "pair_components" (typing/includemod.ml[602,22072+2]..[602,22072+17])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[602,22072+18]..[602,22072+23])
                                        Pexp_ident "subst" (typing/includemod.ml[602,22072+18]..[602,22072+23])
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[602,22072+24]..[602,22072+26])
                                        Pexp_construct "[]" (typing/includemod.ml[602,22072+24]..[602,22072+26])
                                        None
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[602,22072+27]..[602,22072+29])
                                        Pexp_construct "[]" (typing/includemod.ml[602,22072+27]..[602,22072+29])
                                        None
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[602,22072+30]..[602,22072+34])
                                        Pexp_ident "sig2" (typing/includemod.ml[602,22072+30]..[602,22072+34])
                                  ]
      <def>
        pattern (typing/includemod.ml[606,22154+4]..[606,22154+24])
          Ppat_var "signature_components" (typing/includemod.ml[606,22154+4]..[606,22154+24])
        expression (typing/includemod.ml[606,22154+25]..[673,24848+41]) ghost
          Pexp_fun
          Labelled "loc"
          None
          pattern (typing/includemod.ml[606,22154+26]..[606,22154+29])
            Ppat_var "loc" (typing/includemod.ml[606,22154+26]..[606,22154+29])
          expression (typing/includemod.ml[606,22154+30]..[673,24848+41]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (typing/includemod.ml[606,22154+30]..[606,22154+37])
              Ppat_var "old_env" (typing/includemod.ml[606,22154+30]..[606,22154+37])
            expression (typing/includemod.ml[606,22154+38]..[673,24848+41]) ghost
              Pexp_fun
              Labelled "mark"
              None
              pattern (typing/includemod.ml[606,22154+39]..[606,22154+43])
                Ppat_var "mark" (typing/includemod.ml[606,22154+39]..[606,22154+43])
              expression (typing/includemod.ml[606,22154+44]..[673,24848+41]) ghost
                Pexp_fun
                Nolabel
                None
                pattern (typing/includemod.ml[606,22154+44]..[606,22154+47])
                  Ppat_var "env" (typing/includemod.ml[606,22154+44]..[606,22154+47])
                expression (typing/includemod.ml[606,22154+48]..[673,24848+41]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (typing/includemod.ml[606,22154+48]..[606,22154+53])
                    Ppat_var "subst" (typing/includemod.ml[606,22154+48]..[606,22154+53])
                  expression (typing/includemod.ml[606,22154+54]..[673,24848+41]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (typing/includemod.ml[606,22154+54]..[606,22154+60])
                      Ppat_var "paired" (typing/includemod.ml[606,22154+54]..[606,22154+60])
                    expression (typing/includemod.ml[607,22217+2]..[673,24848+41])
                      Pexp_match
                      expression (typing/includemod.ml[607,22217+8]..[607,22217+14])
                        Pexp_ident "paired" (typing/includemod.ml[607,22217+8]..[607,22217+14])
                      [
                        <case>
                          pattern (typing/includemod.ml[608,22237+4]..[608,22237+6])
                            Ppat_construct "[]" (typing/includemod.ml[608,22237+4]..[608,22237+6])
                            None
                          expression (typing/includemod.ml[608,22237+10]..[608,22237+16])
                            Pexp_tuple
                            [
                              expression (typing/includemod.ml[608,22237+10]..[608,22237+12])
                                Pexp_construct "[]" (typing/includemod.ml[608,22237+10]..[608,22237+12])
                                None
                              expression (typing/includemod.ml[608,22237+14]..[608,22237+16])
                                Pexp_construct "[]" (typing/includemod.ml[608,22237+14]..[608,22237+16])
                                None
                            ]
                        <case>
                          pattern (typing/includemod.ml[609,22254+4]..[609,22254+30])
                            Ppat_construct "::" (typing/includemod.ml[609,22254+24]..[609,22254+26])
                            Some
                              []
                              pattern (typing/includemod.ml[609,22254+4]..[609,22254+30]) ghost
                                Ppat_tuple
                                [
                                  pattern (typing/includemod.ml[609,22254+4]..[609,22254+23])
                                    Ppat_tuple
                                    [
                                      pattern (typing/includemod.ml[609,22254+5]..[609,22254+10])
                                        Ppat_var "sigi1" (typing/includemod.ml[609,22254+5]..[609,22254+10])
                                      pattern (typing/includemod.ml[609,22254+12]..[609,22254+17])
                                        Ppat_var "sigi2" (typing/includemod.ml[609,22254+12]..[609,22254+17])
                                      pattern (typing/includemod.ml[609,22254+19]..[609,22254+22])
                                        Ppat_var "pos" (typing/includemod.ml[609,22254+19]..[609,22254+22])
                                    ]
                                  pattern (typing/includemod.ml[609,22254+27]..[609,22254+30])
                                    Ppat_var "rem" (typing/includemod.ml[609,22254+27]..[609,22254+30])
                                ]
                          expression (typing/includemod.ml[610,22288+6]..[673,24848+41])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (typing/includemod.ml[610,22288+10]..[610,22288+38])
                                  Ppat_tuple
                                  [
                                    pattern (typing/includemod.ml[610,22288+10]..[610,22288+12])
                                      Ppat_var "id" (typing/includemod.ml[610,22288+10]..[610,22288+12])
                                    pattern (typing/includemod.ml[610,22288+14]..[610,22288+18])
                                      Ppat_var "item" (typing/includemod.ml[610,22288+14]..[610,22288+18])
                                    pattern (typing/includemod.ml[610,22288+20]..[610,22288+38])
                                      Ppat_var "present_at_runtime" (typing/includemod.ml[610,22288+20]..[610,22288+38])
                                  ]
                                expression (typing/includemod.ml[611,22329+8]..[665,24606+24])
                                  Pexp_match
                                  expression (typing/includemod.ml[611,22329+14]..[611,22329+26])
                                    Pexp_tuple
                                    [
                                      expression (typing/includemod.ml[611,22329+14]..[611,22329+19])
                                        Pexp_ident "sigi1" (typing/includemod.ml[611,22329+14]..[611,22329+19])
                                      expression (typing/includemod.ml[611,22329+21]..[611,22329+26])
                                        Pexp_ident "sigi2" (typing/includemod.ml[611,22329+21]..[611,22329+26])
                                    ]
                                  [
                                    <case>
                                      pattern (typing/includemod.ml[612,22361+10]..[612,22361+67])
                                        Ppat_tuple
                                        [
                                          pattern (typing/includemod.ml[612,22361+10]..[612,22361+37])
                                            Ppat_construct "Sig_value" (typing/includemod.ml[612,22361+10]..[612,22361+19])
                                            Some
                                              []
                                              pattern (typing/includemod.ml[612,22361+19]..[612,22361+37])
                                                Ppat_tuple
                                                [
                                                  pattern (typing/includemod.ml[612,22361+20]..[612,22361+23])
                                                    Ppat_var "id1" (typing/includemod.ml[612,22361+20]..[612,22361+23])
                                                  pattern (typing/includemod.ml[612,22361+25]..[612,22361+33])
                                                    Ppat_var "valdecl1" (typing/includemod.ml[612,22361+25]..[612,22361+33])
                                                  pattern (typing/includemod.ml[612,22361+35]..[612,22361+36])
                                                    Ppat_any
                                                ]
                                          pattern (typing/includemod.ml[612,22361+39]..[612,22361+67])
                                            Ppat_construct "Sig_value" (typing/includemod.ml[612,22361+39]..[612,22361+48])
                                            Some
                                              []
                                              pattern (typing/includemod.ml[612,22361+48]..[612,22361+67])
                                                Ppat_tuple
                                                [
                                                  pattern (typing/includemod.ml[612,22361+49]..[612,22361+53])
                                                    Ppat_var "_id2" (typing/includemod.ml[612,22361+49]..[612,22361+53])
                                                  pattern (typing/includemod.ml[612,22361+55]..[612,22361+63])
                                                    Ppat_var "valdecl2" (typing/includemod.ml[612,22361+55]..[612,22361+63])
                                                  pattern (typing/includemod.ml[612,22361+65]..[612,22361+66])
                                                    Ppat_any
                                                ]
                                        ]
                                      expression (typing/includemod.ml[613,22432+12]..[620,22689+41])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (typing/includemod.ml[613,22432+16]..[613,22432+20])
                                              Ppat_var "item" (typing/includemod.ml[613,22432+16]..[613,22432+20])
                                            expression (typing/includemod.ml[614,22455+14]..[614,22455+75])
                                              Pexp_apply
                                              expression (typing/includemod.ml[614,22455+14]..[614,22455+32])
                                                Pexp_ident "value_descriptions" (typing/includemod.ml[614,22455+14]..[614,22455+32])
                                              [
                                                <arg>
                                                Labelled "loc"
                                                  expression (typing/includemod.ml[614,22455+34]..[614,22455+37])
                                                    Pexp_ident "loc" (typing/includemod.ml[614,22455+34]..[614,22455+37])
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[614,22455+38]..[614,22455+41])
                                                    Pexp_ident "env" (typing/includemod.ml[614,22455+38]..[614,22455+41])
                                                <arg>
                                                Labelled "mark"
                                                  expression (typing/includemod.ml[614,22455+43]..[614,22455+47])
                                                    Pexp_ident "mark" (typing/includemod.ml[614,22455+43]..[614,22455+47])
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[614,22455+48]..[614,22455+53])
                                                    Pexp_ident "subst" (typing/includemod.ml[614,22455+48]..[614,22455+53])
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[614,22455+54]..[614,22455+57])
                                                    Pexp_ident "id1" (typing/includemod.ml[614,22455+54]..[614,22455+57])
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[614,22455+58]..[614,22455+66])
                                                    Pexp_ident "valdecl1" (typing/includemod.ml[614,22455+58]..[614,22455+66])
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[614,22455+67]..[614,22455+75])
                                                    Pexp_ident "valdecl2" (typing/includemod.ml[614,22455+67]..[614,22455+75])
                                              ]
                                        ]
                                        expression (typing/includemod.ml[616,22546+12]..[620,22689+41])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (typing/includemod.ml[616,22546+16]..[616,22546+34])
                                                Ppat_var "present_at_runtime" (typing/includemod.ml[616,22546+16]..[616,22546+34])
                                              expression (typing/includemod.ml[616,22546+37]..[618,22648+25])
                                                Pexp_match
                                                expression (typing/includemod.ml[616,22546+43]..[616,22546+60])
                                                  Pexp_field
                                                  expression (typing/includemod.ml[616,22546+43]..[616,22546+51])
                                                    Pexp_ident "valdecl2" (typing/includemod.ml[616,22546+43]..[616,22546+51])
                                                  "val_kind" (typing/includemod.ml[616,22546+52]..[616,22546+60])
                                                [
                                                  <case>
                                                    pattern (typing/includemod.ml[617,22612+16]..[617,22612+26])
                                                      Ppat_construct "Val_prim" (typing/includemod.ml[617,22612+16]..[617,22612+24])
                                                      Some
                                                        []
                                                        pattern (typing/includemod.ml[617,22612+25]..[617,22612+26])
                                                          Ppat_any
                                                    expression (typing/includemod.ml[617,22612+30]..[617,22612+35])
                                                      Pexp_construct "false" (typing/includemod.ml[617,22612+30]..[617,22612+35])
                                                      None
                                                  <case>
                                                    pattern (typing/includemod.ml[618,22648+16]..[618,22648+17])
                                                      Ppat_any
                                                    expression (typing/includemod.ml[618,22648+21]..[618,22648+25])
                                                      Pexp_construct "true" (typing/includemod.ml[618,22648+21]..[618,22648+25])
                                                      None
                                                ]
                                          ]
                                          expression (typing/includemod.ml[620,22689+12]..[620,22689+41])
                                            Pexp_tuple
                                            [
                                              expression (typing/includemod.ml[620,22689+12]..[620,22689+15])
                                                Pexp_ident "id1" (typing/includemod.ml[620,22689+12]..[620,22689+15])
                                              expression (typing/includemod.ml[620,22689+17]..[620,22689+21])
                                                Pexp_ident "item" (typing/includemod.ml[620,22689+17]..[620,22689+21])
                                              expression (typing/includemod.ml[620,22689+23]..[620,22689+41])
                                                Pexp_ident "present_at_runtime" (typing/includemod.ml[620,22689+23]..[620,22689+41])
                                            ]
                                    <case>
                                      pattern (typing/includemod.ml[621,22731+10]..[621,22731+67])
                                        Ppat_tuple
                                        [
                                          pattern (typing/includemod.ml[621,22731+10]..[621,22731+37])
                                            Ppat_construct "Sig_type" (typing/includemod.ml[621,22731+10]..[621,22731+18])
                                            Some
                                              []
                                              pattern (typing/includemod.ml[621,22731+18]..[621,22731+37])
                                                Ppat_tuple
                                                [
                                                  pattern (typing/includemod.ml[621,22731+19]..[621,22731+22])
                                                    Ppat_var "id1" (typing/includemod.ml[621,22731+19]..[621,22731+22])
                                                  pattern (typing/includemod.ml[621,22731+24]..[621,22731+30])
                                                    Ppat_var "tydec1" (typing/includemod.ml[621,22731+24]..[621,22731+30])
                                                  pattern (typing/includemod.ml[621,22731+32]..[621,22731+33])
                                                    Ppat_any
                                                  pattern (typing/includemod.ml[621,22731+35]..[621,22731+36])
                                                    Ppat_any
                                                ]
                                          pattern (typing/includemod.ml[621,22731+39]..[621,22731+67])
                                            Ppat_construct "Sig_type" (typing/includemod.ml[621,22731+39]..[621,22731+47])
                                            Some
                                              []
                                              pattern (typing/includemod.ml[621,22731+47]..[621,22731+67])
                                                Ppat_tuple
                                                [
                                                  pattern (typing/includemod.ml[621,22731+48]..[621,22731+52])
                                                    Ppat_var "_id2" (typing/includemod.ml[621,22731+48]..[621,22731+52])
                                                  pattern (typing/includemod.ml[621,22731+54]..[621,22731+60])
                                                    Ppat_var "tydec2" (typing/includemod.ml[621,22731+54]..[621,22731+60])
                                                  pattern (typing/includemod.ml[621,22731+62]..[621,22731+63])
                                                    Ppat_any
                                                  pattern (typing/includemod.ml[621,22731+65]..[621,22731+66])
                                                    Ppat_any
                                                ]
                                        ]
                                      expression (typing/includemod.ml[622,22802+12]..[625,22920+28])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (typing/includemod.ml[622,22802+16]..[622,22802+20])
                                              Ppat_var "item" (typing/includemod.ml[622,22802+16]..[622,22802+20])
                                            expression (typing/includemod.ml[623,22825+14]..[623,22825+79])
                                              Pexp_apply
                                              expression (typing/includemod.ml[623,22825+14]..[623,22825+31])
                                                Pexp_ident "type_declarations" (typing/includemod.ml[623,22825+14]..[623,22825+31])
                                              [
                                                <arg>
                                                Labelled "loc"
                                                  expression (typing/includemod.ml[623,22825+33]..[623,22825+36])
                                                    Pexp_ident "loc" (typing/includemod.ml[623,22825+33]..[623,22825+36])
                                                <arg>
                                                Labelled "old_env"
                                                  expression (typing/includemod.ml[623,22825+38]..[623,22825+45])
                                                    Pexp_ident "old_env" (typing/includemod.ml[623,22825+38]..[623,22825+45])
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[623,22825+46]..[623,22825+49])
                                                    Pexp_ident "env" (typing/includemod.ml[623,22825+46]..[623,22825+49])
                                                <arg>
                                                Labelled "mark"
                                                  expression (typing/includemod.ml[623,22825+51]..[623,22825+55])
                                                    Pexp_ident "mark" (typing/includemod.ml[623,22825+51]..[623,22825+55])
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[623,22825+56]..[623,22825+61])
                                                    Pexp_ident "subst" (typing/includemod.ml[623,22825+56]..[623,22825+61])
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[623,22825+62]..[623,22825+65])
                                                    Pexp_ident "id1" (typing/includemod.ml[623,22825+62]..[623,22825+65])
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[623,22825+66]..[623,22825+72])
                                                    Pexp_ident "tydec1" (typing/includemod.ml[623,22825+66]..[623,22825+72])
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[623,22825+73]..[623,22825+79])
                                                    Pexp_ident "tydec2" (typing/includemod.ml[623,22825+73]..[623,22825+79])
                                              ]
                                        ]
                                        expression (typing/includemod.ml[625,22920+12]..[625,22920+28])
                                          Pexp_tuple
                                          [
                                            expression (typing/includemod.ml[625,22920+12]..[625,22920+15])
                                              Pexp_ident "id1" (typing/includemod.ml[625,22920+12]..[625,22920+15])
                                            expression (typing/includemod.ml[625,22920+17]..[625,22920+21])
                                              Pexp_ident "item" (typing/includemod.ml[625,22920+17]..[625,22920+21])
                                            expression (typing/includemod.ml[625,22920+23]..[625,22920+28])
                                              Pexp_construct "false" (typing/includemod.ml[625,22920+23]..[625,22920+28])
                                              None
                                          ]
                                    <case>
                                      pattern (typing/includemod.ml[626,22949+10]..[626,22949+67])
                                        Ppat_tuple
                                        [
                                          pattern (typing/includemod.ml[626,22949+10]..[626,22949+37])
                                            Ppat_construct "Sig_typext" (typing/includemod.ml[626,22949+10]..[626,22949+20])
                                            Some
                                              []
                                              pattern (typing/includemod.ml[626,22949+20]..[626,22949+37])
                                                Ppat_tuple
                                                [
                                                  pattern (typing/includemod.ml[626,22949+21]..[626,22949+24])
                                                    Ppat_var "id1" (typing/includemod.ml[626,22949+21]..[626,22949+24])
                                                  pattern (typing/includemod.ml[626,22949+26]..[626,22949+30])
                                                    Ppat_var "ext1" (typing/includemod.ml[626,22949+26]..[626,22949+30])
                                                  pattern (typing/includemod.ml[626,22949+32]..[626,22949+33])
                                                    Ppat_any
                                                  pattern (typing/includemod.ml[626,22949+35]..[626,22949+36])
                                                    Ppat_any
                                                ]
                                          pattern (typing/includemod.ml[626,22949+39]..[626,22949+67])
                                            Ppat_construct "Sig_typext" (typing/includemod.ml[626,22949+39]..[626,22949+49])
                                            Some
                                              []
                                              pattern (typing/includemod.ml[626,22949+49]..[626,22949+67])
                                                Ppat_tuple
                                                [
                                                  pattern (typing/includemod.ml[626,22949+50]..[626,22949+54])
                                                    Ppat_var "_id2" (typing/includemod.ml[626,22949+50]..[626,22949+54])
                                                  pattern (typing/includemod.ml[626,22949+56]..[626,22949+60])
                                                    Ppat_var "ext2" (typing/includemod.ml[626,22949+56]..[626,22949+60])
                                                  pattern (typing/includemod.ml[626,22949+62]..[626,22949+63])
                                                    Ppat_any
                                                  pattern (typing/includemod.ml[626,22949+65]..[626,22949+66])
                                                    Ppat_any
                                                ]
                                        ]
                                      expression (typing/includemod.ml[627,23020+12]..[630,23131+27])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (typing/includemod.ml[627,23020+16]..[627,23020+20])
                                              Ppat_var "item" (typing/includemod.ml[627,23020+16]..[627,23020+20])
                                            expression (typing/includemod.ml[628,23043+14]..[628,23043+72])
                                              Pexp_apply
                                              expression (typing/includemod.ml[628,23043+14]..[628,23043+36])
                                                Pexp_ident "extension_constructors" (typing/includemod.ml[628,23043+14]..[628,23043+36])
                                              [
                                                <arg>
                                                Labelled "loc"
                                                  expression (typing/includemod.ml[628,23043+38]..[628,23043+41])
                                                    Pexp_ident "loc" (typing/includemod.ml[628,23043+38]..[628,23043+41])
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[628,23043+42]..[628,23043+45])
                                                    Pexp_ident "env" (typing/includemod.ml[628,23043+42]..[628,23043+45])
                                                <arg>
                                                Labelled "mark"
                                                  expression (typing/includemod.ml[628,23043+47]..[628,23043+51])
                                                    Pexp_ident "mark" (typing/includemod.ml[628,23043+47]..[628,23043+51])
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[628,23043+53]..[628,23043+58])
                                                    Pexp_ident "subst" (typing/includemod.ml[628,23043+53]..[628,23043+58])
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[628,23043+59]..[628,23043+62])
                                                    Pexp_ident "id1" (typing/includemod.ml[628,23043+59]..[628,23043+62])
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[628,23043+63]..[628,23043+67])
                                                    Pexp_ident "ext1" (typing/includemod.ml[628,23043+63]..[628,23043+67])
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[628,23043+68]..[628,23043+72])
                                                    Pexp_ident "ext2" (typing/includemod.ml[628,23043+68]..[628,23043+72])
                                              ]
                                        ]
                                        expression (typing/includemod.ml[630,23131+12]..[630,23131+27])
                                          Pexp_tuple
                                          [
                                            expression (typing/includemod.ml[630,23131+12]..[630,23131+15])
                                              Pexp_ident "id1" (typing/includemod.ml[630,23131+12]..[630,23131+15])
                                            expression (typing/includemod.ml[630,23131+17]..[630,23131+21])
                                              Pexp_ident "item" (typing/includemod.ml[630,23131+17]..[630,23131+21])
                                            expression (typing/includemod.ml[630,23131+23]..[630,23131+27])
                                              Pexp_construct "true" (typing/includemod.ml[630,23131+23]..[630,23131+27])
                                              None
                                          ]
                                    <case>
                                      pattern (typing/includemod.ml[631,23159+10]..[631,23159+78])
                                        Ppat_tuple
                                        [
                                          pattern (typing/includemod.ml[631,23159+10]..[631,23159+44])
                                            Ppat_construct "Sig_module" (typing/includemod.ml[631,23159+10]..[631,23159+20])
                                            Some
                                              []
                                              pattern (typing/includemod.ml[631,23159+20]..[631,23159+44])
                                                Ppat_tuple
                                                [
                                                  pattern (typing/includemod.ml[631,23159+21]..[631,23159+24])
                                                    Ppat_var "id1" (typing/includemod.ml[631,23159+21]..[631,23159+24])
                                                  pattern (typing/includemod.ml[631,23159+26]..[631,23159+31])
                                                    Ppat_var "pres1" (typing/includemod.ml[631,23159+26]..[631,23159+31])
                                                  pattern (typing/includemod.ml[631,23159+33]..[631,23159+37])
                                                    Ppat_var "mty1" (typing/includemod.ml[631,23159+33]..[631,23159+37])
                                                  pattern (typing/includemod.ml[631,23159+39]..[631,23159+40])
                                                    Ppat_any
                                                  pattern (typing/includemod.ml[631,23159+42]..[631,23159+43])
                                                    Ppat_any
                                                ]
                                          pattern (typing/includemod.ml[631,23159+46]..[631,23159+78])
                                            Ppat_construct "Sig_module" (typing/includemod.ml[631,23159+46]..[631,23159+56])
                                            Some
                                              []
                                              pattern (typing/includemod.ml[631,23159+56]..[631,23159+78])
                                                Ppat_tuple
                                                [
                                                  pattern (typing/includemod.ml[631,23159+57]..[631,23159+58])
                                                    Ppat_any
                                                  pattern (typing/includemod.ml[631,23159+60]..[631,23159+65])
                                                    Ppat_var "pres2" (typing/includemod.ml[631,23159+60]..[631,23159+65])
                                                  pattern (typing/includemod.ml[631,23159+67]..[631,23159+71])
                                                    Ppat_var "mty2" (typing/includemod.ml[631,23159+67]..[631,23159+71])
                                                  pattern (typing/includemod.ml[631,23159+73]..[631,23159+74])
                                                    Ppat_any
                                                  pattern (typing/includemod.ml[631,23159+76]..[631,23159+77])
                                                    Ppat_any
                                                ]
                                        ]
                                      expression (typing/includemod.ml[632,23238+13]..[648,23950+15])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (typing/includemod.ml[633,23257+18]..[633,23257+22])
                                              Ppat_var "item" (typing/includemod.ml[633,23257+18]..[633,23257+22])
                                            expression (typing/includemod.ml[634,23282+16]..[634,23282+70])
                                              Pexp_apply
                                              expression (typing/includemod.ml[634,23282+16]..[634,23282+35])
                                                Pexp_ident "module_declarations" (typing/includemod.ml[634,23282+16]..[634,23282+35])
                                              [
                                                <arg>
                                                Labelled "loc"
                                                  expression (typing/includemod.ml[634,23282+37]..[634,23282+40])
                                                    Pexp_ident "loc" (typing/includemod.ml[634,23282+37]..[634,23282+40])
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[634,23282+41]..[634,23282+44])
                                                    Pexp_ident "env" (typing/includemod.ml[634,23282+41]..[634,23282+44])
                                                <arg>
                                                Labelled "mark"
                                                  expression (typing/includemod.ml[634,23282+46]..[634,23282+50])
                                                    Pexp_ident "mark" (typing/includemod.ml[634,23282+46]..[634,23282+50])
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[634,23282+51]..[634,23282+56])
                                                    Pexp_ident "subst" (typing/includemod.ml[634,23282+51]..[634,23282+56])
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[634,23282+57]..[634,23282+60])
                                                    Pexp_ident "id1" (typing/includemod.ml[634,23282+57]..[634,23282+60])
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[634,23282+61]..[634,23282+65])
                                                    Pexp_ident "mty1" (typing/includemod.ml[634,23282+61]..[634,23282+65])
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[634,23282+66]..[634,23282+70])
                                                    Pexp_ident "mty2" (typing/includemod.ml[634,23282+66]..[634,23282+70])
                                              ]
                                        ]
                                        expression (typing/includemod.ml[636,23370+14]..[647,23906+43])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (typing/includemod.ml[636,23370+18]..[636,23370+22])
                                                Ppat_var "item" (typing/includemod.ml[636,23370+18]..[636,23370+22])
                                              expression (typing/includemod.ml[637,23395+16]..[637,23395+74])
                                                Pexp_apply
                                                expression (typing/includemod.ml[637,23395+16]..[637,23395+32])
                                                  Pexp_ident "Result.map_error" (typing/includemod.ml[637,23395+16]..[637,23395+32])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (typing/includemod.ml[637,23395+33]..[637,23395+69])
                                                      Pexp_fun
                                                      Nolabel
                                                      None
                                                      pattern (typing/includemod.ml[637,23395+38]..[637,23395+42])
                                                        Ppat_var "diff" (typing/includemod.ml[637,23395+38]..[637,23395+42])
                                                      expression (typing/includemod.ml[637,23395+46]..[637,23395+68])
                                                        Pexp_construct "Error.Module_type" (typing/includemod.ml[637,23395+46]..[637,23395+63])
                                                        Some
                                                          expression (typing/includemod.ml[637,23395+64]..[637,23395+68])
                                                            Pexp_ident "diff" (typing/includemod.ml[637,23395+64]..[637,23395+68])
                                                  <arg>
                                                  Nolabel
                                                    expression (typing/includemod.ml[637,23395+70]..[637,23395+74])
                                                      Pexp_ident "item" (typing/includemod.ml[637,23395+70]..[637,23395+74])
                                                ]
                                          ]
                                          expression (typing/includemod.ml[639,23487+14]..[647,23906+43])
                                            Pexp_let Nonrec
                                            [
                                              <def>
                                                pattern (typing/includemod.ml[639,23487+18]..[639,23487+42])
                                                  Ppat_tuple
                                                  [
                                                    pattern (typing/includemod.ml[639,23487+18]..[639,23487+36])
                                                      Ppat_var "present_at_runtime" (typing/includemod.ml[639,23487+18]..[639,23487+36])
                                                    pattern (typing/includemod.ml[639,23487+38]..[639,23487+42])
                                                      Ppat_var "item" (typing/includemod.ml[639,23487+38]..[639,23487+42])
                                                  ]
                                                expression (typing/includemod.ml[640,23532+16]..[645,23830+58])
                                                  Pexp_match
                                                  expression (typing/includemod.ml[640,23532+22]..[640,23532+48])
                                                    Pexp_tuple
                                                    [
                                                      expression (typing/includemod.ml[640,23532+22]..[640,23532+27])
                                                        Pexp_ident "pres1" (typing/includemod.ml[640,23532+22]..[640,23532+27])
                                                      expression (typing/includemod.ml[640,23532+29]..[640,23532+34])
                                                        Pexp_ident "pres2" (typing/includemod.ml[640,23532+29]..[640,23532+34])
                                                      expression (typing/includemod.ml[640,23532+36]..[640,23532+48])
                                                        Pexp_field
                                                        expression (typing/includemod.ml[640,23532+36]..[640,23532+40])
                                                          Pexp_ident "mty1" (typing/includemod.ml[640,23532+36]..[640,23532+40])
                                                        "md_type" (typing/includemod.ml[640,23532+41]..[640,23532+48])
                                                    ]
                                                  [
                                                    <case>
                                                      pattern (typing/includemod.ml[641,23586+18]..[641,23586+43])
                                                        Ppat_tuple
                                                        [
                                                          pattern (typing/includemod.ml[641,23586+18]..[641,23586+28])
                                                            Ppat_construct "Mp_present" (typing/includemod.ml[641,23586+18]..[641,23586+28])
                                                            None
                                                          pattern (typing/includemod.ml[641,23586+30]..[641,23586+40])
                                                            Ppat_construct "Mp_present" (typing/includemod.ml[641,23586+30]..[641,23586+40])
                                                            None
                                                          pattern (typing/includemod.ml[641,23586+42]..[641,23586+43])
                                                            Ppat_any
                                                        ]
                                                      expression (typing/includemod.ml[641,23586+47]..[641,23586+57])
                                                        Pexp_tuple
                                                        [
                                                          expression (typing/includemod.ml[641,23586+47]..[641,23586+51])
                                                            Pexp_construct "true" (typing/includemod.ml[641,23586+47]..[641,23586+51])
                                                            None
                                                          expression (typing/includemod.ml[641,23586+53]..[641,23586+57])
                                                            Pexp_ident "item" (typing/includemod.ml[641,23586+53]..[641,23586+57])
                                                        ]
                                                    <case>
                                                      pattern (typing/includemod.ml[642,23644+18]..[642,23644+33])
                                                        Ppat_tuple
                                                        [
                                                          pattern (typing/includemod.ml[642,23644+18]..[642,23644+19])
                                                            Ppat_any
                                                          pattern (typing/includemod.ml[642,23644+21]..[642,23644+30])
                                                            Ppat_construct "Mp_absent" (typing/includemod.ml[642,23644+21]..[642,23644+30])
                                                            None
                                                          pattern (typing/includemod.ml[642,23644+32]..[642,23644+33])
                                                            Ppat_any
                                                        ]
                                                      expression (typing/includemod.ml[642,23644+37]..[642,23644+48])
                                                        Pexp_tuple
                                                        [
                                                          expression (typing/includemod.ml[642,23644+37]..[642,23644+42])
                                                            Pexp_construct "false" (typing/includemod.ml[642,23644+37]..[642,23644+42])
                                                            None
                                                          expression (typing/includemod.ml[642,23644+44]..[642,23644+48])
                                                            Pexp_ident "item" (typing/includemod.ml[642,23644+44]..[642,23644+48])
                                                        ]
                                                    <case>
                                                      pattern (typing/includemod.ml[643,23693+18]..[643,23693+53])
                                                        Ppat_tuple
                                                        [
                                                          pattern (typing/includemod.ml[643,23693+18]..[643,23693+27])
                                                            Ppat_construct "Mp_absent" (typing/includemod.ml[643,23693+18]..[643,23693+27])
                                                            None
                                                          pattern (typing/includemod.ml[643,23693+29]..[643,23693+39])
                                                            Ppat_construct "Mp_present" (typing/includemod.ml[643,23693+29]..[643,23693+39])
                                                            None
                                                          pattern (typing/includemod.ml[643,23693+41]..[643,23693+53])
                                                            Ppat_construct "Mty_alias" (typing/includemod.ml[643,23693+41]..[643,23693+50])
                                                            Some
                                                              []
                                                              pattern (typing/includemod.ml[643,23693+51]..[643,23693+53])
                                                                Ppat_var "p1" (typing/includemod.ml[643,23693+51]..[643,23693+53])
                                                        ]
                                                      expression (typing/includemod.ml[644,23750+20]..[644,23750+79])
                                                        Pexp_tuple
                                                        [
                                                          expression (typing/includemod.ml[644,23750+20]..[644,23750+24])
                                                            Pexp_construct "true" (typing/includemod.ml[644,23750+20]..[644,23750+24])
                                                            None
                                                          expression (typing/includemod.ml[644,23750+26]..[644,23750+79])
                                                            Pexp_apply
                                                            expression (typing/includemod.ml[644,23750+26]..[644,23750+36])
                                                              Pexp_ident "Result.map" (typing/includemod.ml[644,23750+26]..[644,23750+36])
                                                            [
                                                              <arg>
                                                              Nolabel
                                                                expression (typing/includemod.ml[644,23750+37]..[644,23750+74])
                                                                  Pexp_fun
                                                                  Nolabel
                                                                  None
                                                                  pattern (typing/includemod.ml[644,23750+42]..[644,23750+43])
                                                                    Ppat_var "i" (typing/includemod.ml[644,23750+42]..[644,23750+43])
                                                                  expression (typing/includemod.ml[644,23750+47]..[644,23750+73])
                                                                    Pexp_construct "Tcoerce_alias" (typing/includemod.ml[644,23750+47]..[644,23750+60])
                                                                    Some
                                                                      expression (typing/includemod.ml[644,23750+61]..[644,23750+73])
Pexp_tuple
[
  expression (typing/includemod.ml[644,23750+62]..[644,23750+65])
    Pexp_ident "env" (typing/includemod.ml[644,23750+62]..[644,23750+65])
  expression (typing/includemod.ml[644,23750+67]..[644,23750+69])
    Pexp_ident "p1" (typing/includemod.ml[644,23750+67]..[644,23750+69])
  expression (typing/includemod.ml[644,23750+71]..[644,23750+72])
    Pexp_ident "i" (typing/includemod.ml[644,23750+71]..[644,23750+72])
]
                                                              <arg>
                                                              Nolabel
                                                                expression (typing/includemod.ml[644,23750+75]..[644,23750+79])
                                                                  Pexp_ident "item" (typing/includemod.ml[644,23750+75]..[644,23750+79])
                                                            ]
                                                        ]
                                                    <case>
                                                      pattern (typing/includemod.ml[645,23830+18]..[645,23830+42])
                                                        Ppat_tuple
                                                        [
                                                          pattern (typing/includemod.ml[645,23830+18]..[645,23830+27])
                                                            Ppat_construct "Mp_absent" (typing/includemod.ml[645,23830+18]..[645,23830+27])
                                                            None
                                                          pattern (typing/includemod.ml[645,23830+29]..[645,23830+39])
                                                            Ppat_construct "Mp_present" (typing/includemod.ml[645,23830+29]..[645,23830+39])
                                                            None
                                                          pattern (typing/includemod.ml[645,23830+41]..[645,23830+42])
                                                            Ppat_any
                                                        ]
                                                      expression (typing/includemod.ml[645,23830+46]..[645,23830+58])
                                                        Pexp_assert
                                                        expression (typing/includemod.ml[645,23830+53]..[645,23830+58])
                                                          Pexp_construct "false" (typing/includemod.ml[645,23830+53]..[645,23830+58])
                                                          None
                                                  ]
                                            ]
                                            expression (typing/includemod.ml[647,23906+14]..[647,23906+43])
                                              Pexp_tuple
                                              [
                                                expression (typing/includemod.ml[647,23906+14]..[647,23906+17])
                                                  Pexp_ident "id1" (typing/includemod.ml[647,23906+14]..[647,23906+17])
                                                expression (typing/includemod.ml[647,23906+19]..[647,23906+23])
                                                  Pexp_ident "item" (typing/includemod.ml[647,23906+19]..[647,23906+23])
                                                expression (typing/includemod.ml[647,23906+25]..[647,23906+43])
                                                  Pexp_ident "present_at_runtime" (typing/includemod.ml[647,23906+25]..[647,23906+43])
                                              ]
                                    <case>
                                      pattern (typing/includemod.ml[649,23966+10]..[649,23966+65])
                                        Ppat_tuple
                                        [
                                          pattern (typing/includemod.ml[649,23966+10]..[649,23966+36])
                                            Ppat_construct "Sig_modtype" (typing/includemod.ml[649,23966+10]..[649,23966+21])
                                            Some
                                              []
                                              pattern (typing/includemod.ml[649,23966+21]..[649,23966+36])
                                                Ppat_tuple
                                                [
                                                  pattern (typing/includemod.ml[649,23966+22]..[649,23966+25])
                                                    Ppat_var "id1" (typing/includemod.ml[649,23966+22]..[649,23966+25])
                                                  pattern (typing/includemod.ml[649,23966+27]..[649,23966+32])
                                                    Ppat_var "info1" (typing/includemod.ml[649,23966+27]..[649,23966+32])
                                                  pattern (typing/includemod.ml[649,23966+34]..[649,23966+35])
                                                    Ppat_any
                                                ]
                                          pattern (typing/includemod.ml[649,23966+38]..[649,23966+65])
                                            Ppat_construct "Sig_modtype" (typing/includemod.ml[649,23966+38]..[649,23966+49])
                                            Some
                                              []
                                              pattern (typing/includemod.ml[649,23966+49]..[649,23966+65])
                                                Ppat_tuple
                                                [
                                                  pattern (typing/includemod.ml[649,23966+50]..[649,23966+54])
                                                    Ppat_var "_id2" (typing/includemod.ml[649,23966+50]..[649,23966+54])
                                                  pattern (typing/includemod.ml[649,23966+56]..[649,23966+61])
                                                    Ppat_var "info2" (typing/includemod.ml[649,23966+56]..[649,23966+61])
                                                  pattern (typing/includemod.ml[649,23966+63]..[649,23966+64])
                                                    Ppat_any
                                                ]
                                        ]
                                      expression (typing/includemod.ml[650,24035+12]..[653,24139+28])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (typing/includemod.ml[650,24035+16]..[650,24035+20])
                                              Ppat_var "item" (typing/includemod.ml[650,24035+16]..[650,24035+20])
                                            expression (typing/includemod.ml[651,24058+14]..[651,24058+65])
                                              Pexp_apply
                                              expression (typing/includemod.ml[651,24058+14]..[651,24058+27])
                                                Pexp_ident "modtype_infos" (typing/includemod.ml[651,24058+14]..[651,24058+27])
                                              [
                                                <arg>
                                                Labelled "loc"
                                                  expression (typing/includemod.ml[651,24058+29]..[651,24058+32])
                                                    Pexp_ident "loc" (typing/includemod.ml[651,24058+29]..[651,24058+32])
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[651,24058+33]..[651,24058+36])
                                                    Pexp_ident "env" (typing/includemod.ml[651,24058+33]..[651,24058+36])
                                                <arg>
                                                Labelled "mark"
                                                  expression (typing/includemod.ml[651,24058+38]..[651,24058+42])
                                                    Pexp_ident "mark" (typing/includemod.ml[651,24058+38]..[651,24058+42])
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[651,24058+44]..[651,24058+49])
                                                    Pexp_ident "subst" (typing/includemod.ml[651,24058+44]..[651,24058+49])
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[651,24058+50]..[651,24058+53])
                                                    Pexp_ident "id1" (typing/includemod.ml[651,24058+50]..[651,24058+53])
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[651,24058+54]..[651,24058+59])
                                                    Pexp_ident "info1" (typing/includemod.ml[651,24058+54]..[651,24058+59])
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[651,24058+60]..[651,24058+65])
                                                    Pexp_ident "info2" (typing/includemod.ml[651,24058+60]..[651,24058+65])
                                              ]
                                        ]
                                        expression (typing/includemod.ml[653,24139+12]..[653,24139+28])
                                          Pexp_tuple
                                          [
                                            expression (typing/includemod.ml[653,24139+12]..[653,24139+15])
                                              Pexp_ident "id1" (typing/includemod.ml[653,24139+12]..[653,24139+15])
                                            expression (typing/includemod.ml[653,24139+17]..[653,24139+21])
                                              Pexp_ident "item" (typing/includemod.ml[653,24139+17]..[653,24139+21])
                                            expression (typing/includemod.ml[653,24139+23]..[653,24139+28])
                                              Pexp_construct "false" (typing/includemod.ml[653,24139+23]..[653,24139+28])
                                              None
                                          ]
                                    <case>
                                      pattern (typing/includemod.ml[654,24168+10]..[654,24168+67])
                                        Ppat_tuple
                                        [
                                          pattern (typing/includemod.ml[654,24168+10]..[654,24168+37])
                                            Ppat_construct "Sig_class" (typing/includemod.ml[654,24168+10]..[654,24168+19])
                                            Some
                                              []
                                              pattern (typing/includemod.ml[654,24168+19]..[654,24168+37])
                                                Ppat_tuple
                                                [
                                                  pattern (typing/includemod.ml[654,24168+20]..[654,24168+23])
                                                    Ppat_var "id1" (typing/includemod.ml[654,24168+20]..[654,24168+23])
                                                  pattern (typing/includemod.ml[654,24168+25]..[654,24168+30])
                                                    Ppat_var "decl1" (typing/includemod.ml[654,24168+25]..[654,24168+30])
                                                  pattern (typing/includemod.ml[654,24168+32]..[654,24168+33])
                                                    Ppat_any
                                                  pattern (typing/includemod.ml[654,24168+35]..[654,24168+36])
                                                    Ppat_any
                                                ]
                                          pattern (typing/includemod.ml[654,24168+39]..[654,24168+67])
                                            Ppat_construct "Sig_class" (typing/includemod.ml[654,24168+39]..[654,24168+48])
                                            Some
                                              []
                                              pattern (typing/includemod.ml[654,24168+48]..[654,24168+67])
                                                Ppat_tuple
                                                [
                                                  pattern (typing/includemod.ml[654,24168+49]..[654,24168+53])
                                                    Ppat_var "_id2" (typing/includemod.ml[654,24168+49]..[654,24168+53])
                                                  pattern (typing/includemod.ml[654,24168+55]..[654,24168+60])
                                                    Ppat_var "decl2" (typing/includemod.ml[654,24168+55]..[654,24168+60])
                                                  pattern (typing/includemod.ml[654,24168+62]..[654,24168+63])
                                                    Ppat_any
                                                  pattern (typing/includemod.ml[654,24168+65]..[654,24168+66])
                                                    Ppat_any
                                                ]
                                        ]
                                      expression (typing/includemod.ml[655,24239+12]..[658,24341+27])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (typing/includemod.ml[655,24239+16]..[655,24239+20])
                                              Ppat_var "item" (typing/includemod.ml[655,24239+16]..[655,24239+20])
                                            expression (typing/includemod.ml[656,24262+14]..[656,24262+63])
                                              Pexp_apply
                                              expression (typing/includemod.ml[656,24262+14]..[656,24262+32])
                                                Pexp_ident "class_declarations" (typing/includemod.ml[656,24262+14]..[656,24262+32])
                                              [
                                                <arg>
                                                Labelled "old_env"
                                                  expression (typing/includemod.ml[656,24262+34]..[656,24262+41])
                                                    Pexp_ident "old_env" (typing/includemod.ml[656,24262+34]..[656,24262+41])
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[656,24262+42]..[656,24262+45])
                                                    Pexp_ident "env" (typing/includemod.ml[656,24262+42]..[656,24262+45])
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[656,24262+46]..[656,24262+51])
                                                    Pexp_ident "subst" (typing/includemod.ml[656,24262+46]..[656,24262+51])
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[656,24262+52]..[656,24262+57])
                                                    Pexp_ident "decl1" (typing/includemod.ml[656,24262+52]..[656,24262+57])
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[656,24262+58]..[656,24262+63])
                                                    Pexp_ident "decl2" (typing/includemod.ml[656,24262+58]..[656,24262+63])
                                              ]
                                        ]
                                        expression (typing/includemod.ml[658,24341+12]..[658,24341+27])
                                          Pexp_tuple
                                          [
                                            expression (typing/includemod.ml[658,24341+12]..[658,24341+15])
                                              Pexp_ident "id1" (typing/includemod.ml[658,24341+12]..[658,24341+15])
                                            expression (typing/includemod.ml[658,24341+17]..[658,24341+21])
                                              Pexp_ident "item" (typing/includemod.ml[658,24341+17]..[658,24341+21])
                                            expression (typing/includemod.ml[658,24341+23]..[658,24341+27])
                                              Pexp_construct "true" (typing/includemod.ml[658,24341+23]..[658,24341+27])
                                              None
                                          ]
                                    <case>
                                      pattern (typing/includemod.ml[659,24369+10]..[659,24369+77])
                                        Ppat_tuple
                                        [
                                          pattern (typing/includemod.ml[659,24369+10]..[659,24369+42])
                                            Ppat_construct "Sig_class_type" (typing/includemod.ml[659,24369+10]..[659,24369+24])
                                            Some
                                              []
                                              pattern (typing/includemod.ml[659,24369+24]..[659,24369+42])
                                                Ppat_tuple
                                                [
                                                  pattern (typing/includemod.ml[659,24369+25]..[659,24369+28])
                                                    Ppat_var "id1" (typing/includemod.ml[659,24369+25]..[659,24369+28])
                                                  pattern (typing/includemod.ml[659,24369+30]..[659,24369+35])
                                                    Ppat_var "info1" (typing/includemod.ml[659,24369+30]..[659,24369+35])
                                                  pattern (typing/includemod.ml[659,24369+37]..[659,24369+38])
                                                    Ppat_any
                                                  pattern (typing/includemod.ml[659,24369+40]..[659,24369+41])
                                                    Ppat_any
                                                ]
                                          pattern (typing/includemod.ml[659,24369+44]..[659,24369+77])
                                            Ppat_construct "Sig_class_type" (typing/includemod.ml[659,24369+44]..[659,24369+58])
                                            Some
                                              []
                                              pattern (typing/includemod.ml[659,24369+58]..[659,24369+77])
                                                Ppat_tuple
                                                [
                                                  pattern (typing/includemod.ml[659,24369+59]..[659,24369+63])
                                                    Ppat_var "_id2" (typing/includemod.ml[659,24369+59]..[659,24369+63])
                                                  pattern (typing/includemod.ml[659,24369+65]..[659,24369+70])
                                                    Ppat_var "info2" (typing/includemod.ml[659,24369+65]..[659,24369+70])
                                                  pattern (typing/includemod.ml[659,24369+72]..[659,24369+73])
                                                    Ppat_any
                                                  pattern (typing/includemod.ml[659,24369+75]..[659,24369+76])
                                                    Ppat_any
                                                ]
                                        ]
                                      expression (typing/includemod.ml[660,24450+12]..[663,24562+28])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (typing/includemod.ml[660,24450+16]..[660,24450+20])
                                              Ppat_var "item" (typing/includemod.ml[660,24450+16]..[660,24450+20])
                                            expression (typing/includemod.ml[661,24473+14]..[661,24473+73])
                                              Pexp_apply
                                              expression (typing/includemod.ml[661,24473+14]..[661,24473+37])
                                                Pexp_ident "class_type_declarations" (typing/includemod.ml[661,24473+14]..[661,24473+37])
                                              [
                                                <arg>
                                                Labelled "loc"
                                                  expression (typing/includemod.ml[661,24473+39]..[661,24473+42])
                                                    Pexp_ident "loc" (typing/includemod.ml[661,24473+39]..[661,24473+42])
                                                <arg>
                                                Labelled "old_env"
                                                  expression (typing/includemod.ml[661,24473+44]..[661,24473+51])
                                                    Pexp_ident "old_env" (typing/includemod.ml[661,24473+44]..[661,24473+51])
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[661,24473+52]..[661,24473+55])
                                                    Pexp_ident "env" (typing/includemod.ml[661,24473+52]..[661,24473+55])
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[661,24473+56]..[661,24473+61])
                                                    Pexp_ident "subst" (typing/includemod.ml[661,24473+56]..[661,24473+61])
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[661,24473+62]..[661,24473+67])
                                                    Pexp_ident "info1" (typing/includemod.ml[661,24473+62]..[661,24473+67])
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[661,24473+68]..[661,24473+73])
                                                    Pexp_ident "info2" (typing/includemod.ml[661,24473+68]..[661,24473+73])
                                              ]
                                        ]
                                        expression (typing/includemod.ml[663,24562+12]..[663,24562+28])
                                          Pexp_tuple
                                          [
                                            expression (typing/includemod.ml[663,24562+12]..[663,24562+15])
                                              Pexp_ident "id1" (typing/includemod.ml[663,24562+12]..[663,24562+15])
                                            expression (typing/includemod.ml[663,24562+17]..[663,24562+21])
                                              Pexp_ident "item" (typing/includemod.ml[663,24562+17]..[663,24562+21])
                                            expression (typing/includemod.ml[663,24562+23]..[663,24562+28])
                                              Pexp_construct "false" (typing/includemod.ml[663,24562+23]..[663,24562+28])
                                              None
                                          ]
                                    <case>
                                      pattern (typing/includemod.ml[664,24591+10]..[664,24591+11])
                                        Ppat_any
                                      expression (typing/includemod.ml[665,24606+12]..[665,24606+24])
                                        Pexp_assert
                                        expression (typing/includemod.ml[665,24606+19]..[665,24606+24])
                                          Pexp_construct "false" (typing/includemod.ml[665,24606+19]..[665,24606+24])
                                          None
                                  ]
                            ]
                            expression (typing/includemod.ml[667,24640+6]..[673,24848+41])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (typing/includemod.ml[667,24640+10]..[667,24640+21])
                                    Ppat_tuple
                                    [
                                      pattern (typing/includemod.ml[667,24640+10]..[667,24640+13])
                                        Ppat_var "oks" (typing/includemod.ml[667,24640+10]..[667,24640+13])
                                      pattern (typing/includemod.ml[667,24640+15]..[667,24640+21])
                                        Ppat_var "errors" (typing/includemod.ml[667,24640+15]..[667,24640+21])
                                    ]
                                  expression (typing/includemod.ml[668,24664+8]..[668,24664+61])
                                    Pexp_apply
                                    expression (typing/includemod.ml[668,24664+8]..[668,24664+28])
                                      Pexp_ident "signature_components" (typing/includemod.ml[668,24664+8]..[668,24664+28])
                                    [
                                      <arg>
                                      Labelled "loc"
                                        expression (typing/includemod.ml[668,24664+30]..[668,24664+33])
                                          Pexp_ident "loc" (typing/includemod.ml[668,24664+30]..[668,24664+33])
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[668,24664+34]..[668,24664+41])
                                          Pexp_ident "old_env" (typing/includemod.ml[668,24664+34]..[668,24664+41])
                                      <arg>
                                      Labelled "mark"
                                        expression (typing/includemod.ml[668,24664+43]..[668,24664+47])
                                          Pexp_ident "mark" (typing/includemod.ml[668,24664+43]..[668,24664+47])
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[668,24664+48]..[668,24664+51])
                                          Pexp_ident "env" (typing/includemod.ml[668,24664+48]..[668,24664+51])
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[668,24664+52]..[668,24664+57])
                                          Pexp_ident "subst" (typing/includemod.ml[668,24664+52]..[668,24664+57])
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[668,24664+58]..[668,24664+61])
                                          Pexp_ident "rem" (typing/includemod.ml[668,24664+58]..[668,24664+61])
                                    ]
                              ]
                              expression (typing/includemod.ml[670,24735+6]..[673,24848+41])
                                Pexp_match
                                expression (typing/includemod.ml[670,24735+12]..[670,24735+16])
                                  Pexp_ident "item" (typing/includemod.ml[670,24735+12]..[670,24735+16])
                                [
                                  <case>
                                    pattern (typing/includemod.ml[671,24757+8]..[671,24757+12])
                                      Ppat_construct "Ok" (typing/includemod.ml[671,24757+8]..[671,24757+10])
                                      Some
                                        []
                                        pattern (typing/includemod.ml[671,24757+11]..[671,24757+12])
                                          Ppat_var "x" (typing/includemod.ml[671,24757+11]..[671,24757+12])
                                    <when>
                                      expression (typing/includemod.ml[671,24757+18]..[671,24757+36])
                                        Pexp_ident "present_at_runtime" (typing/includemod.ml[671,24757+18]..[671,24757+36])
                                    expression (typing/includemod.ml[671,24757+40]..[671,24757+62])
                                      Pexp_tuple
                                      [
                                        expression (typing/includemod.ml[671,24757+40]..[671,24757+54])
                                          Pexp_construct "::" (typing/includemod.ml[671,24757+48]..[671,24757+50])
                                          Some
                                            expression (typing/includemod.ml[671,24757+40]..[671,24757+54]) ghost
                                              Pexp_tuple
                                              [
                                                expression (typing/includemod.ml[671,24757+40]..[671,24757+47])
                                                  Pexp_tuple
                                                  [
                                                    expression (typing/includemod.ml[671,24757+41]..[671,24757+44])
                                                      Pexp_ident "pos" (typing/includemod.ml[671,24757+41]..[671,24757+44])
                                                    expression (typing/includemod.ml[671,24757+45]..[671,24757+46])
                                                      Pexp_ident "x" (typing/includemod.ml[671,24757+45]..[671,24757+46])
                                                  ]
                                                expression (typing/includemod.ml[671,24757+51]..[671,24757+54])
                                                  Pexp_ident "oks" (typing/includemod.ml[671,24757+51]..[671,24757+54])
                                              ]
                                        expression (typing/includemod.ml[671,24757+56]..[671,24757+62])
                                          Pexp_ident "errors" (typing/includemod.ml[671,24757+56]..[671,24757+62])
                                      ]
                                  <case>
                                    pattern (typing/includemod.ml[672,24820+8]..[672,24820+12])
                                      Ppat_construct "Ok" (typing/includemod.ml[672,24820+8]..[672,24820+10])
                                      Some
                                        []
                                        pattern (typing/includemod.ml[672,24820+11]..[672,24820+12])
                                          Ppat_any
                                    expression (typing/includemod.ml[672,24820+16]..[672,24820+27])
                                      Pexp_tuple
                                      [
                                        expression (typing/includemod.ml[672,24820+16]..[672,24820+19])
                                          Pexp_ident "oks" (typing/includemod.ml[672,24820+16]..[672,24820+19])
                                        expression (typing/includemod.ml[672,24820+21]..[672,24820+27])
                                          Pexp_ident "errors" (typing/includemod.ml[672,24820+21]..[672,24820+27])
                                      ]
                                  <case>
                                    pattern (typing/includemod.ml[673,24848+8]..[673,24848+15])
                                      Ppat_construct "Error" (typing/includemod.ml[673,24848+8]..[673,24848+13])
                                      Some
                                        []
                                        pattern (typing/includemod.ml[673,24848+14]..[673,24848+15])
                                          Ppat_var "y" (typing/includemod.ml[673,24848+14]..[673,24848+15])
                                    expression (typing/includemod.ml[673,24848+19]..[673,24848+41])
                                      Pexp_tuple
                                      [
                                        expression (typing/includemod.ml[673,24848+19]..[673,24848+22])
                                          Pexp_ident "oks" (typing/includemod.ml[673,24848+19]..[673,24848+22])
                                        expression (typing/includemod.ml[673,24848+25]..[673,24848+41])
                                          Pexp_construct "::" (typing/includemod.ml[673,24848+32]..[673,24848+34])
                                          Some
                                            expression (typing/includemod.ml[673,24848+25]..[673,24848+41]) ghost
                                              Pexp_tuple
                                              [
                                                expression (typing/includemod.ml[673,24848+25]..[673,24848+31])
                                                  Pexp_tuple
                                                  [
                                                    expression (typing/includemod.ml[673,24848+26]..[673,24848+28])
                                                      Pexp_ident "id" (typing/includemod.ml[673,24848+26]..[673,24848+28])
                                                    expression (typing/includemod.ml[673,24848+29]..[673,24848+30])
                                                      Pexp_ident "y" (typing/includemod.ml[673,24848+29]..[673,24848+30])
                                                  ]
                                                expression (typing/includemod.ml[673,24848+35]..[673,24848+41])
                                                  Pexp_ident "errors" (typing/includemod.ml[673,24848+35]..[673,24848+41])
                                              ]
                                      ]
                                ]
                      ]
      <def>
        pattern (typing/includemod.ml[675,24891+4]..[675,24891+23])
          Ppat_var "module_declarations" (typing/includemod.ml[675,24891+4]..[675,24891+23])
        expression (typing/includemod.ml[675,24891+24]..[686,25262+30]) ghost
          Pexp_fun
          Labelled "loc"
          None
          pattern (typing/includemod.ml[675,24891+25]..[675,24891+28])
            Ppat_var "loc" (typing/includemod.ml[675,24891+25]..[675,24891+28])
          expression (typing/includemod.ml[675,24891+29]..[686,25262+30]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (typing/includemod.ml[675,24891+29]..[675,24891+32])
              Ppat_var "env" (typing/includemod.ml[675,24891+29]..[675,24891+32])
            expression (typing/includemod.ml[675,24891+33]..[686,25262+30]) ghost
              Pexp_fun
              Labelled "mark"
              None
              pattern (typing/includemod.ml[675,24891+34]..[675,24891+38])
                Ppat_var "mark" (typing/includemod.ml[675,24891+34]..[675,24891+38])
              expression (typing/includemod.ml[675,24891+40]..[686,25262+30]) ghost
                Pexp_fun
                Nolabel
                None
                pattern (typing/includemod.ml[675,24891+40]..[675,24891+45])
                  Ppat_var "subst" (typing/includemod.ml[675,24891+40]..[675,24891+45])
                expression (typing/includemod.ml[675,24891+46]..[686,25262+30]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (typing/includemod.ml[675,24891+46]..[675,24891+49])
                    Ppat_var "id1" (typing/includemod.ml[675,24891+46]..[675,24891+49])
                  expression (typing/includemod.ml[675,24891+50]..[686,25262+30]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (typing/includemod.ml[675,24891+50]..[675,24891+53])
                      Ppat_var "md1" (typing/includemod.ml[675,24891+50]..[675,24891+53])
                    expression (typing/includemod.ml[675,24891+54]..[686,25262+30]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (typing/includemod.ml[675,24891+54]..[675,24891+57])
                        Ppat_var "md2" (typing/includemod.ml[675,24891+54]..[675,24891+57])
                      expression (typing/includemod.ml[676,24951+2]..[686,25262+30])
                        Pexp_sequence
                        expression (typing/includemod.ml[676,24951+2]..[681,25083+20])
                          Pexp_apply
                          expression (typing/includemod.ml[676,24951+2]..[676,24951+43])
                            Pexp_ident "Builtin_attributes.check_alerts_inclusion" (typing/includemod.ml[676,24951+2]..[676,24951+43])
                          [
                            <arg>
                            Labelled "def"
                              expression (typing/includemod.ml[677,24995+9]..[677,24995+19])
                                Pexp_field
                                expression (typing/includemod.ml[677,24995+9]..[677,24995+12])
                                  Pexp_ident "md1" (typing/includemod.ml[677,24995+9]..[677,24995+12])
                                "md_loc" (typing/includemod.ml[677,24995+13]..[677,24995+19])
                            <arg>
                            Labelled "use"
                              expression (typing/includemod.ml[678,25015+9]..[678,25015+19])
                                Pexp_field
                                expression (typing/includemod.ml[678,25015+9]..[678,25015+12])
                                  Pexp_ident "md2" (typing/includemod.ml[678,25015+9]..[678,25015+12])
                                "md_loc" (typing/includemod.ml[678,25015+13]..[678,25015+19])
                            <arg>
                            Nolabel
                              expression (typing/includemod.ml[679,25035+4]..[679,25035+7])
                                Pexp_ident "loc" (typing/includemod.ml[679,25035+4]..[679,25035+7])
                            <arg>
                            Nolabel
                              expression (typing/includemod.ml[680,25043+4]..[680,25043+21])
                                Pexp_field
                                expression (typing/includemod.ml[680,25043+4]..[680,25043+7])
                                  Pexp_ident "md1" (typing/includemod.ml[680,25043+4]..[680,25043+7])
                                "md_attributes" (typing/includemod.ml[680,25043+8]..[680,25043+21])
                            <arg>
                            Nolabel
                              expression (typing/includemod.ml[680,25043+22]..[680,25043+39])
                                Pexp_field
                                expression (typing/includemod.ml[680,25043+22]..[680,25043+25])
                                  Pexp_ident "md2" (typing/includemod.ml[680,25043+22]..[680,25043+25])
                                "md_attributes" (typing/includemod.ml[680,25043+26]..[680,25043+39])
                            <arg>
                            Nolabel
                              expression (typing/includemod.ml[681,25083+4]..[681,25083+20])
                                Pexp_apply
                                expression (typing/includemod.ml[681,25083+5]..[681,25083+15])
                                  Pexp_ident "Ident.name" (typing/includemod.ml[681,25083+5]..[681,25083+15])
                                [
                                  <arg>
                                  Nolabel
                                    expression (typing/includemod.ml[681,25083+16]..[681,25083+19])
                                      Pexp_ident "id1" (typing/includemod.ml[681,25083+16]..[681,25083+19])
                                ]
                          ]
                        expression (typing/includemod.ml[682,25105+2]..[686,25262+30])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (typing/includemod.ml[682,25105+6]..[682,25105+8])
                                Ppat_var "p1" (typing/includemod.ml[682,25105+6]..[682,25105+8])
                              expression (typing/includemod.ml[682,25105+11]..[682,25105+26])
                                Pexp_construct "Path.Pident" (typing/includemod.ml[682,25105+11]..[682,25105+22])
                                Some
                                  expression (typing/includemod.ml[682,25105+23]..[682,25105+26])
                                    Pexp_ident "id1" (typing/includemod.ml[682,25105+23]..[682,25105+26])
                          ]
                          expression (typing/includemod.ml[683,25135+2]..[686,25262+30])
                            Pexp_sequence
                            expression (typing/includemod.ml[683,25135+2]..[684,25164+35])
                              Pexp_ifthenelse
                              expression (typing/includemod.ml[683,25135+5]..[683,25135+23])
                                Pexp_apply
                                expression (typing/includemod.ml[683,25135+5]..[683,25135+18])
                                  Pexp_ident "mark_positive" (typing/includemod.ml[683,25135+5]..[683,25135+18])
                                [
                                  <arg>
                                  Nolabel
                                    expression (typing/includemod.ml[683,25135+19]..[683,25135+23])
                                      Pexp_ident "mark" (typing/includemod.ml[683,25135+19]..[683,25135+23])
                                ]
                              expression (typing/includemod.ml[684,25164+4]..[684,25164+35])
                                Pexp_apply
                                expression (typing/includemod.ml[684,25164+4]..[684,25164+24])
                                  Pexp_ident "Env.mark_module_used" (typing/includemod.ml[684,25164+4]..[684,25164+24])
                                [
                                  <arg>
                                  Nolabel
                                    expression (typing/includemod.ml[684,25164+25]..[684,25164+35])
                                      Pexp_field
                                      expression (typing/includemod.ml[684,25164+25]..[684,25164+28])
                                        Pexp_ident "md1" (typing/includemod.ml[684,25164+25]..[684,25164+28])
                                      "md_uid" (typing/includemod.ml[684,25164+29]..[684,25164+35])
                                ]
                              None
                            expression (typing/includemod.ml[685,25201+2]..[686,25262+30])
                              Pexp_apply
                              expression (typing/includemod.ml[685,25201+2]..[685,25201+23])
                                Pexp_ident "strengthened_modtypes" (typing/includemod.ml[685,25201+2]..[685,25201+23])
                              [
                                <arg>
                                Labelled "loc"
                                  expression (typing/includemod.ml[685,25201+25]..[685,25201+28])
                                    Pexp_ident "loc" (typing/includemod.ml[685,25201+25]..[685,25201+28])
                                <arg>
                                Labelled "aliasable"
                                  expression (typing/includemod.ml[685,25201+40]..[685,25201+44])
                                    Pexp_construct "true" (typing/includemod.ml[685,25201+40]..[685,25201+44])
                                    None
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[685,25201+45]..[685,25201+48])
                                    Pexp_ident "env" (typing/includemod.ml[685,25201+45]..[685,25201+48])
                                <arg>
                                Labelled "mark"
                                  expression (typing/includemod.ml[685,25201+50]..[685,25201+54])
                                    Pexp_ident "mark" (typing/includemod.ml[685,25201+50]..[685,25201+54])
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[685,25201+55]..[685,25201+60])
                                    Pexp_ident "subst" (typing/includemod.ml[685,25201+55]..[685,25201+60])
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[686,25262+4]..[686,25262+15])
                                    Pexp_field
                                    expression (typing/includemod.ml[686,25262+4]..[686,25262+7])
                                      Pexp_ident "md1" (typing/includemod.ml[686,25262+4]..[686,25262+7])
                                    "md_type" (typing/includemod.ml[686,25262+8]..[686,25262+15])
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[686,25262+16]..[686,25262+18])
                                    Pexp_ident "p1" (typing/includemod.ml[686,25262+16]..[686,25262+18])
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[686,25262+19]..[686,25262+30])
                                    Pexp_field
                                    expression (typing/includemod.ml[686,25262+19]..[686,25262+22])
                                      Pexp_ident "md2" (typing/includemod.ml[686,25262+19]..[686,25262+22])
                                    "md_type" (typing/includemod.ml[686,25262+23]..[686,25262+30])
                              ]
      <def>
        pattern (typing/includemod.ml[690,25346+4]..[690,25346+17])
          Ppat_var "modtype_infos" (typing/includemod.ml[690,25346+4]..[690,25346+17])
        expression (typing/includemod.ml[690,25346+18]..[708,25990+73]) ghost
          Pexp_fun
          Labelled "loc"
          None
          pattern (typing/includemod.ml[690,25346+19]..[690,25346+22])
            Ppat_var "loc" (typing/includemod.ml[690,25346+19]..[690,25346+22])
          expression (typing/includemod.ml[690,25346+23]..[708,25990+73]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (typing/includemod.ml[690,25346+23]..[690,25346+26])
              Ppat_var "env" (typing/includemod.ml[690,25346+23]..[690,25346+26])
            expression (typing/includemod.ml[690,25346+27]..[708,25990+73]) ghost
              Pexp_fun
              Labelled "mark"
              None
              pattern (typing/includemod.ml[690,25346+28]..[690,25346+32])
                Ppat_var "mark" (typing/includemod.ml[690,25346+28]..[690,25346+32])
              expression (typing/includemod.ml[690,25346+33]..[708,25990+73]) ghost
                Pexp_fun
                Nolabel
                None
                pattern (typing/includemod.ml[690,25346+33]..[690,25346+38])
                  Ppat_var "subst" (typing/includemod.ml[690,25346+33]..[690,25346+38])
                expression (typing/includemod.ml[690,25346+39]..[708,25990+73]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (typing/includemod.ml[690,25346+39]..[690,25346+41])
                    Ppat_var "id" (typing/includemod.ml[690,25346+39]..[690,25346+41])
                  expression (typing/includemod.ml[690,25346+42]..[708,25990+73]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (typing/includemod.ml[690,25346+42]..[690,25346+47])
                      Ppat_var "info1" (typing/includemod.ml[690,25346+42]..[690,25346+47])
                    expression (typing/includemod.ml[690,25346+48]..[708,25990+73]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (typing/includemod.ml[690,25346+48]..[690,25346+53])
                        Ppat_var "info2" (typing/includemod.ml[690,25346+48]..[690,25346+53])
                      expression (typing/includemod.ml[691,25402+2]..[708,25990+73])
                        Pexp_sequence
                        expression (typing/includemod.ml[691,25402+2]..[696,25546+19])
                          Pexp_apply
                          expression (typing/includemod.ml[691,25402+2]..[691,25402+43])
                            Pexp_ident "Builtin_attributes.check_alerts_inclusion" (typing/includemod.ml[691,25402+2]..[691,25402+43])
                          [
                            <arg>
                            Labelled "def"
                              expression (typing/includemod.ml[692,25446+9]..[692,25446+22])
                                Pexp_field
                                expression (typing/includemod.ml[692,25446+9]..[692,25446+14])
                                  Pexp_ident "info1" (typing/includemod.ml[692,25446+9]..[692,25446+14])
                                "mtd_loc" (typing/includemod.ml[692,25446+15]..[692,25446+22])
                            <arg>
                            Labelled "use"
                              expression (typing/includemod.ml[693,25469+9]..[693,25469+22])
                                Pexp_field
                                expression (typing/includemod.ml[693,25469+9]..[693,25469+14])
                                  Pexp_ident "info2" (typing/includemod.ml[693,25469+9]..[693,25469+14])
                                "mtd_loc" (typing/includemod.ml[693,25469+15]..[693,25469+22])
                            <arg>
                            Nolabel
                              expression (typing/includemod.ml[694,25492+4]..[694,25492+7])
                                Pexp_ident "loc" (typing/includemod.ml[694,25492+4]..[694,25492+7])
                            <arg>
                            Nolabel
                              expression (typing/includemod.ml[695,25500+4]..[695,25500+24])
                                Pexp_field
                                expression (typing/includemod.ml[695,25500+4]..[695,25500+9])
                                  Pexp_ident "info1" (typing/includemod.ml[695,25500+4]..[695,25500+9])
                                "mtd_attributes" (typing/includemod.ml[695,25500+10]..[695,25500+24])
                            <arg>
                            Nolabel
                              expression (typing/includemod.ml[695,25500+25]..[695,25500+45])
                                Pexp_field
                                expression (typing/includemod.ml[695,25500+25]..[695,25500+30])
                                  Pexp_ident "info2" (typing/includemod.ml[695,25500+25]..[695,25500+30])
                                "mtd_attributes" (typing/includemod.ml[695,25500+31]..[695,25500+45])
                            <arg>
                            Nolabel
                              expression (typing/includemod.ml[696,25546+4]..[696,25546+19])
                                Pexp_apply
                                expression (typing/includemod.ml[696,25546+5]..[696,25546+15])
                                  Pexp_ident "Ident.name" (typing/includemod.ml[696,25546+5]..[696,25546+15])
                                [
                                  <arg>
                                  Nolabel
                                    expression (typing/includemod.ml[696,25546+16]..[696,25546+18])
                                      Pexp_ident "id" (typing/includemod.ml[696,25546+16]..[696,25546+18])
                                ]
                          ]
                        expression (typing/includemod.ml[697,25567+2]..[708,25990+73])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (typing/includemod.ml[697,25567+6]..[697,25567+11])
                                Ppat_var "info2" (typing/includemod.ml[697,25567+6]..[697,25567+11])
                              expression (typing/includemod.ml[697,25567+14]..[697,25567+56])
                                Pexp_apply
                                expression (typing/includemod.ml[697,25567+14]..[697,25567+39])
                                  Pexp_ident "Subst.modtype_declaration" (typing/includemod.ml[697,25567+14]..[697,25567+39])
                                [
                                  <arg>
                                  Nolabel
                                    expression (typing/includemod.ml[697,25567+40]..[697,25567+44])
                                      Pexp_construct "Keep" (typing/includemod.ml[697,25567+40]..[697,25567+44])
                                      None
                                  <arg>
                                  Nolabel
                                    expression (typing/includemod.ml[697,25567+45]..[697,25567+50])
                                      Pexp_ident "subst" (typing/includemod.ml[697,25567+45]..[697,25567+50])
                                  <arg>
                                  Nolabel
                                    expression (typing/includemod.ml[697,25567+51]..[697,25567+56])
                                      Pexp_ident "info2" (typing/includemod.ml[697,25567+51]..[697,25567+56])
                                ]
                          ]
                          expression (typing/includemod.ml[698,25627+2]..[708,25990+73])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (typing/includemod.ml[698,25627+6]..[698,25627+7])
                                  Ppat_var "r" (typing/includemod.ml[698,25627+6]..[698,25627+7])
                                expression (typing/includemod.ml[699,25637+4]..[705,25875+75])
                                  Pexp_match
                                  expression (typing/includemod.ml[699,25637+10]..[699,25637+42])
                                    Pexp_tuple
                                    [
                                      expression (typing/includemod.ml[699,25637+11]..[699,25637+25])
                                        Pexp_field
                                        expression (typing/includemod.ml[699,25637+11]..[699,25637+16])
                                          Pexp_ident "info1" (typing/includemod.ml[699,25637+11]..[699,25637+16])
                                        "mtd_type" (typing/includemod.ml[699,25637+17]..[699,25637+25])
                                      expression (typing/includemod.ml[699,25637+27]..[699,25637+41])
                                        Pexp_field
                                        expression (typing/includemod.ml[699,25637+27]..[699,25637+32])
                                          Pexp_ident "info2" (typing/includemod.ml[699,25637+27]..[699,25637+32])
                                        "mtd_type" (typing/includemod.ml[699,25637+33]..[699,25637+41])
                                    ]
                                  [
                                    <case>
                                      pattern (typing/includemod.ml[700,25685+6]..[700,25685+18])
                                        Ppat_tuple
                                        [
                                          pattern (typing/includemod.ml[700,25685+7]..[700,25685+11])
                                            Ppat_construct "None" (typing/includemod.ml[700,25685+7]..[700,25685+11])
                                            None
                                          pattern (typing/includemod.ml[700,25685+13]..[700,25685+17])
                                            Ppat_construct "None" (typing/includemod.ml[700,25685+13]..[700,25685+17])
                                            None
                                        ]
                                      expression (typing/includemod.ml[700,25685+22]..[700,25685+37])
                                        Pexp_construct "Ok" (typing/includemod.ml[700,25685+22]..[700,25685+24])
                                        Some
                                          expression (typing/includemod.ml[700,25685+25]..[700,25685+37])
                                            Pexp_construct "Tcoerce_none" (typing/includemod.ml[700,25685+25]..[700,25685+37])
                                            None
                                    <case>
                                      pattern (typing/includemod.ml[701,25723+6]..[701,25723+20])
                                        Ppat_tuple
                                        [
                                          pattern (typing/includemod.ml[701,25723+7]..[701,25723+13])
                                            Ppat_construct "Some" (typing/includemod.ml[701,25723+7]..[701,25723+11])
                                            Some
                                              []
                                              pattern (typing/includemod.ml[701,25723+12]..[701,25723+13])
                                                Ppat_any
                                          pattern (typing/includemod.ml[701,25723+15]..[701,25723+19])
                                            Ppat_construct "None" (typing/includemod.ml[701,25723+15]..[701,25723+19])
                                            None
                                        ]
                                      expression (typing/includemod.ml[701,25723+24]..[701,25723+39])
                                        Pexp_construct "Ok" (typing/includemod.ml[701,25723+24]..[701,25723+26])
                                        Some
                                          expression (typing/includemod.ml[701,25723+27]..[701,25723+39])
                                            Pexp_construct "Tcoerce_none" (typing/includemod.ml[701,25723+27]..[701,25723+39])
                                            None
                                    <case>
                                      pattern (typing/includemod.ml[702,25763+6]..[702,25763+28])
                                        Ppat_tuple
                                        [
                                          pattern (typing/includemod.ml[702,25763+7]..[702,25763+16])
                                            Ppat_construct "Some" (typing/includemod.ml[702,25763+7]..[702,25763+11])
                                            Some
                                              []
                                              pattern (typing/includemod.ml[702,25763+12]..[702,25763+16])
                                                Ppat_var "mty1" (typing/includemod.ml[702,25763+12]..[702,25763+16])
                                          pattern (typing/includemod.ml[702,25763+18]..[702,25763+27])
                                            Ppat_construct "Some" (typing/includemod.ml[702,25763+18]..[702,25763+22])
                                            Some
                                              []
                                              pattern (typing/includemod.ml[702,25763+23]..[702,25763+27])
                                                Ppat_var "mty2" (typing/includemod.ml[702,25763+23]..[702,25763+27])
                                        ]
                                      expression (typing/includemod.ml[703,25795+8]..[703,25795+52])
                                        Pexp_apply
                                        expression (typing/includemod.ml[703,25795+8]..[703,25795+27])
                                          Pexp_ident "check_modtype_equiv" (typing/includemod.ml[703,25795+8]..[703,25795+27])
                                        [
                                          <arg>
                                          Labelled "loc"
                                            expression (typing/includemod.ml[703,25795+29]..[703,25795+32])
                                              Pexp_ident "loc" (typing/includemod.ml[703,25795+29]..[703,25795+32])
                                          <arg>
                                          Nolabel
                                            expression (typing/includemod.ml[703,25795+33]..[703,25795+36])
                                              Pexp_ident "env" (typing/includemod.ml[703,25795+33]..[703,25795+36])
                                          <arg>
                                          Labelled "mark"
                                            expression (typing/includemod.ml[703,25795+38]..[703,25795+42])
                                              Pexp_ident "mark" (typing/includemod.ml[703,25795+38]..[703,25795+42])
                                          <arg>
                                          Nolabel
                                            expression (typing/includemod.ml[703,25795+43]..[703,25795+47])
                                              Pexp_ident "mty1" (typing/includemod.ml[703,25795+43]..[703,25795+47])
                                          <arg>
                                          Nolabel
                                            expression (typing/includemod.ml[703,25795+48]..[703,25795+52])
                                              Pexp_ident "mty2" (typing/includemod.ml[703,25795+48]..[703,25795+52])
                                        ]
                                    <case>
                                      pattern (typing/includemod.ml[704,25848+6]..[704,25848+23])
                                        Ppat_tuple
                                        [
                                          pattern (typing/includemod.ml[704,25848+7]..[704,25848+11])
                                            Ppat_construct "None" (typing/includemod.ml[704,25848+7]..[704,25848+11])
                                            None
                                          pattern (typing/includemod.ml[704,25848+13]..[704,25848+22])
                                            Ppat_construct "Some" (typing/includemod.ml[704,25848+13]..[704,25848+17])
                                            Some
                                              []
                                              pattern (typing/includemod.ml[704,25848+18]..[704,25848+22])
                                                Ppat_var "mty2" (typing/includemod.ml[704,25848+18]..[704,25848+22])
                                        ]
                                      expression (typing/includemod.ml[705,25875+8]..[705,25875+75])
                                        Pexp_apply
                                        expression (typing/includemod.ml[705,25875+8]..[705,25875+27])
                                          Pexp_ident "check_modtype_equiv" (typing/includemod.ml[705,25875+8]..[705,25875+27])
                                        [
                                          <arg>
                                          Labelled "loc"
                                            expression (typing/includemod.ml[705,25875+29]..[705,25875+32])
                                              Pexp_ident "loc" (typing/includemod.ml[705,25875+29]..[705,25875+32])
                                          <arg>
                                          Nolabel
                                            expression (typing/includemod.ml[705,25875+33]..[705,25875+36])
                                              Pexp_ident "env" (typing/includemod.ml[705,25875+33]..[705,25875+36])
                                          <arg>
                                          Labelled "mark"
                                            expression (typing/includemod.ml[705,25875+38]..[705,25875+42])
                                              Pexp_ident "mark" (typing/includemod.ml[705,25875+38]..[705,25875+42])
                                          <arg>
                                          Nolabel
                                            expression (typing/includemod.ml[705,25875+43]..[705,25875+70])
                                              Pexp_construct "Mty_ident" (typing/includemod.ml[705,25875+44]..[705,25875+53])
                                              Some
                                                expression (typing/includemod.ml[705,25875+53]..[705,25875+69])
                                                  Pexp_construct "Path.Pident" (typing/includemod.ml[705,25875+54]..[705,25875+65])
                                                  Some
                                                    expression (typing/includemod.ml[705,25875+66]..[705,25875+68])
                                                      Pexp_ident "id" (typing/includemod.ml[705,25875+66]..[705,25875+68])
                                          <arg>
                                          Nolabel
                                            expression (typing/includemod.ml[705,25875+71]..[705,25875+75])
                                              Pexp_ident "mty2" (typing/includemod.ml[705,25875+71]..[705,25875+75])
                                        ]
                                  ]
                            ]
                            expression (typing/includemod.ml[706,25954+2]..[708,25990+73])
                              Pexp_match
                              expression (typing/includemod.ml[706,25954+8]..[706,25954+9])
                                Pexp_ident "r" (typing/includemod.ml[706,25954+8]..[706,25954+9])
                              [
                                <case>
                                  pattern (typing/includemod.ml[707,25969+4]..[707,25969+14])
                                    Ppat_alias "ok" (typing/includemod.ml[707,25969+12]..[707,25969+14])
                                    pattern (typing/includemod.ml[707,25969+4]..[707,25969+8])
                                      Ppat_construct "Ok" (typing/includemod.ml[707,25969+4]..[707,25969+6])
                                      Some
                                        []
                                        pattern (typing/includemod.ml[707,25969+7]..[707,25969+8])
                                          Ppat_any
                                  expression (typing/includemod.ml[707,25969+18]..[707,25969+20])
                                    Pexp_ident "ok" (typing/includemod.ml[707,25969+18]..[707,25969+20])
                                <case>
                                  pattern (typing/includemod.ml[708,25990+4]..[708,25990+11])
                                    Ppat_construct "Error" (typing/includemod.ml[708,25990+4]..[708,25990+9])
                                    Some
                                      []
                                      pattern (typing/includemod.ml[708,25990+10]..[708,25990+11])
                                        Ppat_var "e" (typing/includemod.ml[708,25990+10]..[708,25990+11])
                                  expression (typing/includemod.ml[708,25990+15]..[708,25990+73])
                                    Pexp_construct "Error" (typing/includemod.ml[708,25990+15]..[708,25990+20])
                                    Some
                                      expression (typing/includemod.ml[708,25990+21]..[708,25990+73])
                                        Pexp_open Fresh
                                        module_expr (typing/includemod.ml[708,25990+21]..[708,25990+26])
                                          Pmod_ident "Error" (typing/includemod.ml[708,25990+21]..[708,25990+26])
                                        expression (typing/includemod.ml[708,25990+28]..[708,25990+72])
                                          Pexp_construct "Module_type_declaration" (typing/includemod.ml[708,25990+28]..[708,25990+51])
                                          Some
                                            expression (typing/includemod.ml[708,25990+52]..[708,25990+72])
                                              Pexp_apply
                                              expression (typing/includemod.ml[708,25990+53]..[708,25990+57])
                                                Pexp_ident "diff" (typing/includemod.ml[708,25990+53]..[708,25990+57])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[708,25990+58]..[708,25990+63])
                                                    Pexp_ident "info1" (typing/includemod.ml[708,25990+58]..[708,25990+63])
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[708,25990+64]..[708,25990+69])
                                                    Pexp_ident "info2" (typing/includemod.ml[708,25990+64]..[708,25990+69])
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[708,25990+70]..[708,25990+71])
                                                    Pexp_ident "e" (typing/includemod.ml[708,25990+70]..[708,25990+71])
                                              ]
                              ]
      <def>
        pattern (typing/includemod.ml[710,26065+4]..[710,26065+23])
          Ppat_var "check_modtype_equiv" (typing/includemod.ml[710,26065+4]..[710,26065+23])
        expression (typing/includemod.ml[710,26065+24]..[723,26631+58]) ghost
          Pexp_fun
          Labelled "loc"
          None
          pattern (typing/includemod.ml[710,26065+25]..[710,26065+28])
            Ppat_var "loc" (typing/includemod.ml[710,26065+25]..[710,26065+28])
          expression (typing/includemod.ml[710,26065+29]..[723,26631+58]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (typing/includemod.ml[710,26065+29]..[710,26065+32])
              Ppat_var "env" (typing/includemod.ml[710,26065+29]..[710,26065+32])
            expression (typing/includemod.ml[710,26065+33]..[723,26631+58]) ghost
              Pexp_fun
              Labelled "mark"
              None
              pattern (typing/includemod.ml[710,26065+34]..[710,26065+38])
                Ppat_var "mark" (typing/includemod.ml[710,26065+34]..[710,26065+38])
              expression (typing/includemod.ml[710,26065+39]..[723,26631+58]) ghost
                Pexp_fun
                Nolabel
                None
                pattern (typing/includemod.ml[710,26065+39]..[710,26065+43])
                  Ppat_var "mty1" (typing/includemod.ml[710,26065+39]..[710,26065+43])
                expression (typing/includemod.ml[710,26065+44]..[723,26631+58]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (typing/includemod.ml[710,26065+44]..[710,26065+48])
                    Ppat_var "mty2" (typing/includemod.ml[710,26065+44]..[710,26065+48])
                  expression (typing/includemod.ml[711,26116+2]..[723,26631+58])
                    Pexp_match
                    expression (typing/includemod.ml[712,26124+4]..[713,26179+73])
                      Pexp_tuple
                      [
                        expression (typing/includemod.ml[712,26124+5]..[712,26124+53])
                          Pexp_apply
                          expression (typing/includemod.ml[712,26124+5]..[712,26124+13])
                            Pexp_ident "modtypes" (typing/includemod.ml[712,26124+5]..[712,26124+13])
                          [
                            <arg>
                            Labelled "loc"
                              expression (typing/includemod.ml[712,26124+15]..[712,26124+18])
                                Pexp_ident "loc" (typing/includemod.ml[712,26124+15]..[712,26124+18])
                            <arg>
                            Nolabel
                              expression (typing/includemod.ml[712,26124+19]..[712,26124+22])
                                Pexp_ident "env" (typing/includemod.ml[712,26124+19]..[712,26124+22])
                            <arg>
                            Labelled "mark"
                              expression (typing/includemod.ml[712,26124+24]..[712,26124+28])
                                Pexp_ident "mark" (typing/includemod.ml[712,26124+24]..[712,26124+28])
                            <arg>
                            Nolabel
                              expression (typing/includemod.ml[712,26124+29]..[712,26124+43])
                                Pexp_ident "Subst.identity" (typing/includemod.ml[712,26124+29]..[712,26124+43])
                            <arg>
                            Nolabel
                              expression (typing/includemod.ml[712,26124+44]..[712,26124+48])
                                Pexp_ident "mty1" (typing/includemod.ml[712,26124+44]..[712,26124+48])
                            <arg>
                            Nolabel
                              expression (typing/includemod.ml[712,26124+49]..[712,26124+53])
                                Pexp_ident "mty2" (typing/includemod.ml[712,26124+49]..[712,26124+53])
                          ]
                        expression (typing/includemod.ml[713,26179+5]..[713,26179+72])
                          Pexp_apply
                          expression (typing/includemod.ml[713,26179+5]..[713,26179+13])
                            Pexp_ident "modtypes" (typing/includemod.ml[713,26179+5]..[713,26179+13])
                          [
                            <arg>
                            Labelled "loc"
                              expression (typing/includemod.ml[713,26179+15]..[713,26179+18])
                                Pexp_ident "loc" (typing/includemod.ml[713,26179+15]..[713,26179+18])
                            <arg>
                            Nolabel
                              expression (typing/includemod.ml[713,26179+19]..[713,26179+22])
                                Pexp_ident "env" (typing/includemod.ml[713,26179+19]..[713,26179+22])
                            <arg>
                            Labelled "mark"
                              expression (typing/includemod.ml[713,26179+29]..[713,26179+47])
                                Pexp_apply
                                expression (typing/includemod.ml[713,26179+30]..[713,26179+41])
                                  Pexp_ident "negate_mark" (typing/includemod.ml[713,26179+30]..[713,26179+41])
                                [
                                  <arg>
                                  Nolabel
                                    expression (typing/includemod.ml[713,26179+42]..[713,26179+46])
                                      Pexp_ident "mark" (typing/includemod.ml[713,26179+42]..[713,26179+46])
                                ]
                            <arg>
                            Nolabel
                              expression (typing/includemod.ml[713,26179+48]..[713,26179+62])
                                Pexp_ident "Subst.identity" (typing/includemod.ml[713,26179+48]..[713,26179+62])
                            <arg>
                            Nolabel
                              expression (typing/includemod.ml[713,26179+63]..[713,26179+67])
                                Pexp_ident "mty2" (typing/includemod.ml[713,26179+63]..[713,26179+67])
                            <arg>
                            Nolabel
                              expression (typing/includemod.ml[713,26179+68]..[713,26179+72])
                                Pexp_ident "mty1" (typing/includemod.ml[713,26179+68]..[713,26179+72])
                          ]
                      ]
                    [
                      <case>
                        pattern (typing/includemod.ml[715,26260+4]..[715,26260+38])
                          Ppat_tuple
                          [
                            pattern (typing/includemod.ml[715,26260+5]..[715,26260+20])
                              Ppat_construct "Ok" (typing/includemod.ml[715,26260+5]..[715,26260+7])
                              Some
                                []
                                pattern (typing/includemod.ml[715,26260+8]..[715,26260+20])
                                  Ppat_construct "Tcoerce_none" (typing/includemod.ml[715,26260+8]..[715,26260+20])
                                  None
                            pattern (typing/includemod.ml[715,26260+22]..[715,26260+37])
                              Ppat_construct "Ok" (typing/includemod.ml[715,26260+22]..[715,26260+24])
                              Some
                                []
                                pattern (typing/includemod.ml[715,26260+25]..[715,26260+37])
                                  Ppat_construct "Tcoerce_none" (typing/includemod.ml[715,26260+25]..[715,26260+37])
                                  None
                          ]
                        expression (typing/includemod.ml[715,26260+42]..[715,26260+57])
                          Pexp_construct "Ok" (typing/includemod.ml[715,26260+42]..[715,26260+44])
                          Some
                            expression (typing/includemod.ml[715,26260+45]..[715,26260+57])
                              Pexp_construct "Tcoerce_none" (typing/includemod.ml[715,26260+45]..[715,26260+57])
                              None
                      <case>
                        pattern (typing/includemod.ml[716,26318+4]..[716,26318+19])
                          Ppat_tuple
                          [
                            pattern (typing/includemod.ml[716,26318+5]..[716,26318+10])
                              Ppat_construct "Ok" (typing/includemod.ml[716,26318+5]..[716,26318+7])
                              Some
                                []
                                pattern (typing/includemod.ml[716,26318+8]..[716,26318+10])
                                  Ppat_var "c1" (typing/includemod.ml[716,26318+8]..[716,26318+10])
                            pattern (typing/includemod.ml[716,26318+12]..[716,26318+18])
                              Ppat_construct "Ok" (typing/includemod.ml[716,26318+12]..[716,26318+14])
                              Some
                                []
                                pattern (typing/includemod.ml[716,26318+15]..[716,26318+18])
                                  Ppat_var "_c2" (typing/includemod.ml[716,26318+15]..[716,26318+18])
                          ]
                        expression (typing/includemod.ml[719,26440+6]..[719,26440+42])
                          Pexp_construct "Error" (typing/includemod.ml[719,26440+6]..[719,26440+11])
                          Some
                            expression (typing/includemod.ml[719,26440+12]..[719,26440+42])
                              Pexp_open Fresh
                              module_expr (typing/includemod.ml[719,26440+12]..[719,26440+17])
                                Pmod_ident "Error" (typing/includemod.ml[719,26440+12]..[719,26440+17])
                              expression (typing/includemod.ml[719,26440+19]..[719,26440+41])
                                Pexp_construct "Illegal_permutation" (typing/includemod.ml[719,26440+19]..[719,26440+38])
                                Some
                                  expression (typing/includemod.ml[719,26440+39]..[719,26440+41])
                                    Pexp_ident "c1" (typing/includemod.ml[719,26440+39]..[719,26440+41])
                      <case>
                        pattern (typing/includemod.ml[720,26483+4]..[720,26483+17])
                          Ppat_tuple
                          [
                            pattern (typing/includemod.ml[720,26483+4]..[720,26483+8])
                              Ppat_construct "Ok" (typing/includemod.ml[720,26483+4]..[720,26483+6])
                              Some
                                []
                                pattern (typing/includemod.ml[720,26483+7]..[720,26483+8])
                                  Ppat_any
                            pattern (typing/includemod.ml[720,26483+10]..[720,26483+17])
                              Ppat_construct "Error" (typing/includemod.ml[720,26483+10]..[720,26483+15])
                              Some
                                []
                                pattern (typing/includemod.ml[720,26483+16]..[720,26483+17])
                                  Ppat_var "e" (typing/includemod.ml[720,26483+16]..[720,26483+17])
                          ]
                        expression (typing/includemod.ml[720,26483+21]..[720,26483+53])
                          Pexp_construct "Error" (typing/includemod.ml[720,26483+21]..[720,26483+26])
                          Some
                            expression (typing/includemod.ml[720,26483+27]..[720,26483+53])
                              Pexp_open Fresh
                              module_expr (typing/includemod.ml[720,26483+27]..[720,26483+32])
                                Pmod_ident "Error" (typing/includemod.ml[720,26483+27]..[720,26483+32])
                              expression (typing/includemod.ml[720,26483+34]..[720,26483+52])
                                Pexp_construct "Not_greater_than" (typing/includemod.ml[720,26483+34]..[720,26483+50])
                                Some
                                  expression (typing/includemod.ml[720,26483+51]..[720,26483+52])
                                    Pexp_ident "e" (typing/includemod.ml[720,26483+51]..[720,26483+52])
                      <case>
                        pattern (typing/includemod.ml[721,26537+4]..[721,26537+17])
                          Ppat_tuple
                          [
                            pattern (typing/includemod.ml[721,26537+4]..[721,26537+11])
                              Ppat_construct "Error" (typing/includemod.ml[721,26537+4]..[721,26537+9])
                              Some
                                []
                                pattern (typing/includemod.ml[721,26537+10]..[721,26537+11])
                                  Ppat_var "e" (typing/includemod.ml[721,26537+10]..[721,26537+11])
                            pattern (typing/includemod.ml[721,26537+13]..[721,26537+17])
                              Ppat_construct "Ok" (typing/includemod.ml[721,26537+13]..[721,26537+15])
                              Some
                                []
                                pattern (typing/includemod.ml[721,26537+16]..[721,26537+17])
                                  Ppat_any
                          ]
                        expression (typing/includemod.ml[721,26537+21]..[721,26537+50])
                          Pexp_construct "Error" (typing/includemod.ml[721,26537+21]..[721,26537+26])
                          Some
                            expression (typing/includemod.ml[721,26537+27]..[721,26537+50])
                              Pexp_open Fresh
                              module_expr (typing/includemod.ml[721,26537+27]..[721,26537+32])
                                Pmod_ident "Error" (typing/includemod.ml[721,26537+27]..[721,26537+32])
                              expression (typing/includemod.ml[721,26537+34]..[721,26537+49])
                                Pexp_construct "Not_less_than" (typing/includemod.ml[721,26537+34]..[721,26537+47])
                                Some
                                  expression (typing/includemod.ml[721,26537+48]..[721,26537+49])
                                    Pexp_ident "e" (typing/includemod.ml[721,26537+48]..[721,26537+49])
                      <case>
                        pattern (typing/includemod.ml[722,26588+4]..[722,26588+39])
                          Ppat_tuple
                          [
                            pattern (typing/includemod.ml[722,26588+4]..[722,26588+19])
                              Ppat_construct "Error" (typing/includemod.ml[722,26588+4]..[722,26588+9])
                              Some
                                []
                                pattern (typing/includemod.ml[722,26588+10]..[722,26588+19])
                                  Ppat_var "less_than" (typing/includemod.ml[722,26588+10]..[722,26588+19])
                            pattern (typing/includemod.ml[722,26588+21]..[722,26588+39])
                              Ppat_construct "Error" (typing/includemod.ml[722,26588+21]..[722,26588+26])
                              Some
                                []
                                pattern (typing/includemod.ml[722,26588+27]..[722,26588+39])
                                  Ppat_var "greater_than" (typing/includemod.ml[722,26588+27]..[722,26588+39])
                          ]
                        expression (typing/includemod.ml[723,26631+6]..[723,26631+58])
                          Pexp_construct "Error" (typing/includemod.ml[723,26631+6]..[723,26631+11])
                          Some
                            expression (typing/includemod.ml[723,26631+12]..[723,26631+58])
                              Pexp_open Fresh
                              module_expr (typing/includemod.ml[723,26631+12]..[723,26631+17])
                                Pmod_ident "Error" (typing/includemod.ml[723,26631+12]..[723,26631+17])
                              expression (typing/includemod.ml[723,26631+19]..[723,26631+57])
                                Pexp_construct "Incomparable" (typing/includemod.ml[723,26631+19]..[723,26631+31])
                                Some
                                  expression (typing/includemod.ml[723,26631+32]..[723,26631+57])
                                    Pexp_record
                                    [
                                      "less_than" (typing/includemod.ml[723,26631+33]..[723,26631+42]) ghost
                                        expression (typing/includemod.ml[723,26631+33]..[723,26631+42])
                                          Pexp_ident "less_than" (typing/includemod.ml[723,26631+33]..[723,26631+42])
                                      "greater_than" (typing/includemod.ml[723,26631+44]..[723,26631+56]) ghost
                                        expression (typing/includemod.ml[723,26631+44]..[723,26631+56])
                                          Pexp_ident "greater_than" (typing/includemod.ml[723,26631+44]..[723,26631+56])
                                    ]
                                    None
                    ]
    ]
  structure_item (typing/includemod.ml[728,26757+0]..[734,26910+52])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/includemod.ml[728,26757+4]..[728,26757+13])
          Ppat_var "can_alias" (typing/includemod.ml[728,26757+4]..[728,26757+13])
        expression (typing/includemod.ml[728,26757+14]..[734,26910+52]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (typing/includemod.ml[728,26757+14]..[728,26757+17])
            Ppat_var "env" (typing/includemod.ml[728,26757+14]..[728,26757+17])
          expression (typing/includemod.ml[728,26757+18]..[734,26910+52]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (typing/includemod.ml[728,26757+18]..[728,26757+22])
              Ppat_var "path" (typing/includemod.ml[728,26757+18]..[728,26757+22])
            expression (typing/includemod.ml[729,26782+2]..[734,26910+52])
              Pexp_let Rec
              [
                <def>
                  pattern (typing/includemod.ml[729,26782+10]..[729,26782+18])
                    Ppat_var "no_apply" (typing/includemod.ml[729,26782+10]..[729,26782+18])
                  expression (typing/includemod.ml[729,26782+21]..[732,26876+28])
                    Pexp_function
                    [
                      <case>
                        pattern (typing/includemod.ml[730,26812+6]..[730,26812+19])
                          Ppat_construct "Path.Pident" (typing/includemod.ml[730,26812+6]..[730,26812+17])
                          Some
                            []
                            pattern (typing/includemod.ml[730,26812+18]..[730,26812+19])
                              Ppat_any
                        expression (typing/includemod.ml[730,26812+23]..[730,26812+27])
                          Pexp_construct "true" (typing/includemod.ml[730,26812+23]..[730,26812+27])
                          None
                      <case>
                        pattern (typing/includemod.ml[731,26840+6]..[731,26840+21])
                          Ppat_construct "Path.Pdot" (typing/includemod.ml[731,26840+6]..[731,26840+15])
                          Some
                            []
                            pattern (typing/includemod.ml[731,26840+15]..[731,26840+21])
                              Ppat_tuple
                              [
                                pattern (typing/includemod.ml[731,26840+16]..[731,26840+17])
                                  Ppat_var "p" (typing/includemod.ml[731,26840+16]..[731,26840+17])
                                pattern (typing/includemod.ml[731,26840+19]..[731,26840+20])
                                  Ppat_any
                              ]
                        expression (typing/includemod.ml[731,26840+25]..[731,26840+35])
                          Pexp_apply
                          expression (typing/includemod.ml[731,26840+25]..[731,26840+33])
                            Pexp_ident "no_apply" (typing/includemod.ml[731,26840+25]..[731,26840+33])
                          [
                            <arg>
                            Nolabel
                              expression (typing/includemod.ml[731,26840+34]..[731,26840+35])
                                Pexp_ident "p" (typing/includemod.ml[731,26840+34]..[731,26840+35])
                          ]
                      <case>
                        pattern (typing/includemod.ml[732,26876+6]..[732,26876+19])
                          Ppat_construct "Path.Papply" (typing/includemod.ml[732,26876+6]..[732,26876+17])
                          Some
                            []
                            pattern (typing/includemod.ml[732,26876+18]..[732,26876+19])
                              Ppat_any
                        expression (typing/includemod.ml[732,26876+23]..[732,26876+28])
                          Pexp_construct "false" (typing/includemod.ml[732,26876+23]..[732,26876+28])
                          None
                    ]
              ]
              expression (typing/includemod.ml[734,26910+2]..[734,26910+52])
                Pexp_apply
                expression (typing/includemod.ml[734,26910+16]..[734,26910+18])
                  Pexp_ident "&&" (typing/includemod.ml[734,26910+16]..[734,26910+18])
                [
                  <arg>
                  Nolabel
                    expression (typing/includemod.ml[734,26910+2]..[734,26910+15])
                      Pexp_apply
                      expression (typing/includemod.ml[734,26910+2]..[734,26910+10])
                        Pexp_ident "no_apply" (typing/includemod.ml[734,26910+2]..[734,26910+10])
                      [
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[734,26910+11]..[734,26910+15])
                            Pexp_ident "path" (typing/includemod.ml[734,26910+11]..[734,26910+15])
                      ]
                  <arg>
                  Nolabel
                    expression (typing/includemod.ml[734,26910+19]..[734,26910+52])
                      Pexp_apply
                      expression (typing/includemod.ml[734,26910+19]..[734,26910+22])
                        Pexp_ident "not" (typing/includemod.ml[734,26910+19]..[734,26910+22])
                      [
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[734,26910+23]..[734,26910+52])
                            Pexp_apply
                            expression (typing/includemod.ml[734,26910+24]..[734,26910+42])
                              Pexp_ident "Env.is_functor_arg" (typing/includemod.ml[734,26910+24]..[734,26910+42])
                            [
                              <arg>
                              Nolabel
                                expression (typing/includemod.ml[734,26910+43]..[734,26910+47])
                                  Pexp_ident "path" (typing/includemod.ml[734,26910+43]..[734,26910+47])
                              <arg>
                              Nolabel
                                expression (typing/includemod.ml[734,26910+48]..[734,26910+51])
                                  Pexp_ident "env" (typing/includemod.ml[734,26910+48]..[734,26910+51])
                            ]
                      ]
                ]
    ]
  structure_item (typing/includemod.ml[738,26966+0]..[738,26966+36])
    Pstr_type Rec
    [
      type_declaration "explanation" (typing/includemod.ml[738,26966+5]..[738,26966+16]) (typing/includemod.ml[738,26966+0]..[738,26966+36])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (typing/includemod.ml[738,26966+19]..[738,26966+36])
              Ptyp_tuple
              [
                core_type (typing/includemod.ml[738,26966+19]..[738,26966+24])
                  Ptyp_constr "Env.t" (typing/includemod.ml[738,26966+19]..[738,26966+24])
                  []
                core_type (typing/includemod.ml[738,26966+27]..[738,26966+36])
                  Ptyp_constr "Error.all" (typing/includemod.ml[738,26966+27]..[738,26966+36])
                  []
              ]
    ]
  structure_item (typing/includemod.ml[739,27003+0]..[739,27003+30])
    Pstr_exception
    type_exception
      ptyext_constructor =
        extension_constructor (typing/includemod.ml[739,27003+0]..[739,27003+30])
          pext_name = "Error"
          pext_kind =
            Pext_decl
              [
                core_type (typing/includemod.ml[739,27003+19]..[739,27003+30])
                  Ptyp_constr "explanation" (typing/includemod.ml[739,27003+19]..[739,27003+30])
                  []
              ]
              None
  structure_item (typing/includemod.ml[741,27035+0]..[747,27222+3])
    Pstr_exception
    type_exception
      ptyext_constructor =
        extension_constructor (typing/includemod.ml[741,27035+0]..[747,27222+3])
          pext_name = "Apply_error"
          pext_kind =
            Pext_decl
              [
                (typing/includemod.ml[742,27062+4]..[742,27062+22])
                  Immutable
                  "loc" (typing/includemod.ml[742,27062+4]..[742,27062+7])                  core_type (typing/includemod.ml[742,27062+10]..[742,27062+20])
                    Ptyp_constr "Location.t" (typing/includemod.ml[742,27062+10]..[742,27062+20])
                    []
                (typing/includemod.ml[743,27085+4]..[743,27085+17])
                  Immutable
                  "env" (typing/includemod.ml[743,27085+4]..[743,27085+7])                  core_type (typing/includemod.ml[743,27085+10]..[743,27085+15])
                    Ptyp_constr "Env.t" (typing/includemod.ml[743,27085+10]..[743,27085+15])
                    []
                (typing/includemod.ml[744,27103+4]..[744,27103+34])
                  Immutable
                  "lid_app" (typing/includemod.ml[744,27103+4]..[744,27103+11])                  core_type (typing/includemod.ml[744,27103+14]..[744,27103+32])
                    Ptyp_constr "option" (typing/includemod.ml[744,27103+26]..[744,27103+32])
                    [
                      core_type (typing/includemod.ml[744,27103+14]..[744,27103+25])
                        Ptyp_constr "Longident.t" (typing/includemod.ml[744,27103+14]..[744,27103+25])
                        []
                    ]
                (typing/includemod.ml[745,27138+4]..[745,27138+25])
                  Immutable
                  "mty_f" (typing/includemod.ml[745,27138+4]..[745,27138+9])                  core_type (typing/includemod.ml[745,27138+12]..[745,27138+23])
                    Ptyp_constr "module_type" (typing/includemod.ml[745,27138+12]..[745,27138+23])
                    []
                (typing/includemod.ml[746,27164+4]..[746,27164+57])
                  Immutable
                  "args" (typing/includemod.ml[746,27164+4]..[746,27164+8])                  core_type (typing/includemod.ml[746,27164+11]..[746,27164+55])
                    Ptyp_constr "list" (typing/includemod.ml[746,27164+51]..[746,27164+55])
                    [
                      core_type (typing/includemod.ml[746,27164+12]..[746,27164+49])
                        Ptyp_tuple
                        [
                          core_type (typing/includemod.ml[746,27164+12]..[746,27164+35])
                            Ptyp_constr "Error.functor_arg_descr" (typing/includemod.ml[746,27164+12]..[746,27164+35])
                            []
                          core_type (typing/includemod.ml[746,27164+38]..[746,27164+49])
                            Ptyp_constr "module_type" (typing/includemod.ml[746,27164+38]..[746,27164+49])
                            []
                        ]
                    ]
              ]
              None
  structure_item (typing/includemod.ml[749,27227+0]..[752,27387+34])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/includemod.ml[749,27227+4]..[749,27227+31])
          Ppat_var "check_modtype_inclusion_raw" (typing/includemod.ml[749,27227+4]..[749,27227+31])
        expression (typing/includemod.ml[749,27227+32]..[752,27387+34]) ghost
          Pexp_fun
          Labelled "loc"
          None
          pattern (typing/includemod.ml[749,27227+33]..[749,27227+36])
            Ppat_var "loc" (typing/includemod.ml[749,27227+33]..[749,27227+36])
          expression (typing/includemod.ml[749,27227+37]..[752,27387+34]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (typing/includemod.ml[749,27227+37]..[749,27227+40])
              Ppat_var "env" (typing/includemod.ml[749,27227+37]..[749,27227+40])
            expression (typing/includemod.ml[749,27227+41]..[752,27387+34]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (typing/includemod.ml[749,27227+41]..[749,27227+45])
                Ppat_var "mty1" (typing/includemod.ml[749,27227+41]..[749,27227+45])
              expression (typing/includemod.ml[749,27227+46]..[752,27387+34]) ghost
                Pexp_fun
                Nolabel
                None
                pattern (typing/includemod.ml[749,27227+46]..[749,27227+51])
                  Ppat_var "path1" (typing/includemod.ml[749,27227+46]..[749,27227+51])
                expression (typing/includemod.ml[749,27227+52]..[752,27387+34]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (typing/includemod.ml[749,27227+52]..[749,27227+56])
                    Ppat_var "mty2" (typing/includemod.ml[749,27227+52]..[749,27227+56])
                  expression (typing/includemod.ml[750,27286+2]..[752,27387+34])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (typing/includemod.ml[750,27286+6]..[750,27286+15])
                          Ppat_var "aliasable" (typing/includemod.ml[750,27286+6]..[750,27286+15])
                        expression (typing/includemod.ml[750,27286+18]..[750,27286+37])
                          Pexp_apply
                          expression (typing/includemod.ml[750,27286+18]..[750,27286+27])
                            Pexp_ident "can_alias" (typing/includemod.ml[750,27286+18]..[750,27286+27])
                          [
                            <arg>
                            Nolabel
                              expression (typing/includemod.ml[750,27286+28]..[750,27286+31])
                                Pexp_ident "env" (typing/includemod.ml[750,27286+28]..[750,27286+31])
                            <arg>
                            Nolabel
                              expression (typing/includemod.ml[750,27286+32]..[750,27286+37])
                                Pexp_ident "path1" (typing/includemod.ml[750,27286+32]..[750,27286+37])
                          ]
                    ]
                    expression (typing/includemod.ml[751,27327+2]..[752,27387+34])
                      Pexp_apply
                      expression (typing/includemod.ml[751,27327+2]..[751,27327+23])
                        Pexp_ident "strengthened_modtypes" (typing/includemod.ml[751,27327+2]..[751,27327+23])
                      [
                        <arg>
                        Labelled "loc"
                          expression (typing/includemod.ml[751,27327+25]..[751,27327+28])
                            Pexp_ident "loc" (typing/includemod.ml[751,27327+25]..[751,27327+28])
                        <arg>
                        Labelled "aliasable"
                          expression (typing/includemod.ml[751,27327+30]..[751,27327+39])
                            Pexp_ident "aliasable" (typing/includemod.ml[751,27327+30]..[751,27327+39])
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[751,27327+40]..[751,27327+43])
                            Pexp_ident "env" (typing/includemod.ml[751,27327+40]..[751,27327+43])
                        <arg>
                        Labelled "mark"
                          expression (typing/includemod.ml[751,27327+50]..[751,27327+59])
                            Pexp_construct "Mark_both" (typing/includemod.ml[751,27327+50]..[751,27327+59])
                            None
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[752,27387+4]..[752,27387+18])
                            Pexp_ident "Subst.identity" (typing/includemod.ml[752,27387+4]..[752,27387+18])
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[752,27387+19]..[752,27387+23])
                            Pexp_ident "mty1" (typing/includemod.ml[752,27387+19]..[752,27387+23])
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[752,27387+24]..[752,27387+29])
                            Pexp_ident "path1" (typing/includemod.ml[752,27387+24]..[752,27387+29])
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[752,27387+30]..[752,27387+34])
                            Pexp_ident "mty2" (typing/includemod.ml[752,27387+30]..[752,27387+34])
                      ]
    ]
  structure_item (typing/includemod.ml[754,27423+0]..[757,27561+49])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/includemod.ml[754,27423+4]..[754,27423+27])
          Ppat_var "check_modtype_inclusion" (typing/includemod.ml[754,27423+4]..[754,27423+27])
        expression (typing/includemod.ml[754,27423+28]..[757,27561+49]) ghost
          Pexp_fun
          Labelled "loc"
          None
          pattern (typing/includemod.ml[754,27423+29]..[754,27423+32])
            Ppat_var "loc" (typing/includemod.ml[754,27423+29]..[754,27423+32])
          expression (typing/includemod.ml[754,27423+33]..[757,27561+49]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (typing/includemod.ml[754,27423+33]..[754,27423+36])
              Ppat_var "env" (typing/includemod.ml[754,27423+33]..[754,27423+36])
            expression (typing/includemod.ml[754,27423+37]..[757,27561+49]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (typing/includemod.ml[754,27423+37]..[754,27423+41])
                Ppat_var "mty1" (typing/includemod.ml[754,27423+37]..[754,27423+41])
              expression (typing/includemod.ml[754,27423+42]..[757,27561+49]) ghost
                Pexp_fun
                Nolabel
                None
                pattern (typing/includemod.ml[754,27423+42]..[754,27423+47])
                  Ppat_var "path1" (typing/includemod.ml[754,27423+42]..[754,27423+47])
                expression (typing/includemod.ml[754,27423+48]..[757,27561+49]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (typing/includemod.ml[754,27423+48]..[754,27423+52])
                    Ppat_var "mty2" (typing/includemod.ml[754,27423+48]..[754,27423+52])
                  expression (typing/includemod.ml[755,27478+2]..[757,27561+49])
                    Pexp_match
                    expression (typing/includemod.ml[755,27478+8]..[755,27478+60])
                      Pexp_apply
                      expression (typing/includemod.ml[755,27478+8]..[755,27478+35])
                        Pexp_ident "check_modtype_inclusion_raw" (typing/includemod.ml[755,27478+8]..[755,27478+35])
                      [
                        <arg>
                        Labelled "loc"
                          expression (typing/includemod.ml[755,27478+37]..[755,27478+40])
                            Pexp_ident "loc" (typing/includemod.ml[755,27478+37]..[755,27478+40])
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[755,27478+41]..[755,27478+44])
                            Pexp_ident "env" (typing/includemod.ml[755,27478+41]..[755,27478+44])
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[755,27478+45]..[755,27478+49])
                            Pexp_ident "mty1" (typing/includemod.ml[755,27478+45]..[755,27478+49])
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[755,27478+50]..[755,27478+55])
                            Pexp_ident "path1" (typing/includemod.ml[755,27478+50]..[755,27478+55])
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[755,27478+56]..[755,27478+60])
                            Pexp_ident "mty2" (typing/includemod.ml[755,27478+56]..[755,27478+60])
                      ]
                    [
                      <case>
                        pattern (typing/includemod.ml[756,27544+4]..[756,27544+8])
                          Ppat_construct "Ok" (typing/includemod.ml[756,27544+4]..[756,27544+6])
                          Some
                            []
                            pattern (typing/includemod.ml[756,27544+7]..[756,27544+8])
                              Ppat_any
                        expression (typing/includemod.ml[756,27544+12]..[756,27544+16])
                          Pexp_construct "None" (typing/includemod.ml[756,27544+12]..[756,27544+16])
                          None
                      <case>
                        pattern (typing/includemod.ml[757,27561+4]..[757,27561+11])
                          Ppat_construct "Error" (typing/includemod.ml[757,27561+4]..[757,27561+9])
                          Some
                            []
                            pattern (typing/includemod.ml[757,27561+10]..[757,27561+11])
                              Ppat_var "e" (typing/includemod.ml[757,27561+10]..[757,27561+11])
                        expression (typing/includemod.ml[757,27561+15]..[757,27561+49])
                          Pexp_construct "Some" (typing/includemod.ml[757,27561+15]..[757,27561+19])
                          Some
                            expression (typing/includemod.ml[757,27561+20]..[757,27561+49])
                              Pexp_tuple
                              [
                                expression (typing/includemod.ml[757,27561+21]..[757,27561+24])
                                  Pexp_ident "env" (typing/includemod.ml[757,27561+21]..[757,27561+24])
                                expression (typing/includemod.ml[757,27561+26]..[757,27561+48])
                                  Pexp_construct "Error.In_Module_type" (typing/includemod.ml[757,27561+26]..[757,27561+46])
                                  Some
                                    expression (typing/includemod.ml[757,27561+47]..[757,27561+48])
                                      Pexp_ident "e" (typing/includemod.ml[757,27561+47]..[757,27561+48])
                              ]
                    ]
    ]
  structure_item (typing/includemod.ml[759,27612+0]..[776,28313+23])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/includemod.ml[759,27612+4]..[759,27612+37])
          Ppat_var "check_functor_application_in_path" (typing/includemod.ml[759,27612+4]..[759,27612+37])
        expression (typing/includemod.ml[760,27650+4]..[776,28313+23]) ghost
          Pexp_fun
          Labelled "errors"
          None
          pattern (typing/includemod.ml[760,27650+5]..[760,27650+11])
            Ppat_var "errors" (typing/includemod.ml[760,27650+5]..[760,27650+11])
          expression (typing/includemod.ml[760,27650+12]..[776,28313+23]) ghost
            Pexp_fun
            Labelled "loc"
            None
            pattern (typing/includemod.ml[760,27650+13]..[760,27650+16])
              Ppat_var "loc" (typing/includemod.ml[760,27650+13]..[760,27650+16])
            expression (typing/includemod.ml[760,27650+17]..[776,28313+23]) ghost
              Pexp_fun
              Labelled "lid_whole_app"
              None
              pattern (typing/includemod.ml[760,27650+18]..[760,27650+31])
                Ppat_var "lid_whole_app" (typing/includemod.ml[760,27650+18]..[760,27650+31])
              expression (typing/includemod.ml[760,27650+32]..[776,28313+23]) ghost
                Pexp_fun
                Labelled "f0_path"
                None
                pattern (typing/includemod.ml[760,27650+33]..[760,27650+40])
                  Ppat_var "f0_path" (typing/includemod.ml[760,27650+33]..[760,27650+40])
                expression (typing/includemod.ml[760,27650+41]..[776,28313+23]) ghost
                  Pexp_fun
                  Labelled "args"
                  None
                  pattern (typing/includemod.ml[760,27650+42]..[760,27650+46])
                    Ppat_var "args" (typing/includemod.ml[760,27650+42]..[760,27650+46])
                  expression (typing/includemod.ml[761,27697+4]..[776,28313+23]) ghost
                    Pexp_fun
                    Labelled "arg_path"
                    None
                    pattern (typing/includemod.ml[761,27697+5]..[761,27697+13])
                      Ppat_var "arg_path" (typing/includemod.ml[761,27697+5]..[761,27697+13])
                    expression (typing/includemod.ml[761,27697+14]..[776,28313+23]) ghost
                      Pexp_fun
                      Labelled "arg_mty"
                      None
                      pattern (typing/includemod.ml[761,27697+15]..[761,27697+22])
                        Ppat_var "arg_mty" (typing/includemod.ml[761,27697+15]..[761,27697+22])
                      expression (typing/includemod.ml[761,27697+23]..[776,28313+23]) ghost
                        Pexp_fun
                        Labelled "param_mty"
                        None
                        pattern (typing/includemod.ml[761,27697+24]..[761,27697+33])
                          Ppat_var "param_mty" (typing/includemod.ml[761,27697+24]..[761,27697+33])
                        expression (typing/includemod.ml[761,27697+34]..[776,28313+23]) ghost
                          Pexp_fun
                          Nolabel
                          None
                          pattern (typing/includemod.ml[761,27697+34]..[761,27697+37])
                            Ppat_var "env" (typing/includemod.ml[761,27697+34]..[761,27697+37])
                          expression (typing/includemod.ml[762,27737+2]..[776,28313+23])
                            Pexp_match
                            expression (typing/includemod.ml[762,27737+8]..[762,27737+71])
                              Pexp_apply
                              expression (typing/includemod.ml[762,27737+8]..[762,27737+35])
                                Pexp_ident "check_modtype_inclusion_raw" (typing/includemod.ml[762,27737+8]..[762,27737+35])
                              [
                                <arg>
                                Labelled "loc"
                                  expression (typing/includemod.ml[762,27737+37]..[762,27737+40])
                                    Pexp_ident "loc" (typing/includemod.ml[762,27737+37]..[762,27737+40])
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[762,27737+41]..[762,27737+44])
                                    Pexp_ident "env" (typing/includemod.ml[762,27737+41]..[762,27737+44])
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[762,27737+45]..[762,27737+52])
                                    Pexp_ident "arg_mty" (typing/includemod.ml[762,27737+45]..[762,27737+52])
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[762,27737+53]..[762,27737+61])
                                    Pexp_ident "arg_path" (typing/includemod.ml[762,27737+53]..[762,27737+61])
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[762,27737+62]..[762,27737+71])
                                    Pexp_ident "param_mty" (typing/includemod.ml[762,27737+62]..[762,27737+71])
                              ]
                            [
                              <case>
                                pattern (typing/includemod.ml[763,27814+4]..[763,27814+8])
                                  Ppat_construct "Ok" (typing/includemod.ml[763,27814+4]..[763,27814+6])
                                  Some
                                    []
                                    pattern (typing/includemod.ml[763,27814+7]..[763,27814+8])
                                      Ppat_any
                                expression (typing/includemod.ml[763,27814+12]..[763,27814+14])
                                  Pexp_construct "()" (typing/includemod.ml[763,27814+12]..[763,27814+14])
                                  None
                              <case>
                                pattern (typing/includemod.ml[764,27829+4]..[764,27829+15])
                                  Ppat_construct "Error" (typing/includemod.ml[764,27829+4]..[764,27829+9])
                                  Some
                                    []
                                    pattern (typing/includemod.ml[764,27829+10]..[764,27829+15])
                                      Ppat_var "_errs" (typing/includemod.ml[764,27829+10]..[764,27829+15])
                                expression (typing/includemod.ml[765,27848+6]..[776,28313+23])
                                  Pexp_ifthenelse
                                  expression (typing/includemod.ml[765,27848+9]..[765,27848+15])
                                    Pexp_ident "errors" (typing/includemod.ml[765,27848+9]..[765,27848+15])
                                  expression (typing/includemod.ml[766,27869+8]..[774,28241+60])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (typing/includemod.ml[766,27869+12]..[766,27869+23])
                                          Ppat_var "prepare_arg" (typing/includemod.ml[766,27869+12]..[766,27869+23])
                                        expression (typing/includemod.ml[766,27869+24]..[769,28039+37]) ghost
                                          Pexp_fun
                                          Nolabel
                                          None
                                          pattern (typing/includemod.ml[766,27869+24]..[766,27869+43])
                                            Ppat_tuple
                                            [
                                              pattern (typing/includemod.ml[766,27869+25]..[766,27869+33])
                                                Ppat_var "arg_path" (typing/includemod.ml[766,27869+25]..[766,27869+33])
                                              pattern (typing/includemod.ml[766,27869+35]..[766,27869+42])
                                                Ppat_var "arg_mty" (typing/includemod.ml[766,27869+35]..[766,27869+42])
                                            ]
                                          expression (typing/includemod.ml[767,27915+10]..[769,28039+37])
                                            Pexp_let Nonrec
                                            [
                                              <def>
                                                pattern (typing/includemod.ml[767,27915+14]..[767,27915+23])
                                                  Ppat_var "aliasable" (typing/includemod.ml[767,27915+14]..[767,27915+23])
                                                expression (typing/includemod.ml[767,27915+26]..[767,27915+48])
                                                  Pexp_apply
                                                  expression (typing/includemod.ml[767,27915+26]..[767,27915+35])
                                                    Pexp_ident "can_alias" (typing/includemod.ml[767,27915+26]..[767,27915+35])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (typing/includemod.ml[767,27915+36]..[767,27915+39])
                                                        Pexp_ident "env" (typing/includemod.ml[767,27915+36]..[767,27915+39])
                                                    <arg>
                                                    Nolabel
                                                      expression (typing/includemod.ml[767,27915+40]..[767,27915+48])
                                                        Pexp_ident "arg_path" (typing/includemod.ml[767,27915+40]..[767,27915+48])
                                                  ]
                                            ]
                                            expression (typing/includemod.ml[768,27967+10]..[769,28039+37])
                                              Pexp_let Nonrec
                                              [
                                                <def>
                                                  pattern (typing/includemod.ml[768,27967+14]..[768,27967+17])
                                                    Ppat_var "smd" (typing/includemod.ml[768,27967+14]..[768,27967+17])
                                                  expression (typing/includemod.ml[768,27967+20]..[768,27967+68])
                                                    Pexp_apply
                                                    expression (typing/includemod.ml[768,27967+20]..[768,27967+36])
                                                      Pexp_ident "Mtype.strengthen" (typing/includemod.ml[768,27967+20]..[768,27967+36])
                                                    [
                                                      <arg>
                                                      Labelled "aliasable"
                                                        expression (typing/includemod.ml[768,27967+38]..[768,27967+47])
                                                          Pexp_ident "aliasable" (typing/includemod.ml[768,27967+38]..[768,27967+47])
                                                      <arg>
                                                      Nolabel
                                                        expression (typing/includemod.ml[768,27967+48]..[768,27967+51])
                                                          Pexp_ident "env" (typing/includemod.ml[768,27967+48]..[768,27967+51])
                                                      <arg>
                                                      Nolabel
                                                        expression (typing/includemod.ml[768,27967+52]..[768,27967+59])
                                                          Pexp_ident "arg_mty" (typing/includemod.ml[768,27967+52]..[768,27967+59])
                                                      <arg>
                                                      Nolabel
                                                        expression (typing/includemod.ml[768,27967+60]..[768,27967+68])
                                                          Pexp_ident "arg_path" (typing/includemod.ml[768,27967+60]..[768,27967+68])
                                                    ]
                                              ]
                                              expression (typing/includemod.ml[769,28039+10]..[769,28039+37])
                                                Pexp_tuple
                                                [
                                                  expression (typing/includemod.ml[769,28039+11]..[769,28039+31])
                                                    Pexp_construct "Error.Named" (typing/includemod.ml[769,28039+11]..[769,28039+22])
                                                    Some
                                                      expression (typing/includemod.ml[769,28039+23]..[769,28039+31])
                                                        Pexp_ident "arg_path" (typing/includemod.ml[769,28039+23]..[769,28039+31])
                                                  expression (typing/includemod.ml[769,28039+33]..[769,28039+36])
                                                    Pexp_ident "smd" (typing/includemod.ml[769,28039+33]..[769,28039+36])
                                                ]
                                    ]
                                    expression (typing/includemod.ml[771,28088+8]..[774,28241+60])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (typing/includemod.ml[771,28088+12]..[771,28088+17])
                                            Ppat_var "mty_f" (typing/includemod.ml[771,28088+12]..[771,28088+17])
                                          expression (typing/includemod.ml[771,28088+20]..[771,28088+57])
                                            Pexp_field
                                            expression (typing/includemod.ml[771,28088+20]..[771,28088+49])
                                              Pexp_apply
                                              expression (typing/includemod.ml[771,28088+21]..[771,28088+36])
                                                Pexp_ident "Env.find_module" (typing/includemod.ml[771,28088+21]..[771,28088+36])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[771,28088+37]..[771,28088+44])
                                                    Pexp_ident "f0_path" (typing/includemod.ml[771,28088+37]..[771,28088+44])
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[771,28088+45]..[771,28088+48])
                                                    Pexp_ident "env" (typing/includemod.ml[771,28088+45]..[771,28088+48])
                                              ]
                                            "md_type" (typing/includemod.ml[771,28088+50]..[771,28088+57])
                                      ]
                                      expression (typing/includemod.ml[772,28149+8]..[774,28241+60])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (typing/includemod.ml[772,28149+12]..[772,28149+16])
                                              Ppat_var "args" (typing/includemod.ml[772,28149+12]..[772,28149+16])
                                            expression (typing/includemod.ml[772,28149+19]..[772,28149+44])
                                              Pexp_apply
                                              expression (typing/includemod.ml[772,28149+19]..[772,28149+27])
                                                Pexp_ident "List.map" (typing/includemod.ml[772,28149+19]..[772,28149+27])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[772,28149+28]..[772,28149+39])
                                                    Pexp_ident "prepare_arg" (typing/includemod.ml[772,28149+28]..[772,28149+39])
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[772,28149+40]..[772,28149+44])
                                                    Pexp_ident "args" (typing/includemod.ml[772,28149+40]..[772,28149+44])
                                              ]
                                        ]
                                        expression (typing/includemod.ml[773,28197+8]..[774,28241+60])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (typing/includemod.ml[773,28197+12]..[773,28197+19])
                                                Ppat_var "lid_app" (typing/includemod.ml[773,28197+12]..[773,28197+19])
                                              expression (typing/includemod.ml[773,28197+22]..[773,28197+40])
                                                Pexp_construct "Some" (typing/includemod.ml[773,28197+22]..[773,28197+26])
                                                Some
                                                  expression (typing/includemod.ml[773,28197+27]..[773,28197+40])
                                                    Pexp_ident "lid_whole_app" (typing/includemod.ml[773,28197+27]..[773,28197+40])
                                          ]
                                          expression (typing/includemod.ml[774,28241+8]..[774,28241+60])
                                            Pexp_apply
                                            expression (typing/includemod.ml[774,28241+8]..[774,28241+13])
                                              Pexp_ident "raise" (typing/includemod.ml[774,28241+8]..[774,28241+13])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (typing/includemod.ml[774,28241+14]..[774,28241+60])
                                                  Pexp_construct "Apply_error" (typing/includemod.ml[774,28241+15]..[774,28241+26])
                                                  Some
                                                    expression (typing/includemod.ml[774,28241+27]..[774,28241+59])
                                                      Pexp_record
                                                      [
                                                        "loc" (typing/includemod.ml[774,28241+28]..[774,28241+31]) ghost
                                                          expression (typing/includemod.ml[774,28241+28]..[774,28241+31])
                                                            Pexp_ident "loc" (typing/includemod.ml[774,28241+28]..[774,28241+31])
                                                        "env" (typing/includemod.ml[774,28241+33]..[774,28241+36]) ghost
                                                          expression (typing/includemod.ml[774,28241+33]..[774,28241+36])
                                                            Pexp_ident "env" (typing/includemod.ml[774,28241+33]..[774,28241+36])
                                                        "lid_app" (typing/includemod.ml[774,28241+38]..[774,28241+45]) ghost
                                                          expression (typing/includemod.ml[774,28241+38]..[774,28241+45])
                                                            Pexp_ident "lid_app" (typing/includemod.ml[774,28241+38]..[774,28241+45])
                                                        "mty_f" (typing/includemod.ml[774,28241+47]..[774,28241+52]) ghost
                                                          expression (typing/includemod.ml[774,28241+47]..[774,28241+52])
                                                            Pexp_ident "mty_f" (typing/includemod.ml[774,28241+47]..[774,28241+52])
                                                        "args" (typing/includemod.ml[774,28241+54]..[774,28241+58]) ghost
                                                          expression (typing/includemod.ml[774,28241+54]..[774,28241+58])
                                                            Pexp_ident "args" (typing/includemod.ml[774,28241+54]..[774,28241+58])
                                                      ]
                                                      None
                                            ]
                                  Some
                                    expression (typing/includemod.ml[776,28313+8]..[776,28313+23])
                                      Pexp_apply
                                      expression (typing/includemod.ml[776,28313+8]..[776,28313+13])
                                        Pexp_ident "raise" (typing/includemod.ml[776,28313+8]..[776,28313+13])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (typing/includemod.ml[776,28313+14]..[776,28313+23])
                                            Pexp_construct "Not_found" (typing/includemod.ml[776,28313+14]..[776,28313+23])
                                            None
                                      ]
                            ]
    ]
  structure_item (typing/includemod.ml[778,28338+0]..[779,28347+68])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/includemod.ml[778,28338+4]..[778,28338+6])
          Ppat_construct "()" (typing/includemod.ml[778,28338+4]..[778,28338+6])
          None
        expression (typing/includemod.ml[779,28347+2]..[779,28347+68])
          Pexp_apply
          expression (typing/includemod.ml[779,28347+32]..[779,28347+34])
            Pexp_ident ":=" (typing/includemod.ml[779,28347+32]..[779,28347+34])
          [
            <arg>
            Nolabel
              expression (typing/includemod.ml[779,28347+2]..[779,28347+31])
                Pexp_ident "Env.check_functor_application" (typing/includemod.ml[779,28347+2]..[779,28347+31])
            <arg>
            Nolabel
              expression (typing/includemod.ml[779,28347+35]..[779,28347+68])
                Pexp_ident "check_functor_application_in_path" (typing/includemod.ml[779,28347+35]..[779,28347+68])
          ]
    ]
  structure_item (typing/includemod.ml[785,28500+0]..[793,28820+13])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/includemod.ml[785,28500+4]..[785,28500+12])
          Ppat_var "compunit" (typing/includemod.ml[785,28500+4]..[785,28500+12])
        expression (typing/includemod.ml[785,28500+13]..[793,28820+13]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (typing/includemod.ml[785,28500+13]..[785,28500+16])
            Ppat_var "env" (typing/includemod.ml[785,28500+13]..[785,28500+16])
          expression (typing/includemod.ml[785,28500+17]..[793,28820+13]) ghost
            Pexp_fun
            Labelled "mark"
            None
            pattern (typing/includemod.ml[785,28500+18]..[785,28500+22])
              Ppat_var "mark" (typing/includemod.ml[785,28500+18]..[785,28500+22])
            expression (typing/includemod.ml[785,28500+23]..[793,28820+13]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (typing/includemod.ml[785,28500+23]..[785,28500+32])
                Ppat_var "impl_name" (typing/includemod.ml[785,28500+23]..[785,28500+32])
              expression (typing/includemod.ml[785,28500+33]..[793,28820+13]) ghost
                Pexp_fun
                Nolabel
                None
                pattern (typing/includemod.ml[785,28500+33]..[785,28500+41])
                  Ppat_var "impl_sig" (typing/includemod.ml[785,28500+33]..[785,28500+41])
                expression (typing/includemod.ml[785,28500+42]..[793,28820+13]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (typing/includemod.ml[785,28500+42]..[785,28500+51])
                    Ppat_var "intf_name" (typing/includemod.ml[785,28500+42]..[785,28500+51])
                  expression (typing/includemod.ml[785,28500+52]..[793,28820+13]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (typing/includemod.ml[785,28500+52]..[785,28500+60])
                      Ppat_var "intf_sig" (typing/includemod.ml[785,28500+52]..[785,28500+60])
                    expression (typing/includemod.ml[786,28563+2]..[793,28820+13])
                      Pexp_match
                      expression (typing/includemod.ml[787,28571+4]..[788,28645+23])
                        Pexp_apply
                        expression (typing/includemod.ml[787,28571+4]..[787,28571+14])
                          Pexp_ident "signatures" (typing/includemod.ml[787,28571+4]..[787,28571+14])
                        [
                          <arg>
                          Labelled "loc"
                            expression (typing/includemod.ml[787,28571+20]..[787,28571+48])
                              Pexp_apply
                              expression (typing/includemod.ml[787,28571+21]..[787,28571+37])
                                Pexp_ident "Location.in_file" (typing/includemod.ml[787,28571+21]..[787,28571+37])
                              [
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[787,28571+38]..[787,28571+47])
                                    Pexp_ident "impl_name" (typing/includemod.ml[787,28571+38]..[787,28571+47])
                              ]
                          <arg>
                          Nolabel
                            expression (typing/includemod.ml[787,28571+49]..[787,28571+52])
                              Pexp_ident "env" (typing/includemod.ml[787,28571+49]..[787,28571+52])
                          <arg>
                          Labelled "mark"
                            expression (typing/includemod.ml[787,28571+54]..[787,28571+58])
                              Pexp_ident "mark" (typing/includemod.ml[787,28571+54]..[787,28571+58])
                          <arg>
                          Nolabel
                            expression (typing/includemod.ml[787,28571+59]..[787,28571+73])
                              Pexp_ident "Subst.identity" (typing/includemod.ml[787,28571+59]..[787,28571+73])
                          <arg>
                          Nolabel
                            expression (typing/includemod.ml[788,28645+6]..[788,28645+14])
                              Pexp_ident "impl_sig" (typing/includemod.ml[788,28645+6]..[788,28645+14])
                          <arg>
                          Nolabel
                            expression (typing/includemod.ml[788,28645+15]..[788,28645+23])
                              Pexp_ident "intf_sig" (typing/includemod.ml[788,28645+15]..[788,28645+23])
                        ]
                      [
                        <case>
                          pattern (typing/includemod.ml[789,28669+7]..[789,28669+27])
                            Ppat_construct "Result.Error" (typing/includemod.ml[789,28669+7]..[789,28669+19])
                            Some
                              []
                              pattern (typing/includemod.ml[789,28669+20]..[789,28669+27])
                                Ppat_var "reasons" (typing/includemod.ml[789,28669+20]..[789,28669+27])
                          expression (typing/includemod.ml[790,28700+4]..[792,28791+28])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (typing/includemod.ml[790,28700+8]..[790,28700+13])
                                  Ppat_var "cdiff" (typing/includemod.ml[790,28700+8]..[790,28700+13])
                                expression (typing/includemod.ml[791,28716+6]..[791,28716+71])
                                  Pexp_construct "Error.In_Compilation_unit" (typing/includemod.ml[791,28716+6]..[791,28716+31])
                                  Some
                                    expression (typing/includemod.ml[791,28716+31]..[791,28716+71])
                                      Pexp_apply
                                      expression (typing/includemod.ml[791,28716+32]..[791,28716+42])
                                        Pexp_ident "Error.diff" (typing/includemod.ml[791,28716+32]..[791,28716+42])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (typing/includemod.ml[791,28716+43]..[791,28716+52])
                                            Pexp_ident "impl_name" (typing/includemod.ml[791,28716+43]..[791,28716+52])
                                        <arg>
                                        Nolabel
                                          expression (typing/includemod.ml[791,28716+53]..[791,28716+62])
                                            Pexp_ident "intf_name" (typing/includemod.ml[791,28716+53]..[791,28716+62])
                                        <arg>
                                        Nolabel
                                          expression (typing/includemod.ml[791,28716+63]..[791,28716+70])
                                            Pexp_ident "reasons" (typing/includemod.ml[791,28716+63]..[791,28716+70])
                                      ]
                            ]
                            expression (typing/includemod.ml[792,28791+4]..[792,28791+28])
                              Pexp_apply
                              expression (typing/includemod.ml[792,28791+4]..[792,28791+9])
                                Pexp_ident "raise" (typing/includemod.ml[792,28791+4]..[792,28791+9])
                              [
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[792,28791+9]..[792,28791+28])
                                    Pexp_construct "Error" (typing/includemod.ml[792,28791+10]..[792,28791+15])
                                    Some
                                      expression (typing/includemod.ml[792,28791+15]..[792,28791+27])
                                        Pexp_tuple
                                        [
                                          expression (typing/includemod.ml[792,28791+16]..[792,28791+19])
                                            Pexp_ident "env" (typing/includemod.ml[792,28791+16]..[792,28791+19])
                                          expression (typing/includemod.ml[792,28791+21]..[792,28791+26])
                                            Pexp_ident "cdiff" (typing/includemod.ml[792,28791+21]..[792,28791+26])
                                        ]
                              ]
                        <case>
                          pattern (typing/includemod.ml[793,28820+4]..[793,28820+8])
                            Ppat_construct "Ok" (typing/includemod.ml[793,28820+4]..[793,28820+6])
                            Some
                              []
                              pattern (typing/includemod.ml[793,28820+7]..[793,28820+8])
                                Ppat_var "x" (typing/includemod.ml[793,28820+7]..[793,28820+8])
                          expression (typing/includemod.ml[793,28820+12]..[793,28820+13])
                            Pexp_ident "x" (typing/includemod.ml[793,28820+12]..[793,28820+13])
                      ]
    ]
  structure_item (typing/includemod.ml[799,28933+0]..[905,32231+3])
    Pstr_module
    "Functor_inclusion_diff" (typing/includemod.ml[799,28933+7]..[799,28933+29])
      module_expr (typing/includemod.ml[799,28933+32]..[905,32231+3])
        Pmod_structure
        [
          structure_item (typing/includemod.ml[801,28973+2]..[811,29270+5])
            Pstr_module
            "Defs" (typing/includemod.ml[801,28973+9]..[801,28973+13])
              module_expr (typing/includemod.ml[801,28973+16]..[811,29270+5])
                Pmod_structure
                [
                  structure_item (typing/includemod.ml[802,28996+4]..[802,28996+39])
                    Pstr_type Rec
                    [
                      type_declaration "left" (typing/includemod.ml[802,28996+9]..[802,28996+13]) (typing/includemod.ml[802,28996+4]..[802,28996+39])
                        ptype_params =
                          []
                        ptype_cstrs =
                          []
                        ptype_kind =
                          Ptype_abstract
                        ptype_private = Public
                        ptype_manifest =
                          Some
                            core_type (typing/includemod.ml[802,28996+16]..[802,28996+39])
                              Ptyp_constr "Types.functor_parameter" (typing/includemod.ml[802,28996+16]..[802,28996+39])
                              []
                    ]
                  structure_item (typing/includemod.ml[803,29036+4]..[803,29036+21])
                    Pstr_type Rec
                    [
                      type_declaration "right" (typing/includemod.ml[803,29036+9]..[803,29036+14]) (typing/includemod.ml[803,29036+4]..[803,29036+21])
                        ptype_params =
                          []
                        ptype_cstrs =
                          []
                        ptype_kind =
                          Ptype_abstract
                        ptype_private = Public
                        ptype_manifest =
                          Some
                            core_type (typing/includemod.ml[803,29036+17]..[803,29036+21])
                              Ptyp_constr "left" (typing/includemod.ml[803,29036+17]..[803,29036+21])
                              []
                    ]
                  structure_item (typing/includemod.ml[804,29058+4]..[804,29058+39])
                    Pstr_type Rec
                    [
                      type_declaration "eq" (typing/includemod.ml[804,29058+9]..[804,29058+11]) (typing/includemod.ml[804,29058+4]..[804,29058+39])
                        ptype_params =
                          []
                        ptype_cstrs =
                          []
                        ptype_kind =
                          Ptype_abstract
                        ptype_private = Public
                        ptype_manifest =
                          Some
                            core_type (typing/includemod.ml[804,29058+14]..[804,29058+39])
                              Ptyp_constr "Typedtree.module_coercion" (typing/includemod.ml[804,29058+14]..[804,29058+39])
                              []
                    ]
                  structure_item (typing/includemod.ml[805,29098+4]..[805,29098+75])
                    Pstr_type Rec
                    [
                      type_declaration "diff" (typing/includemod.ml[805,29098+9]..[805,29098+13]) (typing/includemod.ml[805,29098+4]..[805,29098+75])
                        ptype_params =
                          []
                        ptype_cstrs =
                          []
                        ptype_kind =
                          Ptype_abstract
                        ptype_private = Public
                        ptype_manifest =
                          Some
                            core_type (typing/includemod.ml[805,29098+16]..[805,29098+75])
                              Ptyp_constr "Error.functor_param_symptom" (typing/includemod.ml[805,29098+48]..[805,29098+75])
                              [
                                core_type (typing/includemod.ml[805,29098+17]..[805,29098+40])
                                  Ptyp_constr "Types.functor_parameter" (typing/includemod.ml[805,29098+17]..[805,29098+40])
                                  []
                                core_type (typing/includemod.ml[805,29098+42]..[805,29098+46])
                                  Ptyp_constr "unit" (typing/includemod.ml[805,29098+42]..[805,29098+46])
                                  []
                              ]
                    ]
                  structure_item (typing/includemod.ml[806,29174+4]..[810,29264+5])
                    Pstr_type Rec
                    [
                      type_declaration "state" (typing/includemod.ml[806,29174+9]..[806,29174+14]) (typing/includemod.ml[806,29174+4]..[810,29264+5])
                        ptype_params =
                          []
                        ptype_cstrs =
                          []
                        ptype_kind =
                          Ptype_record
                            [
                              (typing/includemod.ml[807,29193+6]..[807,29193+30])
                                Immutable
                                "res" (typing/includemod.ml[807,29193+6]..[807,29193+9])                                core_type (typing/includemod.ml[807,29193+11]..[807,29193+29])
                                  Ptyp_constr "option" (typing/includemod.ml[807,29193+23]..[807,29193+29])
                                  [
                                    core_type (typing/includemod.ml[807,29193+11]..[807,29193+22])
                                      Ptyp_constr "module_type" (typing/includemod.ml[807,29193+11]..[807,29193+22])
                                      []
                                  ]
                              (typing/includemod.ml[808,29224+6]..[808,29224+17])
                                Immutable
                                "env" (typing/includemod.ml[808,29224+6]..[808,29224+9])                                core_type (typing/includemod.ml[808,29224+11]..[808,29224+16])
                                  Ptyp_constr "Env.t" (typing/includemod.ml[808,29224+11]..[808,29224+16])
                                  []
                              (typing/includemod.ml[809,29242+6]..[809,29242+21])
                                Immutable
                                "subst" (typing/includemod.ml[809,29242+6]..[809,29242+11])                                core_type (typing/includemod.ml[809,29242+13]..[809,29242+20])
                                  Ptyp_constr "Subst.t" (typing/includemod.ml[809,29242+13]..[809,29242+20])
                                  []
                            ]
                        ptype_private = Public
                        ptype_manifest =
                          None
                    ]
                ]
          structure_item (typing/includemod.ml[812,29276+2]..[812,29276+11])
            Pstr_open Fresh
            module_expr (typing/includemod.ml[812,29276+7]..[812,29276+11])
              Pmod_ident "Defs" (typing/includemod.ml[812,29276+7]..[812,29276+11])
          structure_item (typing/includemod.ml[814,29289+2]..[814,29289+36])
            Pstr_module
            "Diff" (typing/includemod.ml[814,29289+9]..[814,29289+13])
              module_expr (typing/includemod.ml[814,29289+16]..[814,29289+36])
                Pmod_apply
                module_expr (typing/includemod.ml[814,29289+16]..[814,29289+30])
                  Pmod_ident "Diffing.Define" (typing/includemod.ml[814,29289+16]..[814,29289+30])
                module_expr (typing/includemod.ml[814,29289+31]..[814,29289+35])
                  Pmod_ident "Defs" (typing/includemod.ml[814,29289+31]..[814,29289+35])
          structure_item (typing/includemod.ml[816,29327+2]..[818,29379+20])
            Pstr_value Nonrec
            [
              <def>
                pattern (typing/includemod.ml[816,29327+6]..[816,29327+16])
                  Ppat_var "param_name" (typing/includemod.ml[816,29327+6]..[816,29327+16])
                expression (typing/includemod.ml[816,29327+19]..[818,29379+20])
                  Pexp_function
                  [
                    <case>
                      pattern (typing/includemod.ml[817,29355+8]..[817,29355+18])
                        Ppat_construct "Named" (typing/includemod.ml[817,29355+8]..[817,29355+13])
                        Some
                          []
                          pattern (typing/includemod.ml[817,29355+13]..[817,29355+18])
                            Ppat_tuple
                            [
                              pattern (typing/includemod.ml[817,29355+14]..[817,29355+15])
                                Ppat_var "x" (typing/includemod.ml[817,29355+14]..[817,29355+15])
                              pattern (typing/includemod.ml[817,29355+16]..[817,29355+17])
                                Ppat_any
                            ]
                      expression (typing/includemod.ml[817,29355+22]..[817,29355+23])
                        Pexp_ident "x" (typing/includemod.ml[817,29355+22]..[817,29355+23])
                    <case>
                      pattern (typing/includemod.ml[818,29379+8]..[818,29379+12])
                        Ppat_construct "Unit" (typing/includemod.ml[818,29379+8]..[818,29379+12])
                        None
                      expression (typing/includemod.ml[818,29379+16]..[818,29379+20])
                        Pexp_construct "None" (typing/includemod.ml[818,29379+16]..[818,29379+20])
                        None
                  ]
            ]
          structure_item (typing/includemod.ml[820,29401+2]..[833,29814+9])
            Pstr_value Nonrec
            [
              <def>
                pattern (typing/includemod.ml[820,29401+6]..[820,29401+30]) ghost
                  Ppat_constraint
                  pattern (typing/includemod.ml[820,29401+6]..[820,29401+12])
                    Ppat_var "weight" (typing/includemod.ml[820,29401+6]..[820,29401+12])
                  core_type (typing/includemod.ml[820,29401+14]..[820,29401+30]) ghost
                    Ptyp_poly
                    core_type (typing/includemod.ml[820,29401+14]..[820,29401+30])
                      Ptyp_arrow
                      Nolabel
                      core_type (typing/includemod.ml[820,29401+14]..[820,29401+25])
                        Ptyp_constr "Diff.change" (typing/includemod.ml[820,29401+14]..[820,29401+25])
                        []
                      core_type (typing/includemod.ml[820,29401+29]..[820,29401+30])
                        Ptyp_any
                expression (typing/includemod.ml[820,29401+6]..[833,29814+9])
                  Pexp_constraint
                  expression (typing/includemod.ml[820,29401+33]..[833,29814+9])
                    Pexp_function
                    [
                      <case>
                        pattern (typing/includemod.ml[821,29443+6]..[821,29443+14])
                          Ppat_construct "Insert" (typing/includemod.ml[821,29443+6]..[821,29443+12])
                          Some
                            []
                            pattern (typing/includemod.ml[821,29443+13]..[821,29443+14])
                              Ppat_any
                        expression (typing/includemod.ml[821,29443+18]..[821,29443+20])
                          Pexp_constant PConst_int (10,None)
                      <case>
                        pattern (typing/includemod.ml[822,29464+6]..[822,29464+14])
                          Ppat_construct "Delete" (typing/includemod.ml[822,29464+6]..[822,29464+12])
                          Some
                            []
                            pattern (typing/includemod.ml[822,29464+13]..[822,29464+14])
                              Ppat_any
                        expression (typing/includemod.ml[822,29464+18]..[822,29464+20])
                          Pexp_constant PConst_int (10,None)
                      <case>
                        pattern (typing/includemod.ml[823,29485+6]..[823,29485+14])
                          Ppat_construct "Change" (typing/includemod.ml[823,29485+6]..[823,29485+12])
                          Some
                            []
                            pattern (typing/includemod.ml[823,29485+13]..[823,29485+14])
                              Ppat_any
                        expression (typing/includemod.ml[823,29485+18]..[823,29485+20])
                          Pexp_constant PConst_int (10,None)
                      <case>
                        pattern (typing/includemod.ml[824,29506+6]..[824,29506+30])
                          Ppat_construct "Keep" (typing/includemod.ml[824,29506+6]..[824,29506+10])
                          Some
                            []
                            pattern (typing/includemod.ml[824,29506+11]..[824,29506+30])
                              Ppat_tuple
                              [
                                pattern (typing/includemod.ml[824,29506+12]..[824,29506+18])
                                  Ppat_var "param1" (typing/includemod.ml[824,29506+12]..[824,29506+18])
                                pattern (typing/includemod.ml[824,29506+20]..[824,29506+26])
                                  Ppat_var "param2" (typing/includemod.ml[824,29506+20]..[824,29506+26])
                                pattern (typing/includemod.ml[824,29506+28]..[824,29506+29])
                                  Ppat_any
                              ]
                        expression (typing/includemod.ml[824,29506+34]..[833,29814+9])
                          Pexp_match
                          expression (typing/includemod.ml[825,29546+14]..[825,29546+50])
                            Pexp_tuple
                            [
                              expression (typing/includemod.ml[825,29546+14]..[825,29546+31])
                                Pexp_apply
                                expression (typing/includemod.ml[825,29546+14]..[825,29546+24])
                                  Pexp_ident "param_name" (typing/includemod.ml[825,29546+14]..[825,29546+24])
                                [
                                  <arg>
                                  Nolabel
                                    expression (typing/includemod.ml[825,29546+25]..[825,29546+31])
                                      Pexp_ident "param1" (typing/includemod.ml[825,29546+25]..[825,29546+31])
                                ]
                              expression (typing/includemod.ml[825,29546+33]..[825,29546+50])
                                Pexp_apply
                                expression (typing/includemod.ml[825,29546+33]..[825,29546+43])
                                  Pexp_ident "param_name" (typing/includemod.ml[825,29546+33]..[825,29546+43])
                                [
                                  <arg>
                                  Nolabel
                                    expression (typing/includemod.ml[825,29546+44]..[825,29546+50])
                                      Pexp_ident "param2" (typing/includemod.ml[825,29546+44]..[825,29546+50])
                                ]
                            ]
                          [
                            <case>
                              pattern (typing/includemod.ml[826,29602+10]..[826,29602+20])
                                Ppat_tuple
                                [
                                  pattern (typing/includemod.ml[826,29602+10]..[826,29602+14])
                                    Ppat_construct "None" (typing/includemod.ml[826,29602+10]..[826,29602+14])
                                    None
                                  pattern (typing/includemod.ml[826,29602+16]..[826,29602+20])
                                    Ppat_construct "None" (typing/includemod.ml[826,29602+16]..[826,29602+20])
                                    None
                                ]
                              expression (typing/includemod.ml[827,29623+13]..[827,29623+14])
                                Pexp_constant PConst_int (0,None)
                            <case>
                              pattern (typing/includemod.ml[828,29638+10]..[828,29638+26])
                                Ppat_tuple
                                [
                                  pattern (typing/includemod.ml[828,29638+10]..[828,29638+17])
                                    Ppat_construct "Some" (typing/includemod.ml[828,29638+10]..[828,29638+14])
                                    Some
                                      []
                                      pattern (typing/includemod.ml[828,29638+15]..[828,29638+17])
                                        Ppat_var "n1" (typing/includemod.ml[828,29638+15]..[828,29638+17])
                                  pattern (typing/includemod.ml[828,29638+19]..[828,29638+26])
                                    Ppat_construct "Some" (typing/includemod.ml[828,29638+19]..[828,29638+23])
                                    Some
                                      []
                                      pattern (typing/includemod.ml[828,29638+24]..[828,29638+26])
                                        Ppat_var "n2" (typing/includemod.ml[828,29638+24]..[828,29638+26])
                                ]
                              <when>
                                expression (typing/includemod.ml[829,29665+15]..[829,29665+59])
                                  Pexp_apply
                                  expression (typing/includemod.ml[829,29665+15]..[829,29665+27])
                                    Pexp_ident "String.equal" (typing/includemod.ml[829,29665+15]..[829,29665+27])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[829,29665+28]..[829,29665+43])
                                        Pexp_apply
                                        expression (typing/includemod.ml[829,29665+29]..[829,29665+39])
                                          Pexp_ident "Ident.name" (typing/includemod.ml[829,29665+29]..[829,29665+39])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (typing/includemod.ml[829,29665+40]..[829,29665+42])
                                              Pexp_ident "n1" (typing/includemod.ml[829,29665+40]..[829,29665+42])
                                        ]
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[829,29665+44]..[829,29665+59])
                                        Pexp_apply
                                        expression (typing/includemod.ml[829,29665+45]..[829,29665+55])
                                          Pexp_ident "Ident.name" (typing/includemod.ml[829,29665+45]..[829,29665+55])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (typing/includemod.ml[829,29665+56]..[829,29665+58])
                                              Pexp_ident "n2" (typing/includemod.ml[829,29665+56]..[829,29665+58])
                                        ]
                                  ]
                              expression (typing/includemod.ml[830,29725+13]..[830,29725+14])
                                Pexp_constant PConst_int (0,None)
                            <case>
                              pattern (typing/includemod.ml[831,29740+10]..[831,29740+24])
                                Ppat_tuple
                                [
                                  pattern (typing/includemod.ml[831,29740+10]..[831,29740+16])
                                    Ppat_construct "Some" (typing/includemod.ml[831,29740+10]..[831,29740+14])
                                    Some
                                      []
                                      pattern (typing/includemod.ml[831,29740+15]..[831,29740+16])
                                        Ppat_any
                                  pattern (typing/includemod.ml[831,29740+18]..[831,29740+24])
                                    Ppat_construct "Some" (typing/includemod.ml[831,29740+18]..[831,29740+22])
                                    Some
                                      []
                                      pattern (typing/includemod.ml[831,29740+23]..[831,29740+24])
                                        Ppat_any
                                ]
                              expression (typing/includemod.ml[831,29740+28]..[831,29740+29])
                                Pexp_constant PConst_int (1,None)
                            <case>
                              pattern (typing/includemod.ml[832,29770+10]..[832,29770+38])
                                Ppat_or
                                pattern (typing/includemod.ml[832,29770+10]..[832,29770+23])
                                  Ppat_tuple
                                  [
                                    pattern (typing/includemod.ml[832,29770+10]..[832,29770+16])
                                      Ppat_construct "Some" (typing/includemod.ml[832,29770+10]..[832,29770+14])
                                      Some
                                        []
                                        pattern (typing/includemod.ml[832,29770+15]..[832,29770+16])
                                          Ppat_any
                                    pattern (typing/includemod.ml[832,29770+19]..[832,29770+23])
                                      Ppat_construct "None" (typing/includemod.ml[832,29770+19]..[832,29770+23])
                                      None
                                  ]
                                pattern (typing/includemod.ml[832,29770+26]..[832,29770+38])
                                  Ppat_tuple
                                  [
                                    pattern (typing/includemod.ml[832,29770+26]..[832,29770+30])
                                      Ppat_construct "None" (typing/includemod.ml[832,29770+26]..[832,29770+30])
                                      None
                                    pattern (typing/includemod.ml[832,29770+32]..[832,29770+38])
                                      Ppat_construct "Some" (typing/includemod.ml[832,29770+32]..[832,29770+36])
                                      Some
                                        []
                                        pattern (typing/includemod.ml[832,29770+37]..[832,29770+38])
                                          Ppat_any
                                  ]
                              expression (typing/includemod.ml[832,29770+42]..[832,29770+43])
                                Pexp_constant PConst_int (1,None)
                          ]
                    ]
                  core_type (typing/includemod.ml[820,29401+14]..[820,29401+30])
                    Ptyp_arrow
                    Nolabel
                    core_type (typing/includemod.ml[820,29401+14]..[820,29401+25])
                      Ptyp_constr "Diff.change" (typing/includemod.ml[820,29401+14]..[820,29401+25])
                      []
                    core_type (typing/includemod.ml[820,29401+29]..[820,29401+30])
                      Ptyp_any
            ]
          structure_item (typing/includemod.ml[837,29827+2]..[839,29917+45])
            Pstr_value Nonrec
            [
              <def>
                pattern (typing/includemod.ml[837,29827+6]..[837,29827+27])
                  Ppat_var "keep_expansible_param" (typing/includemod.ml[837,29827+6]..[837,29827+27])
                expression (typing/includemod.ml[837,29827+30]..[839,29917+45])
                  Pexp_function
                  [
                    <case>
                      pattern (typing/includemod.ml[838,29866+6]..[838,29866+38])
                        Ppat_alias "mty" (typing/includemod.ml[838,29866+35]..[838,29866+38])
                        pattern (typing/includemod.ml[838,29866+6]..[838,29866+31])
                          Ppat_or
                          pattern (typing/includemod.ml[838,29866+6]..[838,29866+17])
                            Ppat_construct "Mty_ident" (typing/includemod.ml[838,29866+6]..[838,29866+15])
                            Some
                              []
                              pattern (typing/includemod.ml[838,29866+16]..[838,29866+17])
                                Ppat_any
                          pattern (typing/includemod.ml[838,29866+20]..[838,29866+31])
                            Ppat_construct "Mty_alias" (typing/includemod.ml[838,29866+20]..[838,29866+29])
                            Some
                              []
                              pattern (typing/includemod.ml[838,29866+30]..[838,29866+31])
                                Ppat_any
                      expression (typing/includemod.ml[838,29866+42]..[838,29866+50])
                        Pexp_construct "Some" (typing/includemod.ml[838,29866+42]..[838,29866+46])
                        Some
                          expression (typing/includemod.ml[838,29866+47]..[838,29866+50])
                            Pexp_ident "mty" (typing/includemod.ml[838,29866+47]..[838,29866+50])
                    <case>
                      pattern (typing/includemod.ml[839,29917+6]..[839,29917+37])
                        Ppat_or
                        pattern (typing/includemod.ml[839,29917+6]..[839,29917+21])
                          Ppat_construct "Mty_signature" (typing/includemod.ml[839,29917+6]..[839,29917+19])
                          Some
                            []
                            pattern (typing/includemod.ml[839,29917+20]..[839,29917+21])
                              Ppat_any
                        pattern (typing/includemod.ml[839,29917+24]..[839,29917+37])
                          Ppat_construct "Mty_functor" (typing/includemod.ml[839,29917+24]..[839,29917+35])
                          Some
                            []
                            pattern (typing/includemod.ml[839,29917+36]..[839,29917+37])
                              Ppat_any
                      expression (typing/includemod.ml[839,29917+41]..[839,29917+45])
                        Pexp_construct "None" (typing/includemod.ml[839,29917+41]..[839,29917+45])
                        None
                  ]
            ]
          structure_item (typing/includemod.ml[841,29964+2]..[848,30207+50])
            Pstr_value Nonrec
            [
              <def>
                pattern (typing/includemod.ml[841,29964+6]..[841,29964+22])
                  Ppat_var "lookup_expansion" (typing/includemod.ml[841,29964+6]..[841,29964+22])
                expression (typing/includemod.ml[841,29964+23]..[848,30207+50]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (typing/includemod.ml[841,29964+23]..[841,29964+40])
                    Ppat_record Open
                    [
                      "env" (typing/includemod.ml[841,29964+25]..[841,29964+28]) ghost
                        pattern (typing/includemod.ml[841,29964+25]..[841,29964+28])
                          Ppat_var "env" (typing/includemod.ml[841,29964+25]..[841,29964+28])
                      "res" (typing/includemod.ml[841,29964+31]..[841,29964+34]) ghost
                        pattern (typing/includemod.ml[841,29964+31]..[841,29964+34])
                          Ppat_var "res" (typing/includemod.ml[841,29964+31]..[841,29964+34])
                    ]
                  expression (typing/includemod.ml[841,29964+43]..[848,30207+50])
                    Pexp_match
                    expression (typing/includemod.ml[841,29964+49]..[841,29964+52])
                      Pexp_ident "res" (typing/includemod.ml[841,29964+49]..[841,29964+52])
                    [
                      <case>
                        pattern (typing/includemod.ml[842,30022+6]..[842,30022+10])
                          Ppat_construct "None" (typing/includemod.ml[842,30022+6]..[842,30022+10])
                          None
                        expression (typing/includemod.ml[842,30022+14]..[842,30022+18])
                          Pexp_construct "None" (typing/includemod.ml[842,30022+14]..[842,30022+18])
                          None
                      <case>
                        pattern (typing/includemod.ml[843,30041+6]..[843,30041+14])
                          Ppat_construct "Some" (typing/includemod.ml[843,30041+6]..[843,30041+10])
                          Some
                            []
                            pattern (typing/includemod.ml[843,30041+11]..[843,30041+14])
                              Ppat_var "res" (typing/includemod.ml[843,30041+11]..[843,30041+14])
                        expression (typing/includemod.ml[844,30059+8]..[848,30207+50])
                          Pexp_match
                          expression (typing/includemod.ml[844,30059+14]..[844,30059+45])
                            Pexp_apply
                            expression (typing/includemod.ml[844,30059+14]..[844,30059+37])
                              Pexp_ident "retrieve_functor_params" (typing/includemod.ml[844,30059+14]..[844,30059+37])
                            [
                              <arg>
                              Nolabel
                                expression (typing/includemod.ml[844,30059+38]..[844,30059+41])
                                  Pexp_ident "env" (typing/includemod.ml[844,30059+38]..[844,30059+41])
                              <arg>
                              Nolabel
                                expression (typing/includemod.ml[844,30059+42]..[844,30059+45])
                                  Pexp_ident "res" (typing/includemod.ml[844,30059+42]..[844,30059+45])
                            ]
                          [
                            <case>
                              pattern (typing/includemod.ml[845,30110+10]..[845,30110+15])
                                Ppat_tuple
                                [
                                  pattern (typing/includemod.ml[845,30110+10]..[845,30110+12])
                                    Ppat_construct "[]" (typing/includemod.ml[845,30110+10]..[845,30110+12])
                                    None
                                  pattern (typing/includemod.ml[845,30110+14]..[845,30110+15])
                                    Ppat_any
                                ]
                              expression (typing/includemod.ml[845,30110+19]..[845,30110+23])
                                Pexp_construct "None" (typing/includemod.ml[845,30110+19]..[845,30110+23])
                                None
                            <case>
                              pattern (typing/includemod.ml[846,30134+10]..[846,30134+21])
                                Ppat_tuple
                                [
                                  pattern (typing/includemod.ml[846,30134+10]..[846,30134+16])
                                    Ppat_var "params" (typing/includemod.ml[846,30134+10]..[846,30134+16])
                                  pattern (typing/includemod.ml[846,30134+18]..[846,30134+21])
                                    Ppat_var "res" (typing/includemod.ml[846,30134+18]..[846,30134+21])
                                ]
                              expression (typing/includemod.ml[847,30159+12]..[848,30207+50])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (typing/includemod.ml[847,30159+16]..[847,30159+20])
                                      Ppat_var "more" (typing/includemod.ml[847,30159+16]..[847,30159+20])
                                    expression (typing/includemod.ml[847,30159+23]..[847,30159+43])
                                      Pexp_apply
                                      expression (typing/includemod.ml[847,30159+23]..[847,30159+36])
                                        Pexp_ident "Array.of_list" (typing/includemod.ml[847,30159+23]..[847,30159+36])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (typing/includemod.ml[847,30159+37]..[847,30159+43])
                                            Pexp_ident "params" (typing/includemod.ml[847,30159+37]..[847,30159+43])
                                      ]
                                ]
                                expression (typing/includemod.ml[848,30207+12]..[848,30207+50])
                                  Pexp_construct "Some" (typing/includemod.ml[848,30207+12]..[848,30207+16])
                                  Some
                                    expression (typing/includemod.ml[848,30207+17]..[848,30207+50])
                                      Pexp_tuple
                                      [
                                        expression (typing/includemod.ml[848,30207+18]..[848,30207+43])
                                          Pexp_apply
                                          expression (typing/includemod.ml[848,30207+18]..[848,30207+39])
                                            Pexp_ident "keep_expansible_param" (typing/includemod.ml[848,30207+18]..[848,30207+39])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (typing/includemod.ml[848,30207+40]..[848,30207+43])
                                                Pexp_ident "res" (typing/includemod.ml[848,30207+40]..[848,30207+43])
                                          ]
                                        expression (typing/includemod.ml[848,30207+45]..[848,30207+49])
                                          Pexp_ident "more" (typing/includemod.ml[848,30207+45]..[848,30207+49])
                                      ]
                          ]
                    ]
            ]
          structure_item (typing/includemod.ml[850,30259+2]..[853,30352+60])
            Pstr_value Nonrec
            [
              <def>
                pattern (typing/includemod.ml[850,30259+6]..[850,30259+19])
                  Ppat_var "expand_params" (typing/includemod.ml[850,30259+6]..[850,30259+19])
                expression (typing/includemod.ml[850,30259+20]..[853,30352+60]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (typing/includemod.ml[850,30259+20]..[850,30259+25])
                    Ppat_var "state" (typing/includemod.ml[850,30259+20]..[850,30259+25])
                  expression (typing/includemod.ml[851,30288+4]..[853,30352+60])
                    Pexp_match
                    expression (typing/includemod.ml[851,30288+10]..[851,30288+32])
                      Pexp_apply
                      expression (typing/includemod.ml[851,30288+10]..[851,30288+26])
                        Pexp_ident "lookup_expansion" (typing/includemod.ml[851,30288+10]..[851,30288+26])
                      [
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[851,30288+27]..[851,30288+32])
                            Pexp_ident "state" (typing/includemod.ml[851,30288+27]..[851,30288+32])
                      ]
                    [
                      <case>
                        pattern (typing/includemod.ml[852,30326+6]..[852,30326+10])
                          Ppat_construct "None" (typing/includemod.ml[852,30326+6]..[852,30326+10])
                          None
                        expression (typing/includemod.ml[852,30326+14]..[852,30326+25])
                          Pexp_tuple
                          [
                            expression (typing/includemod.ml[852,30326+14]..[852,30326+19])
                              Pexp_ident "state" (typing/includemod.ml[852,30326+14]..[852,30326+19])
                            expression (typing/includemod.ml[852,30326+21]..[852,30326+25])
                              Pexp_array
                              []
                          ]
                      <case>
                        pattern (typing/includemod.ml[853,30352+6]..[853,30352+27])
                          Ppat_construct "Some" (typing/includemod.ml[853,30352+6]..[853,30352+10])
                          Some
                            []
                            pattern (typing/includemod.ml[853,30352+11]..[853,30352+27])
                              Ppat_tuple
                              [
                                pattern (typing/includemod.ml[853,30352+12]..[853,30352+15])
                                  Ppat_var "res" (typing/includemod.ml[853,30352+12]..[853,30352+15])
                                pattern (typing/includemod.ml[853,30352+17]..[853,30352+26])
                                  Ppat_var "expansion" (typing/includemod.ml[853,30352+17]..[853,30352+26])
                              ]
                        expression (typing/includemod.ml[853,30352+31]..[853,30352+60])
                          Pexp_tuple
                          [
                            expression (typing/includemod.ml[853,30352+31]..[853,30352+49])
                              Pexp_record
                              [
                                "res" (typing/includemod.ml[853,30352+44]..[853,30352+47]) ghost
                                  expression (typing/includemod.ml[853,30352+44]..[853,30352+47])
                                    Pexp_ident "res" (typing/includemod.ml[853,30352+44]..[853,30352+47])
                              ]
                              Some
                                expression (typing/includemod.ml[853,30352+33]..[853,30352+38])
                                  Pexp_ident "state" (typing/includemod.ml[853,30352+33]..[853,30352+38])
                            expression (typing/includemod.ml[853,30352+51]..[853,30352+60])
                              Pexp_ident "expansion" (typing/includemod.ml[853,30352+51]..[853,30352+60])
                          ]
                    ]
            ]
          structure_item (typing/includemod.ml[855,30414+2]..[884,31657+9])
            Pstr_value Nonrec
            [
              <def>
                pattern (typing/includemod.ml[855,30414+6]..[855,30414+12])
                  Ppat_var "update" (typing/includemod.ml[855,30414+6]..[855,30414+12])
                expression (typing/includemod.ml[855,30414+13]..[884,31657+9]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (typing/includemod.ml[855,30414+13]..[855,30414+28])
                    Ppat_constraint
                    pattern (typing/includemod.ml[855,30414+14]..[855,30414+15])
                      Ppat_var "d" (typing/includemod.ml[855,30414+14]..[855,30414+15])
                    core_type (typing/includemod.ml[855,30414+16]..[855,30414+27])
                      Ptyp_constr "Diff.change" (typing/includemod.ml[855,30414+16]..[855,30414+27])
                      []
                  expression (typing/includemod.ml[855,30414+29]..[884,31657+9]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (typing/includemod.ml[855,30414+29]..[855,30414+31])
                      Ppat_var "st" (typing/includemod.ml[855,30414+29]..[855,30414+31])
                    expression (typing/includemod.ml[855,30414+34]..[884,31657+9])
                      Pexp_match
                      expression (typing/includemod.ml[855,30414+40]..[855,30414+41])
                        Pexp_ident "d" (typing/includemod.ml[855,30414+40]..[855,30414+41])
                      [
                        <case>
                          pattern (typing/includemod.ml[856,30461+6]..[860,30579+43])
                            Ppat_or
                            pattern (typing/includemod.ml[856,30461+6]..[859,30557+21])
                              Ppat_or
                              pattern (typing/includemod.ml[856,30461+6]..[858,30535+21])
                                Ppat_or
                                pattern (typing/includemod.ml[856,30461+6]..[857,30498+36])
                                  Ppat_or
                                  pattern (typing/includemod.ml[856,30461+6]..[856,30461+36])
                                    Ppat_construct "Insert" (typing/includemod.ml[856,30461+6]..[856,30461+12])
                                    Some
                                      []
                                      pattern (typing/includemod.ml[856,30461+13]..[856,30461+36])
                                        Ppat_or
                                        pattern (typing/includemod.ml[856,30461+14]..[856,30461+18])
                                          Ppat_construct "Unit" (typing/includemod.ml[856,30461+14]..[856,30461+18])
                                          None
                                        pattern (typing/includemod.ml[856,30461+21]..[856,30461+35])
                                          Ppat_construct "Named" (typing/includemod.ml[856,30461+21]..[856,30461+26])
                                          Some
                                            []
                                            pattern (typing/includemod.ml[856,30461+27]..[856,30461+35])
                                              Ppat_tuple
                                              [
                                                pattern (typing/includemod.ml[856,30461+28]..[856,30461+32])
                                                  Ppat_construct "None" (typing/includemod.ml[856,30461+28]..[856,30461+32])
                                                  None
                                                pattern (typing/includemod.ml[856,30461+33]..[856,30461+34])
                                                  Ppat_any
                                              ]
                                  pattern (typing/includemod.ml[857,30498+6]..[857,30498+36])
                                    Ppat_construct "Delete" (typing/includemod.ml[857,30498+6]..[857,30498+12])
                                    Some
                                      []
                                      pattern (typing/includemod.ml[857,30498+13]..[857,30498+36])
                                        Ppat_or
                                        pattern (typing/includemod.ml[857,30498+14]..[857,30498+18])
                                          Ppat_construct "Unit" (typing/includemod.ml[857,30498+14]..[857,30498+18])
                                          None
                                        pattern (typing/includemod.ml[857,30498+21]..[857,30498+35])
                                          Ppat_construct "Named" (typing/includemod.ml[857,30498+21]..[857,30498+26])
                                          Some
                                            []
                                            pattern (typing/includemod.ml[857,30498+27]..[857,30498+35])
                                              Ppat_tuple
                                              [
                                                pattern (typing/includemod.ml[857,30498+28]..[857,30498+32])
                                                  Ppat_construct "None" (typing/includemod.ml[857,30498+28]..[857,30498+32])
                                                  None
                                                pattern (typing/includemod.ml[857,30498+33]..[857,30498+34])
                                                  Ppat_any
                                              ]
                                pattern (typing/includemod.ml[858,30535+6]..[858,30535+21])
                                  Ppat_construct "Keep" (typing/includemod.ml[858,30535+6]..[858,30535+10])
                                  Some
                                    []
                                    pattern (typing/includemod.ml[858,30535+11]..[858,30535+21])
                                      Ppat_tuple
                                      [
                                        pattern (typing/includemod.ml[858,30535+12]..[858,30535+16])
                                          Ppat_construct "Unit" (typing/includemod.ml[858,30535+12]..[858,30535+16])
                                          None
                                        pattern (typing/includemod.ml[858,30535+17]..[858,30535+18])
                                          Ppat_any
                                        pattern (typing/includemod.ml[858,30535+19]..[858,30535+20])
                                          Ppat_any
                                      ]
                              pattern (typing/includemod.ml[859,30557+6]..[859,30557+21])
                                Ppat_construct "Keep" (typing/includemod.ml[859,30557+6]..[859,30557+10])
                                Some
                                  []
                                  pattern (typing/includemod.ml[859,30557+11]..[859,30557+21])
                                    Ppat_tuple
                                    [
                                      pattern (typing/includemod.ml[859,30557+12]..[859,30557+13])
                                        Ppat_any
                                      pattern (typing/includemod.ml[859,30557+14]..[859,30557+18])
                                        Ppat_construct "Unit" (typing/includemod.ml[859,30557+14]..[859,30557+18])
                                        None
                                      pattern (typing/includemod.ml[859,30557+19]..[859,30557+20])
                                        Ppat_any
                                    ]
                            pattern (typing/includemod.ml[860,30579+6]..[860,30579+43])
                              Ppat_construct "Change" (typing/includemod.ml[860,30579+6]..[860,30579+12])
                              Some
                                []
                                pattern (typing/includemod.ml[860,30579+13]..[860,30579+43])
                                  Ppat_tuple
                                  [
                                    pattern (typing/includemod.ml[860,30579+14]..[860,30579+15])
                                      Ppat_any
                                    pattern (typing/includemod.ml[860,30579+16]..[860,30579+39])
                                      Ppat_or
                                      pattern (typing/includemod.ml[860,30579+17]..[860,30579+21])
                                        Ppat_construct "Unit" (typing/includemod.ml[860,30579+17]..[860,30579+21])
                                        None
                                      pattern (typing/includemod.ml[860,30579+24]..[860,30579+38])
                                        Ppat_construct "Named" (typing/includemod.ml[860,30579+24]..[860,30579+29])
                                        Some
                                          []
                                          pattern (typing/includemod.ml[860,30579+30]..[860,30579+38])
                                            Ppat_tuple
                                            [
                                              pattern (typing/includemod.ml[860,30579+31]..[860,30579+35])
                                                Ppat_construct "None" (typing/includemod.ml[860,30579+31]..[860,30579+35])
                                                None
                                              pattern (typing/includemod.ml[860,30579+36]..[860,30579+37])
                                                Ppat_any
                                            ]
                                    pattern (typing/includemod.ml[860,30579+41]..[860,30579+42])
                                      Ppat_any
                                  ]
                          expression (typing/includemod.ml[861,30626+8]..[861,30626+16])
                            Pexp_tuple
                            [
                              expression (typing/includemod.ml[861,30626+8]..[861,30626+10])
                                Pexp_ident "st" (typing/includemod.ml[861,30626+8]..[861,30626+10])
                              expression (typing/includemod.ml[861,30626+12]..[861,30626+16])
                                Pexp_array
                                []
                            ]
                        <case>
                          pattern (typing/includemod.ml[862,30643+6]..[864,30715+44])
                            Ppat_or
                            pattern (typing/includemod.ml[862,30643+6]..[863,30679+35])
                              Ppat_or
                              pattern (typing/includemod.ml[862,30643+6]..[862,30643+35])
                                Ppat_construct "Insert" (typing/includemod.ml[862,30643+6]..[862,30643+12])
                                Some
                                  []
                                  pattern (typing/includemod.ml[862,30643+13]..[862,30643+35])
                                    Ppat_construct "Named" (typing/includemod.ml[862,30643+14]..[862,30643+19])
                                    Some
                                      []
                                      pattern (typing/includemod.ml[862,30643+20]..[862,30643+34])
                                        Ppat_tuple
                                        [
                                          pattern (typing/includemod.ml[862,30643+21]..[862,30643+28])
                                            Ppat_construct "Some" (typing/includemod.ml[862,30643+21]..[862,30643+25])
                                            Some
                                              []
                                              pattern (typing/includemod.ml[862,30643+26]..[862,30643+28])
                                                Ppat_var "id" (typing/includemod.ml[862,30643+26]..[862,30643+28])
                                          pattern (typing/includemod.ml[862,30643+30]..[862,30643+33])
                                            Ppat_var "arg" (typing/includemod.ml[862,30643+30]..[862,30643+33])
                                        ]
                              pattern (typing/includemod.ml[863,30679+6]..[863,30679+35])
                                Ppat_construct "Delete" (typing/includemod.ml[863,30679+6]..[863,30679+12])
                                Some
                                  []
                                  pattern (typing/includemod.ml[863,30679+13]..[863,30679+35])
                                    Ppat_construct "Named" (typing/includemod.ml[863,30679+14]..[863,30679+19])
                                    Some
                                      []
                                      pattern (typing/includemod.ml[863,30679+20]..[863,30679+34])
                                        Ppat_tuple
                                        [
                                          pattern (typing/includemod.ml[863,30679+21]..[863,30679+28])
                                            Ppat_construct "Some" (typing/includemod.ml[863,30679+21]..[863,30679+25])
                                            Some
                                              []
                                              pattern (typing/includemod.ml[863,30679+26]..[863,30679+28])
                                                Ppat_var "id" (typing/includemod.ml[863,30679+26]..[863,30679+28])
                                          pattern (typing/includemod.ml[863,30679+30]..[863,30679+33])
                                            Ppat_var "arg" (typing/includemod.ml[863,30679+30]..[863,30679+33])
                                        ]
                            pattern (typing/includemod.ml[864,30715+6]..[864,30715+44])
                              Ppat_construct "Change" (typing/includemod.ml[864,30715+6]..[864,30715+12])
                              Some
                                []
                                pattern (typing/includemod.ml[864,30715+13]..[864,30715+44])
                                  Ppat_tuple
                                  [
                                    pattern (typing/includemod.ml[864,30715+14]..[864,30715+18])
                                      Ppat_construct "Unit" (typing/includemod.ml[864,30715+14]..[864,30715+18])
                                      None
                                    pattern (typing/includemod.ml[864,30715+20]..[864,30715+40])
                                      Ppat_construct "Named" (typing/includemod.ml[864,30715+20]..[864,30715+25])
                                      Some
                                        []
                                        pattern (typing/includemod.ml[864,30715+26]..[864,30715+40])
                                          Ppat_tuple
                                          [
                                            pattern (typing/includemod.ml[864,30715+27]..[864,30715+34])
                                              Ppat_construct "Some" (typing/includemod.ml[864,30715+27]..[864,30715+31])
                                              Some
                                                []
                                                pattern (typing/includemod.ml[864,30715+32]..[864,30715+34])
                                                  Ppat_var "id" (typing/includemod.ml[864,30715+32]..[864,30715+34])
                                            pattern (typing/includemod.ml[864,30715+36]..[864,30715+39])
                                              Ppat_var "arg" (typing/includemod.ml[864,30715+36]..[864,30715+39])
                                          ]
                                    pattern (typing/includemod.ml[864,30715+42]..[864,30715+43])
                                      Ppat_any
                                  ]
                          expression (typing/includemod.ml[865,30763+8]..[867,30879+37])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (typing/includemod.ml[865,30763+12]..[865,30763+16])
                                  Ppat_var "arg'" (typing/includemod.ml[865,30763+12]..[865,30763+16])
                                expression (typing/includemod.ml[865,30763+19]..[865,30763+50])
                                  Pexp_apply
                                  expression (typing/includemod.ml[865,30763+19]..[865,30763+32])
                                    Pexp_ident "Subst.modtype" (typing/includemod.ml[865,30763+19]..[865,30763+32])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[865,30763+33]..[865,30763+37])
                                        Pexp_construct "Keep" (typing/includemod.ml[865,30763+33]..[865,30763+37])
                                        None
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[865,30763+38]..[865,30763+46])
                                        Pexp_field
                                        expression (typing/includemod.ml[865,30763+38]..[865,30763+40])
                                          Pexp_ident "st" (typing/includemod.ml[865,30763+38]..[865,30763+40])
                                        "subst" (typing/includemod.ml[865,30763+41]..[865,30763+46])
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[865,30763+47]..[865,30763+50])
                                        Pexp_ident "arg" (typing/includemod.ml[865,30763+47]..[865,30763+50])
                                  ]
                            ]
                            expression (typing/includemod.ml[866,30817+8]..[867,30879+37])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (typing/includemod.ml[866,30817+12]..[866,30817+15])
                                    Ppat_var "env" (typing/includemod.ml[866,30817+12]..[866,30817+15])
                                  expression (typing/includemod.ml[866,30817+18]..[866,30817+58])
                                    Pexp_apply
                                    expression (typing/includemod.ml[866,30817+18]..[866,30817+32])
                                      Pexp_ident "Env.add_module" (typing/includemod.ml[866,30817+18]..[866,30817+32])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[866,30817+33]..[866,30817+35])
                                          Pexp_ident "id" (typing/includemod.ml[866,30817+33]..[866,30817+35])
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[866,30817+36]..[866,30817+46])
                                          Pexp_construct "Mp_present" (typing/includemod.ml[866,30817+36]..[866,30817+46])
                                          None
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[866,30817+47]..[866,30817+51])
                                          Pexp_ident "arg'" (typing/includemod.ml[866,30817+47]..[866,30817+51])
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[866,30817+52]..[866,30817+58])
                                          Pexp_field
                                          expression (typing/includemod.ml[866,30817+52]..[866,30817+54])
                                            Pexp_ident "st" (typing/includemod.ml[866,30817+52]..[866,30817+54])
                                          "env" (typing/includemod.ml[866,30817+55]..[866,30817+58])
                                    ]
                              ]
                              expression (typing/includemod.ml[867,30879+8]..[867,30879+37])
                                Pexp_apply
                                expression (typing/includemod.ml[867,30879+8]..[867,30879+21])
                                  Pexp_ident "expand_params" (typing/includemod.ml[867,30879+8]..[867,30879+21])
                                [
                                  <arg>
                                  Nolabel
                                    expression (typing/includemod.ml[867,30879+22]..[867,30879+37])
                                      Pexp_record
                                      [
                                        "env" (typing/includemod.ml[867,30879+32]..[867,30879+35]) ghost
                                          expression (typing/includemod.ml[867,30879+32]..[867,30879+35])
                                            Pexp_ident "env" (typing/includemod.ml[867,30879+32]..[867,30879+35])
                                      ]
                                      Some
                                        expression (typing/includemod.ml[867,30879+24]..[867,30879+26])
                                          Pexp_ident "st" (typing/includemod.ml[867,30879+24]..[867,30879+26])
                                ]
                        <case>
                          pattern (typing/includemod.ml[868,30917+6]..[869,30971+55])
                            Ppat_or
                            pattern (typing/includemod.ml[868,30917+6]..[868,30917+53])
                              Ppat_construct "Keep" (typing/includemod.ml[868,30917+6]..[868,30917+10])
                              Some
                                []
                                pattern (typing/includemod.ml[868,30917+11]..[868,30917+53])
                                  Ppat_tuple
                                  [
                                    pattern (typing/includemod.ml[868,30917+12]..[868,30917+28])
                                      Ppat_construct "Named" (typing/includemod.ml[868,30917+12]..[868,30917+17])
                                      Some
                                        []
                                        pattern (typing/includemod.ml[868,30917+18]..[868,30917+28])
                                          Ppat_tuple
                                          [
                                            pattern (typing/includemod.ml[868,30917+19]..[868,30917+24])
                                              Ppat_var "name1" (typing/includemod.ml[868,30917+19]..[868,30917+24])
                                            pattern (typing/includemod.ml[868,30917+26]..[868,30917+27])
                                              Ppat_any
                                          ]
                                    pattern (typing/includemod.ml[868,30917+30]..[868,30917+49])
                                      Ppat_construct "Named" (typing/includemod.ml[868,30917+30]..[868,30917+35])
                                      Some
                                        []
                                        pattern (typing/includemod.ml[868,30917+36]..[868,30917+49])
                                          Ppat_tuple
                                          [
                                            pattern (typing/includemod.ml[868,30917+37]..[868,30917+42])
                                              Ppat_var "name2" (typing/includemod.ml[868,30917+37]..[868,30917+42])
                                            pattern (typing/includemod.ml[868,30917+44]..[868,30917+48])
                                              Ppat_var "arg2" (typing/includemod.ml[868,30917+44]..[868,30917+48])
                                          ]
                                    pattern (typing/includemod.ml[868,30917+51]..[868,30917+52])
                                      Ppat_any
                                  ]
                            pattern (typing/includemod.ml[869,30971+6]..[869,30971+55])
                              Ppat_construct "Change" (typing/includemod.ml[869,30971+6]..[869,30971+12])
                              Some
                                []
                                pattern (typing/includemod.ml[869,30971+13]..[869,30971+55])
                                  Ppat_tuple
                                  [
                                    pattern (typing/includemod.ml[869,30971+14]..[869,30971+30])
                                      Ppat_construct "Named" (typing/includemod.ml[869,30971+14]..[869,30971+19])
                                      Some
                                        []
                                        pattern (typing/includemod.ml[869,30971+20]..[869,30971+30])
                                          Ppat_tuple
                                          [
                                            pattern (typing/includemod.ml[869,30971+21]..[869,30971+26])
                                              Ppat_var "name1" (typing/includemod.ml[869,30971+21]..[869,30971+26])
                                            pattern (typing/includemod.ml[869,30971+28]..[869,30971+29])
                                              Ppat_any
                                          ]
                                    pattern (typing/includemod.ml[869,30971+32]..[869,30971+51])
                                      Ppat_construct "Named" (typing/includemod.ml[869,30971+32]..[869,30971+37])
                                      Some
                                        []
                                        pattern (typing/includemod.ml[869,30971+38]..[869,30971+51])
                                          Ppat_tuple
                                          [
                                            pattern (typing/includemod.ml[869,30971+39]..[869,30971+44])
                                              Ppat_var "name2" (typing/includemod.ml[869,30971+39]..[869,30971+44])
                                            pattern (typing/includemod.ml[869,30971+46]..[869,30971+50])
                                              Ppat_var "arg2" (typing/includemod.ml[869,30971+46]..[869,30971+50])
                                          ]
                                    pattern (typing/includemod.ml[869,30971+53]..[869,30971+54])
                                      Ppat_any
                                  ]
                          expression (typing/includemod.ml[869,30971+59]..[884,31657+9])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (typing/includemod.ml[870,31036+12]..[870,31036+16])
                                  Ppat_var "arg'" (typing/includemod.ml[870,31036+12]..[870,31036+16])
                                expression (typing/includemod.ml[870,31036+19]..[870,31036+51])
                                  Pexp_apply
                                  expression (typing/includemod.ml[870,31036+19]..[870,31036+32])
                                    Pexp_ident "Subst.modtype" (typing/includemod.ml[870,31036+19]..[870,31036+32])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[870,31036+33]..[870,31036+37])
                                        Pexp_construct "Keep" (typing/includemod.ml[870,31036+33]..[870,31036+37])
                                        None
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[870,31036+38]..[870,31036+46])
                                        Pexp_field
                                        expression (typing/includemod.ml[870,31036+38]..[870,31036+40])
                                          Pexp_ident "st" (typing/includemod.ml[870,31036+38]..[870,31036+40])
                                        "subst" (typing/includemod.ml[870,31036+41]..[870,31036+46])
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[870,31036+47]..[870,31036+51])
                                        Pexp_ident "arg2" (typing/includemod.ml[870,31036+47]..[870,31036+51])
                                  ]
                            ]
                            expression (typing/includemod.ml[871,31091+8]..[883,31636+20])
                              Pexp_match
                              expression (typing/includemod.ml[871,31091+14]..[871,31091+26])
                                Pexp_tuple
                                [
                                  expression (typing/includemod.ml[871,31091+14]..[871,31091+19])
                                    Pexp_ident "name1" (typing/includemod.ml[871,31091+14]..[871,31091+19])
                                  expression (typing/includemod.ml[871,31091+21]..[871,31091+26])
                                    Pexp_ident "name2" (typing/includemod.ml[871,31091+21]..[871,31091+26])
                                ]
                              [
                                <case>
                                  pattern (typing/includemod.ml[872,31123+10]..[872,31123+28])
                                    Ppat_tuple
                                    [
                                      pattern (typing/includemod.ml[872,31123+10]..[872,31123+18])
                                        Ppat_construct "Some" (typing/includemod.ml[872,31123+10]..[872,31123+14])
                                        Some
                                          []
                                          pattern (typing/includemod.ml[872,31123+15]..[872,31123+18])
                                            Ppat_var "id1" (typing/includemod.ml[872,31123+15]..[872,31123+18])
                                      pattern (typing/includemod.ml[872,31123+20]..[872,31123+28])
                                        Ppat_construct "Some" (typing/includemod.ml[872,31123+20]..[872,31123+24])
                                        Some
                                          []
                                          pattern (typing/includemod.ml[872,31123+25]..[872,31123+28])
                                            Ppat_var "id2" (typing/includemod.ml[872,31123+25]..[872,31123+28])
                                    ]
                                  expression (typing/includemod.ml[873,31155+12]..[875,31297+48])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (typing/includemod.ml[873,31155+16]..[873,31155+19])
                                          Ppat_var "env" (typing/includemod.ml[873,31155+16]..[873,31155+19])
                                        expression (typing/includemod.ml[873,31155+22]..[873,31155+63])
                                          Pexp_apply
                                          expression (typing/includemod.ml[873,31155+22]..[873,31155+36])
                                            Pexp_ident "Env.add_module" (typing/includemod.ml[873,31155+22]..[873,31155+36])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (typing/includemod.ml[873,31155+37]..[873,31155+40])
                                                Pexp_ident "id1" (typing/includemod.ml[873,31155+37]..[873,31155+40])
                                            <arg>
                                            Nolabel
                                              expression (typing/includemod.ml[873,31155+41]..[873,31155+51])
                                                Pexp_construct "Mp_present" (typing/includemod.ml[873,31155+41]..[873,31155+51])
                                                None
                                            <arg>
                                            Nolabel
                                              expression (typing/includemod.ml[873,31155+52]..[873,31155+56])
                                                Pexp_ident "arg'" (typing/includemod.ml[873,31155+52]..[873,31155+56])
                                            <arg>
                                            Nolabel
                                              expression (typing/includemod.ml[873,31155+57]..[873,31155+63])
                                                Pexp_field
                                                expression (typing/includemod.ml[873,31155+57]..[873,31155+59])
                                                  Pexp_ident "st" (typing/includemod.ml[873,31155+57]..[873,31155+59])
                                                "env" (typing/includemod.ml[873,31155+60]..[873,31155+63])
                                          ]
                                    ]
                                    expression (typing/includemod.ml[874,31222+12]..[875,31297+48])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (typing/includemod.ml[874,31222+16]..[874,31222+21])
                                            Ppat_var "subst" (typing/includemod.ml[874,31222+16]..[874,31222+21])
                                          expression (typing/includemod.ml[874,31222+24]..[874,31222+71])
                                            Pexp_apply
                                            expression (typing/includemod.ml[874,31222+24]..[874,31222+40])
                                              Pexp_ident "Subst.add_module" (typing/includemod.ml[874,31222+24]..[874,31222+40])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (typing/includemod.ml[874,31222+41]..[874,31222+44])
                                                  Pexp_ident "id2" (typing/includemod.ml[874,31222+41]..[874,31222+44])
                                              <arg>
                                              Nolabel
                                                expression (typing/includemod.ml[874,31222+45]..[874,31222+62])
                                                  Pexp_construct "Path.Pident" (typing/includemod.ml[874,31222+46]..[874,31222+57])
                                                  Some
                                                    expression (typing/includemod.ml[874,31222+58]..[874,31222+61])
                                                      Pexp_ident "id1" (typing/includemod.ml[874,31222+58]..[874,31222+61])
                                              <arg>
                                              Nolabel
                                                expression (typing/includemod.ml[874,31222+63]..[874,31222+71])
                                                  Pexp_field
                                                  expression (typing/includemod.ml[874,31222+63]..[874,31222+65])
                                                    Pexp_ident "st" (typing/includemod.ml[874,31222+63]..[874,31222+65])
                                                  "subst" (typing/includemod.ml[874,31222+66]..[874,31222+71])
                                            ]
                                      ]
                                      expression (typing/includemod.ml[875,31297+12]..[875,31297+48])
                                        Pexp_apply
                                        expression (typing/includemod.ml[875,31297+12]..[875,31297+25])
                                          Pexp_ident "expand_params" (typing/includemod.ml[875,31297+12]..[875,31297+25])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (typing/includemod.ml[875,31297+26]..[875,31297+48])
                                              Pexp_record
                                              [
                                                "env" (typing/includemod.ml[875,31297+36]..[875,31297+39]) ghost
                                                  expression (typing/includemod.ml[875,31297+36]..[875,31297+39])
                                                    Pexp_ident "env" (typing/includemod.ml[875,31297+36]..[875,31297+39])
                                                "subst" (typing/includemod.ml[875,31297+41]..[875,31297+46]) ghost
                                                  expression (typing/includemod.ml[875,31297+41]..[875,31297+46])
                                                    Pexp_ident "subst" (typing/includemod.ml[875,31297+41]..[875,31297+46])
                                              ]
                                              Some
                                                expression (typing/includemod.ml[875,31297+28]..[875,31297+30])
                                                  Pexp_ident "st" (typing/includemod.ml[875,31297+28]..[875,31297+30])
                                        ]
                                <case>
                                  pattern (typing/includemod.ml[876,31346+10]..[876,31346+24])
                                    Ppat_tuple
                                    [
                                      pattern (typing/includemod.ml[876,31346+10]..[876,31346+14])
                                        Ppat_construct "None" (typing/includemod.ml[876,31346+10]..[876,31346+14])
                                        None
                                      pattern (typing/includemod.ml[876,31346+16]..[876,31346+24])
                                        Ppat_construct "Some" (typing/includemod.ml[876,31346+16]..[876,31346+20])
                                        Some
                                          []
                                          pattern (typing/includemod.ml[876,31346+21]..[876,31346+24])
                                            Ppat_var "id2" (typing/includemod.ml[876,31346+21]..[876,31346+24])
                                    ]
                                  expression (typing/includemod.ml[877,31374+12]..[878,31441+33])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (typing/includemod.ml[877,31374+16]..[877,31374+19])
                                          Ppat_var "env" (typing/includemod.ml[877,31374+16]..[877,31374+19])
                                        expression (typing/includemod.ml[877,31374+22]..[877,31374+63])
                                          Pexp_apply
                                          expression (typing/includemod.ml[877,31374+22]..[877,31374+36])
                                            Pexp_ident "Env.add_module" (typing/includemod.ml[877,31374+22]..[877,31374+36])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (typing/includemod.ml[877,31374+37]..[877,31374+40])
                                                Pexp_ident "id2" (typing/includemod.ml[877,31374+37]..[877,31374+40])
                                            <arg>
                                            Nolabel
                                              expression (typing/includemod.ml[877,31374+41]..[877,31374+51])
                                                Pexp_construct "Mp_present" (typing/includemod.ml[877,31374+41]..[877,31374+51])
                                                None
                                            <arg>
                                            Nolabel
                                              expression (typing/includemod.ml[877,31374+52]..[877,31374+56])
                                                Pexp_ident "arg'" (typing/includemod.ml[877,31374+52]..[877,31374+56])
                                            <arg>
                                            Nolabel
                                              expression (typing/includemod.ml[877,31374+57]..[877,31374+63])
                                                Pexp_field
                                                expression (typing/includemod.ml[877,31374+57]..[877,31374+59])
                                                  Pexp_ident "st" (typing/includemod.ml[877,31374+57]..[877,31374+59])
                                                "env" (typing/includemod.ml[877,31374+60]..[877,31374+63])
                                          ]
                                    ]
                                    expression (typing/includemod.ml[878,31441+12]..[878,31441+33])
                                      Pexp_tuple
                                      [
                                        expression (typing/includemod.ml[878,31441+12]..[878,31441+27])
                                          Pexp_record
                                          [
                                            "env" (typing/includemod.ml[878,31441+22]..[878,31441+25]) ghost
                                              expression (typing/includemod.ml[878,31441+22]..[878,31441+25])
                                                Pexp_ident "env" (typing/includemod.ml[878,31441+22]..[878,31441+25])
                                          ]
                                          Some
                                            expression (typing/includemod.ml[878,31441+14]..[878,31441+16])
                                              Pexp_ident "st" (typing/includemod.ml[878,31441+14]..[878,31441+16])
                                        expression (typing/includemod.ml[878,31441+29]..[878,31441+33])
                                          Pexp_array
                                          []
                                      ]
                                <case>
                                  pattern (typing/includemod.ml[879,31475+10]..[879,31475+24])
                                    Ppat_tuple
                                    [
                                      pattern (typing/includemod.ml[879,31475+10]..[879,31475+18])
                                        Ppat_construct "Some" (typing/includemod.ml[879,31475+10]..[879,31475+14])
                                        Some
                                          []
                                          pattern (typing/includemod.ml[879,31475+15]..[879,31475+18])
                                            Ppat_var "id1" (typing/includemod.ml[879,31475+15]..[879,31475+18])
                                      pattern (typing/includemod.ml[879,31475+20]..[879,31475+24])
                                        Ppat_construct "None" (typing/includemod.ml[879,31475+20]..[879,31475+24])
                                        None
                                    ]
                                  expression (typing/includemod.ml[880,31503+12]..[881,31570+41])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (typing/includemod.ml[880,31503+16]..[880,31503+19])
                                          Ppat_var "env" (typing/includemod.ml[880,31503+16]..[880,31503+19])
                                        expression (typing/includemod.ml[880,31503+22]..[880,31503+63])
                                          Pexp_apply
                                          expression (typing/includemod.ml[880,31503+22]..[880,31503+36])
                                            Pexp_ident "Env.add_module" (typing/includemod.ml[880,31503+22]..[880,31503+36])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (typing/includemod.ml[880,31503+37]..[880,31503+40])
                                                Pexp_ident "id1" (typing/includemod.ml[880,31503+37]..[880,31503+40])
                                            <arg>
                                            Nolabel
                                              expression (typing/includemod.ml[880,31503+41]..[880,31503+51])
                                                Pexp_construct "Mp_present" (typing/includemod.ml[880,31503+41]..[880,31503+51])
                                                None
                                            <arg>
                                            Nolabel
                                              expression (typing/includemod.ml[880,31503+52]..[880,31503+56])
                                                Pexp_ident "arg'" (typing/includemod.ml[880,31503+52]..[880,31503+56])
                                            <arg>
                                            Nolabel
                                              expression (typing/includemod.ml[880,31503+57]..[880,31503+63])
                                                Pexp_field
                                                expression (typing/includemod.ml[880,31503+57]..[880,31503+59])
                                                  Pexp_ident "st" (typing/includemod.ml[880,31503+57]..[880,31503+59])
                                                "env" (typing/includemod.ml[880,31503+60]..[880,31503+63])
                                          ]
                                    ]
                                    expression (typing/includemod.ml[881,31570+12]..[881,31570+41])
                                      Pexp_apply
                                      expression (typing/includemod.ml[881,31570+12]..[881,31570+25])
                                        Pexp_ident "expand_params" (typing/includemod.ml[881,31570+12]..[881,31570+25])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (typing/includemod.ml[881,31570+26]..[881,31570+41])
                                            Pexp_record
                                            [
                                              "env" (typing/includemod.ml[881,31570+36]..[881,31570+39]) ghost
                                                expression (typing/includemod.ml[881,31570+36]..[881,31570+39])
                                                  Pexp_ident "env" (typing/includemod.ml[881,31570+36]..[881,31570+39])
                                            ]
                                            Some
                                              expression (typing/includemod.ml[881,31570+28]..[881,31570+30])
                                                Pexp_ident "st" (typing/includemod.ml[881,31570+28]..[881,31570+30])
                                      ]
                                <case>
                                  pattern (typing/includemod.ml[882,31612+10]..[882,31612+20])
                                    Ppat_tuple
                                    [
                                      pattern (typing/includemod.ml[882,31612+10]..[882,31612+14])
                                        Ppat_construct "None" (typing/includemod.ml[882,31612+10]..[882,31612+14])
                                        None
                                      pattern (typing/includemod.ml[882,31612+16]..[882,31612+20])
                                        Ppat_construct "None" (typing/includemod.ml[882,31612+16]..[882,31612+20])
                                        None
                                    ]
                                  expression (typing/includemod.ml[883,31636+12]..[883,31636+20])
                                    Pexp_tuple
                                    [
                                      expression (typing/includemod.ml[883,31636+12]..[883,31636+14])
                                        Pexp_ident "st" (typing/includemod.ml[883,31636+12]..[883,31636+14])
                                      expression (typing/includemod.ml[883,31636+16]..[883,31636+20])
                                        Pexp_array
                                        []
                                    ]
                              ]
                      ]
            ]
          structure_item (typing/includemod.ml[886,31668+2]..[903,32193+36])
            Pstr_value Nonrec
            [
              <def>
                pattern (typing/includemod.ml[886,31668+6]..[886,31668+10])
                  Ppat_var "diff" (typing/includemod.ml[886,31668+6]..[886,31668+10])
                expression (typing/includemod.ml[886,31668+11]..[903,32193+36]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (typing/includemod.ml[886,31668+11]..[886,31668+14])
                    Ppat_var "env" (typing/includemod.ml[886,31668+11]..[886,31668+14])
                  expression (typing/includemod.ml[886,31668+15]..[903,32193+36]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (typing/includemod.ml[886,31668+15]..[886,31668+24])
                      Ppat_tuple
                      [
                        pattern (typing/includemod.ml[886,31668+16]..[886,31668+18])
                          Ppat_var "l1" (typing/includemod.ml[886,31668+16]..[886,31668+18])
                        pattern (typing/includemod.ml[886,31668+19]..[886,31668+23])
                          Ppat_var "res1" (typing/includemod.ml[886,31668+19]..[886,31668+23])
                      ]
                    expression (typing/includemod.ml[886,31668+25]..[903,32193+36]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (typing/includemod.ml[886,31668+25]..[886,31668+31])
                        Ppat_tuple
                        [
                          pattern (typing/includemod.ml[886,31668+26]..[886,31668+28])
                            Ppat_var "l2" (typing/includemod.ml[886,31668+26]..[886,31668+28])
                          pattern (typing/includemod.ml[886,31668+29]..[886,31668+30])
                            Ppat_any
                        ]
                      expression (typing/includemod.ml[887,31702+4]..[903,32193+36])
                        Pexp_letmodule "Compute" (typing/includemod.ml[887,31702+15]..[887,31702+22])
                        module_expr (typing/includemod.ml[887,31702+25]..[896,32007+10])
                          Pmod_apply
                          module_expr (typing/includemod.ml[887,31702+25]..[887,31702+43])
                            Pmod_ident "Diff.Left_variadic" (typing/includemod.ml[887,31702+25]..[887,31702+43])
                          module_expr (typing/includemod.ml[887,31702+44]..[896,32007+9])
                            Pmod_structure
                            [
                              structure_item (typing/includemod.ml[888,31753+8]..[893,31937+13])
                                Pstr_value Nonrec
                                [
                                  <def>
                                    pattern (typing/includemod.ml[888,31753+12]..[888,31753+16])
                                      Ppat_var "test" (typing/includemod.ml[888,31753+12]..[888,31753+16])
                                    expression (typing/includemod.ml[888,31753+17]..[893,31937+13]) ghost
                                      Pexp_fun
                                      Nolabel
                                      None
                                      pattern (typing/includemod.ml[888,31753+17]..[888,31753+19])
                                        Ppat_var "st" (typing/includemod.ml[888,31753+17]..[888,31753+19])
                                      expression (typing/includemod.ml[888,31753+20]..[893,31937+13]) ghost
                                        Pexp_fun
                                        Nolabel
                                        None
                                        pattern (typing/includemod.ml[888,31753+20]..[888,31753+24])
                                          Ppat_var "mty1" (typing/includemod.ml[888,31753+20]..[888,31753+24])
                                        expression (typing/includemod.ml[888,31753+25]..[893,31937+13]) ghost
                                          Pexp_fun
                                          Nolabel
                                          None
                                          pattern (typing/includemod.ml[888,31753+25]..[888,31753+29])
                                            Ppat_var "mty2" (typing/includemod.ml[888,31753+25]..[888,31753+29])
                                          expression (typing/includemod.ml[889,31785+10]..[893,31937+13])
                                            Pexp_let Nonrec
                                            [
                                              <def>
                                                pattern (typing/includemod.ml[889,31785+14]..[889,31785+17])
                                                  Ppat_var "loc" (typing/includemod.ml[889,31785+14]..[889,31785+17])
                                                expression (typing/includemod.ml[889,31785+20]..[889,31785+33])
                                                  Pexp_ident "Location.none" (typing/includemod.ml[889,31785+20]..[889,31785+33])
                                            ]
                                            expression (typing/includemod.ml[890,31822+10]..[893,31937+13])
                                              Pexp_let Nonrec
                                              [
                                                <def>
                                                  pattern (typing/includemod.ml[890,31822+14]..[890,31822+23])
                                                    Ppat_tuple
                                                    [
                                                      pattern (typing/includemod.ml[890,31822+14]..[890,31822+17])
                                                        Ppat_var "res" (typing/includemod.ml[890,31822+14]..[890,31822+17])
                                                      pattern (typing/includemod.ml[890,31822+19]..[890,31822+20])
                                                        Ppat_any
                                                      pattern (typing/includemod.ml[890,31822+22]..[890,31822+23])
                                                        Ppat_any
                                                    ]
                                                  expression (typing/includemod.ml[891,31848+12]..[891,31848+75])
                                                    Pexp_apply
                                                    expression (typing/includemod.ml[891,31848+12]..[891,31848+25])
                                                      Pexp_ident "functor_param" (typing/includemod.ml[891,31848+12]..[891,31848+25])
                                                    [
                                                      <arg>
                                                      Labelled "loc"
                                                        expression (typing/includemod.ml[891,31848+27]..[891,31848+30])
                                                          Pexp_ident "loc" (typing/includemod.ml[891,31848+27]..[891,31848+30])
                                                      <arg>
                                                      Nolabel
                                                        expression (typing/includemod.ml[891,31848+31]..[891,31848+37])
                                                          Pexp_field
                                                          expression (typing/includemod.ml[891,31848+31]..[891,31848+33])
                                                            Pexp_ident "st" (typing/includemod.ml[891,31848+31]..[891,31848+33])
                                                          "env" (typing/includemod.ml[891,31848+34]..[891,31848+37])
                                                      <arg>
                                                      Labelled "mark"
                                                        expression (typing/includemod.ml[891,31848+44]..[891,31848+56])
                                                          Pexp_construct "Mark_neither" (typing/includemod.ml[891,31848+44]..[891,31848+56])
                                                          None
                                                      <arg>
                                                      Nolabel
                                                        expression (typing/includemod.ml[891,31848+57]..[891,31848+65])
                                                          Pexp_field
                                                          expression (typing/includemod.ml[891,31848+57]..[891,31848+59])
                                                            Pexp_ident "st" (typing/includemod.ml[891,31848+57]..[891,31848+59])
                                                          "subst" (typing/includemod.ml[891,31848+60]..[891,31848+65])
                                                      <arg>
                                                      Nolabel
                                                        expression (typing/includemod.ml[891,31848+66]..[891,31848+70])
                                                          Pexp_ident "mty1" (typing/includemod.ml[891,31848+66]..[891,31848+70])
                                                      <arg>
                                                      Nolabel
                                                        expression (typing/includemod.ml[891,31848+71]..[891,31848+75])
                                                          Pexp_ident "mty2" (typing/includemod.ml[891,31848+71]..[891,31848+75])
                                                    ]
                                              ]
                                              expression (typing/includemod.ml[893,31937+10]..[893,31937+13])
                                                Pexp_ident "res" (typing/includemod.ml[893,31937+10]..[893,31937+13])
                                ]
                              structure_item (typing/includemod.ml[894,31951+8]..[894,31951+27])
                                Pstr_value Nonrec
                                [
                                  <def>
                                    pattern (typing/includemod.ml[894,31951+12]..[894,31951+18])
                                      Ppat_var "update" (typing/includemod.ml[894,31951+12]..[894,31951+18])
                                    expression (typing/includemod.ml[894,31951+21]..[894,31951+27])
                                      Pexp_ident "update" (typing/includemod.ml[894,31951+21]..[894,31951+27])
                                ]
                              structure_item (typing/includemod.ml[895,31979+8]..[895,31979+27])
                                Pstr_value Nonrec
                                [
                                  <def>
                                    pattern (typing/includemod.ml[895,31979+12]..[895,31979+18])
                                      Ppat_var "weight" (typing/includemod.ml[895,31979+12]..[895,31979+18])
                                    expression (typing/includemod.ml[895,31979+21]..[895,31979+27])
                                      Pexp_ident "weight" (typing/includemod.ml[895,31979+21]..[895,31979+27])
                                ]
                            ]
                        expression (typing/includemod.ml[898,32025+4]..[903,32193+36])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (typing/includemod.ml[898,32025+8]..[898,32025+14])
                                Ppat_var "param1" (typing/includemod.ml[898,32025+8]..[898,32025+14])
                              expression (typing/includemod.ml[898,32025+17]..[898,32025+33])
                                Pexp_apply
                                expression (typing/includemod.ml[898,32025+17]..[898,32025+30])
                                  Pexp_ident "Array.of_list" (typing/includemod.ml[898,32025+17]..[898,32025+30])
                                [
                                  <arg>
                                  Nolabel
                                    expression (typing/includemod.ml[898,32025+31]..[898,32025+33])
                                      Pexp_ident "l1" (typing/includemod.ml[898,32025+31]..[898,32025+33])
                                ]
                          ]
                          expression (typing/includemod.ml[899,32062+4]..[903,32193+36])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (typing/includemod.ml[899,32062+8]..[899,32062+14])
                                  Ppat_var "param2" (typing/includemod.ml[899,32062+8]..[899,32062+14])
                                expression (typing/includemod.ml[899,32062+17]..[899,32062+33])
                                  Pexp_apply
                                  expression (typing/includemod.ml[899,32062+17]..[899,32062+30])
                                    Pexp_ident "Array.of_list" (typing/includemod.ml[899,32062+17]..[899,32062+30])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[899,32062+31]..[899,32062+33])
                                        Pexp_ident "l2" (typing/includemod.ml[899,32062+31]..[899,32062+33])
                                  ]
                            ]
                            expression (typing/includemod.ml[900,32099+4]..[903,32193+36])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (typing/includemod.ml[900,32099+8]..[900,32099+13])
                                    Ppat_var "state" (typing/includemod.ml[900,32099+8]..[900,32099+13])
                                  expression (typing/includemod.ml[901,32115+6]..[901,32115+70])
                                    Pexp_record
                                    [
                                      "env" (typing/includemod.ml[901,32115+8]..[901,32115+11]) ghost
                                        expression (typing/includemod.ml[901,32115+8]..[901,32115+11])
                                          Pexp_ident "env" (typing/includemod.ml[901,32115+8]..[901,32115+11])
                                      "subst" (typing/includemod.ml[901,32115+13]..[901,32115+18])
                                        expression (typing/includemod.ml[901,32115+21]..[901,32115+35])
                                          Pexp_ident "Subst.identity" (typing/includemod.ml[901,32115+21]..[901,32115+35])
                                      "res" (typing/includemod.ml[901,32115+37]..[901,32115+40])
                                        expression (typing/includemod.ml[901,32115+43]..[901,32115+69])
                                          Pexp_apply
                                          expression (typing/includemod.ml[901,32115+43]..[901,32115+64])
                                            Pexp_ident "keep_expansible_param" (typing/includemod.ml[901,32115+43]..[901,32115+64])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (typing/includemod.ml[901,32115+65]..[901,32115+69])
                                                Pexp_ident "res1" (typing/includemod.ml[901,32115+65]..[901,32115+69])
                                          ]
                                    ]
                                    None
                              ]
                              expression (typing/includemod.ml[903,32193+4]..[903,32193+36])
                                Pexp_apply
                                expression (typing/includemod.ml[903,32193+4]..[903,32193+16])
                                  Pexp_ident "Compute.diff" (typing/includemod.ml[903,32193+4]..[903,32193+16])
                                [
                                  <arg>
                                  Nolabel
                                    expression (typing/includemod.ml[903,32193+17]..[903,32193+22])
                                      Pexp_ident "state" (typing/includemod.ml[903,32193+17]..[903,32193+22])
                                  <arg>
                                  Nolabel
                                    expression (typing/includemod.ml[903,32193+23]..[903,32193+29])
                                      Pexp_ident "param1" (typing/includemod.ml[903,32193+23]..[903,32193+29])
                                  <arg>
                                  Nolabel
                                    expression (typing/includemod.ml[903,32193+30]..[903,32193+36])
                                      Pexp_ident "param2" (typing/includemod.ml[903,32193+30]..[903,32193+36])
                                ]
            ]
        ]
  structure_item (typing/includemod.ml[907,32236+0]..[1008,35845+3])
    Pstr_module
    "Functor_app_diff" (typing/includemod.ml[907,32236+7]..[907,32236+23])
      module_expr (typing/includemod.ml[907,32236+26]..[1008,35845+3])
        Pmod_structure
        [
          structure_item (typing/includemod.ml[908,32269+2]..[908,32269+35])
            Pstr_module
            "I" (typing/includemod.ml[908,32269+9]..[908,32269+10])
              module_expr (typing/includemod.ml[908,32269+13]..[908,32269+35])
                Pmod_ident "Functor_inclusion_diff" (typing/includemod.ml[908,32269+13]..[908,32269+35])
          structure_item (typing/includemod.ml[909,32305+2]..[915,32574+5])
            Pstr_module
            "Defs" (typing/includemod.ml[909,32305+9]..[909,32305+13])
              module_expr (typing/includemod.ml[909,32305+15]..[915,32574+5])
                Pmod_structure
                [
                  structure_item (typing/includemod.ml[910,32327+4]..[910,32327+59])
                    Pstr_type Rec
                    [
                      type_declaration "left" (typing/includemod.ml[910,32327+9]..[910,32327+13]) (typing/includemod.ml[910,32327+4]..[910,32327+59])
                        ptype_params =
                          []
                        ptype_cstrs =
                          []
                        ptype_kind =
                          Ptype_abstract
                        ptype_private = Public
                        ptype_manifest =
                          Some
                            core_type (typing/includemod.ml[910,32327+16]..[910,32327+59])
                              Ptyp_tuple
                              [
                                core_type (typing/includemod.ml[910,32327+16]..[910,32327+39])
                                  Ptyp_constr "Error.functor_arg_descr" (typing/includemod.ml[910,32327+16]..[910,32327+39])
                                  []
                                core_type (typing/includemod.ml[910,32327+42]..[910,32327+59])
                                  Ptyp_constr "Types.module_type" (typing/includemod.ml[910,32327+42]..[910,32327+59])
                                  []
                              ]
                    ]
                  structure_item (typing/includemod.ml[911,32387+4]..[911,32387+40])
                    Pstr_type Rec
                    [
                      type_declaration "right" (typing/includemod.ml[911,32387+9]..[911,32387+14]) (typing/includemod.ml[911,32387+4]..[911,32387+40])
                        ptype_params =
                          []
                        ptype_cstrs =
                          []
                        ptype_kind =
                          Ptype_abstract
                        ptype_private = Public
                        ptype_manifest =
                          Some
                            core_type (typing/includemod.ml[911,32387+17]..[911,32387+40])
                              Ptyp_constr "Types.functor_parameter" (typing/includemod.ml[911,32387+17]..[911,32387+40])
                              []
                    ]
                  structure_item (typing/includemod.ml[912,32428+4]..[912,32428+39])
                    Pstr_type Rec
                    [
                      type_declaration "eq" (typing/includemod.ml[912,32428+9]..[912,32428+11]) (typing/includemod.ml[912,32428+4]..[912,32428+39])
                        ptype_params =
                          []
                        ptype_cstrs =
                          []
                        ptype_kind =
                          Ptype_abstract
                        ptype_private = Public
                        ptype_manifest =
                          Some
                            core_type (typing/includemod.ml[912,32428+14]..[912,32428+39])
                              Ptyp_constr "Typedtree.module_coercion" (typing/includemod.ml[912,32428+14]..[912,32428+39])
                              []
                    ]
                  structure_item (typing/includemod.ml[913,32468+4]..[913,32468+75])
                    Pstr_type Rec
                    [
                      type_declaration "diff" (typing/includemod.ml[913,32468+9]..[913,32468+13]) (typing/includemod.ml[913,32468+4]..[913,32468+75])
                        ptype_params =
                          []
                        ptype_cstrs =
                          []
                        ptype_kind =
                          Ptype_abstract
                        ptype_private = Public
                        ptype_manifest =
                          Some
                            core_type (typing/includemod.ml[913,32468+16]..[913,32468+75])
                              Ptyp_constr "Error.functor_param_symptom" (typing/includemod.ml[913,32468+48]..[913,32468+75])
                              [
                                core_type (typing/includemod.ml[913,32468+17]..[913,32468+40])
                                  Ptyp_constr "Error.functor_arg_descr" (typing/includemod.ml[913,32468+17]..[913,32468+40])
                                  []
                                core_type (typing/includemod.ml[913,32468+42]..[913,32468+46])
                                  Ptyp_constr "unit" (typing/includemod.ml[913,32468+42]..[913,32468+46])
                                  []
                              ]
                    ]
                  structure_item (typing/includemod.ml[914,32544+4]..[914,32544+29])
                    Pstr_type Rec
                    [
                      type_declaration "state" (typing/includemod.ml[914,32544+9]..[914,32544+14]) (typing/includemod.ml[914,32544+4]..[914,32544+29])
                        ptype_params =
                          []
                        ptype_cstrs =
                          []
                        ptype_kind =
                          Ptype_abstract
                        ptype_private = Public
                        ptype_manifest =
                          Some
                            core_type (typing/includemod.ml[914,32544+17]..[914,32544+29])
                              Ptyp_constr "I.Defs.state" (typing/includemod.ml[914,32544+17]..[914,32544+29])
                              []
                    ]
                ]
          structure_item (typing/includemod.ml[916,32580+2]..[916,32580+36])
            Pstr_module
            "Diff" (typing/includemod.ml[916,32580+9]..[916,32580+13])
              module_expr (typing/includemod.ml[916,32580+16]..[916,32580+36])
                Pmod_apply
                module_expr (typing/includemod.ml[916,32580+16]..[916,32580+30])
                  Pmod_ident "Diffing.Define" (typing/includemod.ml[916,32580+16]..[916,32580+30])
                module_expr (typing/includemod.ml[916,32580+31]..[916,32580+35])
                  Pmod_ident "Defs" (typing/includemod.ml[916,32580+31]..[916,32580+35])
          structure_item (typing/includemod.ml[918,32618+2]..[935,33247+11])
            Pstr_value Nonrec
            [
              <def>
                pattern (typing/includemod.ml[918,32618+6]..[918,32618+30]) ghost
                  Ppat_constraint
                  pattern (typing/includemod.ml[918,32618+6]..[918,32618+12])
                    Ppat_var "weight" (typing/includemod.ml[918,32618+6]..[918,32618+12])
                  core_type (typing/includemod.ml[918,32618+14]..[918,32618+30]) ghost
                    Ptyp_poly
                    core_type (typing/includemod.ml[918,32618+14]..[918,32618+30])
                      Ptyp_arrow
                      Nolabel
                      core_type (typing/includemod.ml[918,32618+14]..[918,32618+25])
                        Ptyp_constr "Diff.change" (typing/includemod.ml[918,32618+14]..[918,32618+25])
                        []
                      core_type (typing/includemod.ml[918,32618+29]..[918,32618+30])
                        Ptyp_any
                expression (typing/includemod.ml[918,32618+6]..[935,33247+11])
                  Pexp_constraint
                  expression (typing/includemod.ml[918,32618+33]..[935,33247+11])
                    Pexp_function
                    [
                      <case>
                        pattern (typing/includemod.ml[919,32660+6]..[919,32660+14])
                          Ppat_construct "Insert" (typing/includemod.ml[919,32660+6]..[919,32660+12])
                          Some
                            []
                            pattern (typing/includemod.ml[919,32660+13]..[919,32660+14])
                              Ppat_any
                        expression (typing/includemod.ml[919,32660+18]..[919,32660+20])
                          Pexp_constant PConst_int (10,None)
                      <case>
                        pattern (typing/includemod.ml[920,32681+6]..[920,32681+14])
                          Ppat_construct "Delete" (typing/includemod.ml[920,32681+6]..[920,32681+12])
                          Some
                            []
                            pattern (typing/includemod.ml[920,32681+13]..[920,32681+14])
                              Ppat_any
                        expression (typing/includemod.ml[920,32681+18]..[920,32681+20])
                          Pexp_constant PConst_int (10,None)
                      <case>
                        pattern (typing/includemod.ml[921,32702+6]..[921,32702+14])
                          Ppat_construct "Change" (typing/includemod.ml[921,32702+6]..[921,32702+12])
                          Some
                            []
                            pattern (typing/includemod.ml[921,32702+13]..[921,32702+14])
                              Ppat_any
                        expression (typing/includemod.ml[921,32702+18]..[921,32702+20])
                          Pexp_constant PConst_int (10,None)
                      <case>
                        pattern (typing/includemod.ml[922,32723+6]..[922,32723+30])
                          Ppat_construct "Keep" (typing/includemod.ml[922,32723+6]..[922,32723+10])
                          Some
                            []
                            pattern (typing/includemod.ml[922,32723+11]..[922,32723+30])
                              Ppat_tuple
                              [
                                pattern (typing/includemod.ml[922,32723+12]..[922,32723+18])
                                  Ppat_var "param1" (typing/includemod.ml[922,32723+12]..[922,32723+18])
                                pattern (typing/includemod.ml[922,32723+20]..[922,32723+26])
                                  Ppat_var "param2" (typing/includemod.ml[922,32723+20]..[922,32723+26])
                                pattern (typing/includemod.ml[922,32723+28]..[922,32723+29])
                                  Ppat_any
                              ]
                        expression (typing/includemod.ml[925,32851+8]..[935,33247+11])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (typing/includemod.ml[926,32865+14]..[926,32865+45]) ghost
                                Ppat_constraint
                                pattern (typing/includemod.ml[926,32865+14]..[926,32865+19])
                                  Ppat_var "desc1" (typing/includemod.ml[926,32865+14]..[926,32865+19])
                                core_type (typing/includemod.ml[926,32865+22]..[926,32865+45]) ghost
                                  Ptyp_poly
                                  core_type (typing/includemod.ml[926,32865+22]..[926,32865+45])
                                    Ptyp_constr "Error.functor_arg_descr" (typing/includemod.ml[926,32865+22]..[926,32865+45])
                                    []
                              expression (typing/includemod.ml[926,32865+14]..[926,32865+58])
                                Pexp_constraint
                                expression (typing/includemod.ml[926,32865+48]..[926,32865+58])
                                  Pexp_apply
                                  expression (typing/includemod.ml[926,32865+48]..[926,32865+51])
                                    Pexp_ident "fst" (typing/includemod.ml[926,32865+48]..[926,32865+51])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[926,32865+52]..[926,32865+58])
                                        Pexp_ident "param1" (typing/includemod.ml[926,32865+52]..[926,32865+58])
                                  ]
                                core_type (typing/includemod.ml[926,32865+22]..[926,32865+45])
                                  Ptyp_constr "Error.functor_arg_descr" (typing/includemod.ml[926,32865+22]..[926,32865+45])
                                  []
                          ]
                          expression (typing/includemod.ml[927,32927+10]..[934,33186+60])
                            Pexp_match
                            expression (typing/includemod.ml[927,32927+16]..[927,32927+42])
                              Pexp_tuple
                              [
                                expression (typing/includemod.ml[927,32927+16]..[927,32927+21])
                                  Pexp_ident "desc1" (typing/includemod.ml[927,32927+16]..[927,32927+21])
                                expression (typing/includemod.ml[927,32927+23]..[927,32927+42])
                                  Pexp_apply
                                  expression (typing/includemod.ml[927,32927+23]..[927,32927+35])
                                    Pexp_ident "I.param_name" (typing/includemod.ml[927,32927+23]..[927,32927+35])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[927,32927+36]..[927,32927+42])
                                        Pexp_ident "param2" (typing/includemod.ml[927,32927+36]..[927,32927+42])
                                  ]
                              ]
                            [
                              <case>
                                pattern (typing/includemod.ml[928,32975+12]..[928,32975+37])
                                  Ppat_tuple
                                  [
                                    pattern (typing/includemod.ml[928,32975+12]..[928,32975+30])
                                      Ppat_or
                                      pattern (typing/includemod.ml[928,32975+13]..[928,32975+17])
                                        Ppat_construct "Unit" (typing/includemod.ml[928,32975+13]..[928,32975+17])
                                        None
                                      pattern (typing/includemod.ml[928,32975+20]..[928,32975+29])
                                        Ppat_construct "Anonymous" (typing/includemod.ml[928,32975+20]..[928,32975+29])
                                        None
                                    pattern (typing/includemod.ml[928,32975+33]..[928,32975+37])
                                      Ppat_construct "None" (typing/includemod.ml[928,32975+33]..[928,32975+37])
                                      None
                                  ]
                                expression (typing/includemod.ml[929,33013+15]..[929,33013+16])
                                  Pexp_constant PConst_int (0,None)
                              <case>
                                pattern (typing/includemod.ml[930,33030+12]..[930,33030+43])
                                  Ppat_tuple
                                  [
                                    pattern (typing/includemod.ml[930,33030+12]..[930,33030+34])
                                      Ppat_construct "Named" (typing/includemod.ml[930,33030+12]..[930,33030+17])
                                      Some
                                        []
                                        pattern (typing/includemod.ml[930,33030+18]..[930,33030+34])
                                          Ppat_construct "Path.Pident" (typing/includemod.ml[930,33030+19]..[930,33030+30])
                                          Some
                                            []
                                            pattern (typing/includemod.ml[930,33030+31]..[930,33030+33])
                                              Ppat_var "n1" (typing/includemod.ml[930,33030+31]..[930,33030+33])
                                    pattern (typing/includemod.ml[930,33030+36]..[930,33030+43])
                                      Ppat_construct "Some" (typing/includemod.ml[930,33030+36]..[930,33030+40])
                                      Some
                                        []
                                        pattern (typing/includemod.ml[930,33030+41]..[930,33030+43])
                                          Ppat_var "n2" (typing/includemod.ml[930,33030+41]..[930,33030+43])
                                  ]
                                <when>
                                  expression (typing/includemod.ml[931,33074+17]..[931,33074+61])
                                    Pexp_apply
                                    expression (typing/includemod.ml[931,33074+17]..[931,33074+29])
                                      Pexp_ident "String.equal" (typing/includemod.ml[931,33074+17]..[931,33074+29])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[931,33074+30]..[931,33074+45])
                                          Pexp_apply
                                          expression (typing/includemod.ml[931,33074+31]..[931,33074+41])
                                            Pexp_ident "Ident.name" (typing/includemod.ml[931,33074+31]..[931,33074+41])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (typing/includemod.ml[931,33074+42]..[931,33074+44])
                                                Pexp_ident "n1" (typing/includemod.ml[931,33074+42]..[931,33074+44])
                                          ]
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[931,33074+46]..[931,33074+61])
                                          Pexp_apply
                                          expression (typing/includemod.ml[931,33074+47]..[931,33074+57])
                                            Pexp_ident "Ident.name" (typing/includemod.ml[931,33074+47]..[931,33074+57])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (typing/includemod.ml[931,33074+58]..[931,33074+60])
                                                Pexp_ident "n2" (typing/includemod.ml[931,33074+58]..[931,33074+60])
                                          ]
                                    ]
                                expression (typing/includemod.ml[932,33136+15]..[932,33136+16])
                                  Pexp_constant PConst_int (0,None)
                              <case>
                                pattern (typing/includemod.ml[933,33153+12]..[933,33153+27])
                                  Ppat_tuple
                                  [
                                    pattern (typing/includemod.ml[933,33153+12]..[933,33153+19])
                                      Ppat_construct "Named" (typing/includemod.ml[933,33153+12]..[933,33153+17])
                                      Some
                                        []
                                        pattern (typing/includemod.ml[933,33153+18]..[933,33153+19])
                                          Ppat_any
                                    pattern (typing/includemod.ml[933,33153+21]..[933,33153+27])
                                      Ppat_construct "Some" (typing/includemod.ml[933,33153+21]..[933,33153+25])
                                      Some
                                        []
                                        pattern (typing/includemod.ml[933,33153+26]..[933,33153+27])
                                          Ppat_any
                                  ]
                                expression (typing/includemod.ml[933,33153+31]..[933,33153+32])
                                  Pexp_constant PConst_int (1,None)
                              <case>
                                pattern (typing/includemod.ml[934,33186+12]..[934,33186+55])
                                  Ppat_or
                                  pattern (typing/includemod.ml[934,33186+12]..[934,33186+26])
                                    Ppat_tuple
                                    [
                                      pattern (typing/includemod.ml[934,33186+12]..[934,33186+19])
                                        Ppat_construct "Named" (typing/includemod.ml[934,33186+12]..[934,33186+17])
                                        Some
                                          []
                                          pattern (typing/includemod.ml[934,33186+18]..[934,33186+19])
                                            Ppat_any
                                      pattern (typing/includemod.ml[934,33186+22]..[934,33186+26])
                                        Ppat_construct "None" (typing/includemod.ml[934,33186+22]..[934,33186+26])
                                        None
                                    ]
                                  pattern (typing/includemod.ml[934,33186+29]..[934,33186+55])
                                    Ppat_tuple
                                    [
                                      pattern (typing/includemod.ml[934,33186+29]..[934,33186+47])
                                        Ppat_or
                                        pattern (typing/includemod.ml[934,33186+30]..[934,33186+34])
                                          Ppat_construct "Unit" (typing/includemod.ml[934,33186+30]..[934,33186+34])
                                          None
                                        pattern (typing/includemod.ml[934,33186+37]..[934,33186+46])
                                          Ppat_construct "Anonymous" (typing/includemod.ml[934,33186+37]..[934,33186+46])
                                          None
                                      pattern (typing/includemod.ml[934,33186+49]..[934,33186+55])
                                        Ppat_construct "Some" (typing/includemod.ml[934,33186+49]..[934,33186+53])
                                        Some
                                          []
                                          pattern (typing/includemod.ml[934,33186+54]..[934,33186+55])
                                            Ppat_any
                                    ]
                                expression (typing/includemod.ml[934,33186+59]..[934,33186+60])
                                  Pexp_constant PConst_int (1,None)
                            ]
                    ]
                  core_type (typing/includemod.ml[918,32618+14]..[918,32618+30])
                    Ptyp_arrow
                    Nolabel
                    core_type (typing/includemod.ml[918,32618+14]..[918,32618+25])
                      Ptyp_constr "Diff.change" (typing/includemod.ml[918,32618+14]..[918,32618+25])
                      []
                    core_type (typing/includemod.ml[918,32618+29]..[918,32618+30])
                      Ptyp_any
            ]
          structure_item (typing/includemod.ml[937,33260+2]..[977,34733+9])
            Pstr_value Nonrec
            [
              <def>
                pattern (typing/includemod.ml[937,33260+6]..[937,33260+12])
                  Ppat_var "update" (typing/includemod.ml[937,33260+6]..[937,33260+12])
                expression (typing/includemod.ml[937,33260+13]..[977,34733+9]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (typing/includemod.ml[937,33260+13]..[937,33260+29])
                    Ppat_constraint
                    pattern (typing/includemod.ml[937,33260+14]..[937,33260+15])
                      Ppat_var "d" (typing/includemod.ml[937,33260+14]..[937,33260+15])
                    core_type (typing/includemod.ml[937,33260+17]..[937,33260+28])
                      Ptyp_constr "Diff.change" (typing/includemod.ml[937,33260+17]..[937,33260+28])
                      []
                  expression (typing/includemod.ml[937,33260+30]..[977,34733+9]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (typing/includemod.ml[937,33260+30]..[937,33260+45])
                      Ppat_constraint
                      pattern (typing/includemod.ml[937,33260+31]..[937,33260+33])
                        Ppat_var "st" (typing/includemod.ml[937,33260+31]..[937,33260+33])
                      core_type (typing/includemod.ml[937,33260+34]..[937,33260+44])
                        Ptyp_constr "Defs.state" (typing/includemod.ml[937,33260+34]..[937,33260+44])
                        []
                    expression (typing/includemod.ml[938,33308+4]..[977,34733+9])
                      Pexp_open Fresh
                      module_expr (typing/includemod.ml[938,33308+13]..[938,33308+18])
                        Pmod_ident "Error" (typing/includemod.ml[938,33308+13]..[938,33308+18])
                      expression (typing/includemod.ml[939,33330+4]..[977,34733+9])
                        Pexp_match
                        expression (typing/includemod.ml[939,33330+10]..[939,33330+11])
                          Pexp_ident "d" (typing/includemod.ml[939,33330+10]..[939,33330+11])
                        [
                          <case>
                            pattern (typing/includemod.ml[940,33347+6]..[945,33470+45])
                              Ppat_or
                              pattern (typing/includemod.ml[940,33347+6]..[944,33425+44])
                                Ppat_or
                                pattern (typing/includemod.ml[940,33347+6]..[943,33403+21])
                                  Ppat_or
                                  pattern (typing/includemod.ml[940,33347+6]..[942,33377+25])
                                    Ppat_or
                                    pattern (typing/includemod.ml[940,33347+6]..[941,33362+14])
                                      Ppat_or
                                      pattern (typing/includemod.ml[940,33347+6]..[940,33347+14])
                                        Ppat_construct "Insert" (typing/includemod.ml[940,33347+6]..[940,33347+12])
                                        Some
                                          []
                                          pattern (typing/includemod.ml[940,33347+13]..[940,33347+14])
                                            Ppat_any
                                      pattern (typing/includemod.ml[941,33362+6]..[941,33362+14])
                                        Ppat_construct "Delete" (typing/includemod.ml[941,33362+6]..[941,33362+12])
                                        Some
                                          []
                                          pattern (typing/includemod.ml[941,33362+13]..[941,33362+14])
                                            Ppat_any
                                    pattern (typing/includemod.ml[942,33377+6]..[942,33377+25])
                                      Ppat_construct "Keep" (typing/includemod.ml[942,33377+6]..[942,33377+10])
                                      Some
                                        []
                                        pattern (typing/includemod.ml[942,33377+11]..[942,33377+25])
                                          Ppat_tuple
                                          [
                                            pattern (typing/includemod.ml[942,33377+12]..[942,33377+20])
                                              Ppat_tuple
                                              [
                                                pattern (typing/includemod.ml[942,33377+13]..[942,33377+17])
                                                  Ppat_construct "Unit" (typing/includemod.ml[942,33377+13]..[942,33377+17])
                                                  None
                                                pattern (typing/includemod.ml[942,33377+18]..[942,33377+19])
                                                  Ppat_any
                                              ]
                                            pattern (typing/includemod.ml[942,33377+21]..[942,33377+22])
                                              Ppat_any
                                            pattern (typing/includemod.ml[942,33377+23]..[942,33377+24])
                                              Ppat_any
                                          ]
                                  pattern (typing/includemod.ml[943,33403+6]..[943,33403+21])
                                    Ppat_construct "Keep" (typing/includemod.ml[943,33403+6]..[943,33403+10])
                                    Some
                                      []
                                      pattern (typing/includemod.ml[943,33403+11]..[943,33403+21])
                                        Ppat_tuple
                                        [
                                          pattern (typing/includemod.ml[943,33403+12]..[943,33403+13])
                                            Ppat_any
                                          pattern (typing/includemod.ml[943,33403+14]..[943,33403+18])
                                            Ppat_construct "Unit" (typing/includemod.ml[943,33403+14]..[943,33403+18])
                                            None
                                          pattern (typing/includemod.ml[943,33403+19]..[943,33403+20])
                                            Ppat_any
                                        ]
                                pattern (typing/includemod.ml[944,33425+6]..[944,33425+44])
                                  Ppat_construct "Change" (typing/includemod.ml[944,33425+6]..[944,33425+12])
                                  Some
                                    []
                                    pattern (typing/includemod.ml[944,33425+13]..[944,33425+44])
                                      Ppat_tuple
                                      [
                                        pattern (typing/includemod.ml[944,33425+14]..[944,33425+15])
                                          Ppat_any
                                        pattern (typing/includemod.ml[944,33425+16]..[944,33425+39])
                                          Ppat_or
                                          pattern (typing/includemod.ml[944,33425+17]..[944,33425+21])
                                            Ppat_construct "Unit" (typing/includemod.ml[944,33425+17]..[944,33425+21])
                                            None
                                          pattern (typing/includemod.ml[944,33425+24]..[944,33425+38])
                                            Ppat_construct "Named" (typing/includemod.ml[944,33425+24]..[944,33425+29])
                                            Some
                                              []
                                              pattern (typing/includemod.ml[944,33425+30]..[944,33425+38])
                                                Ppat_tuple
                                                [
                                                  pattern (typing/includemod.ml[944,33425+31]..[944,33425+35])
                                                    Ppat_construct "None" (typing/includemod.ml[944,33425+31]..[944,33425+35])
                                                    None
                                                  pattern (typing/includemod.ml[944,33425+36]..[944,33425+37])
                                                    Ppat_any
                                                ]
                                        pattern (typing/includemod.ml[944,33425+41]..[944,33425+42])
                                          Ppat_any
                                      ]
                              pattern (typing/includemod.ml[945,33470+6]..[945,33470+45])
                                Ppat_construct "Change" (typing/includemod.ml[945,33470+6]..[945,33470+12])
                                Some
                                  []
                                  pattern (typing/includemod.ml[945,33470+13]..[945,33470+45])
                                    Ppat_tuple
                                    [
                                      pattern (typing/includemod.ml[945,33470+14]..[945,33470+22])
                                        Ppat_tuple
                                        [
                                          pattern (typing/includemod.ml[945,33470+15]..[945,33470+19])
                                            Ppat_construct "Unit" (typing/includemod.ml[945,33470+15]..[945,33470+19])
                                            None
                                          pattern (typing/includemod.ml[945,33470+20]..[945,33470+21])
                                            Ppat_any
                                        ]
                                      pattern (typing/includemod.ml[945,33470+24]..[945,33470+41])
                                        Ppat_construct "Named" (typing/includemod.ml[945,33470+24]..[945,33470+29])
                                        Some
                                          []
                                          pattern (typing/includemod.ml[945,33470+30]..[945,33470+41])
                                            Ppat_tuple
                                            [
                                              pattern (typing/includemod.ml[945,33470+31]..[945,33470+37])
                                                Ppat_construct "Some" (typing/includemod.ml[945,33470+31]..[945,33470+35])
                                                Some
                                                  []
                                                  pattern (typing/includemod.ml[945,33470+36]..[945,33470+37])
                                                    Ppat_any
                                              pattern (typing/includemod.ml[945,33470+39]..[945,33470+40])
                                                Ppat_any
                                            ]
                                      pattern (typing/includemod.ml[945,33470+43]..[945,33470+44])
                                        Ppat_any
                                    ]
                            expression (typing/includemod.ml[946,33519+8]..[946,33519+16])
                              Pexp_tuple
                              [
                                expression (typing/includemod.ml[946,33519+8]..[946,33519+10])
                                  Pexp_ident "st" (typing/includemod.ml[946,33519+8]..[946,33519+10])
                                expression (typing/includemod.ml[946,33519+12]..[946,33519+16])
                                  Pexp_array
                                  []
                              ]
                          <case>
                            pattern (typing/includemod.ml[947,33536+6]..[948,33600+63])
                              Ppat_or
                              pattern (typing/includemod.ml[947,33536+6]..[947,33536+63])
                                Ppat_construct "Keep" (typing/includemod.ml[947,33536+6]..[947,33536+10])
                                Some
                                  []
                                  pattern (typing/includemod.ml[947,33536+11]..[947,33536+63])
                                    Ppat_tuple
                                    [
                                      pattern (typing/includemod.ml[947,33536+12]..[947,33536+30])
                                        Ppat_tuple
                                        [
                                          pattern (typing/includemod.ml[947,33536+13]..[947,33536+22])
                                            Ppat_construct "Named" (typing/includemod.ml[947,33536+13]..[947,33536+18])
                                            Some
                                              []
                                              pattern (typing/includemod.ml[947,33536+19]..[947,33536+22])
                                                Ppat_var "arg" (typing/includemod.ml[947,33536+19]..[947,33536+22])
                                          pattern (typing/includemod.ml[947,33536+25]..[947,33536+29])
                                            Ppat_var "_mty" (typing/includemod.ml[947,33536+25]..[947,33536+29])
                                        ]
                                      pattern (typing/includemod.ml[947,33536+33]..[947,33536+59])
                                        Ppat_construct "Named" (typing/includemod.ml[947,33536+33]..[947,33536+38])
                                        Some
                                          []
                                          pattern (typing/includemod.ml[947,33536+39]..[947,33536+59])
                                            Ppat_tuple
                                            [
                                              pattern (typing/includemod.ml[947,33536+40]..[947,33536+50])
                                                Ppat_var "param_name" (typing/includemod.ml[947,33536+40]..[947,33536+50])
                                              pattern (typing/includemod.ml[947,33536+52]..[947,33536+58])
                                                Ppat_var "_param" (typing/includemod.ml[947,33536+52]..[947,33536+58])
                                            ]
                                      pattern (typing/includemod.ml[947,33536+61]..[947,33536+62])
                                        Ppat_any
                                    ]
                              pattern (typing/includemod.ml[948,33600+6]..[948,33600+63])
                                Ppat_construct "Change" (typing/includemod.ml[948,33600+6]..[948,33600+12])
                                Some
                                  []
                                  pattern (typing/includemod.ml[948,33600+13]..[948,33600+63])
                                    Ppat_tuple
                                    [
                                      pattern (typing/includemod.ml[948,33600+14]..[948,33600+31])
                                        Ppat_tuple
                                        [
                                          pattern (typing/includemod.ml[948,33600+15]..[948,33600+24])
                                            Ppat_construct "Named" (typing/includemod.ml[948,33600+15]..[948,33600+20])
                                            Some
                                              []
                                              pattern (typing/includemod.ml[948,33600+21]..[948,33600+24])
                                                Ppat_var "arg" (typing/includemod.ml[948,33600+21]..[948,33600+24])
                                          pattern (typing/includemod.ml[948,33600+26]..[948,33600+30])
                                            Ppat_var "_mty" (typing/includemod.ml[948,33600+26]..[948,33600+30])
                                        ]
                                      pattern (typing/includemod.ml[948,33600+33]..[948,33600+59])
                                        Ppat_construct "Named" (typing/includemod.ml[948,33600+33]..[948,33600+38])
                                        Some
                                          []
                                          pattern (typing/includemod.ml[948,33600+39]..[948,33600+59])
                                            Ppat_tuple
                                            [
                                              pattern (typing/includemod.ml[948,33600+40]..[948,33600+50])
                                                Ppat_var "param_name" (typing/includemod.ml[948,33600+40]..[948,33600+50])
                                              pattern (typing/includemod.ml[948,33600+52]..[948,33600+58])
                                                Ppat_var "_param" (typing/includemod.ml[948,33600+52]..[948,33600+58])
                                            ]
                                      pattern (typing/includemod.ml[948,33600+61]..[948,33600+62])
                                        Ppat_any
                                    ]
                            expression (typing/includemod.ml[949,33667+8]..[963,34183+11])
                              Pexp_match
                              expression (typing/includemod.ml[949,33667+20]..[949,33667+30])
                                Pexp_ident "param_name" (typing/includemod.ml[949,33667+20]..[949,33667+30])
                              [
                                <case>
                                  pattern (typing/includemod.ml[950,33703+10]..[950,33703+20])
                                    Ppat_construct "Some" (typing/includemod.ml[950,33703+10]..[950,33703+14])
                                    Some
                                      []
                                      pattern (typing/includemod.ml[950,33703+15]..[950,33703+20])
                                        Ppat_var "param" (typing/includemod.ml[950,33703+15]..[950,33703+20])
                                  expression (typing/includemod.ml[951,33727+12]..[960,34093+50])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (typing/includemod.ml[951,33727+16]..[951,33727+19])
                                          Ppat_var "res" (typing/includemod.ml[951,33727+16]..[951,33727+19])
                                        expression (typing/includemod.ml[952,33749+14]..[957,33992+22])
                                          Pexp_apply
                                          expression (typing/includemod.ml[952,33749+14]..[952,33749+24])
                                            Pexp_ident "Option.map" (typing/includemod.ml[952,33749+14]..[952,33749+24])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (typing/includemod.ml[952,33749+25]..[956,33974+17])
                                                Pexp_fun
                                                Nolabel
                                                None
                                                pattern (typing/includemod.ml[952,33749+30]..[952,33749+33])
                                                  Ppat_var "res" (typing/includemod.ml[952,33749+30]..[952,33749+33])
                                                expression (typing/includemod.ml[953,33786+18]..[955,33916+57])
                                                  Pexp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (typing/includemod.ml[953,33786+22]..[953,33786+27])
                                                        Ppat_var "scope" (typing/includemod.ml[953,33786+22]..[953,33786+27])
                                                      expression (typing/includemod.ml[953,33786+30]..[953,33786+51])
                                                        Pexp_apply
                                                        expression (typing/includemod.ml[953,33786+30]..[953,33786+48])
                                                          Pexp_ident "Ctype.create_scope" (typing/includemod.ml[953,33786+30]..[953,33786+48])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (typing/includemod.ml[953,33786+49]..[953,33786+51])
                                                              Pexp_construct "()" (typing/includemod.ml[953,33786+49]..[953,33786+51])
                                                              None
                                                        ]
                                                  ]
                                                  expression (typing/includemod.ml[954,33841+18]..[955,33916+57])
                                                    Pexp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (typing/includemod.ml[954,33841+22]..[954,33841+27])
                                                          Ppat_var "subst" (typing/includemod.ml[954,33841+22]..[954,33841+27])
                                                        expression (typing/includemod.ml[954,33841+30]..[954,33841+71])
                                                          Pexp_apply
                                                          expression (typing/includemod.ml[954,33841+30]..[954,33841+46])
                                                            Pexp_ident "Subst.add_module" (typing/includemod.ml[954,33841+30]..[954,33841+46])
                                                          [
                                                            <arg>
                                                            Nolabel
                                                              expression (typing/includemod.ml[954,33841+47]..[954,33841+52])
                                                                Pexp_ident "param" (typing/includemod.ml[954,33841+47]..[954,33841+52])
                                                            <arg>
                                                            Nolabel
                                                              expression (typing/includemod.ml[954,33841+53]..[954,33841+56])
                                                                Pexp_ident "arg" (typing/includemod.ml[954,33841+53]..[954,33841+56])
                                                            <arg>
                                                            Nolabel
                                                              expression (typing/includemod.ml[954,33841+57]..[954,33841+71])
                                                                Pexp_ident "Subst.identity" (typing/includemod.ml[954,33841+57]..[954,33841+71])
                                                          ]
                                                    ]
                                                    expression (typing/includemod.ml[955,33916+18]..[955,33916+57])
                                                      Pexp_apply
                                                      expression (typing/includemod.ml[955,33916+18]..[955,33916+31])
                                                        Pexp_ident "Subst.modtype" (typing/includemod.ml[955,33916+18]..[955,33916+31])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (typing/includemod.ml[955,33916+32]..[955,33916+47])
                                                            Pexp_construct "Rescope" (typing/includemod.ml[955,33916+33]..[955,33916+40])
                                                            Some
                                                              expression (typing/includemod.ml[955,33916+41]..[955,33916+46])
                                                                Pexp_ident "scope" (typing/includemod.ml[955,33916+41]..[955,33916+46])
                                                        <arg>
                                                        Nolabel
                                                          expression (typing/includemod.ml[955,33916+48]..[955,33916+53])
                                                            Pexp_ident "subst" (typing/includemod.ml[955,33916+48]..[955,33916+53])
                                                        <arg>
                                                        Nolabel
                                                          expression (typing/includemod.ml[955,33916+54]..[955,33916+57])
                                                            Pexp_ident "res" (typing/includemod.ml[955,33916+54]..[955,33916+57])
                                                      ]
                                            <arg>
                                            Nolabel
                                              expression (typing/includemod.ml[957,33992+16]..[957,33992+22])
                                                Pexp_field
                                                expression (typing/includemod.ml[957,33992+16]..[957,33992+18])
                                                  Pexp_ident "st" (typing/includemod.ml[957,33992+16]..[957,33992+18])
                                                "res" (typing/includemod.ml[957,33992+19]..[957,33992+22])
                                          ]
                                    ]
                                    expression (typing/includemod.ml[959,34030+12]..[960,34093+50])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (typing/includemod.ml[959,34030+16]..[959,34030+21])
                                            Ppat_var "subst" (typing/includemod.ml[959,34030+16]..[959,34030+21])
                                          expression (typing/includemod.ml[959,34030+24]..[959,34030+59])
                                            Pexp_apply
                                            expression (typing/includemod.ml[959,34030+24]..[959,34030+40])
                                              Pexp_ident "Subst.add_module" (typing/includemod.ml[959,34030+24]..[959,34030+40])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (typing/includemod.ml[959,34030+41]..[959,34030+46])
                                                  Pexp_ident "param" (typing/includemod.ml[959,34030+41]..[959,34030+46])
                                              <arg>
                                              Nolabel
                                                expression (typing/includemod.ml[959,34030+47]..[959,34030+50])
                                                  Pexp_ident "arg" (typing/includemod.ml[959,34030+47]..[959,34030+50])
                                              <arg>
                                              Nolabel
                                                expression (typing/includemod.ml[959,34030+51]..[959,34030+59])
                                                  Pexp_field
                                                  expression (typing/includemod.ml[959,34030+51]..[959,34030+53])
                                                    Pexp_ident "st" (typing/includemod.ml[959,34030+51]..[959,34030+53])
                                                  "subst" (typing/includemod.ml[959,34030+54]..[959,34030+59])
                                            ]
                                      ]
                                      expression (typing/includemod.ml[960,34093+12]..[960,34093+50])
                                        Pexp_apply
                                        expression (typing/includemod.ml[960,34093+12]..[960,34093+27])
                                          Pexp_ident "I.expand_params" (typing/includemod.ml[960,34093+12]..[960,34093+27])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (typing/includemod.ml[960,34093+28]..[960,34093+50])
                                              Pexp_record
                                              [
                                                "subst" (typing/includemod.ml[960,34093+38]..[960,34093+43]) ghost
                                                  expression (typing/includemod.ml[960,34093+38]..[960,34093+43])
                                                    Pexp_ident "subst" (typing/includemod.ml[960,34093+38]..[960,34093+43])
                                                "res" (typing/includemod.ml[960,34093+45]..[960,34093+48]) ghost
                                                  expression (typing/includemod.ml[960,34093+45]..[960,34093+48])
                                                    Pexp_ident "res" (typing/includemod.ml[960,34093+45]..[960,34093+48])
                                              ]
                                              Some
                                                expression (typing/includemod.ml[960,34093+30]..[960,34093+32])
                                                  Pexp_ident "st" (typing/includemod.ml[960,34093+30]..[960,34093+32])
                                        ]
                                <case>
                                  pattern (typing/includemod.ml[961,34144+10]..[961,34144+14])
                                    Ppat_construct "None" (typing/includemod.ml[961,34144+10]..[961,34144+14])
                                    None
                                  expression (typing/includemod.ml[962,34162+12]..[962,34162+20])
                                    Pexp_tuple
                                    [
                                      expression (typing/includemod.ml[962,34162+12]..[962,34162+14])
                                        Pexp_ident "st" (typing/includemod.ml[962,34162+12]..[962,34162+14])
                                      expression (typing/includemod.ml[962,34162+16]..[962,34162+20])
                                        Pexp_array
                                        []
                                    ]
                              ]
                          <case>
                            pattern (typing/includemod.ml[964,34195+6]..[965,34257+62])
                              Ppat_or
                              pattern (typing/includemod.ml[964,34195+6]..[964,34195+61])
                                Ppat_construct "Keep" (typing/includemod.ml[964,34195+6]..[964,34195+10])
                                Some
                                  []
                                  pattern (typing/includemod.ml[964,34195+11]..[964,34195+61])
                                    Ppat_tuple
                                    [
                                      pattern (typing/includemod.ml[964,34195+12]..[964,34195+28])
                                        Ppat_tuple
                                        [
                                          pattern (typing/includemod.ml[964,34195+13]..[964,34195+22])
                                            Ppat_construct "Anonymous" (typing/includemod.ml[964,34195+13]..[964,34195+22])
                                            None
                                          pattern (typing/includemod.ml[964,34195+24]..[964,34195+27])
                                            Ppat_var "mty" (typing/includemod.ml[964,34195+24]..[964,34195+27])
                                        ]
                                      pattern (typing/includemod.ml[964,34195+31]..[964,34195+57])
                                        Ppat_construct "Named" (typing/includemod.ml[964,34195+31]..[964,34195+36])
                                        Some
                                          []
                                          pattern (typing/includemod.ml[964,34195+37]..[964,34195+57])
                                            Ppat_tuple
                                            [
                                              pattern (typing/includemod.ml[964,34195+38]..[964,34195+48])
                                                Ppat_var "param_name" (typing/includemod.ml[964,34195+38]..[964,34195+48])
                                              pattern (typing/includemod.ml[964,34195+50]..[964,34195+56])
                                                Ppat_var "_param" (typing/includemod.ml[964,34195+50]..[964,34195+56])
                                            ]
                                      pattern (typing/includemod.ml[964,34195+59]..[964,34195+60])
                                        Ppat_any
                                    ]
                              pattern (typing/includemod.ml[965,34257+6]..[965,34257+62])
                                Ppat_construct "Change" (typing/includemod.ml[965,34257+6]..[965,34257+12])
                                Some
                                  []
                                  pattern (typing/includemod.ml[965,34257+13]..[965,34257+62])
                                    Ppat_tuple
                                    [
                                      pattern (typing/includemod.ml[965,34257+14]..[965,34257+30])
                                        Ppat_tuple
                                        [
                                          pattern (typing/includemod.ml[965,34257+15]..[965,34257+24])
                                            Ppat_construct "Anonymous" (typing/includemod.ml[965,34257+15]..[965,34257+24])
                                            None
                                          pattern (typing/includemod.ml[965,34257+26]..[965,34257+29])
                                            Ppat_var "mty" (typing/includemod.ml[965,34257+26]..[965,34257+29])
                                        ]
                                      pattern (typing/includemod.ml[965,34257+32]..[965,34257+58])
                                        Ppat_construct "Named" (typing/includemod.ml[965,34257+32]..[965,34257+37])
                                        Some
                                          []
                                          pattern (typing/includemod.ml[965,34257+38]..[965,34257+58])
                                            Ppat_tuple
                                            [
                                              pattern (typing/includemod.ml[965,34257+39]..[965,34257+49])
                                                Ppat_var "param_name" (typing/includemod.ml[965,34257+39]..[965,34257+49])
                                              pattern (typing/includemod.ml[965,34257+51]..[965,34257+57])
                                                Ppat_var "_param" (typing/includemod.ml[965,34257+51]..[965,34257+57])
                                            ]
                                      pattern (typing/includemod.ml[965,34257+60]..[965,34257+61])
                                        Ppat_any
                                    ]
                            expression (typing/includemod.ml[965,34257+66]..[977,34733+9])
                              Pexp_match
                              expression (typing/includemod.ml[966,34329+20]..[966,34329+30])
                                Pexp_ident "param_name" (typing/includemod.ml[966,34329+20]..[966,34329+30])
                              [
                                <case>
                                  pattern (typing/includemod.ml[967,34365+10]..[967,34365+20])
                                    Ppat_construct "Some" (typing/includemod.ml[967,34365+10]..[967,34365+14])
                                    Some
                                      []
                                      pattern (typing/includemod.ml[967,34365+15]..[967,34365+20])
                                        Ppat_var "param" (typing/includemod.ml[967,34365+15]..[967,34365+20])
                                  expression (typing/includemod.ml[968,34389+12]..[973,34634+47])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (typing/includemod.ml[968,34389+16]..[968,34389+20])
                                          Ppat_var "mty'" (typing/includemod.ml[968,34389+16]..[968,34389+20])
                                        expression (typing/includemod.ml[968,34389+23]..[968,34389+54])
                                          Pexp_apply
                                          expression (typing/includemod.ml[968,34389+23]..[968,34389+36])
                                            Pexp_ident "Subst.modtype" (typing/includemod.ml[968,34389+23]..[968,34389+36])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (typing/includemod.ml[968,34389+37]..[968,34389+41])
                                                Pexp_construct "Keep" (typing/includemod.ml[968,34389+37]..[968,34389+41])
                                                None
                                            <arg>
                                            Nolabel
                                              expression (typing/includemod.ml[968,34389+42]..[968,34389+50])
                                                Pexp_field
                                                expression (typing/includemod.ml[968,34389+42]..[968,34389+44])
                                                  Pexp_ident "st" (typing/includemod.ml[968,34389+42]..[968,34389+44])
                                                "subst" (typing/includemod.ml[968,34389+45]..[968,34389+50])
                                            <arg>
                                            Nolabel
                                              expression (typing/includemod.ml[968,34389+51]..[968,34389+54])
                                                Pexp_ident "mty" (typing/includemod.ml[968,34389+51]..[968,34389+54])
                                          ]
                                    ]
                                    expression (typing/includemod.ml[969,34447+12]..[973,34634+47])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (typing/includemod.ml[969,34447+16]..[969,34447+19])
                                            Ppat_var "env" (typing/includemod.ml[969,34447+16]..[969,34447+19])
                                          expression (typing/includemod.ml[970,34469+14]..[970,34469+67])
                                            Pexp_apply
                                            expression (typing/includemod.ml[970,34469+14]..[970,34469+28])
                                              Pexp_ident "Env.add_module" (typing/includemod.ml[970,34469+14]..[970,34469+28])
                                            [
                                              <arg>
                                              Labelled "arg"
                                                expression (typing/includemod.ml[970,34469+34]..[970,34469+38])
                                                  Pexp_construct "true" (typing/includemod.ml[970,34469+34]..[970,34469+38])
                                                  None
                                              <arg>
                                              Nolabel
                                                expression (typing/includemod.ml[970,34469+39]..[970,34469+44])
                                                  Pexp_ident "param" (typing/includemod.ml[970,34469+39]..[970,34469+44])
                                              <arg>
                                              Nolabel
                                                expression (typing/includemod.ml[970,34469+45]..[970,34469+55])
                                                  Pexp_construct "Mp_present" (typing/includemod.ml[970,34469+45]..[970,34469+55])
                                                  None
                                              <arg>
                                              Nolabel
                                                expression (typing/includemod.ml[970,34469+56]..[970,34469+60])
                                                  Pexp_ident "mty'" (typing/includemod.ml[970,34469+56]..[970,34469+60])
                                              <arg>
                                              Nolabel
                                                expression (typing/includemod.ml[970,34469+61]..[970,34469+67])
                                                  Pexp_field
                                                  expression (typing/includemod.ml[970,34469+61]..[970,34469+63])
                                                    Pexp_ident "st" (typing/includemod.ml[970,34469+61]..[970,34469+63])
                                                  "env" (typing/includemod.ml[970,34469+64]..[970,34469+67])
                                            ]
                                      ]
                                      expression (typing/includemod.ml[971,34540+12]..[973,34634+47])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (typing/includemod.ml[971,34540+16]..[971,34540+19])
                                              Ppat_var "res" (typing/includemod.ml[971,34540+16]..[971,34540+19])
                                            expression (typing/includemod.ml[972,34562+14]..[972,34562+68])
                                              Pexp_apply
                                              expression (typing/includemod.ml[972,34562+14]..[972,34562+24])
                                                Pexp_ident "Option.map" (typing/includemod.ml[972,34562+14]..[972,34562+24])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[972,34562+25]..[972,34562+61])
                                                    Pexp_apply
                                                    expression (typing/includemod.ml[972,34562+26]..[972,34562+48])
                                                      Pexp_ident "Mtype.nondep_supertype" (typing/includemod.ml[972,34562+26]..[972,34562+48])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (typing/includemod.ml[972,34562+49]..[972,34562+52])
                                                          Pexp_ident "env" (typing/includemod.ml[972,34562+49]..[972,34562+52])
                                                      <arg>
                                                      Nolabel
                                                        expression (typing/includemod.ml[972,34562+53]..[972,34562+60])
                                                          Pexp_construct "::" (typing/includemod.ml[972,34562+54]..[972,34562+60]) ghost
                                                          Some
                                                            expression (typing/includemod.ml[972,34562+54]..[972,34562+60]) ghost
                                                              Pexp_tuple
                                                              [
                                                                expression (typing/includemod.ml[972,34562+54]..[972,34562+59])
                                                                  Pexp_ident "param" (typing/includemod.ml[972,34562+54]..[972,34562+59])
                                                                expression (typing/includemod.ml[972,34562+59]..[972,34562+60]) ghost
                                                                  Pexp_construct "[]" (typing/includemod.ml[972,34562+59]..[972,34562+60]) ghost
                                                                  None
                                                              ]
                                                    ]
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[972,34562+62]..[972,34562+68])
                                                    Pexp_field
                                                    expression (typing/includemod.ml[972,34562+62]..[972,34562+64])
                                                      Pexp_ident "st" (typing/includemod.ml[972,34562+62]..[972,34562+64])
                                                    "res" (typing/includemod.ml[972,34562+65]..[972,34562+68])
                                              ]
                                        ]
                                        expression (typing/includemod.ml[973,34634+12]..[973,34634+47])
                                          Pexp_apply
                                          expression (typing/includemod.ml[973,34634+12]..[973,34634+27])
                                            Pexp_ident "I.expand_params" (typing/includemod.ml[973,34634+12]..[973,34634+27])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (typing/includemod.ml[973,34634+28]..[973,34634+47])
                                                Pexp_record
                                                [
                                                  "env" (typing/includemod.ml[973,34634+38]..[973,34634+41]) ghost
                                                    expression (typing/includemod.ml[973,34634+38]..[973,34634+41])
                                                      Pexp_ident "env" (typing/includemod.ml[973,34634+38]..[973,34634+41])
                                                  "res" (typing/includemod.ml[973,34634+43]..[973,34634+46]) ghost
                                                    expression (typing/includemod.ml[973,34634+43]..[973,34634+46])
                                                      Pexp_ident "res" (typing/includemod.ml[973,34634+43]..[973,34634+46])
                                                ]
                                                Some
                                                  expression (typing/includemod.ml[973,34634+30]..[973,34634+32])
                                                    Pexp_ident "st" (typing/includemod.ml[973,34634+30]..[973,34634+32])
                                          ]
                                <case>
                                  pattern (typing/includemod.ml[974,34682+10]..[974,34682+14])
                                    Ppat_construct "None" (typing/includemod.ml[974,34682+10]..[974,34682+14])
                                    None
                                  expression (typing/includemod.ml[975,34700+12]..[975,34700+20])
                                    Pexp_tuple
                                    [
                                      expression (typing/includemod.ml[975,34700+12]..[975,34700+14])
                                        Pexp_ident "st" (typing/includemod.ml[975,34700+12]..[975,34700+14])
                                      expression (typing/includemod.ml[975,34700+16]..[975,34700+20])
                                        Pexp_array
                                        []
                                    ]
                              ]
                        ]
            ]
          structure_item (typing/includemod.ml[979,34744+2]..[1006,35809+34])
            Pstr_value Nonrec
            [
              <def>
                pattern (typing/includemod.ml[979,34744+6]..[979,34744+10])
                  Ppat_var "diff" (typing/includemod.ml[979,34744+6]..[979,34744+10])
                expression (typing/includemod.ml[979,34744+11]..[1006,35809+34]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (typing/includemod.ml[979,34744+11]..[979,34744+14])
                    Ppat_var "env" (typing/includemod.ml[979,34744+11]..[979,34744+14])
                  expression (typing/includemod.ml[979,34744+15]..[1006,35809+34]) ghost
                    Pexp_fun
                    Labelled "f"
                    None
                    pattern (typing/includemod.ml[979,34744+16]..[979,34744+17])
                      Ppat_var "f" (typing/includemod.ml[979,34744+16]..[979,34744+17])
                    expression (typing/includemod.ml[979,34744+18]..[1006,35809+34]) ghost
                      Pexp_fun
                      Labelled "args"
                      None
                      pattern (typing/includemod.ml[979,34744+19]..[979,34744+23])
                        Ppat_var "args" (typing/includemod.ml[979,34744+19]..[979,34744+23])
                      expression (typing/includemod.ml[980,34770+4]..[1006,35809+34])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (typing/includemod.ml[980,34770+8]..[980,34770+19])
                              Ppat_tuple
                              [
                                pattern (typing/includemod.ml[980,34770+8]..[980,34770+14])
                                  Ppat_var "params" (typing/includemod.ml[980,34770+8]..[980,34770+14])
                                pattern (typing/includemod.ml[980,34770+16]..[980,34770+19])
                                  Ppat_var "res" (typing/includemod.ml[980,34770+16]..[980,34770+19])
                              ]
                            expression (typing/includemod.ml[980,34770+22]..[980,34770+51])
                              Pexp_apply
                              expression (typing/includemod.ml[980,34770+22]..[980,34770+45])
                                Pexp_ident "retrieve_functor_params" (typing/includemod.ml[980,34770+22]..[980,34770+45])
                              [
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[980,34770+46]..[980,34770+49])
                                    Pexp_ident "env" (typing/includemod.ml[980,34770+46]..[980,34770+49])
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[980,34770+50]..[980,34770+51])
                                    Pexp_ident "f" (typing/includemod.ml[980,34770+50]..[980,34770+51])
                              ]
                        ]
                        expression (typing/includemod.ml[981,34825+4]..[1006,35809+34])
                          Pexp_letmodule "Compute" (typing/includemod.ml[981,34825+15]..[981,34825+22])
                          module_expr (typing/includemod.ml[981,34825+25]..[999,35604+10])
                            Pmod_apply
                            module_expr (typing/includemod.ml[981,34825+25]..[981,34825+44])
                              Pmod_ident "Diff.Right_variadic" (typing/includemod.ml[981,34825+25]..[981,34825+44])
                            module_expr (typing/includemod.ml[981,34825+45]..[999,35604+9])
                              Pmod_structure
                              [
                                structure_item (typing/includemod.ml[982,34877+8]..[982,34877+27])
                                  Pstr_value Nonrec
                                  [
                                    <def>
                                      pattern (typing/includemod.ml[982,34877+12]..[982,34877+18])
                                        Ppat_var "update" (typing/includemod.ml[982,34877+12]..[982,34877+18])
                                      expression (typing/includemod.ml[982,34877+21]..[982,34877+27])
                                        Pexp_ident "update" (typing/includemod.ml[982,34877+21]..[982,34877+27])
                                  ]
                                structure_item (typing/includemod.ml[983,34905+8]..[997,35562+13])
                                  Pstr_value Nonrec
                                  [
                                    <def>
                                      pattern (typing/includemod.ml[983,34905+12]..[983,34905+16])
                                        Ppat_var "test" (typing/includemod.ml[983,34905+12]..[983,34905+16])
                                      expression (typing/includemod.ml[983,34905+17]..[997,35562+13]) ghost
                                        Pexp_fun
                                        Nolabel
                                        None
                                        pattern (typing/includemod.ml[983,34905+17]..[983,34905+35])
                                          Ppat_constraint
                                          pattern (typing/includemod.ml[983,34905+18]..[983,34905+23])
                                            Ppat_var "state" (typing/includemod.ml[983,34905+18]..[983,34905+23])
                                          core_type (typing/includemod.ml[983,34905+24]..[983,34905+34])
                                            Ptyp_constr "Defs.state" (typing/includemod.ml[983,34905+24]..[983,34905+34])
                                            []
                                        expression (typing/includemod.ml[983,34905+36]..[997,35562+13]) ghost
                                          Pexp_fun
                                          Nolabel
                                          None
                                          pattern (typing/includemod.ml[983,34905+36]..[983,34905+49])
                                            Ppat_tuple
                                            [
                                              pattern (typing/includemod.ml[983,34905+37]..[983,34905+40])
                                                Ppat_var "arg" (typing/includemod.ml[983,34905+37]..[983,34905+40])
                                              pattern (typing/includemod.ml[983,34905+41]..[983,34905+48])
                                                Ppat_var "arg_mty" (typing/includemod.ml[983,34905+41]..[983,34905+48])
                                            ]
                                          expression (typing/includemod.ml[983,34905+50]..[997,35562+13]) ghost
                                            Pexp_fun
                                            Nolabel
                                            None
                                            pattern (typing/includemod.ml[983,34905+50]..[983,34905+55])
                                              Ppat_var "param" (typing/includemod.ml[983,34905+50]..[983,34905+55])
                                            expression (typing/includemod.ml[984,34963+10]..[997,35562+13])
                                              Pexp_let Nonrec
                                              [
                                                <def>
                                                  pattern (typing/includemod.ml[984,34963+14]..[984,34963+17])
                                                    Ppat_var "loc" (typing/includemod.ml[984,34963+14]..[984,34963+17])
                                                  expression (typing/includemod.ml[984,34963+20]..[984,34963+33])
                                                    Pexp_ident "Location.none" (typing/includemod.ml[984,34963+20]..[984,34963+33])
                                              ]
                                              expression (typing/includemod.ml[985,35000+10]..[997,35562+13])
                                                Pexp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (typing/includemod.ml[985,35000+14]..[985,35000+17])
                                                      Ppat_var "res" (typing/includemod.ml[985,35000+14]..[985,35000+17])
                                                    expression (typing/includemod.ml[985,35000+20]..[995,35516+32])
                                                      Pexp_match
                                                      expression (typing/includemod.ml[985,35000+26]..[985,35000+62])
                                                        Pexp_tuple
                                                        [
                                                          expression (typing/includemod.ml[985,35000+26]..[985,35000+55])
                                                            Pexp_constraint
                                                            expression (typing/includemod.ml[985,35000+27]..[985,35000+30])
                                                              Pexp_ident "arg" (typing/includemod.ml[985,35000+27]..[985,35000+30])
                                                            core_type (typing/includemod.ml[985,35000+31]..[985,35000+54])
                                                              Ptyp_constr "Error.functor_arg_descr" (typing/includemod.ml[985,35000+31]..[985,35000+54])
                                                              []
                                                          expression (typing/includemod.ml[985,35000+57]..[985,35000+62])
                                                            Pexp_ident "param" (typing/includemod.ml[985,35000+57]..[985,35000+62])
                                                        ]
                                                      [
                                                        <case>
                                                          pattern (typing/includemod.ml[986,35068+14]..[986,35068+24])
                                                            Ppat_tuple
                                                            [
                                                              pattern (typing/includemod.ml[986,35068+14]..[986,35068+18])
                                                                Ppat_construct "Unit" (typing/includemod.ml[986,35068+14]..[986,35068+18])
                                                                None
                                                              pattern (typing/includemod.ml[986,35068+20]..[986,35068+24])
                                                                Ppat_construct "Unit" (typing/includemod.ml[986,35068+20]..[986,35068+24])
                                                                None
                                                            ]
                                                          expression (typing/includemod.ml[986,35068+28]..[986,35068+43])
                                                            Pexp_construct "Ok" (typing/includemod.ml[986,35068+28]..[986,35068+30])
                                                            Some
                                                              expression (typing/includemod.ml[986,35068+31]..[986,35068+43])
                                                                Pexp_construct "Tcoerce_none" (typing/includemod.ml[986,35068+31]..[986,35068+43])
                                                                None
                                                        <case>
                                                          pattern (typing/includemod.ml[987,35112+14]..[987,35112+57])
                                                            Ppat_or
                                                            pattern (typing/includemod.ml[987,35112+14]..[987,35112+27])
                                                              Ppat_tuple
                                                              [
                                                                pattern (typing/includemod.ml[987,35112+14]..[987,35112+18])
                                                                  Ppat_construct "Unit" (typing/includemod.ml[987,35112+14]..[987,35112+18])
                                                                  None
                                                                pattern (typing/includemod.ml[987,35112+20]..[987,35112+27])
                                                                  Ppat_construct "Named" (typing/includemod.ml[987,35112+20]..[987,35112+25])
                                                                  Some
                                                                    []
                                                                    pattern (typing/includemod.ml[987,35112+26]..[987,35112+27])
                                                                      Ppat_any
                                                              ]
                                                            pattern (typing/includemod.ml[987,35112+30]..[987,35112+57])
                                                              Ppat_tuple
                                                              [
                                                                pattern (typing/includemod.ml[987,35112+30]..[987,35112+51])
                                                                  Ppat_or
                                                                  pattern (typing/includemod.ml[987,35112+31]..[987,35112+40])
                                                                    Ppat_construct "Anonymous" (typing/includemod.ml[987,35112+31]..[987,35112+40])
                                                                    None
                                                                  pattern (typing/includemod.ml[987,35112+43]..[987,35112+50])
                                                                    Ppat_construct "Named" (typing/includemod.ml[987,35112+43]..[987,35112+48])
                                                                    Some
                                                                      []
                                                                      pattern (typing/includemod.ml[987,35112+49]..[987,35112+50])
Ppat_any
                                                                pattern (typing/includemod.ml[987,35112+53]..[987,35112+57])
                                                                  Ppat_construct "Unit" (typing/includemod.ml[987,35112+53]..[987,35112+57])
                                                                  None
                                                              ]
                                                          expression (typing/includemod.ml[988,35173+16]..[988,35173+67])
                                                            Pexp_construct "Result.Error" (typing/includemod.ml[988,35173+16]..[988,35173+28])
                                                            Some
                                                              expression (typing/includemod.ml[988,35173+29]..[988,35173+67])
                                                                Pexp_construct "Error.Incompatible_params" (typing/includemod.ml[988,35173+30]..[988,35173+55])
                                                                Some
                                                                  expression (typing/includemod.ml[988,35173+55]..[988,35173+66])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (typing/includemod.ml[988,35173+56]..[988,35173+59])
Pexp_ident "arg" (typing/includemod.ml[988,35173+56]..[988,35173+59])
                                                                      expression (typing/includemod.ml[988,35173+60]..[988,35173+65])
Pexp_ident "param" (typing/includemod.ml[988,35173+60]..[988,35173+65])
                                                                    ]
                                                        <case>
                                                          pattern (typing/includemod.ml[989,35241+14]..[989,35241+56])
                                                            Ppat_tuple
                                                            [
                                                              pattern (typing/includemod.ml[989,35241+14]..[989,35241+37])
                                                                Ppat_or
                                                                pattern (typing/includemod.ml[989,35241+16]..[989,35241+25])
                                                                  Ppat_construct "Anonymous" (typing/includemod.ml[989,35241+16]..[989,35241+25])
                                                                  None
                                                                pattern (typing/includemod.ml[989,35241+28]..[989,35241+35])
                                                                  Ppat_construct "Named" (typing/includemod.ml[989,35241+28]..[989,35241+33])
                                                                  Some
                                                                    []
                                                                    pattern (typing/includemod.ml[989,35241+34]..[989,35241+35])
                                                                      Ppat_any
                                                              pattern (typing/includemod.ml[989,35241+40]..[989,35241+56])
                                                                Ppat_construct "Named" (typing/includemod.ml[989,35241+40]..[989,35241+45])
                                                                Some
                                                                  []
                                                                  pattern (typing/includemod.ml[989,35241+46]..[989,35241+56])
                                                                    Ppat_tuple
                                                                    [
                                                                      pattern (typing/includemod.ml[989,35241+47]..[989,35241+48])
Ppat_any
                                                                      pattern (typing/includemod.ml[989,35241+50]..[989,35241+55])
Ppat_var "param" (typing/includemod.ml[989,35241+50]..[989,35241+55])
                                                                    ]
                                                            ]
                                                          expression (typing/includemod.ml[990,35301+16]..[995,35516+32])
                                                            Pexp_match
                                                            expression (typing/includemod.ml[991,35323+18]..[992,35396+33])
                                                              Pexp_apply
                                                              expression (typing/includemod.ml[991,35323+18]..[991,35323+26])
                                                                Pexp_ident "modtypes" (typing/includemod.ml[991,35323+18]..[991,35323+26])
                                                              [
                                                                <arg>
                                                                Labelled "loc"
                                                                  expression (typing/includemod.ml[991,35323+28]..[991,35323+31])
                                                                    Pexp_ident "loc" (typing/includemod.ml[991,35323+28]..[991,35323+31])
                                                                <arg>
                                                                Nolabel
                                                                  expression (typing/includemod.ml[991,35323+32]..[991,35323+41])
                                                                    Pexp_field
                                                                    expression (typing/includemod.ml[991,35323+32]..[991,35323+37])
                                                                      Pexp_ident "state" (typing/includemod.ml[991,35323+32]..[991,35323+37])
                                                                    "env" (typing/includemod.ml[991,35323+38]..[991,35323+41])
                                                                <arg>
                                                                Labelled "mark"
                                                                  expression (typing/includemod.ml[991,35323+48]..[991,35323+60])
                                                                    Pexp_construct "Mark_neither" (typing/includemod.ml[991,35323+48]..[991,35323+60])
                                                                    None
                                                                <arg>
                                                                Nolabel
                                                                  expression (typing/includemod.ml[991,35323+61]..[991,35323+72])
                                                                    Pexp_field
                                                                    expression (typing/includemod.ml[991,35323+61]..[991,35323+66])
                                                                      Pexp_ident "state" (typing/includemod.ml[991,35323+61]..[991,35323+66])
                                                                    "subst" (typing/includemod.ml[991,35323+67]..[991,35323+72])
                                                                <arg>
                                                                Nolabel
                                                                  expression (typing/includemod.ml[992,35396+20]..[992,35396+27])
                                                                    Pexp_ident "arg_mty" (typing/includemod.ml[992,35396+20]..[992,35396+27])
                                                                <arg>
                                                                Nolabel
                                                                  expression (typing/includemod.ml[992,35396+28]..[992,35396+33])
                                                                    Pexp_ident "param" (typing/includemod.ml[992,35396+28]..[992,35396+33])
                                                              ]
                                                            [
                                                              <case>
                                                                pattern (typing/includemod.ml[994,35451+18]..[994,35451+27])
                                                                  Ppat_construct "Error" (typing/includemod.ml[994,35451+18]..[994,35451+23])
                                                                  Some
                                                                    []
                                                                    pattern (typing/includemod.ml[994,35451+24]..[994,35451+27])
                                                                      Ppat_var "mty" (typing/includemod.ml[994,35451+24]..[994,35451+27])
                                                                expression (typing/includemod.ml[994,35451+31]..[994,35451+64])
                                                                  Pexp_construct "Result.Error" (typing/includemod.ml[994,35451+31]..[994,35451+43])
                                                                  Some
                                                                    expression (typing/includemod.ml[994,35451+44]..[994,35451+64])
                                                                      Pexp_construct "Error.Mismatch" (typing/includemod.ml[994,35451+45]..[994,35451+59])
                                                                      Some
expression (typing/includemod.ml[994,35451+60]..[994,35451+63])
  Pexp_ident "mty" (typing/includemod.ml[994,35451+60]..[994,35451+63])
                                                              <case>
                                                                pattern (typing/includemod.ml[995,35516+18]..[995,35516+27])
                                                                  Ppat_alias "x" (typing/includemod.ml[995,35516+26]..[995,35516+27])
                                                                  pattern (typing/includemod.ml[995,35516+18]..[995,35516+22])
                                                                    Ppat_construct "Ok" (typing/includemod.ml[995,35516+18]..[995,35516+20])
                                                                    Some
                                                                      []
                                                                      pattern (typing/includemod.ml[995,35516+21]..[995,35516+22])
Ppat_any
                                                                expression (typing/includemod.ml[995,35516+31]..[995,35516+32])
                                                                  Pexp_ident "x" (typing/includemod.ml[995,35516+31]..[995,35516+32])
                                                            ]
                                                      ]
                                                ]
                                                expression (typing/includemod.ml[997,35562+10]..[997,35562+13])
                                                  Pexp_ident "res" (typing/includemod.ml[997,35562+10]..[997,35562+13])
                                  ]
                                structure_item (typing/includemod.ml[998,35576+8]..[998,35576+27])
                                  Pstr_value Nonrec
                                  [
                                    <def>
                                      pattern (typing/includemod.ml[998,35576+12]..[998,35576+18])
                                        Ppat_var "weight" (typing/includemod.ml[998,35576+12]..[998,35576+18])
                                      expression (typing/includemod.ml[998,35576+21]..[998,35576+27])
                                        Pexp_ident "weight" (typing/includemod.ml[998,35576+21]..[998,35576+27])
                                  ]
                              ]
                          expression (typing/includemod.ml[1001,35622+4]..[1006,35809+34])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (typing/includemod.ml[1001,35622+8]..[1001,35622+12])
                                  Ppat_var "args" (typing/includemod.ml[1001,35622+8]..[1001,35622+12])
                                expression (typing/includemod.ml[1001,35622+15]..[1001,35622+33])
                                  Pexp_apply
                                  expression (typing/includemod.ml[1001,35622+15]..[1001,35622+28])
                                    Pexp_ident "Array.of_list" (typing/includemod.ml[1001,35622+15]..[1001,35622+28])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[1001,35622+29]..[1001,35622+33])
                                        Pexp_ident "args" (typing/includemod.ml[1001,35622+29]..[1001,35622+33])
                                  ]
                            ]
                            expression (typing/includemod.ml[1002,35659+4]..[1006,35809+34])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (typing/includemod.ml[1002,35659+8]..[1002,35659+14])
                                    Ppat_var "params" (typing/includemod.ml[1002,35659+8]..[1002,35659+14])
                                  expression (typing/includemod.ml[1002,35659+17]..[1002,35659+37])
                                    Pexp_apply
                                    expression (typing/includemod.ml[1002,35659+17]..[1002,35659+30])
                                      Pexp_ident "Array.of_list" (typing/includemod.ml[1002,35659+17]..[1002,35659+30])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (typing/includemod.ml[1002,35659+31]..[1002,35659+37])
                                          Pexp_ident "params" (typing/includemod.ml[1002,35659+31]..[1002,35659+37])
                                    ]
                              ]
                              expression (typing/includemod.ml[1003,35700+4]..[1006,35809+34])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (typing/includemod.ml[1003,35700+8]..[1003,35700+26]) ghost
                                      Ppat_constraint
                                      pattern (typing/includemod.ml[1003,35700+8]..[1003,35700+13])
                                        Ppat_var "state" (typing/includemod.ml[1003,35700+8]..[1003,35700+13])
                                      core_type (typing/includemod.ml[1003,35700+16]..[1003,35700+26]) ghost
                                        Ptyp_poly
                                        core_type (typing/includemod.ml[1003,35700+16]..[1003,35700+26])
                                          Ptyp_constr "Defs.state" (typing/includemod.ml[1003,35700+16]..[1003,35700+26])
                                          []
                                    expression (typing/includemod.ml[1003,35700+8]..[1004,35729+72])
                                      Pexp_constraint
                                      expression (typing/includemod.ml[1004,35729+6]..[1004,35729+72])
                                        Pexp_record
                                        [
                                          "env" (typing/includemod.ml[1004,35729+8]..[1004,35729+11]) ghost
                                            expression (typing/includemod.ml[1004,35729+8]..[1004,35729+11])
                                              Pexp_ident "env" (typing/includemod.ml[1004,35729+8]..[1004,35729+11])
                                          "subst" (typing/includemod.ml[1004,35729+13]..[1004,35729+18])
                                            expression (typing/includemod.ml[1004,35729+21]..[1004,35729+35])
                                              Pexp_ident "Subst.identity" (typing/includemod.ml[1004,35729+21]..[1004,35729+35])
                                          "res" (typing/includemod.ml[1004,35729+37]..[1004,35729+40])
                                            expression (typing/includemod.ml[1004,35729+43]..[1004,35729+70])
                                              Pexp_apply
                                              expression (typing/includemod.ml[1004,35729+43]..[1004,35729+66])
                                                Pexp_ident "I.keep_expansible_param" (typing/includemod.ml[1004,35729+43]..[1004,35729+66])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (typing/includemod.ml[1004,35729+67]..[1004,35729+70])
                                                    Pexp_ident "res" (typing/includemod.ml[1004,35729+67]..[1004,35729+70])
                                              ]
                                        ]
                                        None
                                      core_type (typing/includemod.ml[1003,35700+16]..[1003,35700+26])
                                        Ptyp_constr "Defs.state" (typing/includemod.ml[1003,35700+16]..[1003,35700+26])
                                        []
                                ]
                                expression (typing/includemod.ml[1006,35809+4]..[1006,35809+34])
                                  Pexp_apply
                                  expression (typing/includemod.ml[1006,35809+4]..[1006,35809+16])
                                    Pexp_ident "Compute.diff" (typing/includemod.ml[1006,35809+4]..[1006,35809+16])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[1006,35809+17]..[1006,35809+22])
                                        Pexp_ident "state" (typing/includemod.ml[1006,35809+17]..[1006,35809+22])
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[1006,35809+23]..[1006,35809+27])
                                        Pexp_ident "args" (typing/includemod.ml[1006,35809+23]..[1006,35809+27])
                                    <arg>
                                    Nolabel
                                      expression (typing/includemod.ml[1006,35809+28]..[1006,35809+34])
                                        Pexp_ident "params" (typing/includemod.ml[1006,35809+28]..[1006,35809+34])
                                  ]
            ]
        ]
  structure_item (typing/includemod.ml[1012,35923+0]..[1015,36039+70])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/includemod.ml[1012,35923+4]..[1012,35923+12])
          Ppat_var "modtypes" (typing/includemod.ml[1012,35923+4]..[1012,35923+12])
        expression (typing/includemod.ml[1012,35923+13]..[1015,36039+70]) ghost
          Pexp_fun
          Labelled "loc"
          None
          pattern (typing/includemod.ml[1012,35923+14]..[1012,35923+17])
            Ppat_var "loc" (typing/includemod.ml[1012,35923+14]..[1012,35923+17])
          expression (typing/includemod.ml[1012,35923+18]..[1015,36039+70]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (typing/includemod.ml[1012,35923+18]..[1012,35923+21])
              Ppat_var "env" (typing/includemod.ml[1012,35923+18]..[1012,35923+21])
            expression (typing/includemod.ml[1012,35923+22]..[1015,36039+70]) ghost
              Pexp_fun
              Labelled "mark"
              None
              pattern (typing/includemod.ml[1012,35923+23]..[1012,35923+27])
                Ppat_var "mark" (typing/includemod.ml[1012,35923+23]..[1012,35923+27])
              expression (typing/includemod.ml[1012,35923+28]..[1015,36039+70]) ghost
                Pexp_fun
                Nolabel
                None
                pattern (typing/includemod.ml[1012,35923+28]..[1012,35923+32])
                  Ppat_var "mty1" (typing/includemod.ml[1012,35923+28]..[1012,35923+32])
                expression (typing/includemod.ml[1012,35923+33]..[1015,36039+70]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (typing/includemod.ml[1012,35923+33]..[1012,35923+37])
                    Ppat_var "mty2" (typing/includemod.ml[1012,35923+33]..[1012,35923+37])
                  expression (typing/includemod.ml[1013,35963+2]..[1015,36039+70])
                    Pexp_match
                    expression (typing/includemod.ml[1013,35963+8]..[1013,35963+56])
                      Pexp_apply
                      expression (typing/includemod.ml[1013,35963+8]..[1013,35963+16])
                        Pexp_ident "modtypes" (typing/includemod.ml[1013,35963+8]..[1013,35963+16])
                      [
                        <arg>
                        Labelled "loc"
                          expression (typing/includemod.ml[1013,35963+18]..[1013,35963+21])
                            Pexp_ident "loc" (typing/includemod.ml[1013,35963+18]..[1013,35963+21])
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[1013,35963+22]..[1013,35963+25])
                            Pexp_ident "env" (typing/includemod.ml[1013,35963+22]..[1013,35963+25])
                        <arg>
                        Labelled "mark"
                          expression (typing/includemod.ml[1013,35963+27]..[1013,35963+31])
                            Pexp_ident "mark" (typing/includemod.ml[1013,35963+27]..[1013,35963+31])
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[1013,35963+32]..[1013,35963+46])
                            Pexp_ident "Subst.identity" (typing/includemod.ml[1013,35963+32]..[1013,35963+46])
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[1013,35963+47]..[1013,35963+51])
                            Pexp_ident "mty1" (typing/includemod.ml[1013,35963+47]..[1013,35963+51])
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[1013,35963+52]..[1013,35963+56])
                            Pexp_ident "mty2" (typing/includemod.ml[1013,35963+52]..[1013,35963+56])
                      ]
                    [
                      <case>
                        pattern (typing/includemod.ml[1014,36025+4]..[1014,36025+8])
                          Ppat_construct "Ok" (typing/includemod.ml[1014,36025+4]..[1014,36025+6])
                          Some
                            []
                            pattern (typing/includemod.ml[1014,36025+7]..[1014,36025+8])
                              Ppat_var "x" (typing/includemod.ml[1014,36025+7]..[1014,36025+8])
                        expression (typing/includemod.ml[1014,36025+12]..[1014,36025+13])
                          Pexp_ident "x" (typing/includemod.ml[1014,36025+12]..[1014,36025+13])
                      <case>
                        pattern (typing/includemod.ml[1015,36039+4]..[1015,36039+16])
                          Ppat_construct "Error" (typing/includemod.ml[1015,36039+4]..[1015,36039+9])
                          Some
                            []
                            pattern (typing/includemod.ml[1015,36039+10]..[1015,36039+16])
                              Ppat_var "reason" (typing/includemod.ml[1015,36039+10]..[1015,36039+16])
                        expression (typing/includemod.ml[1015,36039+20]..[1015,36039+70])
                          Pexp_apply
                          expression (typing/includemod.ml[1015,36039+20]..[1015,36039+25])
                            Pexp_ident "raise" (typing/includemod.ml[1015,36039+20]..[1015,36039+25])
                          [
                            <arg>
                            Nolabel
                              expression (typing/includemod.ml[1015,36039+26]..[1015,36039+70])
                                Pexp_construct "Error" (typing/includemod.ml[1015,36039+27]..[1015,36039+32])
                                Some
                                  expression (typing/includemod.ml[1015,36039+33]..[1015,36039+69])
                                    Pexp_tuple
                                    [
                                      expression (typing/includemod.ml[1015,36039+34]..[1015,36039+37])
                                        Pexp_ident "env" (typing/includemod.ml[1015,36039+34]..[1015,36039+37])
                                      expression (typing/includemod.ml[1015,36039+39]..[1015,36039+68])
                                        Pexp_open Fresh
                                        module_expr (typing/includemod.ml[1015,36039+39]..[1015,36039+44])
                                          Pmod_ident "Error" (typing/includemod.ml[1015,36039+39]..[1015,36039+44])
                                        expression (typing/includemod.ml[1015,36039+46]..[1015,36039+67])
                                          Pexp_construct "In_Module_type" (typing/includemod.ml[1015,36039+46]..[1015,36039+60])
                                          Some
                                            expression (typing/includemod.ml[1015,36039+61]..[1015,36039+67])
                                              Pexp_ident "reason" (typing/includemod.ml[1015,36039+61]..[1015,36039+67])
                                    ]
                          ]
                    ]
    ]
  structure_item (typing/includemod.ml[1016,36110+0]..[1019,36239+66])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/includemod.ml[1016,36110+4]..[1016,36110+14])
          Ppat_var "signatures" (typing/includemod.ml[1016,36110+4]..[1016,36110+14])
        expression (typing/includemod.ml[1016,36110+15]..[1019,36239+66]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (typing/includemod.ml[1016,36110+15]..[1016,36110+18])
            Ppat_var "env" (typing/includemod.ml[1016,36110+15]..[1016,36110+18])
          expression (typing/includemod.ml[1016,36110+19]..[1019,36239+66]) ghost
            Pexp_fun
            Labelled "mark"
            None
            pattern (typing/includemod.ml[1016,36110+20]..[1016,36110+24])
              Ppat_var "mark" (typing/includemod.ml[1016,36110+20]..[1016,36110+24])
            expression (typing/includemod.ml[1016,36110+25]..[1019,36239+66]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (typing/includemod.ml[1016,36110+25]..[1016,36110+29])
                Ppat_var "sig1" (typing/includemod.ml[1016,36110+25]..[1016,36110+29])
              expression (typing/includemod.ml[1016,36110+30]..[1019,36239+66]) ghost
                Pexp_fun
                Nolabel
                None
                pattern (typing/includemod.ml[1016,36110+30]..[1016,36110+34])
                  Ppat_var "sig2" (typing/includemod.ml[1016,36110+30]..[1016,36110+34])
                expression (typing/includemod.ml[1017,36147+2]..[1019,36239+66])
                  Pexp_match
                  expression (typing/includemod.ml[1017,36147+8]..[1017,36147+72])
                    Pexp_apply
                    expression (typing/includemod.ml[1017,36147+8]..[1017,36147+18])
                      Pexp_ident "signatures" (typing/includemod.ml[1017,36147+8]..[1017,36147+18])
                    [
                      <arg>
                      Labelled "loc"
                        expression (typing/includemod.ml[1017,36147+24]..[1017,36147+37])
                          Pexp_ident "Location.none" (typing/includemod.ml[1017,36147+24]..[1017,36147+37])
                      <arg>
                      Nolabel
                        expression (typing/includemod.ml[1017,36147+38]..[1017,36147+41])
                          Pexp_ident "env" (typing/includemod.ml[1017,36147+38]..[1017,36147+41])
                      <arg>
                      Labelled "mark"
                        expression (typing/includemod.ml[1017,36147+43]..[1017,36147+47])
                          Pexp_ident "mark" (typing/includemod.ml[1017,36147+43]..[1017,36147+47])
                      <arg>
                      Nolabel
                        expression (typing/includemod.ml[1017,36147+48]..[1017,36147+62])
                          Pexp_ident "Subst.identity" (typing/includemod.ml[1017,36147+48]..[1017,36147+62])
                      <arg>
                      Nolabel
                        expression (typing/includemod.ml[1017,36147+63]..[1017,36147+67])
                          Pexp_ident "sig1" (typing/includemod.ml[1017,36147+63]..[1017,36147+67])
                      <arg>
                      Nolabel
                        expression (typing/includemod.ml[1017,36147+68]..[1017,36147+72])
                          Pexp_ident "sig2" (typing/includemod.ml[1017,36147+68]..[1017,36147+72])
                    ]
                  [
                    <case>
                      pattern (typing/includemod.ml[1018,36225+4]..[1018,36225+8])
                        Ppat_construct "Ok" (typing/includemod.ml[1018,36225+4]..[1018,36225+6])
                        Some
                          []
                          pattern (typing/includemod.ml[1018,36225+7]..[1018,36225+8])
                            Ppat_var "x" (typing/includemod.ml[1018,36225+7]..[1018,36225+8])
                      expression (typing/includemod.ml[1018,36225+12]..[1018,36225+13])
                        Pexp_ident "x" (typing/includemod.ml[1018,36225+12]..[1018,36225+13])
                    <case>
                      pattern (typing/includemod.ml[1019,36239+4]..[1019,36239+16])
                        Ppat_construct "Error" (typing/includemod.ml[1019,36239+4]..[1019,36239+9])
                        Some
                          []
                          pattern (typing/includemod.ml[1019,36239+10]..[1019,36239+16])
                            Ppat_var "reason" (typing/includemod.ml[1019,36239+10]..[1019,36239+16])
                      expression (typing/includemod.ml[1019,36239+20]..[1019,36239+66])
                        Pexp_apply
                        expression (typing/includemod.ml[1019,36239+20]..[1019,36239+25])
                          Pexp_ident "raise" (typing/includemod.ml[1019,36239+20]..[1019,36239+25])
                        [
                          <arg>
                          Nolabel
                            expression (typing/includemod.ml[1019,36239+26]..[1019,36239+66])
                              Pexp_construct "Error" (typing/includemod.ml[1019,36239+27]..[1019,36239+32])
                              Some
                                expression (typing/includemod.ml[1019,36239+32]..[1019,36239+65])
                                  Pexp_tuple
                                  [
                                    expression (typing/includemod.ml[1019,36239+33]..[1019,36239+36])
                                      Pexp_ident "env" (typing/includemod.ml[1019,36239+33]..[1019,36239+36])
                                    expression (typing/includemod.ml[1019,36239+37]..[1019,36239+64])
                                      Pexp_open Fresh
                                      module_expr (typing/includemod.ml[1019,36239+37]..[1019,36239+42])
                                        Pmod_ident "Error" (typing/includemod.ml[1019,36239+37]..[1019,36239+42])
                                      expression (typing/includemod.ml[1019,36239+44]..[1019,36239+63])
                                        Pexp_construct "In_Signature" (typing/includemod.ml[1019,36239+44]..[1019,36239+56])
                                        Some
                                          expression (typing/includemod.ml[1019,36239+57]..[1019,36239+63])
                                            Pexp_ident "reason" (typing/includemod.ml[1019,36239+57]..[1019,36239+63])
                                  ]
                        ]
                  ]
    ]
  structure_item (typing/includemod.ml[1021,36307+0]..[1026,36549+27])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/includemod.ml[1021,36307+4]..[1021,36307+21])
          Ppat_var "type_declarations" (typing/includemod.ml[1021,36307+4]..[1021,36307+21])
        expression (typing/includemod.ml[1021,36307+22]..[1026,36549+27]) ghost
          Pexp_fun
          Labelled "loc"
          None
          pattern (typing/includemod.ml[1021,36307+23]..[1021,36307+26])
            Ppat_var "loc" (typing/includemod.ml[1021,36307+23]..[1021,36307+26])
          expression (typing/includemod.ml[1021,36307+27]..[1026,36549+27]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (typing/includemod.ml[1021,36307+27]..[1021,36307+30])
              Ppat_var "env" (typing/includemod.ml[1021,36307+27]..[1021,36307+30])
            expression (typing/includemod.ml[1021,36307+31]..[1026,36549+27]) ghost
              Pexp_fun
              Labelled "mark"
              None
              pattern (typing/includemod.ml[1021,36307+32]..[1021,36307+36])
                Ppat_var "mark" (typing/includemod.ml[1021,36307+32]..[1021,36307+36])
              expression (typing/includemod.ml[1021,36307+37]..[1026,36549+27]) ghost
                Pexp_fun
                Nolabel
                None
                pattern (typing/includemod.ml[1021,36307+37]..[1021,36307+39])
                  Ppat_var "id" (typing/includemod.ml[1021,36307+37]..[1021,36307+39])
                expression (typing/includemod.ml[1021,36307+40]..[1026,36549+27]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (typing/includemod.ml[1021,36307+40]..[1021,36307+45])
                    Ppat_var "decl1" (typing/includemod.ml[1021,36307+40]..[1021,36307+45])
                  expression (typing/includemod.ml[1021,36307+46]..[1026,36549+27]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (typing/includemod.ml[1021,36307+46]..[1021,36307+51])
                      Ppat_var "decl2" (typing/includemod.ml[1021,36307+46]..[1021,36307+51])
                    expression (typing/includemod.ml[1022,36361+2]..[1026,36549+27])
                      Pexp_match
                      expression (typing/includemod.ml[1022,36361+8]..[1022,36361+70])
                        Pexp_apply
                        expression (typing/includemod.ml[1022,36361+8]..[1022,36361+25])
                          Pexp_ident "type_declarations" (typing/includemod.ml[1022,36361+8]..[1022,36361+25])
                        [
                          <arg>
                          Labelled "loc"
                            expression (typing/includemod.ml[1022,36361+27]..[1022,36361+30])
                              Pexp_ident "loc" (typing/includemod.ml[1022,36361+27]..[1022,36361+30])
                          <arg>
                          Nolabel
                            expression (typing/includemod.ml[1022,36361+31]..[1022,36361+34])
                              Pexp_ident "env" (typing/includemod.ml[1022,36361+31]..[1022,36361+34])
                          <arg>
                          Labelled "mark"
                            expression (typing/includemod.ml[1022,36361+36]..[1022,36361+40])
                              Pexp_ident "mark" (typing/includemod.ml[1022,36361+36]..[1022,36361+40])
                          <arg>
                          Nolabel
                            expression (typing/includemod.ml[1022,36361+41]..[1022,36361+55])
                              Pexp_ident "Subst.identity" (typing/includemod.ml[1022,36361+41]..[1022,36361+55])
                          <arg>
                          Nolabel
                            expression (typing/includemod.ml[1022,36361+56]..[1022,36361+58])
                              Pexp_ident "id" (typing/includemod.ml[1022,36361+56]..[1022,36361+58])
                          <arg>
                          Nolabel
                            expression (typing/includemod.ml[1022,36361+59]..[1022,36361+64])
                              Pexp_ident "decl1" (typing/includemod.ml[1022,36361+59]..[1022,36361+64])
                          <arg>
                          Nolabel
                            expression (typing/includemod.ml[1022,36361+65]..[1022,36361+70])
                              Pexp_ident "decl2" (typing/includemod.ml[1022,36361+65]..[1022,36361+70])
                        ]
                      [
                        <case>
                          pattern (typing/includemod.ml[1023,36437+4]..[1023,36437+8])
                            Ppat_construct "Ok" (typing/includemod.ml[1023,36437+4]..[1023,36437+6])
                            Some
                              []
                              pattern (typing/includemod.ml[1023,36437+7]..[1023,36437+8])
                                Ppat_any
                          expression (typing/includemod.ml[1023,36437+12]..[1023,36437+14])
                            Pexp_construct "()" (typing/includemod.ml[1023,36437+12]..[1023,36437+14])
                            None
                        <case>
                          pattern (typing/includemod.ml[1024,36452+4]..[1024,36452+29])
                            Ppat_construct "Error" (typing/includemod.ml[1024,36452+4]..[1024,36452+9])
                            Some
                              []
                              pattern (typing/includemod.ml[1024,36452+10]..[1024,36452+29])
                                Ppat_construct "Error.Core" (typing/includemod.ml[1024,36452+11]..[1024,36452+21])
                                Some
                                  []
                                  pattern (typing/includemod.ml[1024,36452+22]..[1024,36452+28])
                                    Ppat_var "reason" (typing/includemod.ml[1024,36452+22]..[1024,36452+28])
                          expression (typing/includemod.ml[1025,36485+6]..[1025,36485+63])
                            Pexp_apply
                            expression (typing/includemod.ml[1025,36485+6]..[1025,36485+11])
                              Pexp_ident "raise" (typing/includemod.ml[1025,36485+6]..[1025,36485+11])
                            [
                              <arg>
                              Nolabel
                                expression (typing/includemod.ml[1025,36485+12]..[1025,36485+63])
                                  Pexp_construct "Error" (typing/includemod.ml[1025,36485+13]..[1025,36485+18])
                                  Some
                                    expression (typing/includemod.ml[1025,36485+18]..[1025,36485+62])
                                      Pexp_tuple
                                      [
                                        expression (typing/includemod.ml[1025,36485+19]..[1025,36485+22])
                                          Pexp_ident "env" (typing/includemod.ml[1025,36485+19]..[1025,36485+22])
                                        expression (typing/includemod.ml[1025,36485+23]..[1025,36485+61])
                                          Pexp_open Fresh
                                          module_expr (typing/includemod.ml[1025,36485+23]..[1025,36485+28])
                                            Pmod_ident "Error" (typing/includemod.ml[1025,36485+23]..[1025,36485+28])
                                          expression (typing/includemod.ml[1025,36485+30]..[1025,36485+60])
                                            Pexp_construct "In_Type_declaration" (typing/includemod.ml[1025,36485+30]..[1025,36485+49])
                                            Some
                                              expression (typing/includemod.ml[1025,36485+49]..[1025,36485+60])
                                                Pexp_tuple
                                                [
                                                  expression (typing/includemod.ml[1025,36485+50]..[1025,36485+52])
                                                    Pexp_ident "id" (typing/includemod.ml[1025,36485+50]..[1025,36485+52])
                                                  expression (typing/includemod.ml[1025,36485+53]..[1025,36485+59])
                                                    Pexp_ident "reason" (typing/includemod.ml[1025,36485+53]..[1025,36485+59])
                                                ]
                                      ]
                            ]
                        <case>
                          pattern (typing/includemod.ml[1026,36549+4]..[1026,36549+11])
                            Ppat_construct "Error" (typing/includemod.ml[1026,36549+4]..[1026,36549+9])
                            Some
                              []
                              pattern (typing/includemod.ml[1026,36549+10]..[1026,36549+11])
                                Ppat_any
                          expression (typing/includemod.ml[1026,36549+15]..[1026,36549+27])
                            Pexp_assert
                            expression (typing/includemod.ml[1026,36549+22]..[1026,36549+27])
                              Pexp_construct "false" (typing/includemod.ml[1026,36549+22]..[1026,36549+27])
                              None
                      ]
    ]
  structure_item (typing/includemod.ml[1028,36578+0]..[1033,36779+53])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/includemod.ml[1028,36578+4]..[1028,36578+28])
          Ppat_var "strengthened_module_decl" (typing/includemod.ml[1028,36578+4]..[1028,36578+28])
        expression (typing/includemod.ml[1028,36578+29]..[1033,36779+53]) ghost
          Pexp_fun
          Labelled "loc"
          None
          pattern (typing/includemod.ml[1028,36578+30]..[1028,36578+33])
            Ppat_var "loc" (typing/includemod.ml[1028,36578+30]..[1028,36578+33])
          expression (typing/includemod.ml[1028,36578+34]..[1033,36779+53]) ghost
            Pexp_fun
            Labelled "aliasable"
            None
            pattern (typing/includemod.ml[1028,36578+35]..[1028,36578+44])
              Ppat_var "aliasable" (typing/includemod.ml[1028,36578+35]..[1028,36578+44])
            expression (typing/includemod.ml[1028,36578+45]..[1033,36779+53]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (typing/includemod.ml[1028,36578+45]..[1028,36578+48])
                Ppat_var "env" (typing/includemod.ml[1028,36578+45]..[1028,36578+48])
              expression (typing/includemod.ml[1028,36578+49]..[1033,36779+53]) ghost
                Pexp_fun
                Labelled "mark"
                None
                pattern (typing/includemod.ml[1028,36578+50]..[1028,36578+54])
                  Ppat_var "mark" (typing/includemod.ml[1028,36578+50]..[1028,36578+54])
                expression (typing/includemod.ml[1028,36578+55]..[1033,36779+53]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (typing/includemod.ml[1028,36578+55]..[1028,36578+58])
                    Ppat_var "md1" (typing/includemod.ml[1028,36578+55]..[1028,36578+58])
                  expression (typing/includemod.ml[1028,36578+59]..[1033,36779+53]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (typing/includemod.ml[1028,36578+59]..[1028,36578+64])
                      Ppat_var "path1" (typing/includemod.ml[1028,36578+59]..[1028,36578+64])
                    expression (typing/includemod.ml[1028,36578+65]..[1033,36779+53]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (typing/includemod.ml[1028,36578+65]..[1028,36578+68])
                        Ppat_var "md2" (typing/includemod.ml[1028,36578+65]..[1028,36578+68])
                      expression (typing/includemod.ml[1029,36649+2]..[1033,36779+53])
                        Pexp_match
                        expression (typing/includemod.ml[1029,36649+8]..[1030,36723+17])
                          Pexp_apply
                          expression (typing/includemod.ml[1029,36649+8]..[1029,36649+32])
                            Pexp_ident "strengthened_module_decl" (typing/includemod.ml[1029,36649+8]..[1029,36649+32])
                          [
                            <arg>
                            Labelled "loc"
                              expression (typing/includemod.ml[1029,36649+34]..[1029,36649+37])
                                Pexp_ident "loc" (typing/includemod.ml[1029,36649+34]..[1029,36649+37])
                            <arg>
                            Labelled "aliasable"
                              expression (typing/includemod.ml[1029,36649+39]..[1029,36649+48])
                                Pexp_ident "aliasable" (typing/includemod.ml[1029,36649+39]..[1029,36649+48])
                            <arg>
                            Nolabel
                              expression (typing/includemod.ml[1029,36649+49]..[1029,36649+52])
                                Pexp_ident "env" (typing/includemod.ml[1029,36649+49]..[1029,36649+52])
                            <arg>
                            Labelled "mark"
                              expression (typing/includemod.ml[1029,36649+54]..[1029,36649+58])
                                Pexp_ident "mark" (typing/includemod.ml[1029,36649+54]..[1029,36649+58])
                            <arg>
                            Nolabel
                              expression (typing/includemod.ml[1029,36649+59]..[1029,36649+73])
                                Pexp_ident "Subst.identity" (typing/includemod.ml[1029,36649+59]..[1029,36649+73])
                            <arg>
                            Nolabel
                              expression (typing/includemod.ml[1030,36723+4]..[1030,36723+7])
                                Pexp_ident "md1" (typing/includemod.ml[1030,36723+4]..[1030,36723+7])
                            <arg>
                            Nolabel
                              expression (typing/includemod.ml[1030,36723+8]..[1030,36723+13])
                                Pexp_ident "path1" (typing/includemod.ml[1030,36723+8]..[1030,36723+13])
                            <arg>
                            Nolabel
                              expression (typing/includemod.ml[1030,36723+14]..[1030,36723+17])
                                Pexp_ident "md2" (typing/includemod.ml[1030,36723+14]..[1030,36723+17])
                          ]
                        [
                          <case>
                            pattern (typing/includemod.ml[1031,36746+4]..[1031,36746+8])
                              Ppat_construct "Ok" (typing/includemod.ml[1031,36746+4]..[1031,36746+6])
                              Some
                                []
                                pattern (typing/includemod.ml[1031,36746+7]..[1031,36746+8])
                                  Ppat_var "x" (typing/includemod.ml[1031,36746+7]..[1031,36746+8])
                            expression (typing/includemod.ml[1031,36746+12]..[1031,36746+13])
                              Pexp_ident "x" (typing/includemod.ml[1031,36746+12]..[1031,36746+13])
                          <case>
                            pattern (typing/includemod.ml[1032,36760+4]..[1032,36760+15])
                              Ppat_construct "Error" (typing/includemod.ml[1032,36760+4]..[1032,36760+9])
                              Some
                                []
                                pattern (typing/includemod.ml[1032,36760+10]..[1032,36760+15])
                                  Ppat_var "mdiff" (typing/includemod.ml[1032,36760+10]..[1032,36760+15])
                            expression (typing/includemod.ml[1033,36779+6]..[1033,36779+53])
                              Pexp_apply
                              expression (typing/includemod.ml[1033,36779+6]..[1033,36779+11])
                                Pexp_ident "raise" (typing/includemod.ml[1033,36779+6]..[1033,36779+11])
                              [
                                <arg>
                                Nolabel
                                  expression (typing/includemod.ml[1033,36779+12]..[1033,36779+53])
                                    Pexp_construct "Error" (typing/includemod.ml[1033,36779+13]..[1033,36779+18])
                                    Some
                                      expression (typing/includemod.ml[1033,36779+18]..[1033,36779+52])
                                        Pexp_tuple
                                        [
                                          expression (typing/includemod.ml[1033,36779+19]..[1033,36779+22])
                                            Pexp_ident "env" (typing/includemod.ml[1033,36779+19]..[1033,36779+22])
                                          expression (typing/includemod.ml[1033,36779+23]..[1033,36779+51])
                                            Pexp_open Fresh
                                            module_expr (typing/includemod.ml[1033,36779+23]..[1033,36779+28])
                                              Pmod_ident "Error" (typing/includemod.ml[1033,36779+23]..[1033,36779+28])
                                            expression (typing/includemod.ml[1033,36779+30]..[1033,36779+50])
                                              Pexp_construct "In_Module_type" (typing/includemod.ml[1033,36779+30]..[1033,36779+44])
                                              Some
                                                expression (typing/includemod.ml[1033,36779+45]..[1033,36779+50])
                                                  Pexp_ident "mdiff" (typing/includemod.ml[1033,36779+45]..[1033,36779+50])
                                        ]
                              ]
                        ]
    ]
  structure_item (typing/includemod.ml[1035,36834+0]..[1039,36947+69])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/includemod.ml[1035,36834+4]..[1035,36834+23])
          Ppat_var "expand_module_alias" (typing/includemod.ml[1035,36834+4]..[1035,36834+23])
        expression (typing/includemod.ml[1035,36834+24]..[1039,36947+69]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (typing/includemod.ml[1035,36834+24]..[1035,36834+27])
            Ppat_var "env" (typing/includemod.ml[1035,36834+24]..[1035,36834+27])
          expression (typing/includemod.ml[1035,36834+28]..[1039,36947+69]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (typing/includemod.ml[1035,36834+28]..[1035,36834+32])
              Ppat_var "path" (typing/includemod.ml[1035,36834+28]..[1035,36834+32])
            expression (typing/includemod.ml[1036,36869+2]..[1039,36947+69])
              Pexp_match
              expression (typing/includemod.ml[1036,36869+8]..[1036,36869+36])
                Pexp_apply
                expression (typing/includemod.ml[1036,36869+8]..[1036,36869+27])
                  Pexp_ident "expand_module_alias" (typing/includemod.ml[1036,36869+8]..[1036,36869+27])
                [
                  <arg>
                  Nolabel
                    expression (typing/includemod.ml[1036,36869+28]..[1036,36869+31])
                      Pexp_ident "env" (typing/includemod.ml[1036,36869+28]..[1036,36869+31])
                  <arg>
                  Nolabel
                    expression (typing/includemod.ml[1036,36869+32]..[1036,36869+36])
                      Pexp_ident "path" (typing/includemod.ml[1036,36869+32]..[1036,36869+36])
                ]
              [
                <case>
                  pattern (typing/includemod.ml[1037,36911+4]..[1037,36911+8])
                    Ppat_construct "Ok" (typing/includemod.ml[1037,36911+4]..[1037,36911+6])
                    Some
                      []
                      pattern (typing/includemod.ml[1037,36911+7]..[1037,36911+8])
                        Ppat_var "x" (typing/includemod.ml[1037,36911+7]..[1037,36911+8])
                  expression (typing/includemod.ml[1037,36911+12]..[1037,36911+13])
                    Pexp_ident "x" (typing/includemod.ml[1037,36911+12]..[1037,36911+13])
                <case>
                  pattern (typing/includemod.ml[1038,36925+4]..[1038,36925+18])
                    Ppat_construct "Result.Error" (typing/includemod.ml[1038,36925+4]..[1038,36925+16])
                    Some
                      []
                      pattern (typing/includemod.ml[1038,36925+17]..[1038,36925+18])
                        Ppat_any
                  expression (typing/includemod.ml[1039,36947+6]..[1039,36947+69])
                    Pexp_apply
                    expression (typing/includemod.ml[1039,36947+6]..[1039,36947+11])
                      Pexp_ident "raise" (typing/includemod.ml[1039,36947+6]..[1039,36947+11])
                    [
                      <arg>
                      Nolabel
                        expression (typing/includemod.ml[1039,36947+12]..[1039,36947+69])
                          Pexp_construct "Error" (typing/includemod.ml[1039,36947+13]..[1039,36947+18])
                          Some
                            expression (typing/includemod.ml[1039,36947+18]..[1039,36947+68])
                              Pexp_tuple
                              [
                                expression (typing/includemod.ml[1039,36947+19]..[1039,36947+22])
                                  Pexp_ident "env" (typing/includemod.ml[1039,36947+19]..[1039,36947+22])
                                expression (typing/includemod.ml[1039,36947+23]..[1039,36947+67])
                                  Pexp_construct "In_Expansion" (typing/includemod.ml[1039,36947+23]..[1039,36947+35])
                                  Some
                                    expression (typing/includemod.ml[1039,36947+35]..[1039,36947+67])
                                      Pexp_construct "Error.Unbound_module_path" (typing/includemod.ml[1039,36947+36]..[1039,36947+61])
                                      Some
                                        expression (typing/includemod.ml[1039,36947+62]..[1039,36947+66])
                                          Pexp_ident "path" (typing/includemod.ml[1039,36947+62]..[1039,36947+66])
                              ]
                    ]
              ]
    ]
  structure_item (typing/includemod.ml[1041,37018+0]..[1047,37266+13])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/includemod.ml[1041,37018+4]..[1041,37018+23])
          Ppat_var "check_modtype_equiv" (typing/includemod.ml[1041,37018+4]..[1041,37018+23])
        expression (typing/includemod.ml[1041,37018+24]..[1047,37266+13]) ghost
          Pexp_fun
          Labelled "loc"
          None
          pattern (typing/includemod.ml[1041,37018+25]..[1041,37018+28])
            Ppat_var "loc" (typing/includemod.ml[1041,37018+25]..[1041,37018+28])
          expression (typing/includemod.ml[1041,37018+29]..[1047,37266+13]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (typing/includemod.ml[1041,37018+29]..[1041,37018+32])
              Ppat_var "env" (typing/includemod.ml[1041,37018+29]..[1041,37018+32])
            expression (typing/includemod.ml[1041,37018+33]..[1047,37266+13]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (typing/includemod.ml[1041,37018+33]..[1041,37018+35])
                Ppat_var "id" (typing/includemod.ml[1041,37018+33]..[1041,37018+35])
              expression (typing/includemod.ml[1041,37018+36]..[1047,37266+13]) ghost
                Pexp_fun
                Nolabel
                None
                pattern (typing/includemod.ml[1041,37018+36]..[1041,37018+40])
                  Ppat_var "mty1" (typing/includemod.ml[1041,37018+36]..[1041,37018+40])
                expression (typing/includemod.ml[1041,37018+41]..[1047,37266+13]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (typing/includemod.ml[1041,37018+41]..[1041,37018+45])
                    Ppat_var "mty2" (typing/includemod.ml[1041,37018+41]..[1041,37018+45])
                  expression (typing/includemod.ml[1042,37066+2]..[1047,37266+13])
                    Pexp_match
                    expression (typing/includemod.ml[1042,37066+8]..[1042,37066+62])
                      Pexp_apply
                      expression (typing/includemod.ml[1042,37066+8]..[1042,37066+27])
                        Pexp_ident "check_modtype_equiv" (typing/includemod.ml[1042,37066+8]..[1042,37066+27])
                      [
                        <arg>
                        Labelled "loc"
                          expression (typing/includemod.ml[1042,37066+29]..[1042,37066+32])
                            Pexp_ident "loc" (typing/includemod.ml[1042,37066+29]..[1042,37066+32])
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[1042,37066+33]..[1042,37066+36])
                            Pexp_ident "env" (typing/includemod.ml[1042,37066+33]..[1042,37066+36])
                        <arg>
                        Labelled "mark"
                          expression (typing/includemod.ml[1042,37066+43]..[1042,37066+52])
                            Pexp_construct "Mark_both" (typing/includemod.ml[1042,37066+43]..[1042,37066+52])
                            None
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[1042,37066+53]..[1042,37066+57])
                            Pexp_ident "mty1" (typing/includemod.ml[1042,37066+53]..[1042,37066+57])
                        <arg>
                        Nolabel
                          expression (typing/includemod.ml[1042,37066+58]..[1042,37066+62])
                            Pexp_ident "mty2" (typing/includemod.ml[1042,37066+58]..[1042,37066+62])
                      ]
                    [
                      <case>
                        pattern (typing/includemod.ml[1043,37134+4]..[1043,37134+8])
                          Ppat_construct "Ok" (typing/includemod.ml[1043,37134+4]..[1043,37134+6])
                          Some
                            []
                            pattern (typing/includemod.ml[1043,37134+7]..[1043,37134+8])
                              Ppat_any
                        expression (typing/includemod.ml[1043,37134+12]..[1043,37134+14])
                          Pexp_construct "()" (typing/includemod.ml[1043,37134+12]..[1043,37134+14])
                          None
                      <case>
                        pattern (typing/includemod.ml[1044,37149+4]..[1044,37149+11])
                          Ppat_construct "Error" (typing/includemod.ml[1044,37149+4]..[1044,37149+9])
                          Some
                            []
                            pattern (typing/includemod.ml[1044,37149+10]..[1044,37149+11])
                              Ppat_var "e" (typing/includemod.ml[1044,37149+10]..[1044,37149+11])
                        expression (typing/includemod.ml[1045,37164+6]..[1047,37266+13])
                          Pexp_apply
                          expression (typing/includemod.ml[1045,37164+6]..[1045,37164+11])
                            Pexp_ident "raise" (typing/includemod.ml[1045,37164+6]..[1045,37164+11])
                          [
                            <arg>
                            Nolabel
                              expression (typing/includemod.ml[1045,37164+12]..[1047,37266+13])
                                Pexp_construct "Error" (typing/includemod.ml[1045,37164+13]..[1045,37164+18])
                                Some
                                  expression (typing/includemod.ml[1045,37164+18]..[1046,37188+77])
                                    Pexp_tuple
                                    [
                                      expression (typing/includemod.ml[1045,37164+19]..[1045,37164+22])
                                        Pexp_ident "env" (typing/includemod.ml[1045,37164+19]..[1045,37164+22])
                                      expression (typing/includemod.ml[1046,37188+19]..[1046,37188+76])
                                        Pexp_open Fresh
                                        module_expr (typing/includemod.ml[1046,37188+19]..[1046,37188+24])
                                          Pmod_ident "Error" (typing/includemod.ml[1046,37188+19]..[1046,37188+24])
                                        expression (typing/includemod.ml[1046,37188+26]..[1046,37188+75])
                                          Pexp_construct "In_Module_type_substitution" (typing/includemod.ml[1046,37188+26]..[1046,37188+53])
                                          Some
                                            expression (typing/includemod.ml[1046,37188+54]..[1046,37188+75])
                                              Pexp_tuple
                                              [
                                                expression (typing/includemod.ml[1046,37188+55]..[1046,37188+57])
                                                  Pexp_ident "id" (typing/includemod.ml[1046,37188+55]..[1046,37188+57])
                                                expression (typing/includemod.ml[1046,37188+58]..[1046,37188+74])
                                                  Pexp_apply
                                                  expression (typing/includemod.ml[1046,37188+58]..[1046,37188+62])
                                                    Pexp_ident "diff" (typing/includemod.ml[1046,37188+58]..[1046,37188+62])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (typing/includemod.ml[1046,37188+63]..[1046,37188+67])
                                                        Pexp_ident "mty1" (typing/includemod.ml[1046,37188+63]..[1046,37188+67])
                                                    <arg>
                                                    Nolabel
                                                      expression (typing/includemod.ml[1046,37188+68]..[1046,37188+72])
                                                        Pexp_ident "mty2" (typing/includemod.ml[1046,37188+68]..[1046,37188+72])
                                                    <arg>
                                                    Nolabel
                                                      expression (typing/includemod.ml[1046,37188+73]..[1046,37188+74])
                                                        Pexp_ident "e" (typing/includemod.ml[1046,37188+73]..[1046,37188+74])
                                                  ]
                                              ]
                                    ]
                          ]
                    ]
    ]
]

