[
  signature_item (stdlib/lazy.mli[16,1079+0]..[16,1079+29])
    Psig_attribute "ocaml.text"
    [
      structure_item (stdlib/lazy.mli[16,1079+0]..[16,1079+29])
        Pstr_eval
        expression (stdlib/lazy.mli[16,1079+0]..[16,1079+29])
          Pexp_constant PConst_string(" Deferred computations. ",(stdlib/lazy.mli[16,1079+0]..[16,1079+29]),None)
    ]
  signature_item (stdlib/lazy.mli[18,1110+0]..[18,1110+33])
    Psig_type Rec
    [
      type_declaration "t" (stdlib/lazy.mli[18,1110+8]..[18,1110+9]) (stdlib/lazy.mli[18,1110+0]..[18,1110+33])
        attribute "ocaml.doc"
          [
            structure_item (stdlib/lazy.mli[19,1144+0]..[55,2757+2])
              Pstr_eval
              expression (stdlib/lazy.mli[19,1144+0]..[55,2757+2])
                Pexp_constant PConst_string(" A value of type ['a Lazy.t] is a deferred computation, called\n   a suspension, that has a result of type ['a].  The special\n   expression syntax [lazy (expr)] makes a suspension of the\n   computation of [expr], without computing [expr] itself yet.\n   \"Forcing\" the suspension will then compute [expr] and return its\n   result. Matching a suspension with the special pattern syntax\n   [lazy(pattern)] also computes the underlying expression and\n   tries to bind it to [pattern]:\n\n  {[\n    let lazy_option_map f x =\n    match x with\n    | lazy (Some x) -> Some (Lazy.force f x)\n    | _ -> None\n  ]}\n\n   Note: If lazy patterns appear in multiple cases in a pattern-matching,\n   lazy expressions may be forced even outside of the case ultimately selected\n   by the pattern matching. In the example above, the suspension [x] is always\n   computed.\n\n\n   Note: [lazy_t] is the built-in type constructor used by the compiler\n   for the [lazy] keyword.  You should not use it directly.  Always use\n   [Lazy.t] instead.\n\n   Note: [Lazy.force] is not thread-safe.  If you use this module in\n   a multi-threaded program, you will need to add some locks.\n\n   Note: if the program is compiled with the [-rectypes] option,\n   ill-founded recursive definitions of the form [let rec x = lazy x]\n   or [let rec x = lazy(lazy(...(lazy x)))] are accepted by the type-checker\n   and lead, when forced, to ill-formed values that trigger infinite\n   loops in the garbage collector and other parts of the run-time system.\n   Without the [-rectypes] option, such ill-founded recursive definitions\n   are rejected by the type-checker.\n",(stdlib/lazy.mli[19,1144+0]..[55,2757+2]),None)
          ]
        ptype_params =
          [
            core_type (stdlib/lazy.mli[18,1110+5]..[18,1110+7])
              Ptyp_var a
          ]
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (stdlib/lazy.mli[18,1110+12]..[18,1110+33])
              Ptyp_constr "CamlinternalLazy.t" (stdlib/lazy.mli[18,1110+15]..[18,1110+33])
              [
                core_type (stdlib/lazy.mli[18,1110+12]..[18,1110+14])
                  Ptyp_var a
              ]
    ]
  signature_item (stdlib/lazy.mli[58,2762+0]..[58,2762+19])
    Psig_exception
    type_exception
      ptyext_constructor =
        extension_constructor (stdlib/lazy.mli[58,2762+0]..[58,2762+19])
          pext_name = "Undefined"
          pext_kind =
            Pext_decl
              []
              None
  signature_item (stdlib/lazy.mli[60,2783+0]..[60,2783+43])
    Psig_value
    value_description "force" (stdlib/lazy.mli[60,2783+9]..[60,2783+14]) (stdlib/lazy.mli[60,2783+0]..[60,2783+43])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/lazy.mli[61,2827+0]..[67,3148+2])
            Pstr_eval
            expression (stdlib/lazy.mli[61,2827+0]..[67,3148+2])
              Pexp_constant PConst_string(" [force x] forces the suspension [x] and returns its result.\n   If [x] has already been forced, [Lazy.force x] returns the\n   same value again without recomputing it.  If it raised an exception,\n   the same exception is raised again.\n   @raise Undefined if the forcing of [x] tries to force [x] itself\n   recursively.\n",(stdlib/lazy.mli[61,2827+0]..[67,3148+2]),None)
        ]
      core_type (stdlib/lazy.mli[60,2783+17]..[60,2783+27])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/lazy.mli[60,2783+17]..[60,2783+21])
          Ptyp_constr "t" (stdlib/lazy.mli[60,2783+20]..[60,2783+21])
          [
            core_type (stdlib/lazy.mli[60,2783+17]..[60,2783+19])
              Ptyp_var a
          ]
        core_type (stdlib/lazy.mli[60,2783+25]..[60,2783+27])
          Ptyp_var a
      [
        "%lazy_force"
      ]
  signature_item (stdlib/lazy.mli[69,3152+0]..[69,3152+20])
    Psig_attribute "ocaml.text"
    [
      structure_item (stdlib/lazy.mli[69,3152+0]..[69,3152+20])
        Pstr_eval
        expression (stdlib/lazy.mli[69,3152+0]..[69,3152+20])
          Pexp_constant PConst_string(" {1 Iterators} ",(stdlib/lazy.mli[69,3152+0]..[69,3152+20]),None)
    ]
  signature_item (stdlib/lazy.mli[71,3174+0]..[71,3174+36])
    Psig_value
    value_description "map" (stdlib/lazy.mli[71,3174+4]..[71,3174+7]) (stdlib/lazy.mli[71,3174+0]..[71,3174+36])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/lazy.mli[72,3211+0]..[78,3381+2])
            Pstr_eval
            expression (stdlib/lazy.mli[72,3211+0]..[78,3381+2])
              Pexp_constant PConst_string(" [map f x] returns a suspension that, when forced,\n    forces [x] and applies [f] to its value.\n\n    It is equivalent to [lazy (f (Lazy.force x))].\n\n    @since 4.13.0\n",(stdlib/lazy.mli[72,3211+0]..[78,3381+2]),None)
        ]
      core_type (stdlib/lazy.mli[71,3174+10]..[71,3174+36])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/lazy.mli[71,3174+11]..[71,3174+19])
          Ptyp_arrow
          Nolabel
          core_type (stdlib/lazy.mli[71,3174+11]..[71,3174+13])
            Ptyp_var a
          core_type (stdlib/lazy.mli[71,3174+17]..[71,3174+19])
            Ptyp_var b
        core_type (stdlib/lazy.mli[71,3174+24]..[71,3174+36])
          Ptyp_arrow
          Nolabel
          core_type (stdlib/lazy.mli[71,3174+24]..[71,3174+28])
            Ptyp_constr "t" (stdlib/lazy.mli[71,3174+27]..[71,3174+28])
            [
              core_type (stdlib/lazy.mli[71,3174+24]..[71,3174+26])
                Ptyp_var a
            ]
          core_type (stdlib/lazy.mli[71,3174+32]..[71,3174+36])
            Ptyp_constr "t" (stdlib/lazy.mli[71,3174+35]..[71,3174+36])
            [
              core_type (stdlib/lazy.mli[71,3174+32]..[71,3174+34])
                Ptyp_var b
            ]
      []
  signature_item (stdlib/lazy.mli[80,3385+0]..[80,3385+50])
    Psig_attribute "ocaml.text"
    [
      structure_item (stdlib/lazy.mli[80,3385+0]..[80,3385+50])
        Pstr_eval
        expression (stdlib/lazy.mli[80,3385+0]..[80,3385+50])
          Pexp_constant PConst_string(" {1 Reasoning on already-forced suspensions} ",(stdlib/lazy.mli[80,3385+0]..[80,3385+50]),None)
    ]
  signature_item (stdlib/lazy.mli[82,3437+0]..[82,3437+25])
    Psig_value
    value_description "is_val" (stdlib/lazy.mli[82,3437+4]..[82,3437+10]) (stdlib/lazy.mli[82,3437+0]..[82,3437+25])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/lazy.mli[83,3463+0]..[85,3560+20])
            Pstr_eval
            expression (stdlib/lazy.mli[83,3463+0]..[85,3560+20])
              Pexp_constant PConst_string(" [is_val x] returns [true] if [x] has already been forced and\n    did not raise an exception.\n    @since 4.00.0 ",(stdlib/lazy.mli[83,3463+0]..[85,3560+20]),None)
        ]
      core_type (stdlib/lazy.mli[82,3437+13]..[82,3437+25])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/lazy.mli[82,3437+13]..[82,3437+17])
          Ptyp_constr "t" (stdlib/lazy.mli[82,3437+16]..[82,3437+17])
          [
            core_type (stdlib/lazy.mli[82,3437+13]..[82,3437+15])
              Ptyp_var a
          ]
        core_type (stdlib/lazy.mli[82,3437+21]..[82,3437+25])
          Ptyp_constr "bool" (stdlib/lazy.mli[82,3437+21]..[82,3437+25])
          []
      []
  signature_item (stdlib/lazy.mli[87,3582+0]..[87,3582+25])
    Psig_value
    value_description "from_val" (stdlib/lazy.mli[87,3582+4]..[87,3582+12]) (stdlib/lazy.mli[87,3582+0]..[87,3582+25])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/lazy.mli[88,3608+0]..[92,3848+20])
            Pstr_eval
            expression (stdlib/lazy.mli[88,3608+0]..[92,3848+20])
              Pexp_constant PConst_string(" [from_val v] evaluates [v] first (as any function would) and returns\n    an already-forced suspension of its result.\n    It is the same as [let x = v in lazy x], but uses dynamic tests\n    to optimize suspension creation in some cases.\n    @since 4.00.0 ",(stdlib/lazy.mli[88,3608+0]..[92,3848+20]),None)
        ]
      core_type (stdlib/lazy.mli[87,3582+15]..[87,3582+25])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/lazy.mli[87,3582+15]..[87,3582+17])
          Ptyp_var a
        core_type (stdlib/lazy.mli[87,3582+21]..[87,3582+25])
          Ptyp_constr "t" (stdlib/lazy.mli[87,3582+24]..[87,3582+25])
          [
            core_type (stdlib/lazy.mli[87,3582+21]..[87,3582+23])
              Ptyp_var a
          ]
      []
  signature_item (stdlib/lazy.mli[94,3870+0]..[94,3870+40])
    Psig_value
    value_description "map_val" (stdlib/lazy.mli[94,3870+4]..[94,3870+11]) (stdlib/lazy.mli[94,3870+0]..[94,3870+40])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/lazy.mli[95,3911+0]..[108,4458+20])
            Pstr_eval
            expression (stdlib/lazy.mli[95,3911+0]..[108,4458+20])
              Pexp_constant PConst_string(" [map_val f x] applies [f] directly if [x] is already forced,\n   otherwise it behaves as [map f x].\n\n   When [x] is already forced, this behavior saves the construction of\n   a suspension, but on the other hand it performs more work eagerly\n   that may not be useful if you never force the function result.\n\n   If [f] raises an exception, it will be raised immediately when\n   [is_val x], or raised only when forcing the thunk otherwise.\n\n   If [map_val f x] does not raise an exception, then\n   [is_val (map_val f x)] is equal to [is_val x].\n\n    @since 4.13.0 ",(stdlib/lazy.mli[95,3911+0]..[108,4458+20]),None)
        ]
      core_type (stdlib/lazy.mli[94,3870+14]..[94,3870+40])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/lazy.mli[94,3870+15]..[94,3870+23])
          Ptyp_arrow
          Nolabel
          core_type (stdlib/lazy.mli[94,3870+15]..[94,3870+17])
            Ptyp_var a
          core_type (stdlib/lazy.mli[94,3870+21]..[94,3870+23])
            Ptyp_var b
        core_type (stdlib/lazy.mli[94,3870+28]..[94,3870+40])
          Ptyp_arrow
          Nolabel
          core_type (stdlib/lazy.mli[94,3870+28]..[94,3870+32])
            Ptyp_constr "t" (stdlib/lazy.mli[94,3870+31]..[94,3870+32])
            [
              core_type (stdlib/lazy.mli[94,3870+28]..[94,3870+30])
                Ptyp_var a
            ]
          core_type (stdlib/lazy.mli[94,3870+36]..[94,3870+40])
            Ptyp_constr "t" (stdlib/lazy.mli[94,3870+39]..[94,3870+40])
            [
              core_type (stdlib/lazy.mli[94,3870+36]..[94,3870+38])
                Ptyp_var b
            ]
      []
  signature_item (stdlib/lazy.mli[111,4481+0]..[114,4569+74])
    Psig_attribute "ocaml.text"
    [
      structure_item (stdlib/lazy.mli[111,4481+0]..[114,4569+74])
        Pstr_eval
        expression (stdlib/lazy.mli[111,4481+0]..[114,4569+74])
          Pexp_constant PConst_string(" {1 Advanced}\n\n   The following definitions are for advanced uses only; they require\n   familiary with the lazy compilation scheme to be used appropriately. ",(stdlib/lazy.mli[111,4481+0]..[114,4569+74]),None)
    ]
  signature_item (stdlib/lazy.mli[116,4645+0]..[116,4645+35])
    Psig_value
    value_description "from_fun" (stdlib/lazy.mli[116,4645+4]..[116,4645+12]) (stdlib/lazy.mli[116,4645+0]..[116,4645+35])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/lazy.mli[117,4681+0]..[123,4930+20])
            Pstr_eval
            expression (stdlib/lazy.mli[117,4681+0]..[123,4930+20])
              Pexp_constant PConst_string(" [from_fun f] is the same as [lazy (f ())] but slightly more efficient.\n\n    It should only be used if the function [f] is already defined.\n    In particular it is always less efficient to write\n    [from_fun (fun () -> expr)] than [lazy expr].\n\n    @since 4.00.0 ",(stdlib/lazy.mli[117,4681+0]..[123,4930+20]),None)
        ]
      core_type (stdlib/lazy.mli[116,4645+15]..[116,4645+35])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/lazy.mli[116,4645+16]..[116,4645+26])
          Ptyp_arrow
          Nolabel
          core_type (stdlib/lazy.mli[116,4645+16]..[116,4645+20])
            Ptyp_constr "unit" (stdlib/lazy.mli[116,4645+16]..[116,4645+20])
            []
          core_type (stdlib/lazy.mli[116,4645+24]..[116,4645+26])
            Ptyp_var a
        core_type (stdlib/lazy.mli[116,4645+31]..[116,4645+35])
          Ptyp_constr "t" (stdlib/lazy.mli[116,4645+34]..[116,4645+35])
          [
            core_type (stdlib/lazy.mli[116,4645+31]..[116,4645+33])
              Ptyp_var a
          ]
      []
  signature_item (stdlib/lazy.mli[125,4952+0]..[125,4952+26])
    Psig_value
    value_description "force_val" (stdlib/lazy.mli[125,4952+4]..[125,4952+13]) (stdlib/lazy.mli[125,4952+0]..[125,4952+26])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/lazy.mli[126,4979+0]..[134,5379+2])
            Pstr_eval
            expression (stdlib/lazy.mli[126,4979+0]..[134,5379+2])
              Pexp_constant PConst_string(" [force_val x] forces the suspension [x] and returns its\n    result. If [x] has already been forced, [force_val x]\n    returns the same value again without recomputing it.\n\n    If the computation of [x] raises an exception, it is unspecified\n    whether [force_val x] raises the same exception or {!Undefined}.\n    @raise Undefined if the forcing of [x] tries to force [x] itself\n    recursively.\n",(stdlib/lazy.mli[126,4979+0]..[134,5379+2]),None)
        ]
      core_type (stdlib/lazy.mli[125,4952+16]..[125,4952+26])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/lazy.mli[125,4952+16]..[125,4952+20])
          Ptyp_constr "t" (stdlib/lazy.mli[125,4952+19]..[125,4952+20])
          [
            core_type (stdlib/lazy.mli[125,4952+16]..[125,4952+18])
              Ptyp_var a
          ]
        core_type (stdlib/lazy.mli[125,4952+24]..[125,4952+26])
          Ptyp_var a
      []
  signature_item (stdlib/lazy.mli[137,5384+0]..[137,5384+21])
    Psig_attribute "ocaml.text"
    [
      structure_item (stdlib/lazy.mli[137,5384+0]..[137,5384+21])
        Pstr_eval
        expression (stdlib/lazy.mli[137,5384+0]..[137,5384+21])
          Pexp_constant PConst_string(" {1 Deprecated} ",(stdlib/lazy.mli[137,5384+0]..[137,5384+21]),None)
    ]
  signature_item (stdlib/lazy.mli[139,5407+0]..[140,5448+51])
    Psig_value
    value_description "lazy_from_fun" (stdlib/lazy.mli[139,5407+4]..[139,5407+17]) (stdlib/lazy.mli[139,5407+0]..[140,5448+51])
      attribute "ocaml.deprecated"
        [
          structure_item (stdlib/lazy.mli[140,5448+22]..[140,5448+50])
            Pstr_eval
            expression (stdlib/lazy.mli[140,5448+22]..[140,5448+50])
              Pexp_constant PConst_string("Use Lazy.from_fun instead.",(stdlib/lazy.mli[140,5448+23]..[140,5448+49]),None)
        ]
      attribute "ocaml.doc"
        [
          structure_item (stdlib/lazy.mli[141,5500+0]..[141,5500+42])
            Pstr_eval
            expression (stdlib/lazy.mli[141,5500+0]..[141,5500+42])
              Pexp_constant PConst_string(" @deprecated synonym for [from_fun]. ",(stdlib/lazy.mli[141,5500+0]..[141,5500+42]),None)
        ]
      core_type (stdlib/lazy.mli[139,5407+20]..[139,5407+40])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/lazy.mli[139,5407+21]..[139,5407+31])
          Ptyp_arrow
          Nolabel
          core_type (stdlib/lazy.mli[139,5407+21]..[139,5407+25])
            Ptyp_constr "unit" (stdlib/lazy.mli[139,5407+21]..[139,5407+25])
            []
          core_type (stdlib/lazy.mli[139,5407+29]..[139,5407+31])
            Ptyp_var a
        core_type (stdlib/lazy.mli[139,5407+36]..[139,5407+40])
          Ptyp_constr "t" (stdlib/lazy.mli[139,5407+39]..[139,5407+40])
          [
            core_type (stdlib/lazy.mli[139,5407+36]..[139,5407+38])
              Ptyp_var a
          ]
      []
  signature_item (stdlib/lazy.mli[143,5544+0]..[144,5575+51])
    Psig_value
    value_description "lazy_from_val" (stdlib/lazy.mli[143,5544+4]..[143,5544+17]) (stdlib/lazy.mli[143,5544+0]..[144,5575+51])
      attribute "ocaml.deprecated"
        [
          structure_item (stdlib/lazy.mli[144,5575+22]..[144,5575+50])
            Pstr_eval
            expression (stdlib/lazy.mli[144,5575+22]..[144,5575+50])
              Pexp_constant PConst_string("Use Lazy.from_val instead.",(stdlib/lazy.mli[144,5575+23]..[144,5575+49]),None)
        ]
      attribute "ocaml.doc"
        [
          structure_item (stdlib/lazy.mli[145,5627+0]..[145,5627+42])
            Pstr_eval
            expression (stdlib/lazy.mli[145,5627+0]..[145,5627+42])
              Pexp_constant PConst_string(" @deprecated synonym for [from_val]. ",(stdlib/lazy.mli[145,5627+0]..[145,5627+42]),None)
        ]
      core_type (stdlib/lazy.mli[143,5544+20]..[143,5544+30])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/lazy.mli[143,5544+20]..[143,5544+22])
          Ptyp_var a
        core_type (stdlib/lazy.mli[143,5544+26]..[143,5544+30])
          Ptyp_constr "t" (stdlib/lazy.mli[143,5544+29]..[143,5544+30])
          [
            core_type (stdlib/lazy.mli[143,5544+26]..[143,5544+28])
              Ptyp_var a
          ]
      []
  signature_item (stdlib/lazy.mli[147,5671+0]..[148,5702+49])
    Psig_value
    value_description "lazy_is_val" (stdlib/lazy.mli[147,5671+4]..[147,5671+15]) (stdlib/lazy.mli[147,5671+0]..[148,5702+49])
      attribute "ocaml.deprecated"
        [
          structure_item (stdlib/lazy.mli[148,5702+22]..[148,5702+48])
            Pstr_eval
            expression (stdlib/lazy.mli[148,5702+22]..[148,5702+48])
              Pexp_constant PConst_string("Use Lazy.is_val instead.",(stdlib/lazy.mli[148,5702+23]..[148,5702+47]),None)
        ]
      attribute "ocaml.doc"
        [
          structure_item (stdlib/lazy.mli[149,5752+0]..[149,5752+40])
            Pstr_eval
            expression (stdlib/lazy.mli[149,5752+0]..[149,5752+40])
              Pexp_constant PConst_string(" @deprecated synonym for [is_val]. ",(stdlib/lazy.mli[149,5752+0]..[149,5752+40]),None)
        ]
      core_type (stdlib/lazy.mli[147,5671+18]..[147,5671+30])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/lazy.mli[147,5671+18]..[147,5671+22])
          Ptyp_constr "t" (stdlib/lazy.mli[147,5671+21]..[147,5671+22])
          [
            core_type (stdlib/lazy.mli[147,5671+18]..[147,5671+20])
              Ptyp_var a
          ]
        core_type (stdlib/lazy.mli[147,5671+26]..[147,5671+30])
          Ptyp_constr "bool" (stdlib/lazy.mli[147,5671+26]..[147,5671+30])
          []
      []
]

