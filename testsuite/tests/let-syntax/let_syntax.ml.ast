[
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[5,24+0]..[5,24+12])
    Pstr_value Nonrec
    [
      <def>
        pattern (testsuite/tests/let-syntax/let_syntax.ml[5,24+4]..[5,24+6])
          Ppat_var "id" (testsuite/tests/let-syntax/let_syntax.ml[5,24+4]..[5,24+6])
        expression (testsuite/tests/let-syntax/let_syntax.ml[5,24+7]..[5,24+12]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (testsuite/tests/let-syntax/let_syntax.ml[5,24+7]..[5,24+8])
            Ppat_var "x" (testsuite/tests/let-syntax/let_syntax.ml[5,24+7]..[5,24+8])
          expression (testsuite/tests/let-syntax/let_syntax.ml[5,24+11]..[5,24+12])
            Pexp_ident "x" (testsuite/tests/let-syntax/let_syntax.ml[5,24+11]..[5,24+12])
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[7,38+0]..[7,38+19])
    Pstr_value Nonrec
    [
      <def>
        pattern (testsuite/tests/let-syntax/let_syntax.ml[7,38+4]..[7,38+9])
          Ppat_var "apply" (testsuite/tests/let-syntax/let_syntax.ml[7,38+4]..[7,38+9])
        expression (testsuite/tests/let-syntax/let_syntax.ml[7,38+10]..[7,38+19]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (testsuite/tests/let-syntax/let_syntax.ml[7,38+10]..[7,38+11])
            Ppat_var "x" (testsuite/tests/let-syntax/let_syntax.ml[7,38+10]..[7,38+11])
          expression (testsuite/tests/let-syntax/let_syntax.ml[7,38+12]..[7,38+19]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (testsuite/tests/let-syntax/let_syntax.ml[7,38+12]..[7,38+13])
              Ppat_var "f" (testsuite/tests/let-syntax/let_syntax.ml[7,38+12]..[7,38+13])
            expression (testsuite/tests/let-syntax/let_syntax.ml[7,38+16]..[7,38+19])
              Pexp_apply
              expression (testsuite/tests/let-syntax/let_syntax.ml[7,38+16]..[7,38+17])
                Pexp_ident "f" (testsuite/tests/let-syntax/let_syntax.ml[7,38+16]..[7,38+17])
              [
                <arg>
                Nolabel
                  expression (testsuite/tests/let-syntax/let_syntax.ml[7,38+18]..[7,38+19])
                    Pexp_ident "x" (testsuite/tests/let-syntax/let_syntax.ml[7,38+18]..[7,38+19])
              ]
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[9,59+0]..[9,59+19])
    Pstr_value Nonrec
    [
      <def>
        pattern (testsuite/tests/let-syntax/let_syntax.ml[9,59+4]..[9,59+8])
          Ppat_var "pair" (testsuite/tests/let-syntax/let_syntax.ml[9,59+4]..[9,59+8])
        expression (testsuite/tests/let-syntax/let_syntax.ml[9,59+9]..[9,59+19]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (testsuite/tests/let-syntax/let_syntax.ml[9,59+9]..[9,59+10])
            Ppat_var "x" (testsuite/tests/let-syntax/let_syntax.ml[9,59+9]..[9,59+10])
          expression (testsuite/tests/let-syntax/let_syntax.ml[9,59+11]..[9,59+19]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (testsuite/tests/let-syntax/let_syntax.ml[9,59+11]..[9,59+12])
              Ppat_var "y" (testsuite/tests/let-syntax/let_syntax.ml[9,59+11]..[9,59+12])
            expression (testsuite/tests/let-syntax/let_syntax.ml[9,59+15]..[9,59+19])
              Pexp_tuple
              [
                expression (testsuite/tests/let-syntax/let_syntax.ml[9,59+15]..[9,59+16])
                  Pexp_ident "x" (testsuite/tests/let-syntax/let_syntax.ml[9,59+15]..[9,59+16])
                expression (testsuite/tests/let-syntax/let_syntax.ml[9,59+18]..[9,59+19])
                  Pexp_ident "y" (testsuite/tests/let-syntax/let_syntax.ml[9,59+18]..[9,59+19])
              ]
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[11,80+0]..[17,143+3])
    Pstr_module
    "Id" (testsuite/tests/let-syntax/let_syntax.ml[11,80+7]..[11,80+9])
      module_expr (testsuite/tests/let-syntax/let_syntax.ml[11,80+12]..[17,143+3])
        Pmod_structure
        [
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[13,100+2]..[13,100+20])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[13,100+6]..[13,100+12])
                  Ppat_var "let+" (testsuite/tests/let-syntax/let_syntax.ml[13,100+6]..[13,100+12])
                expression (testsuite/tests/let-syntax/let_syntax.ml[13,100+15]..[13,100+20])
                  Pexp_ident "apply" (testsuite/tests/let-syntax/let_syntax.ml[13,100+15]..[13,100+20])
            ]
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[15,122+2]..[15,122+19])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[15,122+6]..[15,122+12])
                  Ppat_var "and+" (testsuite/tests/let-syntax/let_syntax.ml[15,122+6]..[15,122+12])
                expression (testsuite/tests/let-syntax/let_syntax.ml[15,122+15]..[15,122+19])
                  Pexp_ident "pair" (testsuite/tests/let-syntax/let_syntax.ml[15,122+15]..[15,122+19])
            ]
        ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[18,149+0]..[27,374+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[18,149+9]..[27,374+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[18,149+9]..[27,374+2])
          Pexp_constant PConst_string ("\nval id : 'a -> 'a = <fun>\nval apply : 'a -> ('a -> 'b) -> 'b = <fun>\nval pair : 'a -> 'b -> 'a * 'b = <fun>\nmodule Id :\n  sig\n    val ( let+ ) : 'a -> ('a -> 'b) -> 'b\n    val ( and+ ) : 'a -> 'b -> 'a * 'b\n  end\n",(testsuite/tests/let-syntax/let_syntax.ml[18,149+11]..[27,374+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[29,381+0]..[35,460+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (testsuite/tests/let-syntax/let_syntax.ml[29,381+4]..[29,381+7])
          Ppat_var "res" (testsuite/tests/let-syntax/let_syntax.ml[29,381+4]..[29,381+7])
        expression (testsuite/tests/let-syntax/let_syntax.ml[30,391+2]..[35,460+3])
          Pexp_open Fresh
          module_expr (testsuite/tests/let-syntax/let_syntax.ml[30,391+2]..[30,391+4])
            Pmod_ident "Id" (testsuite/tests/let-syntax/let_syntax.ml[30,391+2]..[30,391+4])
          expression (testsuite/tests/let-syntax/let_syntax.ml[31,398+4]..[34,446+13])
            Pexp_letop
            <binding_op> "let+" (testsuite/tests/let-syntax/let_syntax.ml[31,398+4]..[31,398+8]) (testsuite/tests/let-syntax/let_syntax.ml[31,398+4]..[34,446+13])              pattern (testsuite/tests/let-syntax/let_syntax.ml[31,398+9]..[31,398+10])
                Ppat_var "x" (testsuite/tests/let-syntax/let_syntax.ml[31,398+9]..[31,398+10])
              expression (testsuite/tests/let-syntax/let_syntax.ml[31,398+13]..[31,398+14])
                Pexp_constant PConst_int (1,None)
            [
              <binding_op> "and+" (testsuite/tests/let-syntax/let_syntax.ml[32,413+4]..[32,413+8]) (testsuite/tests/let-syntax/let_syntax.ml[31,398+9]..[32,413+14])                pattern (testsuite/tests/let-syntax/let_syntax.ml[32,413+9]..[32,413+10])
                  Ppat_var "y" (testsuite/tests/let-syntax/let_syntax.ml[32,413+9]..[32,413+10])
                expression (testsuite/tests/let-syntax/let_syntax.ml[32,413+13]..[32,413+14])
                  Pexp_constant PConst_int (2,None)
              <binding_op> "and+" (testsuite/tests/let-syntax/let_syntax.ml[33,428+4]..[33,428+8]) (testsuite/tests/let-syntax/let_syntax.ml[31,398+9]..[33,428+14])                pattern (testsuite/tests/let-syntax/let_syntax.ml[33,428+9]..[33,428+10])
                  Ppat_var "z" (testsuite/tests/let-syntax/let_syntax.ml[33,428+9]..[33,428+10])
                expression (testsuite/tests/let-syntax/let_syntax.ml[33,428+13]..[33,428+14])
                  Pexp_constant PConst_int (3,None)
            ]
            expression (testsuite/tests/let-syntax/let_syntax.ml[34,446+4]..[34,446+13])
              Pexp_construct "::" (testsuite/tests/let-syntax/let_syntax.ml[34,446+5]..[34,446+13]) ghost
              Some
                expression (testsuite/tests/let-syntax/let_syntax.ml[34,446+5]..[34,446+13]) ghost
                  Pexp_tuple
                  [
                    expression (testsuite/tests/let-syntax/let_syntax.ml[34,446+5]..[34,446+6])
                      Pexp_ident "x" (testsuite/tests/let-syntax/let_syntax.ml[34,446+5]..[34,446+6])
                    expression (testsuite/tests/let-syntax/let_syntax.ml[34,446+8]..[34,446+13]) ghost
                      Pexp_construct "::" (testsuite/tests/let-syntax/let_syntax.ml[34,446+8]..[34,446+13]) ghost
                      Some
                        expression (testsuite/tests/let-syntax/let_syntax.ml[34,446+8]..[34,446+13]) ghost
                          Pexp_tuple
                          [
                            expression (testsuite/tests/let-syntax/let_syntax.ml[34,446+8]..[34,446+9])
                              Pexp_ident "y" (testsuite/tests/let-syntax/let_syntax.ml[34,446+8]..[34,446+9])
                            expression (testsuite/tests/let-syntax/let_syntax.ml[34,446+11]..[34,446+13]) ghost
                              Pexp_construct "::" (testsuite/tests/let-syntax/let_syntax.ml[34,446+11]..[34,446+13]) ghost
                              Some
                                expression (testsuite/tests/let-syntax/let_syntax.ml[34,446+11]..[34,446+13]) ghost
                                  Pexp_tuple
                                  [
                                    expression (testsuite/tests/let-syntax/let_syntax.ml[34,446+11]..[34,446+12])
                                      Pexp_ident "z" (testsuite/tests/let-syntax/let_syntax.ml[34,446+11]..[34,446+12])
                                    expression (testsuite/tests/let-syntax/let_syntax.ml[34,446+12]..[34,446+13]) ghost
                                      Pexp_construct "[]" (testsuite/tests/let-syntax/let_syntax.ml[34,446+12]..[34,446+13]) ghost
                                      None
                                  ]
                          ]
                  ]
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[36,466+0]..[38,509+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[36,466+9]..[38,509+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[36,466+9]..[38,509+2])
          Pexp_constant PConst_string ("\nval res : int list = [1; 2; 3]\n",(testsuite/tests/let-syntax/let_syntax.ml[36,466+11]..[38,509+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[40,516+0]..[44,562+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (testsuite/tests/let-syntax/let_syntax.ml[40,516+4]..[40,516+8])
          Ppat_var "res2" (testsuite/tests/let-syntax/let_syntax.ml[40,516+4]..[40,516+8])
        expression (testsuite/tests/let-syntax/let_syntax.ml[41,527+2]..[44,562+3])
          Pexp_open Fresh
          module_expr (testsuite/tests/let-syntax/let_syntax.ml[41,527+2]..[41,527+4])
            Pmod_ident "Id" (testsuite/tests/let-syntax/let_syntax.ml[41,527+2]..[41,527+4])
          expression (testsuite/tests/let-syntax/let_syntax.ml[42,534+4]..[43,552+9])
            Pexp_letop
            <binding_op> "let+" (testsuite/tests/let-syntax/let_syntax.ml[42,534+4]..[42,534+8]) (testsuite/tests/let-syntax/let_syntax.ml[42,534+4]..[43,552+9])              pattern (testsuite/tests/let-syntax/let_syntax.ml[42,534+9]..[42,534+10])
                Ppat_var "x" (testsuite/tests/let-syntax/let_syntax.ml[42,534+9]..[42,534+10])
              expression (testsuite/tests/let-syntax/let_syntax.ml[42,534+13]..[42,534+14])
                Pexp_constant PConst_int (1,None)
            []
            expression (testsuite/tests/let-syntax/let_syntax.ml[43,552+4]..[43,552+9])
              Pexp_apply
              expression (testsuite/tests/let-syntax/let_syntax.ml[43,552+6]..[43,552+7])
                Pexp_ident "+" (testsuite/tests/let-syntax/let_syntax.ml[43,552+6]..[43,552+7])
              [
                <arg>
                Nolabel
                  expression (testsuite/tests/let-syntax/let_syntax.ml[43,552+4]..[43,552+5])
                    Pexp_ident "x" (testsuite/tests/let-syntax/let_syntax.ml[43,552+4]..[43,552+5])
                <arg>
                Nolabel
                  expression (testsuite/tests/let-syntax/let_syntax.ml[43,552+8]..[43,552+9])
                    Pexp_constant PConst_int (2,None)
              ]
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[45,568+0]..[47,599+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[45,568+9]..[47,599+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[45,568+9]..[47,599+2])
          Pexp_constant PConst_string ("\nval res2 : int = 3\n",(testsuite/tests/let-syntax/let_syntax.ml[45,568+11]..[47,599+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[50,607+0]..[71,942+3])
    Pstr_module
    "List" (testsuite/tests/let-syntax/let_syntax.ml[50,607+7]..[50,607+11])
      module_expr (testsuite/tests/let-syntax/let_syntax.ml[50,607+14]..[71,942+3])
        Pmod_structure
        [
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[52,629+2]..[52,629+28])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[52,629+6]..[52,629+9])
                  Ppat_var "map" (testsuite/tests/let-syntax/let_syntax.ml[52,629+6]..[52,629+9])
                expression (testsuite/tests/let-syntax/let_syntax.ml[52,629+10]..[52,629+28]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (testsuite/tests/let-syntax/let_syntax.ml[52,629+10]..[52,629+11])
                    Ppat_var "l" (testsuite/tests/let-syntax/let_syntax.ml[52,629+10]..[52,629+11])
                  expression (testsuite/tests/let-syntax/let_syntax.ml[52,629+12]..[52,629+28]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (testsuite/tests/let-syntax/let_syntax.ml[52,629+12]..[52,629+13])
                      Ppat_var "f" (testsuite/tests/let-syntax/let_syntax.ml[52,629+12]..[52,629+13])
                    expression (testsuite/tests/let-syntax/let_syntax.ml[52,629+16]..[52,629+28])
                      Pexp_apply
                      expression (testsuite/tests/let-syntax/let_syntax.ml[52,629+16]..[52,629+24])
                        Pexp_ident "List.map" (testsuite/tests/let-syntax/let_syntax.ml[52,629+16]..[52,629+24])
                      [
                        <arg>
                        Nolabel
                          expression (testsuite/tests/let-syntax/let_syntax.ml[52,629+25]..[52,629+26])
                            Pexp_ident "f" (testsuite/tests/let-syntax/let_syntax.ml[52,629+25]..[52,629+26])
                        <arg>
                        Nolabel
                          expression (testsuite/tests/let-syntax/let_syntax.ml[52,629+27]..[52,629+28])
                            Pexp_ident "l" (testsuite/tests/let-syntax/let_syntax.ml[52,629+27]..[52,629+28])
                      ]
            ]
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[54,659+2]..[56,710+17])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[54,659+6]..[54,659+16])
                  Ppat_var "concat_map" (testsuite/tests/let-syntax/let_syntax.ml[54,659+6]..[54,659+16])
                expression (testsuite/tests/let-syntax/let_syntax.ml[54,659+17]..[56,710+17]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (testsuite/tests/let-syntax/let_syntax.ml[54,659+17]..[54,659+18])
                    Ppat_var "l" (testsuite/tests/let-syntax/let_syntax.ml[54,659+17]..[54,659+18])
                  expression (testsuite/tests/let-syntax/let_syntax.ml[54,659+19]..[56,710+17]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (testsuite/tests/let-syntax/let_syntax.ml[54,659+19]..[54,659+20])
                      Ppat_var "f" (testsuite/tests/let-syntax/let_syntax.ml[54,659+19]..[54,659+20])
                    expression (testsuite/tests/let-syntax/let_syntax.ml[55,682+4]..[56,710+17])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (testsuite/tests/let-syntax/let_syntax.ml[55,682+8]..[55,682+9])
                            Ppat_var "l" (testsuite/tests/let-syntax/let_syntax.ml[55,682+8]..[55,682+9])
                          expression (testsuite/tests/let-syntax/let_syntax.ml[55,682+12]..[55,682+24])
                            Pexp_apply
                            expression (testsuite/tests/let-syntax/let_syntax.ml[55,682+12]..[55,682+20])
                              Pexp_ident "List.map" (testsuite/tests/let-syntax/let_syntax.ml[55,682+12]..[55,682+20])
                            [
                              <arg>
                              Nolabel
                                expression (testsuite/tests/let-syntax/let_syntax.ml[55,682+21]..[55,682+22])
                                  Pexp_ident "f" (testsuite/tests/let-syntax/let_syntax.ml[55,682+21]..[55,682+22])
                              <arg>
                              Nolabel
                                expression (testsuite/tests/let-syntax/let_syntax.ml[55,682+23]..[55,682+24])
                                  Pexp_ident "l" (testsuite/tests/let-syntax/let_syntax.ml[55,682+23]..[55,682+24])
                            ]
                      ]
                      expression (testsuite/tests/let-syntax/let_syntax.ml[56,710+4]..[56,710+17])
                        Pexp_apply
                        expression (testsuite/tests/let-syntax/let_syntax.ml[56,710+4]..[56,710+15])
                          Pexp_ident "List.concat" (testsuite/tests/let-syntax/let_syntax.ml[56,710+4]..[56,710+15])
                        [
                          <arg>
                          Nolabel
                            expression (testsuite/tests/let-syntax/let_syntax.ml[56,710+16]..[56,710+17])
                              Pexp_ident "l" (testsuite/tests/let-syntax/let_syntax.ml[56,710+16]..[56,710+17])
                        ]
            ]
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[58,729+2]..[61,830+11])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[58,729+6]..[58,729+13])
                  Ppat_var "product" (testsuite/tests/let-syntax/let_syntax.ml[58,729+6]..[58,729+13])
                expression (testsuite/tests/let-syntax/let_syntax.ml[58,729+14]..[61,830+11]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (testsuite/tests/let-syntax/let_syntax.ml[58,729+14]..[58,729+16])
                    Ppat_var "xs" (testsuite/tests/let-syntax/let_syntax.ml[58,729+14]..[58,729+16])
                  expression (testsuite/tests/let-syntax/let_syntax.ml[58,729+17]..[61,830+11]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (testsuite/tests/let-syntax/let_syntax.ml[58,729+17]..[58,729+19])
                      Ppat_var "ys" (testsuite/tests/let-syntax/let_syntax.ml[58,729+17]..[58,729+19])
                    expression (testsuite/tests/let-syntax/let_syntax.ml[59,751+4]..[61,830+11])
                      Pexp_apply
                      expression (testsuite/tests/let-syntax/let_syntax.ml[59,751+4]..[59,751+19])
                        Pexp_ident "List.fold_right" (testsuite/tests/let-syntax/let_syntax.ml[59,751+4]..[59,751+19])
                      [
                        <arg>
                        Nolabel
                          expression (testsuite/tests/let-syntax/let_syntax.ml[60,771+6]..[60,771+58])
                            Pexp_fun
                            Nolabel
                            None
                            pattern (testsuite/tests/let-syntax/let_syntax.ml[60,771+11]..[60,771+12])
                              Ppat_var "x" (testsuite/tests/let-syntax/let_syntax.ml[60,771+11]..[60,771+12])
                            expression (testsuite/tests/let-syntax/let_syntax.ml[60,771+13]..[60,771+57]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (testsuite/tests/let-syntax/let_syntax.ml[60,771+13]..[60,771+16])
                                Ppat_var "acc" (testsuite/tests/let-syntax/let_syntax.ml[60,771+13]..[60,771+16])
                              expression (testsuite/tests/let-syntax/let_syntax.ml[60,771+20]..[60,771+57])
                                Pexp_apply
                                expression (testsuite/tests/let-syntax/let_syntax.ml[60,771+52]..[60,771+53])
                                  Pexp_ident "@" (testsuite/tests/let-syntax/let_syntax.ml[60,771+52]..[60,771+53])
                                [
                                  <arg>
                                  Nolabel
                                    expression (testsuite/tests/let-syntax/let_syntax.ml[60,771+20]..[60,771+51])
                                      Pexp_apply
                                      expression (testsuite/tests/let-syntax/let_syntax.ml[60,771+21]..[60,771+29])
                                        Pexp_ident "List.map" (testsuite/tests/let-syntax/let_syntax.ml[60,771+21]..[60,771+29])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (testsuite/tests/let-syntax/let_syntax.ml[60,771+30]..[60,771+47])
                                            Pexp_fun
                                            Nolabel
                                            None
                                            pattern (testsuite/tests/let-syntax/let_syntax.ml[60,771+35]..[60,771+36])
                                              Ppat_var "y" (testsuite/tests/let-syntax/let_syntax.ml[60,771+35]..[60,771+36])
                                            expression (testsuite/tests/let-syntax/let_syntax.ml[60,771+40]..[60,771+46])
                                              Pexp_tuple
                                              [
                                                expression (testsuite/tests/let-syntax/let_syntax.ml[60,771+41]..[60,771+42])
                                                  Pexp_ident "x" (testsuite/tests/let-syntax/let_syntax.ml[60,771+41]..[60,771+42])
                                                expression (testsuite/tests/let-syntax/let_syntax.ml[60,771+44]..[60,771+45])
                                                  Pexp_ident "y" (testsuite/tests/let-syntax/let_syntax.ml[60,771+44]..[60,771+45])
                                              ]
                                        <arg>
                                        Nolabel
                                          expression (testsuite/tests/let-syntax/let_syntax.ml[60,771+48]..[60,771+50])
                                            Pexp_ident "ys" (testsuite/tests/let-syntax/let_syntax.ml[60,771+48]..[60,771+50])
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (testsuite/tests/let-syntax/let_syntax.ml[60,771+54]..[60,771+57])
                                      Pexp_ident "acc" (testsuite/tests/let-syntax/let_syntax.ml[60,771+54]..[60,771+57])
                                ]
                        <arg>
                        Nolabel
                          expression (testsuite/tests/let-syntax/let_syntax.ml[61,830+6]..[61,830+8])
                            Pexp_ident "xs" (testsuite/tests/let-syntax/let_syntax.ml[61,830+6]..[61,830+8])
                        <arg>
                        Nolabel
                          expression (testsuite/tests/let-syntax/let_syntax.ml[61,830+9]..[61,830+11])
                            Pexp_construct "[]" (testsuite/tests/let-syntax/let_syntax.ml[61,830+9]..[61,830+11])
                            None
                      ]
            ]
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[63,843+2]..[63,843+18])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[63,843+6]..[63,843+12])
                  Ppat_var "let+" (testsuite/tests/let-syntax/let_syntax.ml[63,843+6]..[63,843+12])
                expression (testsuite/tests/let-syntax/let_syntax.ml[63,843+15]..[63,843+18])
                  Pexp_ident "map" (testsuite/tests/let-syntax/let_syntax.ml[63,843+15]..[63,843+18])
            ]
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[65,863+2]..[65,863+22])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[65,863+6]..[65,863+12])
                  Ppat_var "and+" (testsuite/tests/let-syntax/let_syntax.ml[65,863+6]..[65,863+12])
                expression (testsuite/tests/let-syntax/let_syntax.ml[65,863+15]..[65,863+22])
                  Pexp_ident "product" (testsuite/tests/let-syntax/let_syntax.ml[65,863+15]..[65,863+22])
            ]
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[67,887+2]..[67,887+27])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[67,887+6]..[67,887+14])
                  Ppat_var "let*" (testsuite/tests/let-syntax/let_syntax.ml[67,887+6]..[67,887+14])
                expression (testsuite/tests/let-syntax/let_syntax.ml[67,887+17]..[67,887+27])
                  Pexp_ident "concat_map" (testsuite/tests/let-syntax/let_syntax.ml[67,887+17]..[67,887+27])
            ]
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[69,916+2]..[69,916+24])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[69,916+6]..[69,916+14])
                  Ppat_var "and*" (testsuite/tests/let-syntax/let_syntax.ml[69,916+6]..[69,916+14])
                expression (testsuite/tests/let-syntax/let_syntax.ml[69,916+17]..[69,916+24])
                  Pexp_ident "product" (testsuite/tests/let-syntax/let_syntax.ml[69,916+17]..[69,916+24])
            ]
        ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[72,948+0]..[83,1368+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[72,948+9]..[83,1368+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[72,948+9]..[83,1368+2])
          Pexp_constant PConst_string ("\nmodule List :\n  sig\n    val map : 'a list -> ('a -> 'b) -> 'b list\n    val concat_map : 'a list -> ('a -> 'b list) -> 'b list\n    val product : 'a list -> 'b list -> ('a * 'b) list\n    val ( let+ ) : 'a list -> ('a -> 'b) -> 'b list\n    val ( and+ ) : 'a list -> 'b list -> ('a * 'b) list\n    val ( let* ) : 'a list -> ('a -> 'b list) -> 'b list\n    val ( and* ) : 'a list -> 'b list -> ('a * 'b) list\n  end\n",(testsuite/tests/let-syntax/let_syntax.ml[72,948+11]..[83,1368+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[85,1375+0]..[89,1430+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (testsuite/tests/let-syntax/let_syntax.ml[85,1375+4]..[85,1375+7])
          Ppat_var "map" (testsuite/tests/let-syntax/let_syntax.ml[85,1375+4]..[85,1375+7])
        expression (testsuite/tests/let-syntax/let_syntax.ml[86,1385+2]..[89,1430+3])
          Pexp_open Fresh
          module_expr (testsuite/tests/let-syntax/let_syntax.ml[86,1385+2]..[86,1385+6])
            Pmod_ident "List" (testsuite/tests/let-syntax/let_syntax.ml[86,1385+2]..[86,1385+6])
          expression (testsuite/tests/let-syntax/let_syntax.ml[87,1394+4]..[88,1420+9])
            Pexp_letop
            <binding_op> "let+" (testsuite/tests/let-syntax/let_syntax.ml[87,1394+4]..[87,1394+8]) (testsuite/tests/let-syntax/let_syntax.ml[87,1394+4]..[88,1420+9])              pattern (testsuite/tests/let-syntax/let_syntax.ml[87,1394+9]..[87,1394+10])
                Ppat_var "x" (testsuite/tests/let-syntax/let_syntax.ml[87,1394+9]..[87,1394+10])
              expression (testsuite/tests/let-syntax/let_syntax.ml[87,1394+13]..[87,1394+22])
                Pexp_construct "::" (testsuite/tests/let-syntax/let_syntax.ml[87,1394+14]..[87,1394+22]) ghost
                Some
                  expression (testsuite/tests/let-syntax/let_syntax.ml[87,1394+14]..[87,1394+22]) ghost
                    Pexp_tuple
                    [
                      expression (testsuite/tests/let-syntax/let_syntax.ml[87,1394+14]..[87,1394+15])
                        Pexp_constant PConst_int (1,None)
                      expression (testsuite/tests/let-syntax/let_syntax.ml[87,1394+17]..[87,1394+22]) ghost
                        Pexp_construct "::" (testsuite/tests/let-syntax/let_syntax.ml[87,1394+17]..[87,1394+22]) ghost
                        Some
                          expression (testsuite/tests/let-syntax/let_syntax.ml[87,1394+17]..[87,1394+22]) ghost
                            Pexp_tuple
                            [
                              expression (testsuite/tests/let-syntax/let_syntax.ml[87,1394+17]..[87,1394+18])
                                Pexp_constant PConst_int (2,None)
                              expression (testsuite/tests/let-syntax/let_syntax.ml[87,1394+20]..[87,1394+22]) ghost
                                Pexp_construct "::" (testsuite/tests/let-syntax/let_syntax.ml[87,1394+20]..[87,1394+22]) ghost
                                Some
                                  expression (testsuite/tests/let-syntax/let_syntax.ml[87,1394+20]..[87,1394+22]) ghost
                                    Pexp_tuple
                                    [
                                      expression (testsuite/tests/let-syntax/let_syntax.ml[87,1394+20]..[87,1394+21])
                                        Pexp_constant PConst_int (3,None)
                                      expression (testsuite/tests/let-syntax/let_syntax.ml[87,1394+21]..[87,1394+22]) ghost
                                        Pexp_construct "[]" (testsuite/tests/let-syntax/let_syntax.ml[87,1394+21]..[87,1394+22]) ghost
                                        None
                                    ]
                            ]
                    ]
            []
            expression (testsuite/tests/let-syntax/let_syntax.ml[88,1420+4]..[88,1420+9])
              Pexp_apply
              expression (testsuite/tests/let-syntax/let_syntax.ml[88,1420+6]..[88,1420+7])
                Pexp_ident "+" (testsuite/tests/let-syntax/let_syntax.ml[88,1420+6]..[88,1420+7])
              [
                <arg>
                Nolabel
                  expression (testsuite/tests/let-syntax/let_syntax.ml[88,1420+4]..[88,1420+5])
                    Pexp_ident "x" (testsuite/tests/let-syntax/let_syntax.ml[88,1420+4]..[88,1420+5])
                <arg>
                Nolabel
                  expression (testsuite/tests/let-syntax/let_syntax.ml[88,1420+8]..[88,1420+9])
                    Pexp_constant PConst_int (1,None)
              ]
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[90,1436+0]..[92,1479+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[90,1436+9]..[92,1479+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[90,1436+9]..[92,1479+2])
          Pexp_constant PConst_string ("\nval map : int list = [2; 3; 4]\n",(testsuite/tests/let-syntax/let_syntax.ml[90,1436+11]..[92,1479+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[94,1486+0]..[99,1568+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (testsuite/tests/let-syntax/let_syntax.ml[94,1486+4]..[94,1486+11])
          Ppat_var "map_and" (testsuite/tests/let-syntax/let_syntax.ml[94,1486+4]..[94,1486+11])
        expression (testsuite/tests/let-syntax/let_syntax.ml[95,1500+2]..[99,1568+3])
          Pexp_open Fresh
          module_expr (testsuite/tests/let-syntax/let_syntax.ml[95,1500+2]..[95,1500+6])
            Pmod_ident "List" (testsuite/tests/let-syntax/let_syntax.ml[95,1500+2]..[95,1500+6])
          expression (testsuite/tests/let-syntax/let_syntax.ml[96,1509+4]..[98,1558+9])
            Pexp_letop
            <binding_op> "let+" (testsuite/tests/let-syntax/let_syntax.ml[96,1509+4]..[96,1509+8]) (testsuite/tests/let-syntax/let_syntax.ml[96,1509+4]..[98,1558+9])              pattern (testsuite/tests/let-syntax/let_syntax.ml[96,1509+9]..[96,1509+10])
                Ppat_var "x" (testsuite/tests/let-syntax/let_syntax.ml[96,1509+9]..[96,1509+10])
              expression (testsuite/tests/let-syntax/let_syntax.ml[96,1509+13]..[96,1509+22])
                Pexp_construct "::" (testsuite/tests/let-syntax/let_syntax.ml[96,1509+14]..[96,1509+22]) ghost
                Some
                  expression (testsuite/tests/let-syntax/let_syntax.ml[96,1509+14]..[96,1509+22]) ghost
                    Pexp_tuple
                    [
                      expression (testsuite/tests/let-syntax/let_syntax.ml[96,1509+14]..[96,1509+15])
                        Pexp_constant PConst_int (1,None)
                      expression (testsuite/tests/let-syntax/let_syntax.ml[96,1509+17]..[96,1509+22]) ghost
                        Pexp_construct "::" (testsuite/tests/let-syntax/let_syntax.ml[96,1509+17]..[96,1509+22]) ghost
                        Some
                          expression (testsuite/tests/let-syntax/let_syntax.ml[96,1509+17]..[96,1509+22]) ghost
                            Pexp_tuple
                            [
                              expression (testsuite/tests/let-syntax/let_syntax.ml[96,1509+17]..[96,1509+18])
                                Pexp_constant PConst_int (2,None)
                              expression (testsuite/tests/let-syntax/let_syntax.ml[96,1509+20]..[96,1509+22]) ghost
                                Pexp_construct "::" (testsuite/tests/let-syntax/let_syntax.ml[96,1509+20]..[96,1509+22]) ghost
                                Some
                                  expression (testsuite/tests/let-syntax/let_syntax.ml[96,1509+20]..[96,1509+22]) ghost
                                    Pexp_tuple
                                    [
                                      expression (testsuite/tests/let-syntax/let_syntax.ml[96,1509+20]..[96,1509+21])
                                        Pexp_constant PConst_int (3,None)
                                      expression (testsuite/tests/let-syntax/let_syntax.ml[96,1509+21]..[96,1509+22]) ghost
                                        Pexp_construct "[]" (testsuite/tests/let-syntax/let_syntax.ml[96,1509+21]..[96,1509+22]) ghost
                                        None
                                    ]
                            ]
                    ]
            [
              <binding_op> "and+" (testsuite/tests/let-syntax/let_syntax.ml[97,1532+4]..[97,1532+8]) (testsuite/tests/let-syntax/let_syntax.ml[96,1509+9]..[97,1532+22])                pattern (testsuite/tests/let-syntax/let_syntax.ml[97,1532+9]..[97,1532+10])
                  Ppat_var "y" (testsuite/tests/let-syntax/let_syntax.ml[97,1532+9]..[97,1532+10])
                expression (testsuite/tests/let-syntax/let_syntax.ml[97,1532+13]..[97,1532+22])
                  Pexp_construct "::" (testsuite/tests/let-syntax/let_syntax.ml[97,1532+14]..[97,1532+22]) ghost
                  Some
                    expression (testsuite/tests/let-syntax/let_syntax.ml[97,1532+14]..[97,1532+22]) ghost
                      Pexp_tuple
                      [
                        expression (testsuite/tests/let-syntax/let_syntax.ml[97,1532+14]..[97,1532+15])
                          Pexp_constant PConst_int (7,None)
                        expression (testsuite/tests/let-syntax/let_syntax.ml[97,1532+17]..[97,1532+22]) ghost
                          Pexp_construct "::" (testsuite/tests/let-syntax/let_syntax.ml[97,1532+17]..[97,1532+22]) ghost
                          Some
                            expression (testsuite/tests/let-syntax/let_syntax.ml[97,1532+17]..[97,1532+22]) ghost
                              Pexp_tuple
                              [
                                expression (testsuite/tests/let-syntax/let_syntax.ml[97,1532+17]..[97,1532+18])
                                  Pexp_constant PConst_int (8,None)
                                expression (testsuite/tests/let-syntax/let_syntax.ml[97,1532+20]..[97,1532+22]) ghost
                                  Pexp_construct "::" (testsuite/tests/let-syntax/let_syntax.ml[97,1532+20]..[97,1532+22]) ghost
                                  Some
                                    expression (testsuite/tests/let-syntax/let_syntax.ml[97,1532+20]..[97,1532+22]) ghost
                                      Pexp_tuple
                                      [
                                        expression (testsuite/tests/let-syntax/let_syntax.ml[97,1532+20]..[97,1532+21])
                                          Pexp_constant PConst_int (9,None)
                                        expression (testsuite/tests/let-syntax/let_syntax.ml[97,1532+21]..[97,1532+22]) ghost
                                          Pexp_construct "[]" (testsuite/tests/let-syntax/let_syntax.ml[97,1532+21]..[97,1532+22]) ghost
                                          None
                                      ]
                              ]
                      ]
            ]
            expression (testsuite/tests/let-syntax/let_syntax.ml[98,1558+4]..[98,1558+9])
              Pexp_apply
              expression (testsuite/tests/let-syntax/let_syntax.ml[98,1558+6]..[98,1558+7])
                Pexp_ident "+" (testsuite/tests/let-syntax/let_syntax.ml[98,1558+6]..[98,1558+7])
              [
                <arg>
                Nolabel
                  expression (testsuite/tests/let-syntax/let_syntax.ml[98,1558+4]..[98,1558+5])
                    Pexp_ident "x" (testsuite/tests/let-syntax/let_syntax.ml[98,1558+4]..[98,1558+5])
                <arg>
                Nolabel
                  expression (testsuite/tests/let-syntax/let_syntax.ml[98,1558+8]..[98,1558+9])
                    Pexp_ident "y" (testsuite/tests/let-syntax/let_syntax.ml[98,1558+8]..[98,1558+9])
              ]
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[100,1574+0]..[102,1645+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[100,1574+9]..[102,1645+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[100,1574+9]..[102,1645+2])
          Pexp_constant PConst_string ("\nval map_and : int list = [8; 9; 10; 9; 10; 11; 10; 11; 12]\n",(testsuite/tests/let-syntax/let_syntax.ml[100,1574+11]..[102,1645+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[104,1652+0]..[109,1736+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (testsuite/tests/let-syntax/let_syntax.ml[104,1652+4]..[104,1652+8])
          Ppat_var "bind" (testsuite/tests/let-syntax/let_syntax.ml[104,1652+4]..[104,1652+8])
        expression (testsuite/tests/let-syntax/let_syntax.ml[105,1663+2]..[109,1736+3])
          Pexp_open Fresh
          module_expr (testsuite/tests/let-syntax/let_syntax.ml[105,1663+2]..[105,1663+6])
            Pmod_ident "List" (testsuite/tests/let-syntax/let_syntax.ml[105,1663+2]..[105,1663+6])
          expression (testsuite/tests/let-syntax/let_syntax.ml[106,1672+4]..[108,1724+11])
            Pexp_letop
            <binding_op> "let*" (testsuite/tests/let-syntax/let_syntax.ml[106,1672+4]..[106,1672+8]) (testsuite/tests/let-syntax/let_syntax.ml[106,1672+4]..[108,1724+11])              pattern (testsuite/tests/let-syntax/let_syntax.ml[106,1672+9]..[106,1672+10])
                Ppat_var "x" (testsuite/tests/let-syntax/let_syntax.ml[106,1672+9]..[106,1672+10])
              expression (testsuite/tests/let-syntax/let_syntax.ml[106,1672+13]..[106,1672+22])
                Pexp_construct "::" (testsuite/tests/let-syntax/let_syntax.ml[106,1672+14]..[106,1672+22]) ghost
                Some
                  expression (testsuite/tests/let-syntax/let_syntax.ml[106,1672+14]..[106,1672+22]) ghost
                    Pexp_tuple
                    [
                      expression (testsuite/tests/let-syntax/let_syntax.ml[106,1672+14]..[106,1672+15])
                        Pexp_constant PConst_int (1,None)
                      expression (testsuite/tests/let-syntax/let_syntax.ml[106,1672+17]..[106,1672+22]) ghost
                        Pexp_construct "::" (testsuite/tests/let-syntax/let_syntax.ml[106,1672+17]..[106,1672+22]) ghost
                        Some
                          expression (testsuite/tests/let-syntax/let_syntax.ml[106,1672+17]..[106,1672+22]) ghost
                            Pexp_tuple
                            [
                              expression (testsuite/tests/let-syntax/let_syntax.ml[106,1672+17]..[106,1672+18])
                                Pexp_constant PConst_int (2,None)
                              expression (testsuite/tests/let-syntax/let_syntax.ml[106,1672+20]..[106,1672+22]) ghost
                                Pexp_construct "::" (testsuite/tests/let-syntax/let_syntax.ml[106,1672+20]..[106,1672+22]) ghost
                                Some
                                  expression (testsuite/tests/let-syntax/let_syntax.ml[106,1672+20]..[106,1672+22]) ghost
                                    Pexp_tuple
                                    [
                                      expression (testsuite/tests/let-syntax/let_syntax.ml[106,1672+20]..[106,1672+21])
                                        Pexp_constant PConst_int (3,None)
                                      expression (testsuite/tests/let-syntax/let_syntax.ml[106,1672+21]..[106,1672+22]) ghost
                                        Pexp_construct "[]" (testsuite/tests/let-syntax/let_syntax.ml[106,1672+21]..[106,1672+22]) ghost
                                        None
                                    ]
                            ]
                    ]
            []
            expression (testsuite/tests/let-syntax/let_syntax.ml[107,1698+4]..[108,1724+11])
              Pexp_letop
              <binding_op> "let*" (testsuite/tests/let-syntax/let_syntax.ml[107,1698+4]..[107,1698+8]) (testsuite/tests/let-syntax/let_syntax.ml[107,1698+4]..[108,1724+11])                pattern (testsuite/tests/let-syntax/let_syntax.ml[107,1698+9]..[107,1698+10])
                  Ppat_var "y" (testsuite/tests/let-syntax/let_syntax.ml[107,1698+9]..[107,1698+10])
                expression (testsuite/tests/let-syntax/let_syntax.ml[107,1698+13]..[107,1698+22])
                  Pexp_construct "::" (testsuite/tests/let-syntax/let_syntax.ml[107,1698+14]..[107,1698+22]) ghost
                  Some
                    expression (testsuite/tests/let-syntax/let_syntax.ml[107,1698+14]..[107,1698+22]) ghost
                      Pexp_tuple
                      [
                        expression (testsuite/tests/let-syntax/let_syntax.ml[107,1698+14]..[107,1698+15])
                          Pexp_constant PConst_int (7,None)
                        expression (testsuite/tests/let-syntax/let_syntax.ml[107,1698+17]..[107,1698+22]) ghost
                          Pexp_construct "::" (testsuite/tests/let-syntax/let_syntax.ml[107,1698+17]..[107,1698+22]) ghost
                          Some
                            expression (testsuite/tests/let-syntax/let_syntax.ml[107,1698+17]..[107,1698+22]) ghost
                              Pexp_tuple
                              [
                                expression (testsuite/tests/let-syntax/let_syntax.ml[107,1698+17]..[107,1698+18])
                                  Pexp_constant PConst_int (8,None)
                                expression (testsuite/tests/let-syntax/let_syntax.ml[107,1698+20]..[107,1698+22]) ghost
                                  Pexp_construct "::" (testsuite/tests/let-syntax/let_syntax.ml[107,1698+20]..[107,1698+22]) ghost
                                  Some
                                    expression (testsuite/tests/let-syntax/let_syntax.ml[107,1698+20]..[107,1698+22]) ghost
                                      Pexp_tuple
                                      [
                                        expression (testsuite/tests/let-syntax/let_syntax.ml[107,1698+20]..[107,1698+21])
                                          Pexp_constant PConst_int (9,None)
                                        expression (testsuite/tests/let-syntax/let_syntax.ml[107,1698+21]..[107,1698+22]) ghost
                                          Pexp_construct "[]" (testsuite/tests/let-syntax/let_syntax.ml[107,1698+21]..[107,1698+22]) ghost
                                          None
                                      ]
                              ]
                      ]
              []
              expression (testsuite/tests/let-syntax/let_syntax.ml[108,1724+4]..[108,1724+11])
                Pexp_construct "::" (testsuite/tests/let-syntax/let_syntax.ml[108,1724+5]..[108,1724+11]) ghost
                Some
                  expression (testsuite/tests/let-syntax/let_syntax.ml[108,1724+5]..[108,1724+11]) ghost
                    Pexp_tuple
                    [
                      expression (testsuite/tests/let-syntax/let_syntax.ml[108,1724+5]..[108,1724+10])
                        Pexp_apply
                        expression (testsuite/tests/let-syntax/let_syntax.ml[108,1724+7]..[108,1724+8])
                          Pexp_ident "+" (testsuite/tests/let-syntax/let_syntax.ml[108,1724+7]..[108,1724+8])
                        [
                          <arg>
                          Nolabel
                            expression (testsuite/tests/let-syntax/let_syntax.ml[108,1724+5]..[108,1724+6])
                              Pexp_ident "x" (testsuite/tests/let-syntax/let_syntax.ml[108,1724+5]..[108,1724+6])
                          <arg>
                          Nolabel
                            expression (testsuite/tests/let-syntax/let_syntax.ml[108,1724+9]..[108,1724+10])
                              Pexp_ident "y" (testsuite/tests/let-syntax/let_syntax.ml[108,1724+9]..[108,1724+10])
                        ]
                      expression (testsuite/tests/let-syntax/let_syntax.ml[108,1724+10]..[108,1724+11]) ghost
                        Pexp_construct "[]" (testsuite/tests/let-syntax/let_syntax.ml[108,1724+10]..[108,1724+11]) ghost
                        None
                    ]
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[110,1742+0]..[112,1810+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[110,1742+9]..[112,1810+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[110,1742+9]..[112,1810+2])
          Pexp_constant PConst_string ("\nval bind : int list = [8; 9; 10; 9; 10; 11; 10; 11; 12]\n",(testsuite/tests/let-syntax/let_syntax.ml[110,1742+11]..[112,1810+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[114,1817+0]..[119,1902+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (testsuite/tests/let-syntax/let_syntax.ml[114,1817+4]..[114,1817+12])
          Ppat_var "bind_and" (testsuite/tests/let-syntax/let_syntax.ml[114,1817+4]..[114,1817+12])
        expression (testsuite/tests/let-syntax/let_syntax.ml[115,1832+2]..[119,1902+3])
          Pexp_open Fresh
          module_expr (testsuite/tests/let-syntax/let_syntax.ml[115,1832+2]..[115,1832+6])
            Pmod_ident "List" (testsuite/tests/let-syntax/let_syntax.ml[115,1832+2]..[115,1832+6])
          expression (testsuite/tests/let-syntax/let_syntax.ml[116,1841+4]..[118,1890+11])
            Pexp_letop
            <binding_op> "let*" (testsuite/tests/let-syntax/let_syntax.ml[116,1841+4]..[116,1841+8]) (testsuite/tests/let-syntax/let_syntax.ml[116,1841+4]..[118,1890+11])              pattern (testsuite/tests/let-syntax/let_syntax.ml[116,1841+9]..[116,1841+10])
                Ppat_var "x" (testsuite/tests/let-syntax/let_syntax.ml[116,1841+9]..[116,1841+10])
              expression (testsuite/tests/let-syntax/let_syntax.ml[116,1841+13]..[116,1841+22])
                Pexp_construct "::" (testsuite/tests/let-syntax/let_syntax.ml[116,1841+14]..[116,1841+22]) ghost
                Some
                  expression (testsuite/tests/let-syntax/let_syntax.ml[116,1841+14]..[116,1841+22]) ghost
                    Pexp_tuple
                    [
                      expression (testsuite/tests/let-syntax/let_syntax.ml[116,1841+14]..[116,1841+15])
                        Pexp_constant PConst_int (1,None)
                      expression (testsuite/tests/let-syntax/let_syntax.ml[116,1841+17]..[116,1841+22]) ghost
                        Pexp_construct "::" (testsuite/tests/let-syntax/let_syntax.ml[116,1841+17]..[116,1841+22]) ghost
                        Some
                          expression (testsuite/tests/let-syntax/let_syntax.ml[116,1841+17]..[116,1841+22]) ghost
                            Pexp_tuple
                            [
                              expression (testsuite/tests/let-syntax/let_syntax.ml[116,1841+17]..[116,1841+18])
                                Pexp_constant PConst_int (2,None)
                              expression (testsuite/tests/let-syntax/let_syntax.ml[116,1841+20]..[116,1841+22]) ghost
                                Pexp_construct "::" (testsuite/tests/let-syntax/let_syntax.ml[116,1841+20]..[116,1841+22]) ghost
                                Some
                                  expression (testsuite/tests/let-syntax/let_syntax.ml[116,1841+20]..[116,1841+22]) ghost
                                    Pexp_tuple
                                    [
                                      expression (testsuite/tests/let-syntax/let_syntax.ml[116,1841+20]..[116,1841+21])
                                        Pexp_constant PConst_int (3,None)
                                      expression (testsuite/tests/let-syntax/let_syntax.ml[116,1841+21]..[116,1841+22]) ghost
                                        Pexp_construct "[]" (testsuite/tests/let-syntax/let_syntax.ml[116,1841+21]..[116,1841+22]) ghost
                                        None
                                    ]
                            ]
                    ]
            [
              <binding_op> "and*" (testsuite/tests/let-syntax/let_syntax.ml[117,1864+4]..[117,1864+8]) (testsuite/tests/let-syntax/let_syntax.ml[116,1841+9]..[117,1864+22])                pattern (testsuite/tests/let-syntax/let_syntax.ml[117,1864+9]..[117,1864+10])
                  Ppat_var "y" (testsuite/tests/let-syntax/let_syntax.ml[117,1864+9]..[117,1864+10])
                expression (testsuite/tests/let-syntax/let_syntax.ml[117,1864+13]..[117,1864+22])
                  Pexp_construct "::" (testsuite/tests/let-syntax/let_syntax.ml[117,1864+14]..[117,1864+22]) ghost
                  Some
                    expression (testsuite/tests/let-syntax/let_syntax.ml[117,1864+14]..[117,1864+22]) ghost
                      Pexp_tuple
                      [
                        expression (testsuite/tests/let-syntax/let_syntax.ml[117,1864+14]..[117,1864+15])
                          Pexp_constant PConst_int (7,None)
                        expression (testsuite/tests/let-syntax/let_syntax.ml[117,1864+17]..[117,1864+22]) ghost
                          Pexp_construct "::" (testsuite/tests/let-syntax/let_syntax.ml[117,1864+17]..[117,1864+22]) ghost
                          Some
                            expression (testsuite/tests/let-syntax/let_syntax.ml[117,1864+17]..[117,1864+22]) ghost
                              Pexp_tuple
                              [
                                expression (testsuite/tests/let-syntax/let_syntax.ml[117,1864+17]..[117,1864+18])
                                  Pexp_constant PConst_int (8,None)
                                expression (testsuite/tests/let-syntax/let_syntax.ml[117,1864+20]..[117,1864+22]) ghost
                                  Pexp_construct "::" (testsuite/tests/let-syntax/let_syntax.ml[117,1864+20]..[117,1864+22]) ghost
                                  Some
                                    expression (testsuite/tests/let-syntax/let_syntax.ml[117,1864+20]..[117,1864+22]) ghost
                                      Pexp_tuple
                                      [
                                        expression (testsuite/tests/let-syntax/let_syntax.ml[117,1864+20]..[117,1864+21])
                                          Pexp_constant PConst_int (9,None)
                                        expression (testsuite/tests/let-syntax/let_syntax.ml[117,1864+21]..[117,1864+22]) ghost
                                          Pexp_construct "[]" (testsuite/tests/let-syntax/let_syntax.ml[117,1864+21]..[117,1864+22]) ghost
                                          None
                                      ]
                              ]
                      ]
            ]
            expression (testsuite/tests/let-syntax/let_syntax.ml[118,1890+4]..[118,1890+11])
              Pexp_construct "::" (testsuite/tests/let-syntax/let_syntax.ml[118,1890+5]..[118,1890+11]) ghost
              Some
                expression (testsuite/tests/let-syntax/let_syntax.ml[118,1890+5]..[118,1890+11]) ghost
                  Pexp_tuple
                  [
                    expression (testsuite/tests/let-syntax/let_syntax.ml[118,1890+5]..[118,1890+10])
                      Pexp_apply
                      expression (testsuite/tests/let-syntax/let_syntax.ml[118,1890+7]..[118,1890+8])
                        Pexp_ident "+" (testsuite/tests/let-syntax/let_syntax.ml[118,1890+7]..[118,1890+8])
                      [
                        <arg>
                        Nolabel
                          expression (testsuite/tests/let-syntax/let_syntax.ml[118,1890+5]..[118,1890+6])
                            Pexp_ident "x" (testsuite/tests/let-syntax/let_syntax.ml[118,1890+5]..[118,1890+6])
                        <arg>
                        Nolabel
                          expression (testsuite/tests/let-syntax/let_syntax.ml[118,1890+9]..[118,1890+10])
                            Pexp_ident "y" (testsuite/tests/let-syntax/let_syntax.ml[118,1890+9]..[118,1890+10])
                      ]
                    expression (testsuite/tests/let-syntax/let_syntax.ml[118,1890+10]..[118,1890+11]) ghost
                      Pexp_construct "[]" (testsuite/tests/let-syntax/let_syntax.ml[118,1890+10]..[118,1890+11]) ghost
                      None
                  ]
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[120,1908+0]..[122,1980+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[120,1908+9]..[122,1980+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[120,1908+9]..[122,1980+2])
          Pexp_constant PConst_string ("\nval bind_and : int list = [8; 9; 10; 9; 10; 11; 10; 11; 12]\n",(testsuite/tests/let-syntax/let_syntax.ml[120,1908+11]..[122,1980+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[124,1987+0]..[129,2073+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (testsuite/tests/let-syntax/let_syntax.ml[124,1987+4]..[124,1987+12])
          Ppat_var "bind_map" (testsuite/tests/let-syntax/let_syntax.ml[124,1987+4]..[124,1987+12])
        expression (testsuite/tests/let-syntax/let_syntax.ml[125,2002+2]..[129,2073+3])
          Pexp_open Fresh
          module_expr (testsuite/tests/let-syntax/let_syntax.ml[125,2002+2]..[125,2002+6])
            Pmod_ident "List" (testsuite/tests/let-syntax/let_syntax.ml[125,2002+2]..[125,2002+6])
          expression (testsuite/tests/let-syntax/let_syntax.ml[126,2011+4]..[128,2063+9])
            Pexp_letop
            <binding_op> "let*" (testsuite/tests/let-syntax/let_syntax.ml[126,2011+4]..[126,2011+8]) (testsuite/tests/let-syntax/let_syntax.ml[126,2011+4]..[128,2063+9])              pattern (testsuite/tests/let-syntax/let_syntax.ml[126,2011+9]..[126,2011+10])
                Ppat_var "x" (testsuite/tests/let-syntax/let_syntax.ml[126,2011+9]..[126,2011+10])
              expression (testsuite/tests/let-syntax/let_syntax.ml[126,2011+13]..[126,2011+22])
                Pexp_construct "::" (testsuite/tests/let-syntax/let_syntax.ml[126,2011+14]..[126,2011+22]) ghost
                Some
                  expression (testsuite/tests/let-syntax/let_syntax.ml[126,2011+14]..[126,2011+22]) ghost
                    Pexp_tuple
                    [
                      expression (testsuite/tests/let-syntax/let_syntax.ml[126,2011+14]..[126,2011+15])
                        Pexp_constant PConst_int (1,None)
                      expression (testsuite/tests/let-syntax/let_syntax.ml[126,2011+17]..[126,2011+22]) ghost
                        Pexp_construct "::" (testsuite/tests/let-syntax/let_syntax.ml[126,2011+17]..[126,2011+22]) ghost
                        Some
                          expression (testsuite/tests/let-syntax/let_syntax.ml[126,2011+17]..[126,2011+22]) ghost
                            Pexp_tuple
                            [
                              expression (testsuite/tests/let-syntax/let_syntax.ml[126,2011+17]..[126,2011+18])
                                Pexp_constant PConst_int (2,None)
                              expression (testsuite/tests/let-syntax/let_syntax.ml[126,2011+20]..[126,2011+22]) ghost
                                Pexp_construct "::" (testsuite/tests/let-syntax/let_syntax.ml[126,2011+20]..[126,2011+22]) ghost
                                Some
                                  expression (testsuite/tests/let-syntax/let_syntax.ml[126,2011+20]..[126,2011+22]) ghost
                                    Pexp_tuple
                                    [
                                      expression (testsuite/tests/let-syntax/let_syntax.ml[126,2011+20]..[126,2011+21])
                                        Pexp_constant PConst_int (3,None)
                                      expression (testsuite/tests/let-syntax/let_syntax.ml[126,2011+21]..[126,2011+22]) ghost
                                        Pexp_construct "[]" (testsuite/tests/let-syntax/let_syntax.ml[126,2011+21]..[126,2011+22]) ghost
                                        None
                                    ]
                            ]
                    ]
            []
            expression (testsuite/tests/let-syntax/let_syntax.ml[127,2037+4]..[128,2063+9])
              Pexp_letop
              <binding_op> "let+" (testsuite/tests/let-syntax/let_syntax.ml[127,2037+4]..[127,2037+8]) (testsuite/tests/let-syntax/let_syntax.ml[127,2037+4]..[128,2063+9])                pattern (testsuite/tests/let-syntax/let_syntax.ml[127,2037+9]..[127,2037+10])
                  Ppat_var "y" (testsuite/tests/let-syntax/let_syntax.ml[127,2037+9]..[127,2037+10])
                expression (testsuite/tests/let-syntax/let_syntax.ml[127,2037+13]..[127,2037+22])
                  Pexp_construct "::" (testsuite/tests/let-syntax/let_syntax.ml[127,2037+14]..[127,2037+22]) ghost
                  Some
                    expression (testsuite/tests/let-syntax/let_syntax.ml[127,2037+14]..[127,2037+22]) ghost
                      Pexp_tuple
                      [
                        expression (testsuite/tests/let-syntax/let_syntax.ml[127,2037+14]..[127,2037+15])
                          Pexp_constant PConst_int (7,None)
                        expression (testsuite/tests/let-syntax/let_syntax.ml[127,2037+17]..[127,2037+22]) ghost
                          Pexp_construct "::" (testsuite/tests/let-syntax/let_syntax.ml[127,2037+17]..[127,2037+22]) ghost
                          Some
                            expression (testsuite/tests/let-syntax/let_syntax.ml[127,2037+17]..[127,2037+22]) ghost
                              Pexp_tuple
                              [
                                expression (testsuite/tests/let-syntax/let_syntax.ml[127,2037+17]..[127,2037+18])
                                  Pexp_constant PConst_int (8,None)
                                expression (testsuite/tests/let-syntax/let_syntax.ml[127,2037+20]..[127,2037+22]) ghost
                                  Pexp_construct "::" (testsuite/tests/let-syntax/let_syntax.ml[127,2037+20]..[127,2037+22]) ghost
                                  Some
                                    expression (testsuite/tests/let-syntax/let_syntax.ml[127,2037+20]..[127,2037+22]) ghost
                                      Pexp_tuple
                                      [
                                        expression (testsuite/tests/let-syntax/let_syntax.ml[127,2037+20]..[127,2037+21])
                                          Pexp_constant PConst_int (9,None)
                                        expression (testsuite/tests/let-syntax/let_syntax.ml[127,2037+21]..[127,2037+22]) ghost
                                          Pexp_construct "[]" (testsuite/tests/let-syntax/let_syntax.ml[127,2037+21]..[127,2037+22]) ghost
                                          None
                                      ]
                              ]
                      ]
              []
              expression (testsuite/tests/let-syntax/let_syntax.ml[128,2063+4]..[128,2063+9])
                Pexp_apply
                expression (testsuite/tests/let-syntax/let_syntax.ml[128,2063+6]..[128,2063+7])
                  Pexp_ident "+" (testsuite/tests/let-syntax/let_syntax.ml[128,2063+6]..[128,2063+7])
                [
                  <arg>
                  Nolabel
                    expression (testsuite/tests/let-syntax/let_syntax.ml[128,2063+4]..[128,2063+5])
                      Pexp_ident "x" (testsuite/tests/let-syntax/let_syntax.ml[128,2063+4]..[128,2063+5])
                  <arg>
                  Nolabel
                    expression (testsuite/tests/let-syntax/let_syntax.ml[128,2063+8]..[128,2063+9])
                      Pexp_ident "y" (testsuite/tests/let-syntax/let_syntax.ml[128,2063+8]..[128,2063+9])
                ]
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[130,2079+0]..[132,2151+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[130,2079+9]..[132,2151+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[130,2079+9]..[132,2151+2])
          Pexp_constant PConst_string ("\nval bind_map : int list = [8; 9; 10; 9; 10; 11; 10; 11; 12]\n",(testsuite/tests/let-syntax/let_syntax.ml[130,2079+11]..[132,2151+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[134,2158+0]..[135,2186+3])
    Pstr_module
    "Let_unbound" (testsuite/tests/let-syntax/let_syntax.ml[134,2158+7]..[134,2158+18])
      module_expr (testsuite/tests/let-syntax/let_syntax.ml[134,2158+21]..[135,2186+3])
        Pmod_structure
        []
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[136,2192+0]..[138,2233+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[136,2192+9]..[138,2233+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[136,2192+9]..[138,2233+2])
          Pexp_constant PConst_string ("\nmodule Let_unbound : sig end\n",(testsuite/tests/let-syntax/let_syntax.ml[136,2192+11]..[138,2233+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[140,2240+0]..[144,2302+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (testsuite/tests/let-syntax/let_syntax.ml[140,2240+4]..[140,2240+15])
          Ppat_var "let_unbound" (testsuite/tests/let-syntax/let_syntax.ml[140,2240+4]..[140,2240+15])
        expression (testsuite/tests/let-syntax/let_syntax.ml[141,2258+2]..[144,2302+3])
          Pexp_open Fresh
          module_expr (testsuite/tests/let-syntax/let_syntax.ml[141,2258+2]..[141,2258+13])
            Pmod_ident "Let_unbound" (testsuite/tests/let-syntax/let_syntax.ml[141,2258+2]..[141,2258+13])
          expression (testsuite/tests/let-syntax/let_syntax.ml[142,2274+4]..[143,2292+9])
            Pexp_letop
            <binding_op> "let+" (testsuite/tests/let-syntax/let_syntax.ml[142,2274+4]..[142,2274+8]) (testsuite/tests/let-syntax/let_syntax.ml[142,2274+4]..[143,2292+9])              pattern (testsuite/tests/let-syntax/let_syntax.ml[142,2274+9]..[142,2274+10])
                Ppat_var "x" (testsuite/tests/let-syntax/let_syntax.ml[142,2274+9]..[142,2274+10])
              expression (testsuite/tests/let-syntax/let_syntax.ml[142,2274+13]..[142,2274+14])
                Pexp_constant PConst_int (1,None)
            []
            expression (testsuite/tests/let-syntax/let_syntax.ml[143,2292+4]..[143,2292+9])
              Pexp_apply
              expression (testsuite/tests/let-syntax/let_syntax.ml[143,2292+6]..[143,2292+7])
                Pexp_ident "+" (testsuite/tests/let-syntax/let_syntax.ml[143,2292+6]..[143,2292+7])
              [
                <arg>
                Nolabel
                  expression (testsuite/tests/let-syntax/let_syntax.ml[143,2292+4]..[143,2292+5])
                    Pexp_ident "x" (testsuite/tests/let-syntax/let_syntax.ml[143,2292+4]..[143,2292+5])
                <arg>
                Nolabel
                  expression (testsuite/tests/let-syntax/let_syntax.ml[143,2292+8]..[143,2292+9])
                    Pexp_ident "y" (testsuite/tests/let-syntax/let_syntax.ml[143,2292+8]..[143,2292+9])
              ]
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[145,2308+0]..[150,2405+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[145,2308+9]..[150,2405+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[145,2308+9]..[150,2405+2])
          Pexp_constant PConst_string ("\nLine 3, characters 4-8:\n3 |     let+ x = 1 in\n        ^^^^\nError: Unbound value let+\n",(testsuite/tests/let-syntax/let_syntax.ml[145,2308+11]..[150,2405+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[152,2412+0]..[154,2465+3])
    Pstr_module
    "And_unbound" (testsuite/tests/let-syntax/let_syntax.ml[152,2412+7]..[152,2412+18])
      module_expr (testsuite/tests/let-syntax/let_syntax.ml[152,2412+21]..[154,2465+3])
        Pmod_structure
        [
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[153,2440+2]..[153,2440+24])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[153,2440+6]..[153,2440+12])
                  Ppat_var "let+" (testsuite/tests/let-syntax/let_syntax.ml[153,2440+6]..[153,2440+12])
                expression (testsuite/tests/let-syntax/let_syntax.ml[153,2440+15]..[153,2440+24])
                  Pexp_ident "Id.let+" (testsuite/tests/let-syntax/let_syntax.ml[153,2440+15]..[153,2440+24])
            ]
        ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[155,2471+0]..[157,2550+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[155,2471+9]..[157,2550+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[155,2471+9]..[157,2550+2])
          Pexp_constant PConst_string ("\nmodule And_unbound : sig val ( let+ ) : 'a -> ('a -> 'b) -> 'b end\n",(testsuite/tests/let-syntax/let_syntax.ml[155,2471+11]..[157,2550+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[159,2557+0]..[164,2634+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (testsuite/tests/let-syntax/let_syntax.ml[159,2557+4]..[159,2557+15])
          Ppat_var "and_unbound" (testsuite/tests/let-syntax/let_syntax.ml[159,2557+4]..[159,2557+15])
        expression (testsuite/tests/let-syntax/let_syntax.ml[160,2575+2]..[164,2634+3])
          Pexp_open Fresh
          module_expr (testsuite/tests/let-syntax/let_syntax.ml[160,2575+2]..[160,2575+13])
            Pmod_ident "And_unbound" (testsuite/tests/let-syntax/let_syntax.ml[160,2575+2]..[160,2575+13])
          expression (testsuite/tests/let-syntax/let_syntax.ml[161,2591+4]..[163,2624+9])
            Pexp_letop
            <binding_op> "let+" (testsuite/tests/let-syntax/let_syntax.ml[161,2591+4]..[161,2591+8]) (testsuite/tests/let-syntax/let_syntax.ml[161,2591+4]..[163,2624+9])              pattern (testsuite/tests/let-syntax/let_syntax.ml[161,2591+9]..[161,2591+10])
                Ppat_var "x" (testsuite/tests/let-syntax/let_syntax.ml[161,2591+9]..[161,2591+10])
              expression (testsuite/tests/let-syntax/let_syntax.ml[161,2591+13]..[161,2591+14])
                Pexp_constant PConst_int (1,None)
            [
              <binding_op> "and+" (testsuite/tests/let-syntax/let_syntax.ml[162,2606+4]..[162,2606+8]) (testsuite/tests/let-syntax/let_syntax.ml[161,2591+9]..[162,2606+14])                pattern (testsuite/tests/let-syntax/let_syntax.ml[162,2606+9]..[162,2606+10])
                  Ppat_var "y" (testsuite/tests/let-syntax/let_syntax.ml[162,2606+9]..[162,2606+10])
                expression (testsuite/tests/let-syntax/let_syntax.ml[162,2606+13]..[162,2606+14])
                  Pexp_constant PConst_int (2,None)
            ]
            expression (testsuite/tests/let-syntax/let_syntax.ml[163,2624+4]..[163,2624+9])
              Pexp_apply
              expression (testsuite/tests/let-syntax/let_syntax.ml[163,2624+6]..[163,2624+7])
                Pexp_ident "+" (testsuite/tests/let-syntax/let_syntax.ml[163,2624+6]..[163,2624+7])
              [
                <arg>
                Nolabel
                  expression (testsuite/tests/let-syntax/let_syntax.ml[163,2624+4]..[163,2624+5])
                    Pexp_ident "x" (testsuite/tests/let-syntax/let_syntax.ml[163,2624+4]..[163,2624+5])
                <arg>
                Nolabel
                  expression (testsuite/tests/let-syntax/let_syntax.ml[163,2624+8]..[163,2624+9])
                    Pexp_ident "y" (testsuite/tests/let-syntax/let_syntax.ml[163,2624+8]..[163,2624+9])
              ]
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[165,2640+0]..[170,2737+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[165,2640+9]..[170,2737+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[165,2640+9]..[170,2737+2])
          Pexp_constant PConst_string ("\nLine 4, characters 4-8:\n4 |     and+ y = 2 in\n        ^^^^\nError: Unbound value and+\n",(testsuite/tests/let-syntax/let_syntax.ml[165,2640+11]..[170,2737+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[172,2744+0]..[176,2810+3])
    Pstr_module
    "Ill_typed_1" (testsuite/tests/let-syntax/let_syntax.ml[172,2744+7]..[172,2744+18])
      module_expr (testsuite/tests/let-syntax/let_syntax.ml[172,2744+21]..[176,2810+3])
        Pmod_structure
        [
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[174,2773+2]..[174,2773+35])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[174,2773+6]..[174,2773+12])
                  Ppat_var "let+" (testsuite/tests/let-syntax/let_syntax.ml[174,2773+6]..[174,2773+12])
                expression (testsuite/tests/let-syntax/let_syntax.ml[174,2773+15]..[174,2773+35])
                  Pexp_fun
                  Nolabel
                  None
                  pattern (testsuite/tests/let-syntax/let_syntax.ml[174,2773+19]..[174,2773+20])
                    Ppat_var "x" (testsuite/tests/let-syntax/let_syntax.ml[174,2773+19]..[174,2773+20])
                  expression (testsuite/tests/let-syntax/let_syntax.ml[174,2773+21]..[174,2773+35]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (testsuite/tests/let-syntax/let_syntax.ml[174,2773+21]..[174,2773+22])
                      Ppat_var "f" (testsuite/tests/let-syntax/let_syntax.ml[174,2773+21]..[174,2773+22])
                    expression (testsuite/tests/let-syntax/let_syntax.ml[174,2773+26]..[174,2773+35])
                      Pexp_apply
                      expression (testsuite/tests/let-syntax/let_syntax.ml[174,2773+26]..[174,2773+27])
                        Pexp_ident "f" (testsuite/tests/let-syntax/let_syntax.ml[174,2773+26]..[174,2773+27])
                      [
                        <arg>
                        Nolabel
                          expression (testsuite/tests/let-syntax/let_syntax.ml[174,2773+28]..[174,2773+35])
                            Pexp_apply
                            expression (testsuite/tests/let-syntax/let_syntax.ml[174,2773+29]..[174,2773+32])
                              Pexp_ident "not" (testsuite/tests/let-syntax/let_syntax.ml[174,2773+29]..[174,2773+32])
                            [
                              <arg>
                              Nolabel
                                expression (testsuite/tests/let-syntax/let_syntax.ml[174,2773+33]..[174,2773+34])
                                  Pexp_ident "x" (testsuite/tests/let-syntax/let_syntax.ml[174,2773+33]..[174,2773+34])
                            ]
                      ]
            ]
        ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[177,2816+0]..[179,2899+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[177,2816+9]..[179,2899+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[177,2816+9]..[179,2899+2])
          Pexp_constant PConst_string ("\nmodule Ill_typed_1 : sig val ( let+ ) : bool -> (bool -> 'a) -> 'a end\n",(testsuite/tests/let-syntax/let_syntax.ml[177,2816+11]..[179,2899+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[181,2906+0]..[185,2968+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (testsuite/tests/let-syntax/let_syntax.ml[181,2906+4]..[181,2906+15])
          Ppat_var "ill_typed_1" (testsuite/tests/let-syntax/let_syntax.ml[181,2906+4]..[181,2906+15])
        expression (testsuite/tests/let-syntax/let_syntax.ml[182,2924+2]..[185,2968+3])
          Pexp_open Fresh
          module_expr (testsuite/tests/let-syntax/let_syntax.ml[182,2924+2]..[182,2924+13])
            Pmod_ident "Ill_typed_1" (testsuite/tests/let-syntax/let_syntax.ml[182,2924+2]..[182,2924+13])
          expression (testsuite/tests/let-syntax/let_syntax.ml[183,2940+4]..[184,2958+9])
            Pexp_letop
            <binding_op> "let+" (testsuite/tests/let-syntax/let_syntax.ml[183,2940+4]..[183,2940+8]) (testsuite/tests/let-syntax/let_syntax.ml[183,2940+4]..[184,2958+9])              pattern (testsuite/tests/let-syntax/let_syntax.ml[183,2940+9]..[183,2940+10])
                Ppat_var "x" (testsuite/tests/let-syntax/let_syntax.ml[183,2940+9]..[183,2940+10])
              expression (testsuite/tests/let-syntax/let_syntax.ml[183,2940+13]..[183,2940+14])
                Pexp_constant PConst_int (1,None)
            []
            expression (testsuite/tests/let-syntax/let_syntax.ml[184,2958+4]..[184,2958+9])
              Pexp_apply
              expression (testsuite/tests/let-syntax/let_syntax.ml[184,2958+6]..[184,2958+7])
                Pexp_ident "+" (testsuite/tests/let-syntax/let_syntax.ml[184,2958+6]..[184,2958+7])
              [
                <arg>
                Nolabel
                  expression (testsuite/tests/let-syntax/let_syntax.ml[184,2958+4]..[184,2958+5])
                    Pexp_ident "x" (testsuite/tests/let-syntax/let_syntax.ml[184,2958+4]..[184,2958+5])
                <arg>
                Nolabel
                  expression (testsuite/tests/let-syntax/let_syntax.ml[184,2958+8]..[184,2958+9])
                    Pexp_ident "y" (testsuite/tests/let-syntax/let_syntax.ml[184,2958+8]..[184,2958+9])
              ]
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[186,2974+0]..[192,3142+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[186,2974+9]..[192,3142+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[186,2974+9]..[192,3142+2])
          Pexp_constant PConst_string ("\nLine 3, characters 13-14:\n3 |     let+ x = 1 in\n                 ^\nError: This expression has type int but an expression was expected of type\n         bool\n",(testsuite/tests/let-syntax/let_syntax.ml[186,2974+11]..[192,3142+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[194,3149+0]..[199,3241+3])
    Pstr_module
    "Ill_typed_2" (testsuite/tests/let-syntax/let_syntax.ml[194,3149+7]..[194,3149+18])
      module_expr (testsuite/tests/let-syntax/let_syntax.ml[194,3149+21]..[199,3241+3])
        Pmod_structure
        [
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[196,3178+2]..[196,3178+20])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[196,3178+6]..[196,3178+12])
                  Ppat_var "let+" (testsuite/tests/let-syntax/let_syntax.ml[196,3178+6]..[196,3178+12])
                expression (testsuite/tests/let-syntax/let_syntax.ml[196,3178+15]..[196,3178+20])
                  Pexp_ident "apply" (testsuite/tests/let-syntax/let_syntax.ml[196,3178+15]..[196,3178+20])
            ]
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[197,3199+2]..[197,3199+40])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[197,3199+6]..[197,3199+12])
                  Ppat_var "and+" (testsuite/tests/let-syntax/let_syntax.ml[197,3199+6]..[197,3199+12])
                expression (testsuite/tests/let-syntax/let_syntax.ml[197,3199+15]..[197,3199+40])
                  Pexp_fun
                  Nolabel
                  None
                  pattern (testsuite/tests/let-syntax/let_syntax.ml[197,3199+19]..[197,3199+20])
                    Ppat_var "x" (testsuite/tests/let-syntax/let_syntax.ml[197,3199+19]..[197,3199+20])
                  expression (testsuite/tests/let-syntax/let_syntax.ml[197,3199+21]..[197,3199+40]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (testsuite/tests/let-syntax/let_syntax.ml[197,3199+21]..[197,3199+22])
                      Ppat_var "y" (testsuite/tests/let-syntax/let_syntax.ml[197,3199+21]..[197,3199+22])
                    expression (testsuite/tests/let-syntax/let_syntax.ml[197,3199+26]..[197,3199+40])
                      Pexp_tuple
                      [
                        expression (testsuite/tests/let-syntax/let_syntax.ml[197,3199+26]..[197,3199+32])
                          Pexp_apply
                          expression (testsuite/tests/let-syntax/let_syntax.ml[197,3199+28]..[197,3199+30])
                            Pexp_ident "+." (testsuite/tests/let-syntax/let_syntax.ml[197,3199+28]..[197,3199+30])
                          [
                            <arg>
                            Nolabel
                              expression (testsuite/tests/let-syntax/let_syntax.ml[197,3199+26]..[197,3199+27])
                                Pexp_ident "x" (testsuite/tests/let-syntax/let_syntax.ml[197,3199+26]..[197,3199+27])
                            <arg>
                            Nolabel
                              expression (testsuite/tests/let-syntax/let_syntax.ml[197,3199+31]..[197,3199+32])
                                Pexp_ident "y" (testsuite/tests/let-syntax/let_syntax.ml[197,3199+31]..[197,3199+32])
                          ]
                        expression (testsuite/tests/let-syntax/let_syntax.ml[197,3199+34]..[197,3199+40])
                          Pexp_apply
                          expression (testsuite/tests/let-syntax/let_syntax.ml[197,3199+36]..[197,3199+38])
                            Pexp_ident "-." (testsuite/tests/let-syntax/let_syntax.ml[197,3199+36]..[197,3199+38])
                          [
                            <arg>
                            Nolabel
                              expression (testsuite/tests/let-syntax/let_syntax.ml[197,3199+34]..[197,3199+35])
                                Pexp_ident "x" (testsuite/tests/let-syntax/let_syntax.ml[197,3199+34]..[197,3199+35])
                            <arg>
                            Nolabel
                              expression (testsuite/tests/let-syntax/let_syntax.ml[197,3199+39]..[197,3199+40])
                                Pexp_ident "y" (testsuite/tests/let-syntax/let_syntax.ml[197,3199+39]..[197,3199+40])
                          ]
                      ]
            ]
        ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[200,3247+0]..[206,3385+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[200,3247+9]..[206,3385+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[200,3247+9]..[206,3385+2])
          Pexp_constant PConst_string ("\nmodule Ill_typed_2 :\n  sig\n    val ( let+ ) : 'a -> ('a -> 'b) -> 'b\n    val ( and+ ) : float -> float -> float * float\n  end\n",(testsuite/tests/let-syntax/let_syntax.ml[200,3247+11]..[206,3385+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[208,3392+0]..[213,3469+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (testsuite/tests/let-syntax/let_syntax.ml[208,3392+4]..[208,3392+15])
          Ppat_var "ill_typed_2" (testsuite/tests/let-syntax/let_syntax.ml[208,3392+4]..[208,3392+15])
        expression (testsuite/tests/let-syntax/let_syntax.ml[209,3410+2]..[213,3469+3])
          Pexp_open Fresh
          module_expr (testsuite/tests/let-syntax/let_syntax.ml[209,3410+2]..[209,3410+13])
            Pmod_ident "Ill_typed_2" (testsuite/tests/let-syntax/let_syntax.ml[209,3410+2]..[209,3410+13])
          expression (testsuite/tests/let-syntax/let_syntax.ml[210,3426+4]..[212,3459+9])
            Pexp_letop
            <binding_op> "let+" (testsuite/tests/let-syntax/let_syntax.ml[210,3426+4]..[210,3426+8]) (testsuite/tests/let-syntax/let_syntax.ml[210,3426+4]..[212,3459+9])              pattern (testsuite/tests/let-syntax/let_syntax.ml[210,3426+9]..[210,3426+10])
                Ppat_var "x" (testsuite/tests/let-syntax/let_syntax.ml[210,3426+9]..[210,3426+10])
              expression (testsuite/tests/let-syntax/let_syntax.ml[210,3426+13]..[210,3426+14])
                Pexp_constant PConst_int (1,None)
            [
              <binding_op> "and+" (testsuite/tests/let-syntax/let_syntax.ml[211,3441+4]..[211,3441+8]) (testsuite/tests/let-syntax/let_syntax.ml[210,3426+9]..[211,3441+14])                pattern (testsuite/tests/let-syntax/let_syntax.ml[211,3441+9]..[211,3441+10])
                  Ppat_var "y" (testsuite/tests/let-syntax/let_syntax.ml[211,3441+9]..[211,3441+10])
                expression (testsuite/tests/let-syntax/let_syntax.ml[211,3441+13]..[211,3441+14])
                  Pexp_constant PConst_int (2,None)
            ]
            expression (testsuite/tests/let-syntax/let_syntax.ml[212,3459+4]..[212,3459+9])
              Pexp_apply
              expression (testsuite/tests/let-syntax/let_syntax.ml[212,3459+6]..[212,3459+7])
                Pexp_ident "+" (testsuite/tests/let-syntax/let_syntax.ml[212,3459+6]..[212,3459+7])
              [
                <arg>
                Nolabel
                  expression (testsuite/tests/let-syntax/let_syntax.ml[212,3459+4]..[212,3459+5])
                    Pexp_ident "x" (testsuite/tests/let-syntax/let_syntax.ml[212,3459+4]..[212,3459+5])
                <arg>
                Nolabel
                  expression (testsuite/tests/let-syntax/let_syntax.ml[212,3459+8]..[212,3459+9])
                    Pexp_ident "y" (testsuite/tests/let-syntax/let_syntax.ml[212,3459+8]..[212,3459+9])
              ]
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[214,3475+0]..[221,3668+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[214,3475+9]..[221,3668+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[214,3475+9]..[221,3668+2])
          Pexp_constant PConst_string ("\nLine 3, characters 13-14:\n3 |     let+ x = 1\n                 ^\nError: This expression has type int but an expression was expected of type\n         float\n  Hint: Did you mean `1.'?\n",(testsuite/tests/let-syntax/let_syntax.ml[214,3475+11]..[221,3668+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[223,3675+0]..[227,3722+3])
    Pstr_module
    "Ill_typed_3" (testsuite/tests/let-syntax/let_syntax.ml[223,3675+7]..[223,3675+18])
      module_expr (testsuite/tests/let-syntax/let_syntax.ml[223,3675+21]..[227,3722+3])
        Pmod_structure
        [
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[225,3704+2]..[225,3704+16])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[225,3704+6]..[225,3704+12])
                  Ppat_var "let+" (testsuite/tests/let-syntax/let_syntax.ml[225,3704+6]..[225,3704+12])
                expression (testsuite/tests/let-syntax/let_syntax.ml[225,3704+15]..[225,3704+16])
                  Pexp_constant PConst_int (7,None)
            ]
        ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[228,3728+0]..[230,3788+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[228,3728+9]..[230,3788+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[228,3728+9]..[230,3788+2])
          Pexp_constant PConst_string ("\nmodule Ill_typed_3 : sig val ( let+ ) : int end\n",(testsuite/tests/let-syntax/let_syntax.ml[228,3728+11]..[230,3788+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[232,3795+0]..[236,3857+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (testsuite/tests/let-syntax/let_syntax.ml[232,3795+4]..[232,3795+15])
          Ppat_var "ill_typed_3" (testsuite/tests/let-syntax/let_syntax.ml[232,3795+4]..[232,3795+15])
        expression (testsuite/tests/let-syntax/let_syntax.ml[233,3813+2]..[236,3857+3])
          Pexp_open Fresh
          module_expr (testsuite/tests/let-syntax/let_syntax.ml[233,3813+2]..[233,3813+13])
            Pmod_ident "Ill_typed_3" (testsuite/tests/let-syntax/let_syntax.ml[233,3813+2]..[233,3813+13])
          expression (testsuite/tests/let-syntax/let_syntax.ml[234,3829+4]..[235,3847+9])
            Pexp_letop
            <binding_op> "let+" (testsuite/tests/let-syntax/let_syntax.ml[234,3829+4]..[234,3829+8]) (testsuite/tests/let-syntax/let_syntax.ml[234,3829+4]..[235,3847+9])              pattern (testsuite/tests/let-syntax/let_syntax.ml[234,3829+9]..[234,3829+10])
                Ppat_var "x" (testsuite/tests/let-syntax/let_syntax.ml[234,3829+9]..[234,3829+10])
              expression (testsuite/tests/let-syntax/let_syntax.ml[234,3829+13]..[234,3829+14])
                Pexp_constant PConst_int (1,None)
            []
            expression (testsuite/tests/let-syntax/let_syntax.ml[235,3847+4]..[235,3847+9])
              Pexp_apply
              expression (testsuite/tests/let-syntax/let_syntax.ml[235,3847+6]..[235,3847+7])
                Pexp_ident "+" (testsuite/tests/let-syntax/let_syntax.ml[235,3847+6]..[235,3847+7])
              [
                <arg>
                Nolabel
                  expression (testsuite/tests/let-syntax/let_syntax.ml[235,3847+4]..[235,3847+5])
                    Pexp_ident "x" (testsuite/tests/let-syntax/let_syntax.ml[235,3847+4]..[235,3847+5])
                <arg>
                Nolabel
                  expression (testsuite/tests/let-syntax/let_syntax.ml[235,3847+8]..[235,3847+9])
                    Pexp_ident "y" (testsuite/tests/let-syntax/let_syntax.ml[235,3847+8]..[235,3847+9])
              ]
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[237,3863+0]..[243,4037+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[237,3863+9]..[243,4037+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[237,3863+9]..[243,4037+2])
          Pexp_constant PConst_string ("\nLine 3, characters 4-8:\n3 |     let+ x = 1 in\n        ^^^^\nError: The operator let+ has type int but it was expected to have type\n         'a -> ('b -> 'c) -> 'd\n",(testsuite/tests/let-syntax/let_syntax.ml[237,3863+11]..[243,4037+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[245,4044+0]..[250,4114+3])
    Pstr_module
    "Ill_typed_4" (testsuite/tests/let-syntax/let_syntax.ml[245,4044+7]..[245,4044+18])
      module_expr (testsuite/tests/let-syntax/let_syntax.ml[245,4044+21]..[250,4114+3])
        Pmod_structure
        [
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[247,4073+2]..[247,4073+20])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[247,4073+6]..[247,4073+12])
                  Ppat_var "let+" (testsuite/tests/let-syntax/let_syntax.ml[247,4073+6]..[247,4073+12])
                expression (testsuite/tests/let-syntax/let_syntax.ml[247,4073+15]..[247,4073+20])
                  Pexp_ident "apply" (testsuite/tests/let-syntax/let_syntax.ml[247,4073+15]..[247,4073+20])
            ]
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[248,4094+2]..[248,4094+18])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[248,4094+6]..[248,4094+12])
                  Ppat_var "and+" (testsuite/tests/let-syntax/let_syntax.ml[248,4094+6]..[248,4094+12])
                expression (testsuite/tests/let-syntax/let_syntax.ml[248,4094+15]..[248,4094+18])
                  Pexp_ident "not" (testsuite/tests/let-syntax/let_syntax.ml[248,4094+15]..[248,4094+18])
            ]
        ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[251,4120+0]..[254,4229+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[251,4120+9]..[254,4229+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[251,4120+9]..[254,4229+2])
          Pexp_constant PConst_string ("\nmodule Ill_typed_4 :\n  sig val ( let+ ) : 'a -> ('a -> 'b) -> 'b val ( and+ ) : bool -> bool end\n",(testsuite/tests/let-syntax/let_syntax.ml[251,4120+11]..[254,4229+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[256,4236+0]..[261,4313+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (testsuite/tests/let-syntax/let_syntax.ml[256,4236+4]..[256,4236+15])
          Ppat_var "ill_typed_4" (testsuite/tests/let-syntax/let_syntax.ml[256,4236+4]..[256,4236+15])
        expression (testsuite/tests/let-syntax/let_syntax.ml[257,4254+2]..[261,4313+3])
          Pexp_open Fresh
          module_expr (testsuite/tests/let-syntax/let_syntax.ml[257,4254+2]..[257,4254+13])
            Pmod_ident "Ill_typed_4" (testsuite/tests/let-syntax/let_syntax.ml[257,4254+2]..[257,4254+13])
          expression (testsuite/tests/let-syntax/let_syntax.ml[258,4270+4]..[260,4303+9])
            Pexp_letop
            <binding_op> "let+" (testsuite/tests/let-syntax/let_syntax.ml[258,4270+4]..[258,4270+8]) (testsuite/tests/let-syntax/let_syntax.ml[258,4270+4]..[260,4303+9])              pattern (testsuite/tests/let-syntax/let_syntax.ml[258,4270+9]..[258,4270+10])
                Ppat_var "x" (testsuite/tests/let-syntax/let_syntax.ml[258,4270+9]..[258,4270+10])
              expression (testsuite/tests/let-syntax/let_syntax.ml[258,4270+13]..[258,4270+14])
                Pexp_constant PConst_int (1,None)
            [
              <binding_op> "and+" (testsuite/tests/let-syntax/let_syntax.ml[259,4285+4]..[259,4285+8]) (testsuite/tests/let-syntax/let_syntax.ml[258,4270+9]..[259,4285+14])                pattern (testsuite/tests/let-syntax/let_syntax.ml[259,4285+9]..[259,4285+10])
                  Ppat_var "y" (testsuite/tests/let-syntax/let_syntax.ml[259,4285+9]..[259,4285+10])
                expression (testsuite/tests/let-syntax/let_syntax.ml[259,4285+13]..[259,4285+14])
                  Pexp_constant PConst_int (2,None)
            ]
            expression (testsuite/tests/let-syntax/let_syntax.ml[260,4303+4]..[260,4303+9])
              Pexp_apply
              expression (testsuite/tests/let-syntax/let_syntax.ml[260,4303+6]..[260,4303+7])
                Pexp_ident "+" (testsuite/tests/let-syntax/let_syntax.ml[260,4303+6]..[260,4303+7])
              [
                <arg>
                Nolabel
                  expression (testsuite/tests/let-syntax/let_syntax.ml[260,4303+4]..[260,4303+5])
                    Pexp_ident "x" (testsuite/tests/let-syntax/let_syntax.ml[260,4303+4]..[260,4303+5])
                <arg>
                Nolabel
                  expression (testsuite/tests/let-syntax/let_syntax.ml[260,4303+8]..[260,4303+9])
                    Pexp_ident "y" (testsuite/tests/let-syntax/let_syntax.ml[260,4303+8]..[260,4303+9])
              ]
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[262,4319+0]..[269,4548+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[262,4319+9]..[269,4548+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[262,4319+9]..[269,4548+2])
          Pexp_constant PConst_string ("\nLine 4, characters 4-8:\n4 |     and+ y = 2 in\n        ^^^^\nError: The operator and+ has type bool -> bool\n       but it was expected to have type bool -> 'a -> 'b\n       Type bool is not compatible with type 'a -> 'b\n",(testsuite/tests/let-syntax/let_syntax.ml[262,4319+11]..[269,4548+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[271,4555+0]..[276,4639+3])
    Pstr_module
    "Ill_typed_5" (testsuite/tests/let-syntax/let_syntax.ml[271,4555+7]..[271,4555+18])
      module_expr (testsuite/tests/let-syntax/let_syntax.ml[271,4555+21]..[276,4639+3])
        Pmod_structure
        [
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[273,4584+2]..[273,4584+33])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[273,4584+6]..[273,4584+12])
                  Ppat_var "let+" (testsuite/tests/let-syntax/let_syntax.ml[273,4584+6]..[273,4584+12])
                expression (testsuite/tests/let-syntax/let_syntax.ml[273,4584+15]..[273,4584+33])
                  Pexp_fun
                  Nolabel
                  None
                  pattern (testsuite/tests/let-syntax/let_syntax.ml[273,4584+20]..[273,4584+21])
                    Ppat_var "x" (testsuite/tests/let-syntax/let_syntax.ml[273,4584+20]..[273,4584+21])
                  expression (testsuite/tests/let-syntax/let_syntax.ml[273,4584+22]..[273,4584+32]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (testsuite/tests/let-syntax/let_syntax.ml[273,4584+22]..[273,4584+23])
                      Ppat_var "f" (testsuite/tests/let-syntax/let_syntax.ml[273,4584+22]..[273,4584+23])
                    expression (testsuite/tests/let-syntax/let_syntax.ml[273,4584+27]..[273,4584+32])
                      Pexp_apply
                      expression (testsuite/tests/let-syntax/let_syntax.ml[273,4584+27]..[273,4584+30])
                        Pexp_ident "not" (testsuite/tests/let-syntax/let_syntax.ml[273,4584+27]..[273,4584+30])
                      [
                        <arg>
                        Nolabel
                          expression (testsuite/tests/let-syntax/let_syntax.ml[273,4584+31]..[273,4584+32])
                            Pexp_ident "x" (testsuite/tests/let-syntax/let_syntax.ml[273,4584+31]..[273,4584+32])
                      ]
            ]
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[274,4618+2]..[274,4618+19])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[274,4618+6]..[274,4618+12])
                  Ppat_var "and+" (testsuite/tests/let-syntax/let_syntax.ml[274,4618+6]..[274,4618+12])
                expression (testsuite/tests/let-syntax/let_syntax.ml[274,4618+15]..[274,4618+19])
                  Pexp_ident "pair" (testsuite/tests/let-syntax/let_syntax.ml[274,4618+15]..[274,4618+19])
            ]
        ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[277,4645+0]..[283,4767+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[277,4645+9]..[283,4767+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[277,4645+9]..[283,4767+2])
          Pexp_constant PConst_string ("\nmodule Ill_typed_5 :\n  sig\n    val ( let+ ) : bool -> 'a -> bool\n    val ( and+ ) : 'a -> 'b -> 'a * 'b\n  end\n",(testsuite/tests/let-syntax/let_syntax.ml[277,4645+11]..[283,4767+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[285,4774+0]..[291,4870+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (testsuite/tests/let-syntax/let_syntax.ml[285,4774+4]..[285,4774+15])
          Ppat_var "ill_typed_5" (testsuite/tests/let-syntax/let_syntax.ml[285,4774+4]..[285,4774+15])
        expression (testsuite/tests/let-syntax/let_syntax.ml[286,4792+2]..[291,4870+3])
          Pexp_open Fresh
          module_expr (testsuite/tests/let-syntax/let_syntax.ml[286,4792+2]..[286,4792+13])
            Pmod_ident "Ill_typed_5" (testsuite/tests/let-syntax/let_syntax.ml[286,4792+2]..[286,4792+13])
          expression (testsuite/tests/let-syntax/let_syntax.ml[287,4808+4]..[290,4856+13])
            Pexp_letop
            <binding_op> "let+" (testsuite/tests/let-syntax/let_syntax.ml[287,4808+4]..[287,4808+8]) (testsuite/tests/let-syntax/let_syntax.ml[287,4808+4]..[290,4856+13])              pattern (testsuite/tests/let-syntax/let_syntax.ml[287,4808+9]..[287,4808+10])
                Ppat_var "x" (testsuite/tests/let-syntax/let_syntax.ml[287,4808+9]..[287,4808+10])
              expression (testsuite/tests/let-syntax/let_syntax.ml[287,4808+13]..[287,4808+14])
                Pexp_constant PConst_int (1,None)
            [
              <binding_op> "and+" (testsuite/tests/let-syntax/let_syntax.ml[288,4823+4]..[288,4823+8]) (testsuite/tests/let-syntax/let_syntax.ml[287,4808+9]..[288,4823+14])                pattern (testsuite/tests/let-syntax/let_syntax.ml[288,4823+9]..[288,4823+10])
                  Ppat_var "y" (testsuite/tests/let-syntax/let_syntax.ml[288,4823+9]..[288,4823+10])
                expression (testsuite/tests/let-syntax/let_syntax.ml[288,4823+13]..[288,4823+14])
                  Pexp_constant PConst_int (2,None)
              <binding_op> "and+" (testsuite/tests/let-syntax/let_syntax.ml[289,4838+4]..[289,4838+8]) (testsuite/tests/let-syntax/let_syntax.ml[287,4808+9]..[289,4838+14])                pattern (testsuite/tests/let-syntax/let_syntax.ml[289,4838+9]..[289,4838+10])
                  Ppat_var "z" (testsuite/tests/let-syntax/let_syntax.ml[289,4838+9]..[289,4838+10])
                expression (testsuite/tests/let-syntax/let_syntax.ml[289,4838+13]..[289,4838+14])
                  Pexp_constant PConst_int (3,None)
            ]
            expression (testsuite/tests/let-syntax/let_syntax.ml[290,4856+4]..[290,4856+13])
              Pexp_apply
              expression (testsuite/tests/let-syntax/let_syntax.ml[290,4856+10]..[290,4856+11])
                Pexp_ident "+" (testsuite/tests/let-syntax/let_syntax.ml[290,4856+10]..[290,4856+11])
              [
                <arg>
                Nolabel
                  expression (testsuite/tests/let-syntax/let_syntax.ml[290,4856+4]..[290,4856+9])
                    Pexp_apply
                    expression (testsuite/tests/let-syntax/let_syntax.ml[290,4856+6]..[290,4856+7])
                      Pexp_ident "+" (testsuite/tests/let-syntax/let_syntax.ml[290,4856+6]..[290,4856+7])
                    [
                      <arg>
                      Nolabel
                        expression (testsuite/tests/let-syntax/let_syntax.ml[290,4856+4]..[290,4856+5])
                          Pexp_ident "x" (testsuite/tests/let-syntax/let_syntax.ml[290,4856+4]..[290,4856+5])
                      <arg>
                      Nolabel
                        expression (testsuite/tests/let-syntax/let_syntax.ml[290,4856+8]..[290,4856+9])
                          Pexp_ident "y" (testsuite/tests/let-syntax/let_syntax.ml[290,4856+8]..[290,4856+9])
                    ]
                <arg>
                Nolabel
                  expression (testsuite/tests/let-syntax/let_syntax.ml[290,4856+12]..[290,4856+13])
                    Pexp_ident "z" (testsuite/tests/let-syntax/let_syntax.ml[290,4856+12]..[290,4856+13])
              ]
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[292,4876+0]..[299,5073+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[292,4876+9]..[299,5073+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[292,4876+9]..[299,5073+2])
          Pexp_constant PConst_string ("\nLines 3-5, characters 9-14:\n3 | .........x = 1\n4 |     and+ y = 2\n5 |     and+ z = 3...\nError: These bindings have type (int * int) * int\n       but bindings were expected of type bool\n",(testsuite/tests/let-syntax/let_syntax.ml[292,4876+11]..[299,5073+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[301,5080+0]..[306,5166+3])
    Pstr_module
    "Ill_typed_6" (testsuite/tests/let-syntax/let_syntax.ml[301,5080+7]..[301,5080+18])
      module_expr (testsuite/tests/let-syntax/let_syntax.ml[301,5080+21]..[306,5166+3])
        Pmod_structure
        [
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[303,5109+2]..[303,5109+20])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[303,5109+6]..[303,5109+12])
                  Ppat_var "let+" (testsuite/tests/let-syntax/let_syntax.ml[303,5109+6]..[303,5109+12])
                expression (testsuite/tests/let-syntax/let_syntax.ml[303,5109+15]..[303,5109+20])
                  Pexp_ident "apply" (testsuite/tests/let-syntax/let_syntax.ml[303,5109+15]..[303,5109+20])
            ]
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[304,5130+2]..[304,5130+34])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[304,5130+6]..[304,5130+12])
                  Ppat_var "and+" (testsuite/tests/let-syntax/let_syntax.ml[304,5130+6]..[304,5130+12])
                expression (testsuite/tests/let-syntax/let_syntax.ml[304,5130+15]..[304,5130+34])
                  Pexp_fun
                  Nolabel
                  None
                  pattern (testsuite/tests/let-syntax/let_syntax.ml[304,5130+19]..[304,5130+20])
                    Ppat_var "x" (testsuite/tests/let-syntax/let_syntax.ml[304,5130+19]..[304,5130+20])
                  expression (testsuite/tests/let-syntax/let_syntax.ml[304,5130+21]..[304,5130+34]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (testsuite/tests/let-syntax/let_syntax.ml[304,5130+21]..[304,5130+22])
                      Ppat_var "y" (testsuite/tests/let-syntax/let_syntax.ml[304,5130+21]..[304,5130+22])
                    expression (testsuite/tests/let-syntax/let_syntax.ml[304,5130+26]..[304,5130+34])
                      Pexp_tuple
                      [
                        expression (testsuite/tests/let-syntax/let_syntax.ml[304,5130+26]..[304,5130+31])
                          Pexp_apply
                          expression (testsuite/tests/let-syntax/let_syntax.ml[304,5130+28]..[304,5130+29])
                            Pexp_ident "+" (testsuite/tests/let-syntax/let_syntax.ml[304,5130+28]..[304,5130+29])
                          [
                            <arg>
                            Nolabel
                              expression (testsuite/tests/let-syntax/let_syntax.ml[304,5130+26]..[304,5130+27])
                                Pexp_ident "x" (testsuite/tests/let-syntax/let_syntax.ml[304,5130+26]..[304,5130+27])
                            <arg>
                            Nolabel
                              expression (testsuite/tests/let-syntax/let_syntax.ml[304,5130+30]..[304,5130+31])
                                Pexp_constant PConst_int (1,None)
                          ]
                        expression (testsuite/tests/let-syntax/let_syntax.ml[304,5130+33]..[304,5130+34])
                          Pexp_ident "y" (testsuite/tests/let-syntax/let_syntax.ml[304,5130+33]..[304,5130+34])
                      ]
            ]
        ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[307,5172+0]..[313,5300+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[307,5172+9]..[313,5300+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[307,5172+9]..[313,5300+2])
          Pexp_constant PConst_string ("\nmodule Ill_typed_6 :\n  sig\n    val ( let+ ) : 'a -> ('a -> 'b) -> 'b\n    val ( and+ ) : int -> 'a -> int * 'a\n  end\n",(testsuite/tests/let-syntax/let_syntax.ml[307,5172+11]..[313,5300+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[315,5307+0]..[321,5403+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (testsuite/tests/let-syntax/let_syntax.ml[315,5307+4]..[315,5307+15])
          Ppat_var "ill_typed_6" (testsuite/tests/let-syntax/let_syntax.ml[315,5307+4]..[315,5307+15])
        expression (testsuite/tests/let-syntax/let_syntax.ml[316,5325+2]..[321,5403+3])
          Pexp_open Fresh
          module_expr (testsuite/tests/let-syntax/let_syntax.ml[316,5325+2]..[316,5325+13])
            Pmod_ident "Ill_typed_6" (testsuite/tests/let-syntax/let_syntax.ml[316,5325+2]..[316,5325+13])
          expression (testsuite/tests/let-syntax/let_syntax.ml[317,5341+4]..[320,5389+13])
            Pexp_letop
            <binding_op> "let+" (testsuite/tests/let-syntax/let_syntax.ml[317,5341+4]..[317,5341+8]) (testsuite/tests/let-syntax/let_syntax.ml[317,5341+4]..[320,5389+13])              pattern (testsuite/tests/let-syntax/let_syntax.ml[317,5341+9]..[317,5341+10])
                Ppat_var "x" (testsuite/tests/let-syntax/let_syntax.ml[317,5341+9]..[317,5341+10])
              expression (testsuite/tests/let-syntax/let_syntax.ml[317,5341+13]..[317,5341+14])
                Pexp_constant PConst_int (1,None)
            [
              <binding_op> "and+" (testsuite/tests/let-syntax/let_syntax.ml[318,5356+4]..[318,5356+8]) (testsuite/tests/let-syntax/let_syntax.ml[317,5341+9]..[318,5356+14])                pattern (testsuite/tests/let-syntax/let_syntax.ml[318,5356+9]..[318,5356+10])
                  Ppat_var "y" (testsuite/tests/let-syntax/let_syntax.ml[318,5356+9]..[318,5356+10])
                expression (testsuite/tests/let-syntax/let_syntax.ml[318,5356+13]..[318,5356+14])
                  Pexp_constant PConst_int (2,None)
              <binding_op> "and+" (testsuite/tests/let-syntax/let_syntax.ml[319,5371+4]..[319,5371+8]) (testsuite/tests/let-syntax/let_syntax.ml[317,5341+9]..[319,5371+14])                pattern (testsuite/tests/let-syntax/let_syntax.ml[319,5371+9]..[319,5371+10])
                  Ppat_var "z" (testsuite/tests/let-syntax/let_syntax.ml[319,5371+9]..[319,5371+10])
                expression (testsuite/tests/let-syntax/let_syntax.ml[319,5371+13]..[319,5371+14])
                  Pexp_constant PConst_int (3,None)
            ]
            expression (testsuite/tests/let-syntax/let_syntax.ml[320,5389+4]..[320,5389+13])
              Pexp_apply
              expression (testsuite/tests/let-syntax/let_syntax.ml[320,5389+10]..[320,5389+11])
                Pexp_ident "+" (testsuite/tests/let-syntax/let_syntax.ml[320,5389+10]..[320,5389+11])
              [
                <arg>
                Nolabel
                  expression (testsuite/tests/let-syntax/let_syntax.ml[320,5389+4]..[320,5389+9])
                    Pexp_apply
                    expression (testsuite/tests/let-syntax/let_syntax.ml[320,5389+6]..[320,5389+7])
                      Pexp_ident "+" (testsuite/tests/let-syntax/let_syntax.ml[320,5389+6]..[320,5389+7])
                    [
                      <arg>
                      Nolabel
                        expression (testsuite/tests/let-syntax/let_syntax.ml[320,5389+4]..[320,5389+5])
                          Pexp_ident "x" (testsuite/tests/let-syntax/let_syntax.ml[320,5389+4]..[320,5389+5])
                      <arg>
                      Nolabel
                        expression (testsuite/tests/let-syntax/let_syntax.ml[320,5389+8]..[320,5389+9])
                          Pexp_ident "y" (testsuite/tests/let-syntax/let_syntax.ml[320,5389+8]..[320,5389+9])
                    ]
                <arg>
                Nolabel
                  expression (testsuite/tests/let-syntax/let_syntax.ml[320,5389+12]..[320,5389+13])
                    Pexp_ident "z" (testsuite/tests/let-syntax/let_syntax.ml[320,5389+12]..[320,5389+13])
              ]
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[322,5409+0]..[328,5577+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[322,5409+9]..[328,5577+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[322,5409+9]..[328,5577+2])
          Pexp_constant PConst_string ("\nLines 3-4, characters 9-14:\n3 | .........x = 1\n4 |     and+ y = 2\nError: These bindings have type int * int but bindings were expected of type\n         int\n",(testsuite/tests/let-syntax/let_syntax.ml[322,5409+11]..[328,5577+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[331,5585+0]..[336,5664+3])
    Pstr_module
    "Ill_typed_7" (testsuite/tests/let-syntax/let_syntax.ml[331,5585+7]..[331,5585+18])
      module_expr (testsuite/tests/let-syntax/let_syntax.ml[331,5585+21]..[336,5664+3])
        Pmod_structure
        [
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[333,5614+2]..[333,5614+28])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[333,5614+6]..[333,5614+12])
                  Ppat_var "let+" (testsuite/tests/let-syntax/let_syntax.ml[333,5614+6]..[333,5614+12])
                expression (testsuite/tests/let-syntax/let_syntax.ml[333,5614+13]..[333,5614+28]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (testsuite/tests/let-syntax/let_syntax.ml[333,5614+13]..[333,5614+14])
                    Ppat_var "f" (testsuite/tests/let-syntax/let_syntax.ml[333,5614+13]..[333,5614+14])
                  expression (testsuite/tests/let-syntax/let_syntax.ml[333,5614+15]..[333,5614+28]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (testsuite/tests/let-syntax/let_syntax.ml[333,5614+15]..[333,5614+16])
                      Ppat_var "x" (testsuite/tests/let-syntax/let_syntax.ml[333,5614+15]..[333,5614+16])
                    expression (testsuite/tests/let-syntax/let_syntax.ml[333,5614+19]..[333,5614+28])
                      Pexp_apply
                      expression (testsuite/tests/let-syntax/let_syntax.ml[333,5614+19]..[333,5614+20])
                        Pexp_ident "f" (testsuite/tests/let-syntax/let_syntax.ml[333,5614+19]..[333,5614+20])
                      [
                        <arg>
                        Nolabel
                          expression (testsuite/tests/let-syntax/let_syntax.ml[333,5614+21]..[333,5614+28])
                            Pexp_apply
                            expression (testsuite/tests/let-syntax/let_syntax.ml[333,5614+24]..[333,5614+25])
                              Pexp_ident "+" (testsuite/tests/let-syntax/let_syntax.ml[333,5614+24]..[333,5614+25])
                            [
                              <arg>
                              Nolabel
                                expression (testsuite/tests/let-syntax/let_syntax.ml[333,5614+22]..[333,5614+23])
                                  Pexp_ident "x" (testsuite/tests/let-syntax/let_syntax.ml[333,5614+22]..[333,5614+23])
                              <arg>
                              Nolabel
                                expression (testsuite/tests/let-syntax/let_syntax.ml[333,5614+26]..[333,5614+27])
                                  Pexp_constant PConst_int (1,None)
                            ]
                      ]
            ]
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[334,5643+2]..[334,5643+19])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[334,5643+6]..[334,5643+12])
                  Ppat_var "and+" (testsuite/tests/let-syntax/let_syntax.ml[334,5643+6]..[334,5643+12])
                expression (testsuite/tests/let-syntax/let_syntax.ml[334,5643+15]..[334,5643+19])
                  Pexp_ident "pair" (testsuite/tests/let-syntax/let_syntax.ml[334,5643+15]..[334,5643+19])
            ]
        ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[337,5670+0]..[343,5798+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[337,5670+9]..[343,5798+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[337,5670+9]..[343,5798+2])
          Pexp_constant PConst_string ("\nmodule Ill_typed_7 :\n  sig\n    val ( let+ ) : (int -> 'a) -> int -> 'a\n    val ( and+ ) : 'a -> 'b -> 'a * 'b\n  end\n",(testsuite/tests/let-syntax/let_syntax.ml[337,5670+11]..[343,5798+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[345,5805+0]..[350,5882+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (testsuite/tests/let-syntax/let_syntax.ml[345,5805+4]..[345,5805+15])
          Ppat_var "ill_typed_7" (testsuite/tests/let-syntax/let_syntax.ml[345,5805+4]..[345,5805+15])
        expression (testsuite/tests/let-syntax/let_syntax.ml[346,5823+2]..[350,5882+3])
          Pexp_open Fresh
          module_expr (testsuite/tests/let-syntax/let_syntax.ml[346,5823+2]..[346,5823+13])
            Pmod_ident "Ill_typed_7" (testsuite/tests/let-syntax/let_syntax.ml[346,5823+2]..[346,5823+13])
          expression (testsuite/tests/let-syntax/let_syntax.ml[347,5839+4]..[349,5872+9])
            Pexp_letop
            <binding_op> "let+" (testsuite/tests/let-syntax/let_syntax.ml[347,5839+4]..[347,5839+8]) (testsuite/tests/let-syntax/let_syntax.ml[347,5839+4]..[349,5872+9])              pattern (testsuite/tests/let-syntax/let_syntax.ml[347,5839+9]..[347,5839+10])
                Ppat_var "x" (testsuite/tests/let-syntax/let_syntax.ml[347,5839+9]..[347,5839+10])
              expression (testsuite/tests/let-syntax/let_syntax.ml[347,5839+13]..[347,5839+14])
                Pexp_constant PConst_int (1,None)
            [
              <binding_op> "and+" (testsuite/tests/let-syntax/let_syntax.ml[348,5854+4]..[348,5854+8]) (testsuite/tests/let-syntax/let_syntax.ml[347,5839+9]..[348,5854+14])                pattern (testsuite/tests/let-syntax/let_syntax.ml[348,5854+9]..[348,5854+10])
                  Ppat_var "y" (testsuite/tests/let-syntax/let_syntax.ml[348,5854+9]..[348,5854+10])
                expression (testsuite/tests/let-syntax/let_syntax.ml[348,5854+13]..[348,5854+14])
                  Pexp_constant PConst_int (2,None)
            ]
            expression (testsuite/tests/let-syntax/let_syntax.ml[349,5872+4]..[349,5872+9])
              Pexp_apply
              expression (testsuite/tests/let-syntax/let_syntax.ml[349,5872+6]..[349,5872+7])
                Pexp_ident "+" (testsuite/tests/let-syntax/let_syntax.ml[349,5872+6]..[349,5872+7])
              [
                <arg>
                Nolabel
                  expression (testsuite/tests/let-syntax/let_syntax.ml[349,5872+4]..[349,5872+5])
                    Pexp_ident "x" (testsuite/tests/let-syntax/let_syntax.ml[349,5872+4]..[349,5872+5])
                <arg>
                Nolabel
                  expression (testsuite/tests/let-syntax/let_syntax.ml[349,5872+8]..[349,5872+9])
                    Pexp_ident "y" (testsuite/tests/let-syntax/let_syntax.ml[349,5872+8]..[349,5872+9])
              ]
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[351,5888+0]..[358,6150+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[351,5888+9]..[358,6150+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[351,5888+9]..[358,6150+2])
          Pexp_constant PConst_string ("\nLine 3, characters 4-8:\n3 |     let+ x = 1\n        ^^^^\nError: The operator let+ has type (int -> 'a) -> int -> 'a\n       but it was expected to have type (int -> 'a) -> ('b * 'c -> 'd) -> 'e\n       Type int is not compatible with type 'b * 'c -> 'd\n",(testsuite/tests/let-syntax/let_syntax.ml[351,5888+11]..[358,6150+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[360,6157+0]..[419,7883+3])
    Pstr_module
    "Indexed_monad" (testsuite/tests/let-syntax/let_syntax.ml[360,6157+7]..[360,6157+20])
      module_expr (testsuite/tests/let-syntax/let_syntax.ml[360,6157+23]..[419,7883+3])
        Pmod_structure
        [
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[362,6188+2]..[362,6188+30])
            Pstr_type Rec
            [
              type_declaration "opened" (testsuite/tests/let-syntax/let_syntax.ml[362,6188+7]..[362,6188+13]) (testsuite/tests/let-syntax/let_syntax.ml[362,6188+2]..[362,6188+30])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_variant
                    [
                      (testsuite/tests/let-syntax/let_syntax.ml[362,6188+24]..[362,6188+30])
                        "Opened" (testsuite/tests/let-syntax/let_syntax.ml[362,6188+24]..[362,6188+30])
                        []
                        None
                    ]
                ptype_private = Private
                ptype_manifest =
                  None
            ]
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[363,6219+2]..[363,6219+30])
            Pstr_type Rec
            [
              type_declaration "closed" (testsuite/tests/let-syntax/let_syntax.ml[363,6219+7]..[363,6219+13]) (testsuite/tests/let-syntax/let_syntax.ml[363,6219+2]..[363,6219+30])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_variant
                    [
                      (testsuite/tests/let-syntax/let_syntax.ml[363,6219+24]..[363,6219+30])
                        "Closed" (testsuite/tests/let-syntax/let_syntax.ml[363,6219+24]..[363,6219+30])
                        []
                        None
                    ]
                ptype_private = Private
                ptype_manifest =
                  None
            ]
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[365,6251+2]..[372,6609+38])
            Pstr_type Rec
            [
              type_declaration "t" (testsuite/tests/let-syntax/let_syntax.ml[365,6251+17]..[365,6251+18]) (testsuite/tests/let-syntax/let_syntax.ml[365,6251+2]..[372,6609+38])
                ptype_params =
                  [
                    core_type (testsuite/tests/let-syntax/let_syntax.ml[365,6251+8]..[365,6251+9])
                      Ptyp_any
                    core_type (testsuite/tests/let-syntax/let_syntax.ml[365,6251+11]..[365,6251+12])
                      Ptyp_any
                    core_type (testsuite/tests/let-syntax/let_syntax.ml[365,6251+14]..[365,6251+15])
                      Ptyp_any
                  ]
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_variant
                    [
                      (testsuite/tests/let-syntax/let_syntax.ml[366,6272+4]..[366,6272+35])
                        "Return" (testsuite/tests/let-syntax/let_syntax.ml[366,6272+6]..[366,6272+12])
                        [
                          core_type (testsuite/tests/let-syntax/let_syntax.ml[366,6272+15]..[366,6272+17])
                            Ptyp_var a
                        ]
                        Some
                          core_type (testsuite/tests/let-syntax/let_syntax.ml[366,6272+21]..[366,6272+35])
                            Ptyp_constr "t" (testsuite/tests/let-syntax/let_syntax.ml[366,6272+34]..[366,6272+35])
                            [
                              core_type (testsuite/tests/let-syntax/let_syntax.ml[366,6272+22]..[366,6272+24])
                                Ptyp_var s
                              core_type (testsuite/tests/let-syntax/let_syntax.ml[366,6272+26]..[366,6272+28])
                                Ptyp_var s
                              core_type (testsuite/tests/let-syntax/let_syntax.ml[366,6272+30]..[366,6272+32])
                                Ptyp_var a
                            ]
                      (testsuite/tests/let-syntax/let_syntax.ml[367,6308+4]..[367,6308+61])
                        "Map" (testsuite/tests/let-syntax/let_syntax.ml[367,6308+6]..[367,6308+9])
                        [
                          core_type (testsuite/tests/let-syntax/let_syntax.ml[367,6308+12]..[367,6308+28])
                            Ptyp_constr "t" (testsuite/tests/let-syntax/let_syntax.ml[367,6308+27]..[367,6308+28])
                            [
                              core_type (testsuite/tests/let-syntax/let_syntax.ml[367,6308+13]..[367,6308+16])
                                Ptyp_var s1
                              core_type (testsuite/tests/let-syntax/let_syntax.ml[367,6308+18]..[367,6308+21])
                                Ptyp_var s2
                              core_type (testsuite/tests/let-syntax/let_syntax.ml[367,6308+23]..[367,6308+25])
                                Ptyp_var a
                            ]
                          core_type (testsuite/tests/let-syntax/let_syntax.ml[367,6308+32]..[367,6308+40])
                            Ptyp_arrow
                            Nolabel
                            core_type (testsuite/tests/let-syntax/let_syntax.ml[367,6308+32]..[367,6308+34])
                              Ptyp_var a
                            core_type (testsuite/tests/let-syntax/let_syntax.ml[367,6308+38]..[367,6308+40])
                              Ptyp_var b
                        ]
                        Some
                          core_type (testsuite/tests/let-syntax/let_syntax.ml[367,6308+45]..[367,6308+61])
                            Ptyp_constr "t" (testsuite/tests/let-syntax/let_syntax.ml[367,6308+60]..[367,6308+61])
                            [
                              core_type (testsuite/tests/let-syntax/let_syntax.ml[367,6308+46]..[367,6308+49])
                                Ptyp_var s1
                              core_type (testsuite/tests/let-syntax/let_syntax.ml[367,6308+51]..[367,6308+54])
                                Ptyp_var s2
                              core_type (testsuite/tests/let-syntax/let_syntax.ml[367,6308+56]..[367,6308+58])
                                Ptyp_var b
                            ]
                      (testsuite/tests/let-syntax/let_syntax.ml[368,6370+4]..[368,6370+73])
                        "Both" (testsuite/tests/let-syntax/let_syntax.ml[368,6370+6]..[368,6370+10])
                        [
                          core_type (testsuite/tests/let-syntax/let_syntax.ml[368,6370+13]..[368,6370+29])
                            Ptyp_constr "t" (testsuite/tests/let-syntax/let_syntax.ml[368,6370+28]..[368,6370+29])
                            [
                              core_type (testsuite/tests/let-syntax/let_syntax.ml[368,6370+14]..[368,6370+17])
                                Ptyp_var s1
                              core_type (testsuite/tests/let-syntax/let_syntax.ml[368,6370+19]..[368,6370+22])
                                Ptyp_var s2
                              core_type (testsuite/tests/let-syntax/let_syntax.ml[368,6370+24]..[368,6370+26])
                                Ptyp_var a
                            ]
                          core_type (testsuite/tests/let-syntax/let_syntax.ml[368,6370+32]..[368,6370+48])
                            Ptyp_constr "t" (testsuite/tests/let-syntax/let_syntax.ml[368,6370+47]..[368,6370+48])
                            [
                              core_type (testsuite/tests/let-syntax/let_syntax.ml[368,6370+33]..[368,6370+36])
                                Ptyp_var s2
                              core_type (testsuite/tests/let-syntax/let_syntax.ml[368,6370+38]..[368,6370+41])
                                Ptyp_var s3
                              core_type (testsuite/tests/let-syntax/let_syntax.ml[368,6370+43]..[368,6370+45])
                                Ptyp_var b
                            ]
                        ]
                        Some
                          core_type (testsuite/tests/let-syntax/let_syntax.ml[368,6370+52]..[368,6370+73])
                            Ptyp_constr "t" (testsuite/tests/let-syntax/let_syntax.ml[368,6370+72]..[368,6370+73])
                            [
                              core_type (testsuite/tests/let-syntax/let_syntax.ml[368,6370+53]..[368,6370+56])
                                Ptyp_var s1
                              core_type (testsuite/tests/let-syntax/let_syntax.ml[368,6370+58]..[368,6370+61])
                                Ptyp_var s3
                              core_type (testsuite/tests/let-syntax/let_syntax.ml[368,6370+63]..[368,6370+70])
                                Ptyp_tuple
                                [
                                  core_type (testsuite/tests/let-syntax/let_syntax.ml[368,6370+63]..[368,6370+65])
                                    Ptyp_var a
                                  core_type (testsuite/tests/let-syntax/let_syntax.ml[368,6370+68]..[368,6370+70])
                                    Ptyp_var b
                                ]
                            ]
                      (testsuite/tests/let-syntax/let_syntax.ml[369,6444+4]..[369,6444+76])
                        "Bind" (testsuite/tests/let-syntax/let_syntax.ml[369,6444+6]..[369,6444+10])
                        [
                          core_type (testsuite/tests/let-syntax/let_syntax.ml[369,6444+13]..[369,6444+29])
                            Ptyp_constr "t" (testsuite/tests/let-syntax/let_syntax.ml[369,6444+28]..[369,6444+29])
                            [
                              core_type (testsuite/tests/let-syntax/let_syntax.ml[369,6444+14]..[369,6444+17])
                                Ptyp_var s1
                              core_type (testsuite/tests/let-syntax/let_syntax.ml[369,6444+19]..[369,6444+22])
                                Ptyp_var s2
                              core_type (testsuite/tests/let-syntax/let_syntax.ml[369,6444+24]..[369,6444+26])
                                Ptyp_var a
                            ]
                          core_type (testsuite/tests/let-syntax/let_syntax.ml[369,6444+33]..[369,6444+55])
                            Ptyp_arrow
                            Nolabel
                            core_type (testsuite/tests/let-syntax/let_syntax.ml[369,6444+33]..[369,6444+35])
                              Ptyp_var a
                            core_type (testsuite/tests/let-syntax/let_syntax.ml[369,6444+39]..[369,6444+55])
                              Ptyp_constr "t" (testsuite/tests/let-syntax/let_syntax.ml[369,6444+54]..[369,6444+55])
                              [
                                core_type (testsuite/tests/let-syntax/let_syntax.ml[369,6444+40]..[369,6444+43])
                                  Ptyp_var s2
                                core_type (testsuite/tests/let-syntax/let_syntax.ml[369,6444+45]..[369,6444+48])
                                  Ptyp_var s3
                                core_type (testsuite/tests/let-syntax/let_syntax.ml[369,6444+50]..[369,6444+52])
                                  Ptyp_var b
                              ]
                        ]
                        Some
                          core_type (testsuite/tests/let-syntax/let_syntax.ml[369,6444+60]..[369,6444+76])
                            Ptyp_constr "t" (testsuite/tests/let-syntax/let_syntax.ml[369,6444+75]..[369,6444+76])
                            [
                              core_type (testsuite/tests/let-syntax/let_syntax.ml[369,6444+61]..[369,6444+64])
                                Ptyp_var s1
                              core_type (testsuite/tests/let-syntax/let_syntax.ml[369,6444+66]..[369,6444+69])
                                Ptyp_var s3
                              core_type (testsuite/tests/let-syntax/let_syntax.ml[369,6444+71]..[369,6444+73])
                                Ptyp_var b
                            ]
                      (testsuite/tests/let-syntax/let_syntax.ml[370,6521+4]..[370,6521+47])
                        "Open" (testsuite/tests/let-syntax/let_syntax.ml[370,6521+6]..[370,6521+10])
                        [
                          core_type (testsuite/tests/let-syntax/let_syntax.ml[370,6521+13]..[370,6521+19])
                            Ptyp_constr "string" (testsuite/tests/let-syntax/let_syntax.ml[370,6521+13]..[370,6521+19])
                            []
                        ]
                        Some
                          core_type (testsuite/tests/let-syntax/let_syntax.ml[370,6521+23]..[370,6521+47])
                            Ptyp_constr "t" (testsuite/tests/let-syntax/let_syntax.ml[370,6521+46]..[370,6521+47])
                            [
                              core_type (testsuite/tests/let-syntax/let_syntax.ml[370,6521+24]..[370,6521+30])
                                Ptyp_constr "closed" (testsuite/tests/let-syntax/let_syntax.ml[370,6521+24]..[370,6521+30])
                                []
                              core_type (testsuite/tests/let-syntax/let_syntax.ml[370,6521+32]..[370,6521+38])
                                Ptyp_constr "opened" (testsuite/tests/let-syntax/let_syntax.ml[370,6521+32]..[370,6521+38])
                                []
                              core_type (testsuite/tests/let-syntax/let_syntax.ml[370,6521+40]..[370,6521+44])
                                Ptyp_constr "unit" (testsuite/tests/let-syntax/let_syntax.ml[370,6521+40]..[370,6521+44])
                                []
                            ]
                      (testsuite/tests/let-syntax/let_syntax.ml[371,6569+4]..[371,6569+39])
                        "Read" (testsuite/tests/let-syntax/let_syntax.ml[371,6569+6]..[371,6569+10])
                        []
                        Some
                          core_type (testsuite/tests/let-syntax/let_syntax.ml[371,6569+13]..[371,6569+39])
                            Ptyp_constr "t" (testsuite/tests/let-syntax/let_syntax.ml[371,6569+38]..[371,6569+39])
                            [
                              core_type (testsuite/tests/let-syntax/let_syntax.ml[371,6569+14]..[371,6569+20])
                                Ptyp_constr "opened" (testsuite/tests/let-syntax/let_syntax.ml[371,6569+14]..[371,6569+20])
                                []
                              core_type (testsuite/tests/let-syntax/let_syntax.ml[371,6569+22]..[371,6569+28])
                                Ptyp_constr "opened" (testsuite/tests/let-syntax/let_syntax.ml[371,6569+22]..[371,6569+28])
                                []
                              core_type (testsuite/tests/let-syntax/let_syntax.ml[371,6569+30]..[371,6569+36])
                                Ptyp_constr "string" (testsuite/tests/let-syntax/let_syntax.ml[371,6569+30]..[371,6569+36])
                                []
                            ]
                      (testsuite/tests/let-syntax/let_syntax.ml[372,6609+4]..[372,6609+38])
                        "Close" (testsuite/tests/let-syntax/let_syntax.ml[372,6609+6]..[372,6609+11])
                        []
                        Some
                          core_type (testsuite/tests/let-syntax/let_syntax.ml[372,6609+14]..[372,6609+38])
                            Ptyp_constr "t" (testsuite/tests/let-syntax/let_syntax.ml[372,6609+37]..[372,6609+38])
                            [
                              core_type (testsuite/tests/let-syntax/let_syntax.ml[372,6609+15]..[372,6609+21])
                                Ptyp_constr "opened" (testsuite/tests/let-syntax/let_syntax.ml[372,6609+15]..[372,6609+21])
                                []
                              core_type (testsuite/tests/let-syntax/let_syntax.ml[372,6609+23]..[372,6609+29])
                                Ptyp_constr "closed" (testsuite/tests/let-syntax/let_syntax.ml[372,6609+23]..[372,6609+29])
                                []
                              core_type (testsuite/tests/let-syntax/let_syntax.ml[372,6609+31]..[372,6609+35])
                                Ptyp_constr "unit" (testsuite/tests/let-syntax/let_syntax.ml[372,6609+31]..[372,6609+35])
                                []
                            ]
                    ]
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[374,6649+2]..[374,6649+25])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[374,6649+6]..[374,6649+12])
                  Ppat_var "return" (testsuite/tests/let-syntax/let_syntax.ml[374,6649+6]..[374,6649+12])
                expression (testsuite/tests/let-syntax/let_syntax.ml[374,6649+13]..[374,6649+25]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (testsuite/tests/let-syntax/let_syntax.ml[374,6649+13]..[374,6649+14])
                    Ppat_var "x" (testsuite/tests/let-syntax/let_syntax.ml[374,6649+13]..[374,6649+14])
                  expression (testsuite/tests/let-syntax/let_syntax.ml[374,6649+17]..[374,6649+25])
                    Pexp_construct "Return" (testsuite/tests/let-syntax/let_syntax.ml[374,6649+17]..[374,6649+23])
                    Some
                      expression (testsuite/tests/let-syntax/let_syntax.ml[374,6649+24]..[374,6649+25])
                        Pexp_ident "x" (testsuite/tests/let-syntax/let_syntax.ml[374,6649+24]..[374,6649+25])
            ]
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[375,6675+2]..[375,6675+25])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[375,6675+6]..[375,6675+9])
                  Ppat_var "map" (testsuite/tests/let-syntax/let_syntax.ml[375,6675+6]..[375,6675+9])
                expression (testsuite/tests/let-syntax/let_syntax.ml[375,6675+10]..[375,6675+25]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (testsuite/tests/let-syntax/let_syntax.ml[375,6675+10]..[375,6675+11])
                    Ppat_var "m" (testsuite/tests/let-syntax/let_syntax.ml[375,6675+10]..[375,6675+11])
                  expression (testsuite/tests/let-syntax/let_syntax.ml[375,6675+12]..[375,6675+25]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (testsuite/tests/let-syntax/let_syntax.ml[375,6675+12]..[375,6675+13])
                      Ppat_var "f" (testsuite/tests/let-syntax/let_syntax.ml[375,6675+12]..[375,6675+13])
                    expression (testsuite/tests/let-syntax/let_syntax.ml[375,6675+16]..[375,6675+25])
                      Pexp_construct "Map" (testsuite/tests/let-syntax/let_syntax.ml[375,6675+16]..[375,6675+19])
                      Some
                        expression (testsuite/tests/let-syntax/let_syntax.ml[375,6675+19]..[375,6675+25])
                          Pexp_tuple
                          [
                            expression (testsuite/tests/let-syntax/let_syntax.ml[375,6675+20]..[375,6675+21])
                              Pexp_ident "m" (testsuite/tests/let-syntax/let_syntax.ml[375,6675+20]..[375,6675+21])
                            expression (testsuite/tests/let-syntax/let_syntax.ml[375,6675+23]..[375,6675+24])
                              Pexp_ident "f" (testsuite/tests/let-syntax/let_syntax.ml[375,6675+23]..[375,6675+24])
                          ]
            ]
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[376,6701+2]..[376,6701+31])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[376,6701+6]..[376,6701+10])
                  Ppat_var "both" (testsuite/tests/let-syntax/let_syntax.ml[376,6701+6]..[376,6701+10])
                expression (testsuite/tests/let-syntax/let_syntax.ml[376,6701+11]..[376,6701+31]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (testsuite/tests/let-syntax/let_syntax.ml[376,6701+11]..[376,6701+13])
                    Ppat_var "m1" (testsuite/tests/let-syntax/let_syntax.ml[376,6701+11]..[376,6701+13])
                  expression (testsuite/tests/let-syntax/let_syntax.ml[376,6701+14]..[376,6701+31]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (testsuite/tests/let-syntax/let_syntax.ml[376,6701+14]..[376,6701+16])
                      Ppat_var "m2" (testsuite/tests/let-syntax/let_syntax.ml[376,6701+14]..[376,6701+16])
                    expression (testsuite/tests/let-syntax/let_syntax.ml[376,6701+19]..[376,6701+31])
                      Pexp_construct "Both" (testsuite/tests/let-syntax/let_syntax.ml[376,6701+19]..[376,6701+23])
                      Some
                        expression (testsuite/tests/let-syntax/let_syntax.ml[376,6701+23]..[376,6701+31])
                          Pexp_tuple
                          [
                            expression (testsuite/tests/let-syntax/let_syntax.ml[376,6701+24]..[376,6701+26])
                              Pexp_ident "m1" (testsuite/tests/let-syntax/let_syntax.ml[376,6701+24]..[376,6701+26])
                            expression (testsuite/tests/let-syntax/let_syntax.ml[376,6701+28]..[376,6701+30])
                              Pexp_ident "m2" (testsuite/tests/let-syntax/let_syntax.ml[376,6701+28]..[376,6701+30])
                          ]
            ]
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[377,6733+2]..[377,6733+27])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[377,6733+6]..[377,6733+10])
                  Ppat_var "bind" (testsuite/tests/let-syntax/let_syntax.ml[377,6733+6]..[377,6733+10])
                expression (testsuite/tests/let-syntax/let_syntax.ml[377,6733+11]..[377,6733+27]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (testsuite/tests/let-syntax/let_syntax.ml[377,6733+11]..[377,6733+12])
                    Ppat_var "m" (testsuite/tests/let-syntax/let_syntax.ml[377,6733+11]..[377,6733+12])
                  expression (testsuite/tests/let-syntax/let_syntax.ml[377,6733+13]..[377,6733+27]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (testsuite/tests/let-syntax/let_syntax.ml[377,6733+13]..[377,6733+14])
                      Ppat_var "f" (testsuite/tests/let-syntax/let_syntax.ml[377,6733+13]..[377,6733+14])
                    expression (testsuite/tests/let-syntax/let_syntax.ml[377,6733+17]..[377,6733+27])
                      Pexp_construct "Bind" (testsuite/tests/let-syntax/let_syntax.ml[377,6733+17]..[377,6733+21])
                      Some
                        expression (testsuite/tests/let-syntax/let_syntax.ml[377,6733+21]..[377,6733+27])
                          Pexp_tuple
                          [
                            expression (testsuite/tests/let-syntax/let_syntax.ml[377,6733+22]..[377,6733+23])
                              Pexp_ident "m" (testsuite/tests/let-syntax/let_syntax.ml[377,6733+22]..[377,6733+23])
                            expression (testsuite/tests/let-syntax/let_syntax.ml[377,6733+25]..[377,6733+26])
                              Pexp_ident "f" (testsuite/tests/let-syntax/let_syntax.ml[377,6733+25]..[377,6733+26])
                          ]
            ]
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[378,6761+2]..[378,6761+22])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[378,6761+6]..[378,6761+11])
                  Ppat_var "open_" (testsuite/tests/let-syntax/let_syntax.ml[378,6761+6]..[378,6761+11])
                expression (testsuite/tests/let-syntax/let_syntax.ml[378,6761+12]..[378,6761+22]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (testsuite/tests/let-syntax/let_syntax.ml[378,6761+12]..[378,6761+13])
                    Ppat_var "s" (testsuite/tests/let-syntax/let_syntax.ml[378,6761+12]..[378,6761+13])
                  expression (testsuite/tests/let-syntax/let_syntax.ml[378,6761+16]..[378,6761+22])
                    Pexp_construct "Open" (testsuite/tests/let-syntax/let_syntax.ml[378,6761+16]..[378,6761+20])
                    Some
                      expression (testsuite/tests/let-syntax/let_syntax.ml[378,6761+21]..[378,6761+22])
                        Pexp_ident "s" (testsuite/tests/let-syntax/let_syntax.ml[378,6761+21]..[378,6761+22])
            ]
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[379,6784+2]..[379,6784+17])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[379,6784+6]..[379,6784+10])
                  Ppat_var "read" (testsuite/tests/let-syntax/let_syntax.ml[379,6784+6]..[379,6784+10])
                expression (testsuite/tests/let-syntax/let_syntax.ml[379,6784+13]..[379,6784+17])
                  Pexp_construct "Read" (testsuite/tests/let-syntax/let_syntax.ml[379,6784+13]..[379,6784+17])
                  None
            ]
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[380,6802+2]..[380,6802+19])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[380,6802+6]..[380,6802+11])
                  Ppat_var "close" (testsuite/tests/let-syntax/let_syntax.ml[380,6802+6]..[380,6802+11])
                expression (testsuite/tests/let-syntax/let_syntax.ml[380,6802+14]..[380,6802+19])
                  Pexp_construct "Close" (testsuite/tests/let-syntax/let_syntax.ml[380,6802+14]..[380,6802+19])
                  None
            ]
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[382,6823+2]..[384,6883+27])
            Pstr_type Rec
            [
              type_declaration "state" (testsuite/tests/let-syntax/let_syntax.ml[382,6823+10]..[382,6823+15]) (testsuite/tests/let-syntax/let_syntax.ml[382,6823+2]..[384,6883+27])
                ptype_params =
                  [
                    core_type (testsuite/tests/let-syntax/let_syntax.ml[382,6823+7]..[382,6823+9])
                      Ptyp_var a
                  ]
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_variant
                    [
                      (testsuite/tests/let-syntax/let_syntax.ml[383,6841+4]..[383,6841+41])
                        "Opened" (testsuite/tests/let-syntax/let_syntax.ml[383,6841+6]..[383,6841+12])
                        [
                          core_type (testsuite/tests/let-syntax/let_syntax.ml[383,6841+15]..[383,6841+25])
                            Ptyp_constr "in_channel" (testsuite/tests/let-syntax/let_syntax.ml[383,6841+15]..[383,6841+25])
                            []
                        ]
                        Some
                          core_type (testsuite/tests/let-syntax/let_syntax.ml[383,6841+29]..[383,6841+41])
                            Ptyp_constr "state" (testsuite/tests/let-syntax/let_syntax.ml[383,6841+36]..[383,6841+41])
                            [
                              core_type (testsuite/tests/let-syntax/let_syntax.ml[383,6841+29]..[383,6841+35])
                                Ptyp_constr "opened" (testsuite/tests/let-syntax/let_syntax.ml[383,6841+29]..[383,6841+35])
                                []
                            ]
                      (testsuite/tests/let-syntax/let_syntax.ml[384,6883+4]..[384,6883+27])
                        "Closed" (testsuite/tests/let-syntax/let_syntax.ml[384,6883+6]..[384,6883+12])
                        []
                        Some
                          core_type (testsuite/tests/let-syntax/let_syntax.ml[384,6883+15]..[384,6883+27])
                            Ptyp_constr "state" (testsuite/tests/let-syntax/let_syntax.ml[384,6883+22]..[384,6883+27])
                            [
                              core_type (testsuite/tests/let-syntax/let_syntax.ml[384,6883+15]..[384,6883+21])
                                Ptyp_constr "closed" (testsuite/tests/let-syntax/let_syntax.ml[384,6883+15]..[384,6883+21])
                                []
                            ]
                    ]
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[386,6912+2]..[412,7783+10])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[386,6912+6]..[386,6912+9])
                  Ppat_var "run" (testsuite/tests/let-syntax/let_syntax.ml[386,6912+6]..[386,6912+9])
                expression (testsuite/tests/let-syntax/let_syntax.ml[386,6912+10]..[412,7783+10])
                  Pexp_newtype "a"
                  expression (testsuite/tests/let-syntax/let_syntax.ml[386,6912+19]..[412,7783+10]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (testsuite/tests/let-syntax/let_syntax.ml[386,6912+19]..[386,6912+46])
                      Ppat_constraint
                      pattern (testsuite/tests/let-syntax/let_syntax.ml[386,6912+20]..[386,6912+21])
                        Ppat_var "m" (testsuite/tests/let-syntax/let_syntax.ml[386,6912+20]..[386,6912+21])
                      core_type (testsuite/tests/let-syntax/let_syntax.ml[386,6912+24]..[386,6912+45])
                        Ptyp_constr "t" (testsuite/tests/let-syntax/let_syntax.ml[386,6912+44]..[386,6912+45])
                        [
                          core_type (testsuite/tests/let-syntax/let_syntax.ml[386,6912+25]..[386,6912+31])
                            Ptyp_constr "closed" (testsuite/tests/let-syntax/let_syntax.ml[386,6912+25]..[386,6912+31])
                            []
                          core_type (testsuite/tests/let-syntax/let_syntax.ml[386,6912+33]..[386,6912+39])
                            Ptyp_constr "closed" (testsuite/tests/let-syntax/let_syntax.ml[386,6912+33]..[386,6912+39])
                            []
                          core_type (testsuite/tests/let-syntax/let_syntax.ml[386,6912+41]..[386,6912+42])
                            Ptyp_constr "a" (testsuite/tests/let-syntax/let_syntax.ml[386,6912+41]..[386,6912+42])
                            []
                        ]
                    expression (testsuite/tests/let-syntax/let_syntax.ml[386,6912+47]..[412,7783+10])
                      Pexp_constraint
                      expression (testsuite/tests/let-syntax/let_syntax.ml[387,6965+4]..[412,7783+10])
                        Pexp_let Rec
                        [
                          <def>
                            pattern (testsuite/tests/let-syntax/let_syntax.ml[387,6965+12]..[387,6965+74]) ghost
                              Ppat_constraint
                              pattern (testsuite/tests/let-syntax/let_syntax.ml[387,6965+12]..[387,6965+16])
                                Ppat_var "loop" (testsuite/tests/let-syntax/let_syntax.ml[387,6965+12]..[387,6965+16])
                              core_type (testsuite/tests/let-syntax/let_syntax.ml[387,6965+12]..[409,7711+22]) ghost
                                Ptyp_poly 'a 's1 's2
                                core_type (testsuite/tests/let-syntax/let_syntax.ml[387,6965+33]..[387,6965+74])
                                  Ptyp_arrow
                                  Nolabel
                                  core_type (testsuite/tests/let-syntax/let_syntax.ml[387,6965+33]..[387,6965+41])
                                    Ptyp_constr "state" (testsuite/tests/let-syntax/let_syntax.ml[387,6965+36]..[387,6965+41])
                                    [
                                      core_type (testsuite/tests/let-syntax/let_syntax.ml[387,6965+33]..[387,6965+35])
                                        Ptyp_var s1
                                    ]
                                  core_type (testsuite/tests/let-syntax/let_syntax.ml[387,6965+45]..[387,6965+74])
                                    Ptyp_arrow
                                    Nolabel
                                    core_type (testsuite/tests/let-syntax/let_syntax.ml[387,6965+45]..[387,6965+58])
                                      Ptyp_constr "t" (testsuite/tests/let-syntax/let_syntax.ml[387,6965+57]..[387,6965+58])
                                      [
                                        core_type (testsuite/tests/let-syntax/let_syntax.ml[387,6965+46]..[387,6965+48])
                                          Ptyp_var s1
                                        core_type (testsuite/tests/let-syntax/let_syntax.ml[387,6965+50]..[387,6965+52])
                                          Ptyp_var s2
                                        core_type (testsuite/tests/let-syntax/let_syntax.ml[387,6965+54]..[387,6965+55])
                                          Ptyp_var a
                                      ]
                                    core_type (testsuite/tests/let-syntax/let_syntax.ml[387,6965+62]..[387,6965+74])
                                      Ptyp_tuple
                                      [
                                        core_type (testsuite/tests/let-syntax/let_syntax.ml[387,6965+62]..[387,6965+70])
                                          Ptyp_constr "state" (testsuite/tests/let-syntax/let_syntax.ml[387,6965+65]..[387,6965+70])
                                          [
                                            core_type (testsuite/tests/let-syntax/let_syntax.ml[387,6965+62]..[387,6965+64])
                                              Ptyp_var s2
                                          ]
                                        core_type (testsuite/tests/let-syntax/let_syntax.ml[387,6965+73]..[387,6965+74])
                                          Ptyp_var a
                                      ]
                            expression (testsuite/tests/let-syntax/let_syntax.ml[387,6965+12]..[409,7711+22])
                              Pexp_newtype "a"
                              expression (testsuite/tests/let-syntax/let_syntax.ml[387,6965+12]..[409,7711+22])
                                Pexp_newtype "s1"
                                expression (testsuite/tests/let-syntax/let_syntax.ml[387,6965+12]..[409,7711+22])
                                  Pexp_newtype "s2"
                                  expression (testsuite/tests/let-syntax/let_syntax.ml[387,6965+12]..[409,7711+22])
                                    Pexp_constraint
                                    expression (testsuite/tests/let-syntax/let_syntax.ml[388,7042+6]..[409,7711+22])
                                      Pexp_fun
                                      Nolabel
                                      None
                                      pattern (testsuite/tests/let-syntax/let_syntax.ml[388,7042+10]..[388,7042+15])
                                        Ppat_var "state" (testsuite/tests/let-syntax/let_syntax.ml[388,7042+10]..[388,7042+15])
                                      expression (testsuite/tests/let-syntax/let_syntax.ml[388,7042+16]..[409,7711+22]) ghost
                                        Pexp_fun
                                        Nolabel
                                        None
                                        pattern (testsuite/tests/let-syntax/let_syntax.ml[388,7042+16]..[388,7042+17])
                                          Ppat_var "m" (testsuite/tests/let-syntax/let_syntax.ml[388,7042+16]..[388,7042+17])
                                        expression (testsuite/tests/let-syntax/let_syntax.ml[389,7063+8]..[409,7711+22])
                                          Pexp_match
                                          expression (testsuite/tests/let-syntax/let_syntax.ml[389,7063+14]..[389,7063+22])
                                            Pexp_tuple
                                            [
                                              expression (testsuite/tests/let-syntax/let_syntax.ml[389,7063+14]..[389,7063+15])
                                                Pexp_ident "m" (testsuite/tests/let-syntax/let_syntax.ml[389,7063+14]..[389,7063+15])
                                              expression (testsuite/tests/let-syntax/let_syntax.ml[389,7063+17]..[389,7063+22])
                                                Pexp_ident "state" (testsuite/tests/let-syntax/let_syntax.ml[389,7063+17]..[389,7063+22])
                                            ]
                                          [
                                            <case>
                                              pattern (testsuite/tests/let-syntax/let_syntax.ml[390,7091+10]..[390,7091+21])
                                                Ppat_tuple
                                                [
                                                  pattern (testsuite/tests/let-syntax/let_syntax.ml[390,7091+10]..[390,7091+18])
                                                    Ppat_construct "Return" (testsuite/tests/let-syntax/let_syntax.ml[390,7091+10]..[390,7091+16])
                                                    Some
                                                      []
                                                      pattern (testsuite/tests/let-syntax/let_syntax.ml[390,7091+17]..[390,7091+18])
                                                        Ppat_var "x" (testsuite/tests/let-syntax/let_syntax.ml[390,7091+17]..[390,7091+18])
                                                  pattern (testsuite/tests/let-syntax/let_syntax.ml[390,7091+20]..[390,7091+21])
                                                    Ppat_any
                                                ]
                                              expression (testsuite/tests/let-syntax/let_syntax.ml[390,7091+25]..[390,7091+33])
                                                Pexp_tuple
                                                [
                                                  expression (testsuite/tests/let-syntax/let_syntax.ml[390,7091+25]..[390,7091+30])
                                                    Pexp_ident "state" (testsuite/tests/let-syntax/let_syntax.ml[390,7091+25]..[390,7091+30])
                                                  expression (testsuite/tests/let-syntax/let_syntax.ml[390,7091+32]..[390,7091+33])
                                                    Pexp_ident "x" (testsuite/tests/let-syntax/let_syntax.ml[390,7091+32]..[390,7091+33])
                                                ]
                                            <case>
                                              pattern (testsuite/tests/let-syntax/let_syntax.ml[391,7125+10]..[391,7125+22])
                                                Ppat_tuple
                                                [
                                                  pattern (testsuite/tests/let-syntax/let_syntax.ml[391,7125+10]..[391,7125+19])
                                                    Ppat_construct "Map" (testsuite/tests/let-syntax/let_syntax.ml[391,7125+10]..[391,7125+13])
                                                    Some
                                                      []
                                                      pattern (testsuite/tests/let-syntax/let_syntax.ml[391,7125+13]..[391,7125+19])
                                                        Ppat_tuple
                                                        [
                                                          pattern (testsuite/tests/let-syntax/let_syntax.ml[391,7125+14]..[391,7125+15])
                                                            Ppat_var "m" (testsuite/tests/let-syntax/let_syntax.ml[391,7125+14]..[391,7125+15])
                                                          pattern (testsuite/tests/let-syntax/let_syntax.ml[391,7125+17]..[391,7125+18])
                                                            Ppat_var "f" (testsuite/tests/let-syntax/let_syntax.ml[391,7125+17]..[391,7125+18])
                                                        ]
                                                  pattern (testsuite/tests/let-syntax/let_syntax.ml[391,7125+21]..[391,7125+22])
                                                    Ppat_any
                                                ]
                                              expression (testsuite/tests/let-syntax/let_syntax.ml[392,7151+12]..[393,7195+23])
                                                Pexp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (testsuite/tests/let-syntax/let_syntax.ml[392,7151+16]..[392,7151+25])
                                                      Ppat_tuple
                                                      [
                                                        pattern (testsuite/tests/let-syntax/let_syntax.ml[392,7151+16]..[392,7151+22])
                                                          Ppat_var "state2" (testsuite/tests/let-syntax/let_syntax.ml[392,7151+16]..[392,7151+22])
                                                        pattern (testsuite/tests/let-syntax/let_syntax.ml[392,7151+24]..[392,7151+25])
                                                          Ppat_var "x" (testsuite/tests/let-syntax/let_syntax.ml[392,7151+24]..[392,7151+25])
                                                      ]
                                                    expression (testsuite/tests/let-syntax/let_syntax.ml[392,7151+28]..[392,7151+40])
                                                      Pexp_apply
                                                      expression (testsuite/tests/let-syntax/let_syntax.ml[392,7151+28]..[392,7151+32])
                                                        Pexp_ident "loop" (testsuite/tests/let-syntax/let_syntax.ml[392,7151+28]..[392,7151+32])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (testsuite/tests/let-syntax/let_syntax.ml[392,7151+33]..[392,7151+38])
                                                            Pexp_ident "state" (testsuite/tests/let-syntax/let_syntax.ml[392,7151+33]..[392,7151+38])
                                                        <arg>
                                                        Nolabel
                                                          expression (testsuite/tests/let-syntax/let_syntax.ml[392,7151+39]..[392,7151+40])
                                                            Pexp_ident "m" (testsuite/tests/let-syntax/let_syntax.ml[392,7151+39]..[392,7151+40])
                                                      ]
                                                ]
                                                expression (testsuite/tests/let-syntax/let_syntax.ml[393,7195+12]..[393,7195+23])
                                                  Pexp_tuple
                                                  [
                                                    expression (testsuite/tests/let-syntax/let_syntax.ml[393,7195+12]..[393,7195+18])
                                                      Pexp_ident "state2" (testsuite/tests/let-syntax/let_syntax.ml[393,7195+12]..[393,7195+18])
                                                    expression (testsuite/tests/let-syntax/let_syntax.ml[393,7195+20]..[393,7195+23])
                                                      Pexp_apply
                                                      expression (testsuite/tests/let-syntax/let_syntax.ml[393,7195+20]..[393,7195+21])
                                                        Pexp_ident "f" (testsuite/tests/let-syntax/let_syntax.ml[393,7195+20]..[393,7195+21])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (testsuite/tests/let-syntax/let_syntax.ml[393,7195+22]..[393,7195+23])
                                                            Pexp_ident "x" (testsuite/tests/let-syntax/let_syntax.ml[393,7195+22]..[393,7195+23])
                                                      ]
                                                  ]
                                            <case>
                                              pattern (testsuite/tests/let-syntax/let_syntax.ml[394,7219+10]..[394,7219+25])
                                                Ppat_tuple
                                                [
                                                  pattern (testsuite/tests/let-syntax/let_syntax.ml[394,7219+10]..[394,7219+22])
                                                    Ppat_construct "Both" (testsuite/tests/let-syntax/let_syntax.ml[394,7219+10]..[394,7219+14])
                                                    Some
                                                      []
                                                      pattern (testsuite/tests/let-syntax/let_syntax.ml[394,7219+14]..[394,7219+22])
                                                        Ppat_tuple
                                                        [
                                                          pattern (testsuite/tests/let-syntax/let_syntax.ml[394,7219+15]..[394,7219+17])
                                                            Ppat_var "m1" (testsuite/tests/let-syntax/let_syntax.ml[394,7219+15]..[394,7219+17])
                                                          pattern (testsuite/tests/let-syntax/let_syntax.ml[394,7219+19]..[394,7219+21])
                                                            Ppat_var "m2" (testsuite/tests/let-syntax/let_syntax.ml[394,7219+19]..[394,7219+21])
                                                        ]
                                                  pattern (testsuite/tests/let-syntax/let_syntax.ml[394,7219+24]..[394,7219+25])
                                                    Ppat_any
                                                ]
                                              expression (testsuite/tests/let-syntax/let_syntax.ml[395,7248+12]..[397,7339+26])
                                                Pexp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (testsuite/tests/let-syntax/let_syntax.ml[395,7248+16]..[395,7248+25])
                                                      Ppat_tuple
                                                      [
                                                        pattern (testsuite/tests/let-syntax/let_syntax.ml[395,7248+16]..[395,7248+22])
                                                          Ppat_var "state2" (testsuite/tests/let-syntax/let_syntax.ml[395,7248+16]..[395,7248+22])
                                                        pattern (testsuite/tests/let-syntax/let_syntax.ml[395,7248+24]..[395,7248+25])
                                                          Ppat_var "x" (testsuite/tests/let-syntax/let_syntax.ml[395,7248+24]..[395,7248+25])
                                                      ]
                                                    expression (testsuite/tests/let-syntax/let_syntax.ml[395,7248+28]..[395,7248+41])
                                                      Pexp_apply
                                                      expression (testsuite/tests/let-syntax/let_syntax.ml[395,7248+28]..[395,7248+32])
                                                        Pexp_ident "loop" (testsuite/tests/let-syntax/let_syntax.ml[395,7248+28]..[395,7248+32])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (testsuite/tests/let-syntax/let_syntax.ml[395,7248+33]..[395,7248+38])
                                                            Pexp_ident "state" (testsuite/tests/let-syntax/let_syntax.ml[395,7248+33]..[395,7248+38])
                                                        <arg>
                                                        Nolabel
                                                          expression (testsuite/tests/let-syntax/let_syntax.ml[395,7248+39]..[395,7248+41])
                                                            Pexp_ident "m1" (testsuite/tests/let-syntax/let_syntax.ml[395,7248+39]..[395,7248+41])
                                                      ]
                                                ]
                                                expression (testsuite/tests/let-syntax/let_syntax.ml[396,7293+12]..[397,7339+26])
                                                  Pexp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (testsuite/tests/let-syntax/let_syntax.ml[396,7293+16]..[396,7293+25])
                                                        Ppat_tuple
                                                        [
                                                          pattern (testsuite/tests/let-syntax/let_syntax.ml[396,7293+16]..[396,7293+22])
                                                            Ppat_var "state3" (testsuite/tests/let-syntax/let_syntax.ml[396,7293+16]..[396,7293+22])
                                                          pattern (testsuite/tests/let-syntax/let_syntax.ml[396,7293+24]..[396,7293+25])
                                                            Ppat_var "y" (testsuite/tests/let-syntax/let_syntax.ml[396,7293+24]..[396,7293+25])
                                                        ]
                                                      expression (testsuite/tests/let-syntax/let_syntax.ml[396,7293+28]..[396,7293+42])
                                                        Pexp_apply
                                                        expression (testsuite/tests/let-syntax/let_syntax.ml[396,7293+28]..[396,7293+32])
                                                          Pexp_ident "loop" (testsuite/tests/let-syntax/let_syntax.ml[396,7293+28]..[396,7293+32])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (testsuite/tests/let-syntax/let_syntax.ml[396,7293+33]..[396,7293+39])
                                                              Pexp_ident "state2" (testsuite/tests/let-syntax/let_syntax.ml[396,7293+33]..[396,7293+39])
                                                          <arg>
                                                          Nolabel
                                                            expression (testsuite/tests/let-syntax/let_syntax.ml[396,7293+40]..[396,7293+42])
                                                              Pexp_ident "m2" (testsuite/tests/let-syntax/let_syntax.ml[396,7293+40]..[396,7293+42])
                                                        ]
                                                  ]
                                                  expression (testsuite/tests/let-syntax/let_syntax.ml[397,7339+12]..[397,7339+26])
                                                    Pexp_tuple
                                                    [
                                                      expression (testsuite/tests/let-syntax/let_syntax.ml[397,7339+12]..[397,7339+18])
                                                        Pexp_ident "state3" (testsuite/tests/let-syntax/let_syntax.ml[397,7339+12]..[397,7339+18])
                                                      expression (testsuite/tests/let-syntax/let_syntax.ml[397,7339+20]..[397,7339+26])
                                                        Pexp_tuple
                                                        [
                                                          expression (testsuite/tests/let-syntax/let_syntax.ml[397,7339+21]..[397,7339+22])
                                                            Pexp_ident "x" (testsuite/tests/let-syntax/let_syntax.ml[397,7339+21]..[397,7339+22])
                                                          expression (testsuite/tests/let-syntax/let_syntax.ml[397,7339+24]..[397,7339+25])
                                                            Pexp_ident "y" (testsuite/tests/let-syntax/let_syntax.ml[397,7339+24]..[397,7339+25])
                                                        ]
                                                    ]
                                            <case>
                                              pattern (testsuite/tests/let-syntax/let_syntax.ml[398,7366+10]..[398,7366+23])
                                                Ppat_tuple
                                                [
                                                  pattern (testsuite/tests/let-syntax/let_syntax.ml[398,7366+10]..[398,7366+20])
                                                    Ppat_construct "Bind" (testsuite/tests/let-syntax/let_syntax.ml[398,7366+10]..[398,7366+14])
                                                    Some
                                                      []
                                                      pattern (testsuite/tests/let-syntax/let_syntax.ml[398,7366+14]..[398,7366+20])
                                                        Ppat_tuple
                                                        [
                                                          pattern (testsuite/tests/let-syntax/let_syntax.ml[398,7366+15]..[398,7366+16])
                                                            Ppat_var "m" (testsuite/tests/let-syntax/let_syntax.ml[398,7366+15]..[398,7366+16])
                                                          pattern (testsuite/tests/let-syntax/let_syntax.ml[398,7366+18]..[398,7366+19])
                                                            Ppat_var "f" (testsuite/tests/let-syntax/let_syntax.ml[398,7366+18]..[398,7366+19])
                                                        ]
                                                  pattern (testsuite/tests/let-syntax/let_syntax.ml[398,7366+22]..[398,7366+23])
                                                    Ppat_any
                                                ]
                                              expression (testsuite/tests/let-syntax/let_syntax.ml[399,7393+12]..[400,7437+29])
                                                Pexp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (testsuite/tests/let-syntax/let_syntax.ml[399,7393+16]..[399,7393+25])
                                                      Ppat_tuple
                                                      [
                                                        pattern (testsuite/tests/let-syntax/let_syntax.ml[399,7393+16]..[399,7393+22])
                                                          Ppat_var "state2" (testsuite/tests/let-syntax/let_syntax.ml[399,7393+16]..[399,7393+22])
                                                        pattern (testsuite/tests/let-syntax/let_syntax.ml[399,7393+24]..[399,7393+25])
                                                          Ppat_var "x" (testsuite/tests/let-syntax/let_syntax.ml[399,7393+24]..[399,7393+25])
                                                      ]
                                                    expression (testsuite/tests/let-syntax/let_syntax.ml[399,7393+28]..[399,7393+40])
                                                      Pexp_apply
                                                      expression (testsuite/tests/let-syntax/let_syntax.ml[399,7393+28]..[399,7393+32])
                                                        Pexp_ident "loop" (testsuite/tests/let-syntax/let_syntax.ml[399,7393+28]..[399,7393+32])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (testsuite/tests/let-syntax/let_syntax.ml[399,7393+33]..[399,7393+38])
                                                            Pexp_ident "state" (testsuite/tests/let-syntax/let_syntax.ml[399,7393+33]..[399,7393+38])
                                                        <arg>
                                                        Nolabel
                                                          expression (testsuite/tests/let-syntax/let_syntax.ml[399,7393+39]..[399,7393+40])
                                                            Pexp_ident "m" (testsuite/tests/let-syntax/let_syntax.ml[399,7393+39]..[399,7393+40])
                                                      ]
                                                ]
                                                expression (testsuite/tests/let-syntax/let_syntax.ml[400,7437+12]..[400,7437+29])
                                                  Pexp_apply
                                                  expression (testsuite/tests/let-syntax/let_syntax.ml[400,7437+12]..[400,7437+16])
                                                    Pexp_ident "loop" (testsuite/tests/let-syntax/let_syntax.ml[400,7437+12]..[400,7437+16])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (testsuite/tests/let-syntax/let_syntax.ml[400,7437+17]..[400,7437+23])
                                                        Pexp_ident "state2" (testsuite/tests/let-syntax/let_syntax.ml[400,7437+17]..[400,7437+23])
                                                    <arg>
                                                    Nolabel
                                                      expression (testsuite/tests/let-syntax/let_syntax.ml[400,7437+24]..[400,7437+29])
                                                        Pexp_apply
                                                        expression (testsuite/tests/let-syntax/let_syntax.ml[400,7437+25]..[400,7437+26])
                                                          Pexp_ident "f" (testsuite/tests/let-syntax/let_syntax.ml[400,7437+25]..[400,7437+26])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (testsuite/tests/let-syntax/let_syntax.ml[400,7437+27]..[400,7437+28])
                                                              Pexp_ident "x" (testsuite/tests/let-syntax/let_syntax.ml[400,7437+27]..[400,7437+28])
                                                        ]
                                                  ]
                                            <case>
                                              pattern (testsuite/tests/let-syntax/let_syntax.ml[401,7467+10]..[401,7467+31])
                                                Ppat_tuple
                                                [
                                                  pattern (testsuite/tests/let-syntax/let_syntax.ml[401,7467+10]..[401,7467+23])
                                                    Ppat_construct "Open" (testsuite/tests/let-syntax/let_syntax.ml[401,7467+10]..[401,7467+14])
                                                    Some
                                                      []
                                                      pattern (testsuite/tests/let-syntax/let_syntax.ml[401,7467+15]..[401,7467+23])
                                                        Ppat_var "filename" (testsuite/tests/let-syntax/let_syntax.ml[401,7467+15]..[401,7467+23])
                                                  pattern (testsuite/tests/let-syntax/let_syntax.ml[401,7467+25]..[401,7467+31])
                                                    Ppat_construct "Closed" (testsuite/tests/let-syntax/let_syntax.ml[401,7467+25]..[401,7467+31])
                                                    None
                                                ]
                                              expression (testsuite/tests/let-syntax/let_syntax.ml[402,7502+12]..[403,7543+25])
                                                Pexp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (testsuite/tests/let-syntax/let_syntax.ml[402,7502+16]..[402,7502+18])
                                                      Ppat_var "ic" (testsuite/tests/let-syntax/let_syntax.ml[402,7502+16]..[402,7502+18])
                                                    expression (testsuite/tests/let-syntax/let_syntax.ml[402,7502+21]..[402,7502+37])
                                                      Pexp_apply
                                                      expression (testsuite/tests/let-syntax/let_syntax.ml[402,7502+21]..[402,7502+28])
                                                        Pexp_ident "open_in" (testsuite/tests/let-syntax/let_syntax.ml[402,7502+21]..[402,7502+28])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (testsuite/tests/let-syntax/let_syntax.ml[402,7502+29]..[402,7502+37])
                                                            Pexp_ident "filename" (testsuite/tests/let-syntax/let_syntax.ml[402,7502+29]..[402,7502+37])
                                                      ]
                                                ]
                                                expression (testsuite/tests/let-syntax/let_syntax.ml[403,7543+12]..[403,7543+25])
                                                  Pexp_tuple
                                                  [
                                                    expression (testsuite/tests/let-syntax/let_syntax.ml[403,7543+12]..[403,7543+21])
                                                      Pexp_construct "Opened" (testsuite/tests/let-syntax/let_syntax.ml[403,7543+12]..[403,7543+18])
                                                      Some
                                                        expression (testsuite/tests/let-syntax/let_syntax.ml[403,7543+19]..[403,7543+21])
                                                          Pexp_ident "ic" (testsuite/tests/let-syntax/let_syntax.ml[403,7543+19]..[403,7543+21])
                                                    expression (testsuite/tests/let-syntax/let_syntax.ml[403,7543+23]..[403,7543+25])
                                                      Pexp_construct "()" (testsuite/tests/let-syntax/let_syntax.ml[403,7543+23]..[403,7543+25])
                                                      None
                                                  ]
                                            <case>
                                              pattern (testsuite/tests/let-syntax/let_syntax.ml[404,7569+10]..[404,7569+25])
                                                Ppat_tuple
                                                [
                                                  pattern (testsuite/tests/let-syntax/let_syntax.ml[404,7569+10]..[404,7569+14])
                                                    Ppat_construct "Read" (testsuite/tests/let-syntax/let_syntax.ml[404,7569+10]..[404,7569+14])
                                                    None
                                                  pattern (testsuite/tests/let-syntax/let_syntax.ml[404,7569+16]..[404,7569+25])
                                                    Ppat_construct "Opened" (testsuite/tests/let-syntax/let_syntax.ml[404,7569+16]..[404,7569+22])
                                                    Some
                                                      []
                                                      pattern (testsuite/tests/let-syntax/let_syntax.ml[404,7569+23]..[404,7569+25])
                                                        Ppat_var "ic" (testsuite/tests/let-syntax/let_syntax.ml[404,7569+23]..[404,7569+25])
                                                ]
                                              expression (testsuite/tests/let-syntax/let_syntax.ml[405,7598+12]..[406,7635+20])
                                                Pexp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (testsuite/tests/let-syntax/let_syntax.ml[405,7598+16]..[405,7598+17])
                                                      Ppat_var "c" (testsuite/tests/let-syntax/let_syntax.ml[405,7598+16]..[405,7598+17])
                                                    expression (testsuite/tests/let-syntax/let_syntax.ml[405,7598+20]..[405,7598+33])
                                                      Pexp_apply
                                                      expression (testsuite/tests/let-syntax/let_syntax.ml[405,7598+20]..[405,7598+30])
                                                        Pexp_ident "input_line" (testsuite/tests/let-syntax/let_syntax.ml[405,7598+20]..[405,7598+30])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (testsuite/tests/let-syntax/let_syntax.ml[405,7598+31]..[405,7598+33])
                                                            Pexp_ident "ic" (testsuite/tests/let-syntax/let_syntax.ml[405,7598+31]..[405,7598+33])
                                                      ]
                                                ]
                                                expression (testsuite/tests/let-syntax/let_syntax.ml[406,7635+12]..[406,7635+20])
                                                  Pexp_tuple
                                                  [
                                                    expression (testsuite/tests/let-syntax/let_syntax.ml[406,7635+12]..[406,7635+17])
                                                      Pexp_ident "state" (testsuite/tests/let-syntax/let_syntax.ml[406,7635+12]..[406,7635+17])
                                                    expression (testsuite/tests/let-syntax/let_syntax.ml[406,7635+19]..[406,7635+20])
                                                      Pexp_ident "c" (testsuite/tests/let-syntax/let_syntax.ml[406,7635+19]..[406,7635+20])
                                                  ]
                                            <case>
                                              pattern (testsuite/tests/let-syntax/let_syntax.ml[407,7656+10]..[407,7656+26])
                                                Ppat_tuple
                                                [
                                                  pattern (testsuite/tests/let-syntax/let_syntax.ml[407,7656+10]..[407,7656+15])
                                                    Ppat_construct "Close" (testsuite/tests/let-syntax/let_syntax.ml[407,7656+10]..[407,7656+15])
                                                    None
                                                  pattern (testsuite/tests/let-syntax/let_syntax.ml[407,7656+17]..[407,7656+26])
                                                    Ppat_construct "Opened" (testsuite/tests/let-syntax/let_syntax.ml[407,7656+17]..[407,7656+23])
                                                    Some
                                                      []
                                                      pattern (testsuite/tests/let-syntax/let_syntax.ml[407,7656+24]..[407,7656+26])
                                                        Ppat_var "ic" (testsuite/tests/let-syntax/let_syntax.ml[407,7656+24]..[407,7656+26])
                                                ]
                                              expression (testsuite/tests/let-syntax/let_syntax.ml[408,7686+12]..[409,7711+22])
                                                Pexp_sequence
                                                expression (testsuite/tests/let-syntax/let_syntax.ml[408,7686+12]..[408,7686+23])
                                                  Pexp_apply
                                                  expression (testsuite/tests/let-syntax/let_syntax.ml[408,7686+12]..[408,7686+20])
                                                    Pexp_ident "close_in" (testsuite/tests/let-syntax/let_syntax.ml[408,7686+12]..[408,7686+20])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (testsuite/tests/let-syntax/let_syntax.ml[408,7686+21]..[408,7686+23])
                                                        Pexp_ident "ic" (testsuite/tests/let-syntax/let_syntax.ml[408,7686+21]..[408,7686+23])
                                                  ]
                                                expression (testsuite/tests/let-syntax/let_syntax.ml[409,7711+12]..[409,7711+22])
                                                  Pexp_tuple
                                                  [
                                                    expression (testsuite/tests/let-syntax/let_syntax.ml[409,7711+12]..[409,7711+18])
                                                      Pexp_construct "Closed" (testsuite/tests/let-syntax/let_syntax.ml[409,7711+12]..[409,7711+18])
                                                      None
                                                    expression (testsuite/tests/let-syntax/let_syntax.ml[409,7711+20]..[409,7711+22])
                                                      Pexp_construct "()" (testsuite/tests/let-syntax/let_syntax.ml[409,7711+20]..[409,7711+22])
                                                      None
                                                  ]
                                          ]
                                    core_type (testsuite/tests/let-syntax/let_syntax.ml[387,6965+33]..[387,6965+74])
                                      Ptyp_arrow
                                      Nolabel
                                      core_type (testsuite/tests/let-syntax/let_syntax.ml[387,6965+33]..[387,6965+41])
                                        Ptyp_constr "state" (testsuite/tests/let-syntax/let_syntax.ml[387,6965+36]..[387,6965+41])
                                        [
                                          core_type (testsuite/tests/let-syntax/let_syntax.ml[387,6965+33]..[387,6965+35])
                                            Ptyp_constr "s1" (testsuite/tests/let-syntax/let_syntax.ml[387,6965+33]..[387,6965+35])
                                            []
                                        ]
                                      core_type (testsuite/tests/let-syntax/let_syntax.ml[387,6965+45]..[387,6965+74])
                                        Ptyp_arrow
                                        Nolabel
                                        core_type (testsuite/tests/let-syntax/let_syntax.ml[387,6965+45]..[387,6965+58])
                                          Ptyp_constr "t" (testsuite/tests/let-syntax/let_syntax.ml[387,6965+57]..[387,6965+58])
                                          [
                                            core_type (testsuite/tests/let-syntax/let_syntax.ml[387,6965+46]..[387,6965+48])
                                              Ptyp_constr "s1" (testsuite/tests/let-syntax/let_syntax.ml[387,6965+46]..[387,6965+48])
                                              []
                                            core_type (testsuite/tests/let-syntax/let_syntax.ml[387,6965+50]..[387,6965+52])
                                              Ptyp_constr "s2" (testsuite/tests/let-syntax/let_syntax.ml[387,6965+50]..[387,6965+52])
                                              []
                                            core_type (testsuite/tests/let-syntax/let_syntax.ml[387,6965+54]..[387,6965+55])
                                              Ptyp_constr "a" (testsuite/tests/let-syntax/let_syntax.ml[387,6965+54]..[387,6965+55])
                                              []
                                          ]
                                        core_type (testsuite/tests/let-syntax/let_syntax.ml[387,6965+62]..[387,6965+74])
                                          Ptyp_tuple
                                          [
                                            core_type (testsuite/tests/let-syntax/let_syntax.ml[387,6965+62]..[387,6965+70])
                                              Ptyp_constr "state" (testsuite/tests/let-syntax/let_syntax.ml[387,6965+65]..[387,6965+70])
                                              [
                                                core_type (testsuite/tests/let-syntax/let_syntax.ml[387,6965+62]..[387,6965+64])
                                                  Ptyp_constr "s2" (testsuite/tests/let-syntax/let_syntax.ml[387,6965+62]..[387,6965+64])
                                                  []
                                              ]
                                            core_type (testsuite/tests/let-syntax/let_syntax.ml[387,6965+73]..[387,6965+74])
                                              Ptyp_constr "a" (testsuite/tests/let-syntax/let_syntax.ml[387,6965+73]..[387,6965+74])
                                              []
                                          ]
                        ]
                        expression (testsuite/tests/let-syntax/let_syntax.ml[411,7741+4]..[412,7783+10])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (testsuite/tests/let-syntax/let_syntax.ml[411,7741+8]..[411,7741+22])
                                Ppat_tuple
                                [
                                  pattern (testsuite/tests/let-syntax/let_syntax.ml[411,7741+8]..[411,7741+14])
                                    Ppat_construct "Closed" (testsuite/tests/let-syntax/let_syntax.ml[411,7741+8]..[411,7741+14])
                                    None
                                  pattern (testsuite/tests/let-syntax/let_syntax.ml[411,7741+16]..[411,7741+22])
                                    Ppat_var "result" (testsuite/tests/let-syntax/let_syntax.ml[411,7741+16]..[411,7741+22])
                                ]
                              expression (testsuite/tests/let-syntax/let_syntax.ml[411,7741+25]..[411,7741+38])
                                Pexp_apply
                                expression (testsuite/tests/let-syntax/let_syntax.ml[411,7741+25]..[411,7741+29])
                                  Pexp_ident "loop" (testsuite/tests/let-syntax/let_syntax.ml[411,7741+25]..[411,7741+29])
                                [
                                  <arg>
                                  Nolabel
                                    expression (testsuite/tests/let-syntax/let_syntax.ml[411,7741+30]..[411,7741+36])
                                      Pexp_construct "Closed" (testsuite/tests/let-syntax/let_syntax.ml[411,7741+30]..[411,7741+36])
                                      None
                                  <arg>
                                  Nolabel
                                    expression (testsuite/tests/let-syntax/let_syntax.ml[411,7741+37]..[411,7741+38])
                                      Pexp_ident "m" (testsuite/tests/let-syntax/let_syntax.ml[411,7741+37]..[411,7741+38])
                                ]
                          ]
                          expression (testsuite/tests/let-syntax/let_syntax.ml[412,7783+4]..[412,7783+10])
                            Pexp_ident "result" (testsuite/tests/let-syntax/let_syntax.ml[412,7783+4]..[412,7783+10])
                      core_type (testsuite/tests/let-syntax/let_syntax.ml[386,6912+49]..[386,6912+50])
                        Ptyp_constr "a" (testsuite/tests/let-syntax/let_syntax.ml[386,6912+49]..[386,6912+50])
                        []
            ]
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[414,7795+2]..[414,7795+20])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[414,7795+6]..[414,7795+14])
                  Ppat_var "let+" (testsuite/tests/let-syntax/let_syntax.ml[414,7795+6]..[414,7795+14])
                expression (testsuite/tests/let-syntax/let_syntax.ml[414,7795+17]..[414,7795+20])
                  Pexp_ident "map" (testsuite/tests/let-syntax/let_syntax.ml[414,7795+17]..[414,7795+20])
            ]
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[415,7816+2]..[415,7816+21])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[415,7816+6]..[415,7816+14])
                  Ppat_var "and+" (testsuite/tests/let-syntax/let_syntax.ml[415,7816+6]..[415,7816+14])
                expression (testsuite/tests/let-syntax/let_syntax.ml[415,7816+17]..[415,7816+21])
                  Pexp_ident "both" (testsuite/tests/let-syntax/let_syntax.ml[415,7816+17]..[415,7816+21])
            ]
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[416,7838+2]..[416,7838+21])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[416,7838+6]..[416,7838+14])
                  Ppat_var "let*" (testsuite/tests/let-syntax/let_syntax.ml[416,7838+6]..[416,7838+14])
                expression (testsuite/tests/let-syntax/let_syntax.ml[416,7838+17]..[416,7838+21])
                  Pexp_ident "bind" (testsuite/tests/let-syntax/let_syntax.ml[416,7838+17]..[416,7838+21])
            ]
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[417,7860+2]..[417,7860+21])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[417,7860+6]..[417,7860+14])
                  Ppat_var "and*" (testsuite/tests/let-syntax/let_syntax.ml[417,7860+6]..[417,7860+14])
                expression (testsuite/tests/let-syntax/let_syntax.ml[417,7860+17]..[417,7860+21])
                  Pexp_ident "both" (testsuite/tests/let-syntax/let_syntax.ml[417,7860+17]..[417,7860+21])
            ]
        ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[420,7889+0]..[450,9235+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[420,7889+10]..[450,9235+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[420,7889+10]..[450,9235+2])
          Pexp_constant PConst_string ("\nmodule Indexed_monad :\n  sig\n    type opened = private Opened\n    type closed = private Closed\n    type (_, _, _) t =\n        Return : 'a -> ('s, 's, 'a) t\n      | Map : ('s1, 's2, 'a) t * ('a -> 'b) -> ('s1, 's2, 'b) t\n      | Both : ('s1, 's2, 'a) t * ('s2, 's3, 'b) t -> ('s1, 's3, 'a * 'b) t\n      | Bind : ('s1, 's2, 'a) t *\n          ('a -> ('s2, 's3, 'b) t) -> ('s1, 's3, 'b) t\n      | Open : string -> (closed, opened, unit) t\n      | Read : (opened, opened, string) t\n      | Close : (opened, closed, unit) t\n    val return : 'a -> ('b, 'b, 'a) t\n    val map : ('a, 'b, 'c) t -> ('c -> 'd) -> ('a, 'b, 'd) t\n    val both : ('a, 'b, 'c) t -> ('b, 'd, 'e) t -> ('a, 'd, 'c * 'e) t\n    val bind : ('a, 'b, 'c) t -> ('c -> ('b, 'd, 'e) t) -> ('a, 'd, 'e) t\n    val open_ : string -> (closed, opened, unit) t\n    val read : (opened, opened, string) t\n    val close : (opened, closed, unit) t\n    type 'a state =\n        Opened : in_channel -> opened state\n      | Closed : closed state\n    val run : (closed, closed, 'a) t -> 'a\n    val ( let+ ) : ('a, 'b, 'c) t -> ('c -> 'd) -> ('a, 'b, 'd) t\n    val ( and+ ) : ('a, 'b, 'c) t -> ('b, 'd, 'e) t -> ('a, 'd, 'c * 'e) t\n    val ( let* ) : ('a, 'b, 'c) t -> ('c -> ('b, 'd, 'e) t) -> ('a, 'd, 'e) t\n    val ( and* ) : ('a, 'b, 'c) t -> ('b, 'd, 'e) t -> ('a, 'd, 'c * 'e) t\n  end\n",(testsuite/tests/let-syntax/let_syntax.ml[420,7889+12]..[450,9235+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[452,9242+0]..[459,9394+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (testsuite/tests/let-syntax/let_syntax.ml[452,9242+4]..[452,9242+18])
          Ppat_var "indexed_monad1" (testsuite/tests/let-syntax/let_syntax.ml[452,9242+4]..[452,9242+18])
        expression (testsuite/tests/let-syntax/let_syntax.ml[453,9263+2]..[459,9394+3])
          Pexp_open Fresh
          module_expr (testsuite/tests/let-syntax/let_syntax.ml[453,9263+2]..[453,9263+15])
            Pmod_ident "Indexed_monad" (testsuite/tests/let-syntax/let_syntax.ml[453,9263+2]..[453,9263+15])
          expression (testsuite/tests/let-syntax/let_syntax.ml[454,9281+4]..[458,9375+18])
            Pexp_letop
            <binding_op> "let+" (testsuite/tests/let-syntax/let_syntax.ml[454,9281+4]..[454,9281+8]) (testsuite/tests/let-syntax/let_syntax.ml[454,9281+4]..[458,9375+18])              pattern (testsuite/tests/let-syntax/let_syntax.ml[454,9281+9]..[454,9281+11])
                Ppat_construct "()" (testsuite/tests/let-syntax/let_syntax.ml[454,9281+9]..[454,9281+11])
                None
              expression (testsuite/tests/let-syntax/let_syntax.ml[454,9281+14]..[454,9281+25])
                Pexp_apply
                expression (testsuite/tests/let-syntax/let_syntax.ml[454,9281+14]..[454,9281+19])
                  Pexp_ident "open_" (testsuite/tests/let-syntax/let_syntax.ml[454,9281+14]..[454,9281+19])
                [
                  <arg>
                  Nolabel
                    expression (testsuite/tests/let-syntax/let_syntax.ml[454,9281+20]..[454,9281+25])
                      Pexp_constant PConst_string("foo",(testsuite/tests/let-syntax/let_syntax.ml[454,9281+21]..[454,9281+24]),None)
                ]
            [
              <binding_op> "and+" (testsuite/tests/let-syntax/let_syntax.ml[455,9307+4]..[455,9307+8]) (testsuite/tests/let-syntax/let_syntax.ml[454,9281+9]..[455,9307+21])                pattern (testsuite/tests/let-syntax/let_syntax.ml[455,9307+9]..[455,9307+14])
                  Ppat_var "first" (testsuite/tests/let-syntax/let_syntax.ml[455,9307+9]..[455,9307+14])
                expression (testsuite/tests/let-syntax/let_syntax.ml[455,9307+17]..[455,9307+21])
                  Pexp_ident "read" (testsuite/tests/let-syntax/let_syntax.ml[455,9307+17]..[455,9307+21])
              <binding_op> "and+" (testsuite/tests/let-syntax/let_syntax.ml[456,9329+4]..[456,9329+8]) (testsuite/tests/let-syntax/let_syntax.ml[454,9281+9]..[456,9329+22])                pattern (testsuite/tests/let-syntax/let_syntax.ml[456,9329+9]..[456,9329+15])
                  Ppat_var "second" (testsuite/tests/let-syntax/let_syntax.ml[456,9329+9]..[456,9329+15])
                expression (testsuite/tests/let-syntax/let_syntax.ml[456,9329+18]..[456,9329+22])
                  Pexp_ident "read" (testsuite/tests/let-syntax/let_syntax.ml[456,9329+18]..[456,9329+22])
              <binding_op> "and+" (testsuite/tests/let-syntax/let_syntax.ml[457,9352+4]..[457,9352+8]) (testsuite/tests/let-syntax/let_syntax.ml[454,9281+9]..[457,9352+19])                pattern (testsuite/tests/let-syntax/let_syntax.ml[457,9352+9]..[457,9352+11])
                  Ppat_construct "()" (testsuite/tests/let-syntax/let_syntax.ml[457,9352+9]..[457,9352+11])
                  None
                expression (testsuite/tests/let-syntax/let_syntax.ml[457,9352+14]..[457,9352+19])
                  Pexp_ident "close" (testsuite/tests/let-syntax/let_syntax.ml[457,9352+14]..[457,9352+19])
            ]
            expression (testsuite/tests/let-syntax/let_syntax.ml[458,9375+4]..[458,9375+18])
              Pexp_apply
              expression (testsuite/tests/let-syntax/let_syntax.ml[458,9375+10]..[458,9375+11])
                Pexp_ident "^" (testsuite/tests/let-syntax/let_syntax.ml[458,9375+10]..[458,9375+11])
              [
                <arg>
                Nolabel
                  expression (testsuite/tests/let-syntax/let_syntax.ml[458,9375+4]..[458,9375+9])
                    Pexp_ident "first" (testsuite/tests/let-syntax/let_syntax.ml[458,9375+4]..[458,9375+9])
                <arg>
                Nolabel
                  expression (testsuite/tests/let-syntax/let_syntax.ml[458,9375+12]..[458,9375+18])
                    Pexp_ident "second" (testsuite/tests/let-syntax/let_syntax.ml[458,9375+12]..[458,9375+18])
              ]
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[460,9400+0]..[470,9714+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[460,9400+9]..[470,9714+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[460,9400+9]..[470,9714+2])
          Pexp_constant PConst_string ("\nval indexed_monad1 :\n  (Indexed_monad.closed, Indexed_monad.closed, string) Indexed_monad.t =\n  Indexed_monad.Map\n   (Indexed_monad.Both\n     (Indexed_monad.Both\n       (Indexed_monad.Both (Indexed_monad.Open \"foo\", Indexed_monad.Read),\n       Indexed_monad.Read),\n     Indexed_monad.Close),\n   <fun>)\n",(testsuite/tests/let-syntax/let_syntax.ml[460,9400+11]..[470,9714+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[472,9721+0]..[479,9893+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (testsuite/tests/let-syntax/let_syntax.ml[472,9721+4]..[472,9721+18])
          Ppat_var "indexed_monad2" (testsuite/tests/let-syntax/let_syntax.ml[472,9721+4]..[472,9721+18])
        expression (testsuite/tests/let-syntax/let_syntax.ml[473,9742+2]..[479,9893+3])
          Pexp_open Fresh
          module_expr (testsuite/tests/let-syntax/let_syntax.ml[473,9742+2]..[473,9742+15])
            Pmod_ident "Indexed_monad" (testsuite/tests/let-syntax/let_syntax.ml[473,9742+2]..[473,9742+15])
          expression (testsuite/tests/let-syntax/let_syntax.ml[474,9760+4]..[478,9863+29])
            Pexp_letop
            <binding_op> "let*" (testsuite/tests/let-syntax/let_syntax.ml[474,9760+4]..[474,9760+8]) (testsuite/tests/let-syntax/let_syntax.ml[474,9760+4]..[478,9863+29])              pattern (testsuite/tests/let-syntax/let_syntax.ml[474,9760+9]..[474,9760+11])
                Ppat_construct "()" (testsuite/tests/let-syntax/let_syntax.ml[474,9760+9]..[474,9760+11])
                None
              expression (testsuite/tests/let-syntax/let_syntax.ml[474,9760+14]..[474,9760+25])
                Pexp_apply
                expression (testsuite/tests/let-syntax/let_syntax.ml[474,9760+14]..[474,9760+19])
                  Pexp_ident "open_" (testsuite/tests/let-syntax/let_syntax.ml[474,9760+14]..[474,9760+19])
                [
                  <arg>
                  Nolabel
                    expression (testsuite/tests/let-syntax/let_syntax.ml[474,9760+20]..[474,9760+25])
                      Pexp_constant PConst_string("foo",(testsuite/tests/let-syntax/let_syntax.ml[474,9760+21]..[474,9760+24]),None)
                ]
            []
            expression (testsuite/tests/let-syntax/let_syntax.ml[475,9789+4]..[478,9863+29])
              Pexp_letop
              <binding_op> "let*" (testsuite/tests/let-syntax/let_syntax.ml[475,9789+4]..[475,9789+8]) (testsuite/tests/let-syntax/let_syntax.ml[475,9789+4]..[478,9863+29])                pattern (testsuite/tests/let-syntax/let_syntax.ml[475,9789+9]..[475,9789+14])
                  Ppat_var "first" (testsuite/tests/let-syntax/let_syntax.ml[475,9789+9]..[475,9789+14])
                expression (testsuite/tests/let-syntax/let_syntax.ml[475,9789+17]..[475,9789+21])
                  Pexp_ident "read" (testsuite/tests/let-syntax/let_syntax.ml[475,9789+17]..[475,9789+21])
              []
              expression (testsuite/tests/let-syntax/let_syntax.ml[476,9814+4]..[478,9863+29])
                Pexp_letop
                <binding_op> "let*" (testsuite/tests/let-syntax/let_syntax.ml[476,9814+4]..[476,9814+8]) (testsuite/tests/let-syntax/let_syntax.ml[476,9814+4]..[478,9863+29])                  pattern (testsuite/tests/let-syntax/let_syntax.ml[476,9814+9]..[476,9814+15])
                    Ppat_var "second" (testsuite/tests/let-syntax/let_syntax.ml[476,9814+9]..[476,9814+15])
                  expression (testsuite/tests/let-syntax/let_syntax.ml[476,9814+18]..[476,9814+22])
                    Pexp_ident "read" (testsuite/tests/let-syntax/let_syntax.ml[476,9814+18]..[476,9814+22])
                []
                expression (testsuite/tests/let-syntax/let_syntax.ml[477,9840+4]..[478,9863+29])
                  Pexp_letop
                  <binding_op> "let*" (testsuite/tests/let-syntax/let_syntax.ml[477,9840+4]..[477,9840+8]) (testsuite/tests/let-syntax/let_syntax.ml[477,9840+4]..[478,9863+29])                    pattern (testsuite/tests/let-syntax/let_syntax.ml[477,9840+9]..[477,9840+11])
                      Ppat_construct "()" (testsuite/tests/let-syntax/let_syntax.ml[477,9840+9]..[477,9840+11])
                      None
                    expression (testsuite/tests/let-syntax/let_syntax.ml[477,9840+14]..[477,9840+19])
                      Pexp_ident "close" (testsuite/tests/let-syntax/let_syntax.ml[477,9840+14]..[477,9840+19])
                  []
                  expression (testsuite/tests/let-syntax/let_syntax.ml[478,9863+6]..[478,9863+29])
                    Pexp_apply
                    expression (testsuite/tests/let-syntax/let_syntax.ml[478,9863+6]..[478,9863+12])
                      Pexp_ident "return" (testsuite/tests/let-syntax/let_syntax.ml[478,9863+6]..[478,9863+12])
                    [
                      <arg>
                      Nolabel
                        expression (testsuite/tests/let-syntax/let_syntax.ml[478,9863+13]..[478,9863+29])
                          Pexp_apply
                          expression (testsuite/tests/let-syntax/let_syntax.ml[478,9863+20]..[478,9863+21])
                            Pexp_ident "^" (testsuite/tests/let-syntax/let_syntax.ml[478,9863+20]..[478,9863+21])
                          [
                            <arg>
                            Nolabel
                              expression (testsuite/tests/let-syntax/let_syntax.ml[478,9863+14]..[478,9863+19])
                                Pexp_ident "first" (testsuite/tests/let-syntax/let_syntax.ml[478,9863+14]..[478,9863+19])
                            <arg>
                            Nolabel
                              expression (testsuite/tests/let-syntax/let_syntax.ml[478,9863+22]..[478,9863+28])
                                Pexp_ident "second" (testsuite/tests/let-syntax/let_syntax.ml[478,9863+22]..[478,9863+28])
                          ]
                    ]
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[480,9899+0]..[484,10060+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[480,9899+9]..[484,10060+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[480,9899+9]..[484,10060+2])
          Pexp_constant PConst_string ("\nval indexed_monad2 :\n  (Indexed_monad.closed, Indexed_monad.closed, string) Indexed_monad.t =\n  Indexed_monad.Bind (Indexed_monad.Open \"foo\", <fun>)\n",(testsuite/tests/let-syntax/let_syntax.ml[480,9899+11]..[484,10060+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[486,10067+0]..[493,10219+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (testsuite/tests/let-syntax/let_syntax.ml[486,10067+4]..[486,10067+18])
          Ppat_var "indexed_monad3" (testsuite/tests/let-syntax/let_syntax.ml[486,10067+4]..[486,10067+18])
        expression (testsuite/tests/let-syntax/let_syntax.ml[487,10088+2]..[493,10219+3])
          Pexp_open Fresh
          module_expr (testsuite/tests/let-syntax/let_syntax.ml[487,10088+2]..[487,10088+15])
            Pmod_ident "Indexed_monad" (testsuite/tests/let-syntax/let_syntax.ml[487,10088+2]..[487,10088+15])
          expression (testsuite/tests/let-syntax/let_syntax.ml[488,10106+4]..[492,10200+18])
            Pexp_letop
            <binding_op> "let+" (testsuite/tests/let-syntax/let_syntax.ml[488,10106+4]..[488,10106+8]) (testsuite/tests/let-syntax/let_syntax.ml[488,10106+4]..[492,10200+18])              pattern (testsuite/tests/let-syntax/let_syntax.ml[488,10106+9]..[488,10106+14])
                Ppat_var "first" (testsuite/tests/let-syntax/let_syntax.ml[488,10106+9]..[488,10106+14])
              expression (testsuite/tests/let-syntax/let_syntax.ml[488,10106+17]..[488,10106+21])
                Pexp_ident "read" (testsuite/tests/let-syntax/let_syntax.ml[488,10106+17]..[488,10106+21])
            [
              <binding_op> "and+" (testsuite/tests/let-syntax/let_syntax.ml[489,10128+4]..[489,10128+8]) (testsuite/tests/let-syntax/let_syntax.ml[488,10106+9]..[489,10128+25])                pattern (testsuite/tests/let-syntax/let_syntax.ml[489,10128+9]..[489,10128+11])
                  Ppat_construct "()" (testsuite/tests/let-syntax/let_syntax.ml[489,10128+9]..[489,10128+11])
                  None
                expression (testsuite/tests/let-syntax/let_syntax.ml[489,10128+14]..[489,10128+25])
                  Pexp_apply
                  expression (testsuite/tests/let-syntax/let_syntax.ml[489,10128+14]..[489,10128+19])
                    Pexp_ident "open_" (testsuite/tests/let-syntax/let_syntax.ml[489,10128+14]..[489,10128+19])
                  [
                    <arg>
                    Nolabel
                      expression (testsuite/tests/let-syntax/let_syntax.ml[489,10128+20]..[489,10128+25])
                        Pexp_constant PConst_string("foo",(testsuite/tests/let-syntax/let_syntax.ml[489,10128+21]..[489,10128+24]),None)
                  ]
              <binding_op> "and+" (testsuite/tests/let-syntax/let_syntax.ml[490,10154+4]..[490,10154+8]) (testsuite/tests/let-syntax/let_syntax.ml[488,10106+9]..[490,10154+22])                pattern (testsuite/tests/let-syntax/let_syntax.ml[490,10154+9]..[490,10154+15])
                  Ppat_var "second" (testsuite/tests/let-syntax/let_syntax.ml[490,10154+9]..[490,10154+15])
                expression (testsuite/tests/let-syntax/let_syntax.ml[490,10154+18]..[490,10154+22])
                  Pexp_ident "read" (testsuite/tests/let-syntax/let_syntax.ml[490,10154+18]..[490,10154+22])
              <binding_op> "and+" (testsuite/tests/let-syntax/let_syntax.ml[491,10177+4]..[491,10177+8]) (testsuite/tests/let-syntax/let_syntax.ml[488,10106+9]..[491,10177+19])                pattern (testsuite/tests/let-syntax/let_syntax.ml[491,10177+9]..[491,10177+11])
                  Ppat_construct "()" (testsuite/tests/let-syntax/let_syntax.ml[491,10177+9]..[491,10177+11])
                  None
                expression (testsuite/tests/let-syntax/let_syntax.ml[491,10177+14]..[491,10177+19])
                  Pexp_ident "close" (testsuite/tests/let-syntax/let_syntax.ml[491,10177+14]..[491,10177+19])
            ]
            expression (testsuite/tests/let-syntax/let_syntax.ml[492,10200+4]..[492,10200+18])
              Pexp_apply
              expression (testsuite/tests/let-syntax/let_syntax.ml[492,10200+10]..[492,10200+11])
                Pexp_ident "^" (testsuite/tests/let-syntax/let_syntax.ml[492,10200+10]..[492,10200+11])
              [
                <arg>
                Nolabel
                  expression (testsuite/tests/let-syntax/let_syntax.ml[492,10200+4]..[492,10200+9])
                    Pexp_ident "first" (testsuite/tests/let-syntax/let_syntax.ml[492,10200+4]..[492,10200+9])
                <arg>
                Nolabel
                  expression (testsuite/tests/let-syntax/let_syntax.ml[492,10200+12]..[492,10200+18])
                    Pexp_ident "second" (testsuite/tests/let-syntax/let_syntax.ml[492,10200+12]..[492,10200+18])
              ]
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[494,10225+0]..[504,10624+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[494,10225+9]..[504,10624+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[494,10225+9]..[504,10624+2])
          Pexp_constant PConst_string ("\nLine 4, characters 14-25:\n4 |     and+ () = open_ \"foo\"\n                  ^^^^^^^^^^^\nError: This expression has type\n         (Indexed_monad.closed, Indexed_monad.opened, unit) Indexed_monad.t\n       but an expression was expected of type\n         (Indexed_monad.opened, 'a, 'b) Indexed_monad.t\n       Type Indexed_monad.closed is not compatible with type\n         Indexed_monad.opened\n",(testsuite/tests/let-syntax/let_syntax.ml[494,10225+11]..[504,10624+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[506,10631+0]..[513,10803+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (testsuite/tests/let-syntax/let_syntax.ml[506,10631+4]..[506,10631+18])
          Ppat_var "indexed_monad4" (testsuite/tests/let-syntax/let_syntax.ml[506,10631+4]..[506,10631+18])
        expression (testsuite/tests/let-syntax/let_syntax.ml[507,10652+2]..[513,10803+3])
          Pexp_open Fresh
          module_expr (testsuite/tests/let-syntax/let_syntax.ml[507,10652+2]..[507,10652+15])
            Pmod_ident "Indexed_monad" (testsuite/tests/let-syntax/let_syntax.ml[507,10652+2]..[507,10652+15])
          expression (testsuite/tests/let-syntax/let_syntax.ml[508,10670+4]..[512,10773+29])
            Pexp_letop
            <binding_op> "let*" (testsuite/tests/let-syntax/let_syntax.ml[508,10670+4]..[508,10670+8]) (testsuite/tests/let-syntax/let_syntax.ml[508,10670+4]..[512,10773+29])              pattern (testsuite/tests/let-syntax/let_syntax.ml[508,10670+9]..[508,10670+11])
                Ppat_construct "()" (testsuite/tests/let-syntax/let_syntax.ml[508,10670+9]..[508,10670+11])
                None
              expression (testsuite/tests/let-syntax/let_syntax.ml[508,10670+14]..[508,10670+25])
                Pexp_apply
                expression (testsuite/tests/let-syntax/let_syntax.ml[508,10670+14]..[508,10670+19])
                  Pexp_ident "open_" (testsuite/tests/let-syntax/let_syntax.ml[508,10670+14]..[508,10670+19])
                [
                  <arg>
                  Nolabel
                    expression (testsuite/tests/let-syntax/let_syntax.ml[508,10670+20]..[508,10670+25])
                      Pexp_constant PConst_string("foo",(testsuite/tests/let-syntax/let_syntax.ml[508,10670+21]..[508,10670+24]),None)
                ]
            []
            expression (testsuite/tests/let-syntax/let_syntax.ml[509,10699+4]..[512,10773+29])
              Pexp_letop
              <binding_op> "let*" (testsuite/tests/let-syntax/let_syntax.ml[509,10699+4]..[509,10699+8]) (testsuite/tests/let-syntax/let_syntax.ml[509,10699+4]..[512,10773+29])                pattern (testsuite/tests/let-syntax/let_syntax.ml[509,10699+9]..[509,10699+14])
                  Ppat_var "first" (testsuite/tests/let-syntax/let_syntax.ml[509,10699+9]..[509,10699+14])
                expression (testsuite/tests/let-syntax/let_syntax.ml[509,10699+17]..[509,10699+21])
                  Pexp_ident "read" (testsuite/tests/let-syntax/let_syntax.ml[509,10699+17]..[509,10699+21])
              []
              expression (testsuite/tests/let-syntax/let_syntax.ml[510,10724+4]..[512,10773+29])
                Pexp_letop
                <binding_op> "let*" (testsuite/tests/let-syntax/let_syntax.ml[510,10724+4]..[510,10724+8]) (testsuite/tests/let-syntax/let_syntax.ml[510,10724+4]..[512,10773+29])                  pattern (testsuite/tests/let-syntax/let_syntax.ml[510,10724+9]..[510,10724+11])
                    Ppat_construct "()" (testsuite/tests/let-syntax/let_syntax.ml[510,10724+9]..[510,10724+11])
                    None
                  expression (testsuite/tests/let-syntax/let_syntax.ml[510,10724+14]..[510,10724+19])
                    Pexp_ident "close" (testsuite/tests/let-syntax/let_syntax.ml[510,10724+14]..[510,10724+19])
                []
                expression (testsuite/tests/let-syntax/let_syntax.ml[511,10747+4]..[512,10773+29])
                  Pexp_letop
                  <binding_op> "let*" (testsuite/tests/let-syntax/let_syntax.ml[511,10747+4]..[511,10747+8]) (testsuite/tests/let-syntax/let_syntax.ml[511,10747+4]..[512,10773+29])                    pattern (testsuite/tests/let-syntax/let_syntax.ml[511,10747+9]..[511,10747+15])
                      Ppat_var "second" (testsuite/tests/let-syntax/let_syntax.ml[511,10747+9]..[511,10747+15])
                    expression (testsuite/tests/let-syntax/let_syntax.ml[511,10747+18]..[511,10747+22])
                      Pexp_ident "read" (testsuite/tests/let-syntax/let_syntax.ml[511,10747+18]..[511,10747+22])
                  []
                  expression (testsuite/tests/let-syntax/let_syntax.ml[512,10773+6]..[512,10773+29])
                    Pexp_apply
                    expression (testsuite/tests/let-syntax/let_syntax.ml[512,10773+6]..[512,10773+12])
                      Pexp_ident "return" (testsuite/tests/let-syntax/let_syntax.ml[512,10773+6]..[512,10773+12])
                    [
                      <arg>
                      Nolabel
                        expression (testsuite/tests/let-syntax/let_syntax.ml[512,10773+13]..[512,10773+29])
                          Pexp_apply
                          expression (testsuite/tests/let-syntax/let_syntax.ml[512,10773+20]..[512,10773+21])
                            Pexp_ident "^" (testsuite/tests/let-syntax/let_syntax.ml[512,10773+20]..[512,10773+21])
                          [
                            <arg>
                            Nolabel
                              expression (testsuite/tests/let-syntax/let_syntax.ml[512,10773+14]..[512,10773+19])
                                Pexp_ident "first" (testsuite/tests/let-syntax/let_syntax.ml[512,10773+14]..[512,10773+19])
                            <arg>
                            Nolabel
                              expression (testsuite/tests/let-syntax/let_syntax.ml[512,10773+22]..[512,10773+28])
                                Pexp_ident "second" (testsuite/tests/let-syntax/let_syntax.ml[512,10773+22]..[512,10773+28])
                          ]
                    ]
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[514,10809+0]..[524,11216+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[514,10809+9]..[524,11216+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[514,10809+9]..[524,11216+2])
          Pexp_constant PConst_string ("\nLines 6-7, characters 4-29:\n6 | ....let* second = read in\n7 |       return (first ^ second)\nError: This expression has type\n         (Indexed_monad.opened, Indexed_monad.opened, string) Indexed_monad.t\n       but an expression was expected of type\n         (Indexed_monad.closed, 'a, 'b) Indexed_monad.t\n       Type Indexed_monad.opened is not compatible with type\n         Indexed_monad.closed\n",(testsuite/tests/let-syntax/let_syntax.ml[514,10809+11]..[524,11216+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[528,11281+0]..[530,11312+3])
    Pstr_module
    "A" (testsuite/tests/let-syntax/let_syntax.ml[528,11281+7]..[528,11281+8])
      module_expr (testsuite/tests/let-syntax/let_syntax.ml[528,11281+11]..[530,11312+3])
        Pmod_structure
        [
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[529,11299+2]..[529,11299+12])
            Pstr_type Rec
            [
              type_declaration "t" (testsuite/tests/let-syntax/let_syntax.ml[529,11299+7]..[529,11299+8]) (testsuite/tests/let-syntax/let_syntax.ml[529,11299+2]..[529,11299+12])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_variant
                    [
                      (testsuite/tests/let-syntax/let_syntax.ml[529,11299+11]..[529,11299+12])
                        "A" (testsuite/tests/let-syntax/let_syntax.ml[529,11299+11]..[529,11299+12])
                        []
                        None
                    ]
                ptype_private = Public
                ptype_manifest =
                  None
            ]
        ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[532,11317+0]..[534,11380+3])
    Pstr_module
    "Let_principal" (testsuite/tests/let-syntax/let_syntax.ml[532,11317+7]..[532,11317+20])
      module_expr (testsuite/tests/let-syntax/let_syntax.ml[532,11317+23]..[534,11380+3])
        Pmod_structure
        [
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[533,11347+2]..[533,11347+32])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[533,11347+6]..[533,11347+14])
                  Ppat_var "let+" (testsuite/tests/let-syntax/let_syntax.ml[533,11347+6]..[533,11347+14])
                expression (testsuite/tests/let-syntax/let_syntax.ml[533,11347+15]..[533,11347+32]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (testsuite/tests/let-syntax/let_syntax.ml[533,11347+15]..[533,11347+24])
                    Ppat_constraint
                    pattern (testsuite/tests/let-syntax/let_syntax.ml[533,11347+16]..[533,11347+17])
                      Ppat_var "x" (testsuite/tests/let-syntax/let_syntax.ml[533,11347+16]..[533,11347+17])
                    core_type (testsuite/tests/let-syntax/let_syntax.ml[533,11347+20]..[533,11347+23])
                      Ptyp_constr "A.t" (testsuite/tests/let-syntax/let_syntax.ml[533,11347+20]..[533,11347+23])
                      []
                  expression (testsuite/tests/let-syntax/let_syntax.ml[533,11347+25]..[533,11347+32]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (testsuite/tests/let-syntax/let_syntax.ml[533,11347+25]..[533,11347+26])
                      Ppat_var "f" (testsuite/tests/let-syntax/let_syntax.ml[533,11347+25]..[533,11347+26])
                    expression (testsuite/tests/let-syntax/let_syntax.ml[533,11347+29]..[533,11347+32])
                      Pexp_apply
                      expression (testsuite/tests/let-syntax/let_syntax.ml[533,11347+29]..[533,11347+30])
                        Pexp_ident "f" (testsuite/tests/let-syntax/let_syntax.ml[533,11347+29]..[533,11347+30])
                      [
                        <arg>
                        Nolabel
                          expression (testsuite/tests/let-syntax/let_syntax.ml[533,11347+31]..[533,11347+32])
                            Pexp_ident "x" (testsuite/tests/let-syntax/let_syntax.ml[533,11347+31]..[533,11347+32])
                      ]
            ]
        ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[535,11386+0]..[538,11499+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[535,11386+9]..[538,11499+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[535,11386+9]..[538,11499+2])
          Pexp_constant PConst_string ("\nmodule A : sig type t = A end\nmodule Let_principal : sig val ( let+ ) : A.t -> (A.t -> 'a) -> 'a end\n",(testsuite/tests/let-syntax/let_syntax.ml[535,11386+11]..[538,11499+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[540,11506+0]..[544,11569+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (testsuite/tests/let-syntax/let_syntax.ml[540,11506+4]..[540,11506+17])
          Ppat_var "let_principal" (testsuite/tests/let-syntax/let_syntax.ml[540,11506+4]..[540,11506+17])
        expression (testsuite/tests/let-syntax/let_syntax.ml[541,11526+2]..[544,11569+3])
          Pexp_open Fresh
          module_expr (testsuite/tests/let-syntax/let_syntax.ml[541,11526+2]..[541,11526+15])
            Pmod_ident "Let_principal" (testsuite/tests/let-syntax/let_syntax.ml[541,11526+2]..[541,11526+15])
          expression (testsuite/tests/let-syntax/let_syntax.ml[542,11544+4]..[543,11562+6])
            Pexp_letop
            <binding_op> "let+" (testsuite/tests/let-syntax/let_syntax.ml[542,11544+4]..[542,11544+8]) (testsuite/tests/let-syntax/let_syntax.ml[542,11544+4]..[543,11562+6])              pattern (testsuite/tests/let-syntax/let_syntax.ml[542,11544+9]..[542,11544+10])
                Ppat_construct "A" (testsuite/tests/let-syntax/let_syntax.ml[542,11544+9]..[542,11544+10])
                None
              expression (testsuite/tests/let-syntax/let_syntax.ml[542,11544+13]..[542,11544+14])
                Pexp_construct "A" (testsuite/tests/let-syntax/let_syntax.ml[542,11544+13]..[542,11544+14])
                None
            []
            expression (testsuite/tests/let-syntax/let_syntax.ml[543,11562+4]..[543,11562+6])
              Pexp_construct "()" (testsuite/tests/let-syntax/let_syntax.ml[543,11562+4]..[543,11562+6])
              None
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[545,11575+0]..[547,11617+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[545,11575+9]..[547,11617+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[545,11575+9]..[547,11617+2])
          Pexp_constant PConst_string ("\nval let_principal : unit = ()\n",(testsuite/tests/let-syntax/let_syntax.ml[545,11575+11]..[547,11617+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[550,11625+0]..[553,11712+3])
    Pstr_module
    "And_principal" (testsuite/tests/let-syntax/let_syntax.ml[550,11625+7]..[550,11625+20])
      module_expr (testsuite/tests/let-syntax/let_syntax.ml[550,11625+23]..[553,11712+3])
        Pmod_structure
        [
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[551,11655+2]..[551,11655+22])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[551,11655+6]..[551,11655+14])
                  Ppat_var "let+" (testsuite/tests/let-syntax/let_syntax.ml[551,11655+6]..[551,11655+14])
                expression (testsuite/tests/let-syntax/let_syntax.ml[551,11655+17]..[551,11655+22])
                  Pexp_ident "apply" (testsuite/tests/let-syntax/let_syntax.ml[551,11655+17]..[551,11655+22])
            ]
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[552,11678+2]..[552,11678+33])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[552,11678+6]..[552,11678+14])
                  Ppat_var "and+" (testsuite/tests/let-syntax/let_syntax.ml[552,11678+6]..[552,11678+14])
                expression (testsuite/tests/let-syntax/let_syntax.ml[552,11678+15]..[552,11678+33]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (testsuite/tests/let-syntax/let_syntax.ml[552,11678+15]..[552,11678+24])
                    Ppat_constraint
                    pattern (testsuite/tests/let-syntax/let_syntax.ml[552,11678+16]..[552,11678+17])
                      Ppat_var "x" (testsuite/tests/let-syntax/let_syntax.ml[552,11678+16]..[552,11678+17])
                    core_type (testsuite/tests/let-syntax/let_syntax.ml[552,11678+20]..[552,11678+23])
                      Ptyp_constr "A.t" (testsuite/tests/let-syntax/let_syntax.ml[552,11678+20]..[552,11678+23])
                      []
                  expression (testsuite/tests/let-syntax/let_syntax.ml[552,11678+25]..[552,11678+33]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (testsuite/tests/let-syntax/let_syntax.ml[552,11678+25]..[552,11678+26])
                      Ppat_var "y" (testsuite/tests/let-syntax/let_syntax.ml[552,11678+25]..[552,11678+26])
                    expression (testsuite/tests/let-syntax/let_syntax.ml[552,11678+29]..[552,11678+33])
                      Pexp_tuple
                      [
                        expression (testsuite/tests/let-syntax/let_syntax.ml[552,11678+29]..[552,11678+30])
                          Pexp_ident "x" (testsuite/tests/let-syntax/let_syntax.ml[552,11678+29]..[552,11678+30])
                        expression (testsuite/tests/let-syntax/let_syntax.ml[552,11678+32]..[552,11678+33])
                          Pexp_ident "y" (testsuite/tests/let-syntax/let_syntax.ml[552,11678+32]..[552,11678+33])
                      ]
            ]
        ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[554,11718+0]..[560,11848+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[554,11718+9]..[560,11848+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[554,11718+9]..[560,11848+2])
          Pexp_constant PConst_string ("\nmodule And_principal :\n  sig\n    val ( let+ ) : 'a -> ('a -> 'b) -> 'b\n    val ( and+ ) : A.t -> 'a -> A.t * 'a\n  end\n",(testsuite/tests/let-syntax/let_syntax.ml[554,11718+11]..[560,11848+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[562,11855+0]..[567,11935+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (testsuite/tests/let-syntax/let_syntax.ml[562,11855+4]..[562,11855+17])
          Ppat_var "and_principal" (testsuite/tests/let-syntax/let_syntax.ml[562,11855+4]..[562,11855+17])
        expression (testsuite/tests/let-syntax/let_syntax.ml[563,11875+2]..[567,11935+3])
          Pexp_open Fresh
          module_expr (testsuite/tests/let-syntax/let_syntax.ml[563,11875+2]..[563,11875+15])
            Pmod_ident "And_principal" (testsuite/tests/let-syntax/let_syntax.ml[563,11875+2]..[563,11875+15])
          expression (testsuite/tests/let-syntax/let_syntax.ml[564,11893+4]..[566,11928+6])
            Pexp_letop
            <binding_op> "let+" (testsuite/tests/let-syntax/let_syntax.ml[564,11893+4]..[564,11893+8]) (testsuite/tests/let-syntax/let_syntax.ml[564,11893+4]..[566,11928+6])              pattern (testsuite/tests/let-syntax/let_syntax.ml[564,11893+9]..[564,11893+10])
                Ppat_any
              expression (testsuite/tests/let-syntax/let_syntax.ml[564,11893+13]..[564,11893+14])
                Pexp_construct "A" (testsuite/tests/let-syntax/let_syntax.ml[564,11893+13]..[564,11893+14])
                None
            [
              <binding_op> "and+" (testsuite/tests/let-syntax/let_syntax.ml[565,11908+4]..[565,11908+8]) (testsuite/tests/let-syntax/let_syntax.ml[564,11893+9]..[565,11908+16])                pattern (testsuite/tests/let-syntax/let_syntax.ml[565,11908+9]..[565,11908+11])
                  Ppat_construct "()" (testsuite/tests/let-syntax/let_syntax.ml[565,11908+9]..[565,11908+11])
                  None
                expression (testsuite/tests/let-syntax/let_syntax.ml[565,11908+14]..[565,11908+16])
                  Pexp_construct "()" (testsuite/tests/let-syntax/let_syntax.ml[565,11908+14]..[565,11908+16])
                  None
            ]
            expression (testsuite/tests/let-syntax/let_syntax.ml[566,11928+4]..[566,11928+6])
              Pexp_construct "()" (testsuite/tests/let-syntax/let_syntax.ml[566,11928+4]..[566,11928+6])
              None
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[568,11941+0]..[570,11983+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[568,11941+9]..[570,11983+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[568,11941+9]..[570,11983+2])
          Pexp_constant PConst_string ("\nval and_principal : unit = ()\n",(testsuite/tests/let-syntax/let_syntax.ml[568,11941+11]..[570,11983+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[572,11990+0]..[574,12047+3])
    Pstr_module
    "Let_not_principal" (testsuite/tests/let-syntax/let_syntax.ml[572,11990+7]..[572,11990+24])
      module_expr (testsuite/tests/let-syntax/let_syntax.ml[572,11990+27]..[574,12047+3])
        Pmod_structure
        [
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[573,12024+2]..[573,12024+22])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[573,12024+6]..[573,12024+14])
                  Ppat_var "let+" (testsuite/tests/let-syntax/let_syntax.ml[573,12024+6]..[573,12024+14])
                expression (testsuite/tests/let-syntax/let_syntax.ml[573,12024+17]..[573,12024+22])
                  Pexp_ident "apply" (testsuite/tests/let-syntax/let_syntax.ml[573,12024+17]..[573,12024+22])
            ]
        ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[575,12053+0]..[577,12138+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[575,12053+9]..[577,12138+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[575,12053+9]..[577,12138+2])
          Pexp_constant PConst_string ("\nmodule Let_not_principal : sig val ( let+ ) : 'a -> ('a -> 'b) -> 'b end\n",(testsuite/tests/let-syntax/let_syntax.ml[575,12053+11]..[577,12138+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[579,12145+0]..[583,12218+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (testsuite/tests/let-syntax/let_syntax.ml[579,12145+4]..[579,12145+21])
          Ppat_var "let_not_principal" (testsuite/tests/let-syntax/let_syntax.ml[579,12145+4]..[579,12145+21])
        expression (testsuite/tests/let-syntax/let_syntax.ml[580,12169+2]..[583,12218+3])
          Pexp_open Fresh
          module_expr (testsuite/tests/let-syntax/let_syntax.ml[580,12169+2]..[580,12169+19])
            Pmod_ident "Let_not_principal" (testsuite/tests/let-syntax/let_syntax.ml[580,12169+2]..[580,12169+19])
          expression (testsuite/tests/let-syntax/let_syntax.ml[581,12191+4]..[582,12211+6])
            Pexp_letop
            <binding_op> "let+" (testsuite/tests/let-syntax/let_syntax.ml[581,12191+4]..[581,12191+8]) (testsuite/tests/let-syntax/let_syntax.ml[581,12191+4]..[582,12211+6])              pattern (testsuite/tests/let-syntax/let_syntax.ml[581,12191+9]..[581,12191+10])
                Ppat_construct "A" (testsuite/tests/let-syntax/let_syntax.ml[581,12191+9]..[581,12191+10])
                None
              expression (testsuite/tests/let-syntax/let_syntax.ml[581,12191+13]..[581,12191+16])
                Pexp_construct "A.A" (testsuite/tests/let-syntax/let_syntax.ml[581,12191+13]..[581,12191+16])
                None
            []
            expression (testsuite/tests/let-syntax/let_syntax.ml[582,12211+4]..[582,12211+6])
              Pexp_construct "()" (testsuite/tests/let-syntax/let_syntax.ml[582,12211+4]..[582,12211+6])
              None
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[584,12224+0]..[592,12473+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[584,12224+9]..[592,12473+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[584,12224+9]..[592,12473+2])
          Pexp_tuple
          [
            expression (testsuite/tests/let-syntax/let_syntax.ml[584,12224+9]..[586,12270+2])
              Pexp_constant PConst_string ("\nval let_not_principal : unit = ()\n",(testsuite/tests/let-syntax/let_syntax.ml[584,12224+11]..[586,12270+0]),Some "")
            expression (testsuite/tests/let-syntax/let_syntax.ml[586,12270+4]..[592,12473+2])
              Pexp_construct "Principal" (testsuite/tests/let-syntax/let_syntax.ml[586,12270+4]..[586,12270+13])
              Some
                expression (testsuite/tests/let-syntax/let_syntax.ml[586,12270+13]..[592,12473+2])
                  Pexp_constant PConst_string ("\nLine 3, characters 9-10:\n3 |     let+ A = A.A in\n             ^\nWarning 18 [not-principal]: this type-based constructor disambiguation is not principal.\nval let_not_principal : unit = ()\n",(testsuite/tests/let-syntax/let_syntax.ml[586,12270+15]..[592,12473+0]),Some "")
          ]
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[594,12480+0]..[597,12584+3])
    Pstr_module
    "And_not_principal" (testsuite/tests/let-syntax/let_syntax.ml[594,12480+7]..[594,12480+24])
      module_expr (testsuite/tests/let-syntax/let_syntax.ml[594,12480+27]..[597,12584+3])
        Pmod_structure
        [
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[595,12514+2]..[595,12514+22])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[595,12514+6]..[595,12514+14])
                  Ppat_var "let+" (testsuite/tests/let-syntax/let_syntax.ml[595,12514+6]..[595,12514+14])
                expression (testsuite/tests/let-syntax/let_syntax.ml[595,12514+17]..[595,12514+22])
                  Pexp_ident "apply" (testsuite/tests/let-syntax/let_syntax.ml[595,12514+17]..[595,12514+22])
            ]
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[596,12537+2]..[596,12537+46])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[596,12537+6]..[596,12537+14])
                  Ppat_var "and+" (testsuite/tests/let-syntax/let_syntax.ml[596,12537+6]..[596,12537+14])
                expression (testsuite/tests/let-syntax/let_syntax.ml[596,12537+15]..[596,12537+46]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (testsuite/tests/let-syntax/let_syntax.ml[596,12537+15]..[596,12537+16])
                    Ppat_var "x" (testsuite/tests/let-syntax/let_syntax.ml[596,12537+15]..[596,12537+16])
                  expression (testsuite/tests/let-syntax/let_syntax.ml[596,12537+17]..[596,12537+46]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (testsuite/tests/let-syntax/let_syntax.ml[596,12537+17]..[596,12537+18])
                      Ppat_var "y" (testsuite/tests/let-syntax/let_syntax.ml[596,12537+17]..[596,12537+18])
                    expression (testsuite/tests/let-syntax/let_syntax.ml[596,12537+21]..[596,12537+46])
                      Pexp_ifthenelse
                      expression (testsuite/tests/let-syntax/let_syntax.ml[596,12537+24]..[596,12537+28])
                        Pexp_construct "true" (testsuite/tests/let-syntax/let_syntax.ml[596,12537+24]..[596,12537+28])
                        None
                      expression (testsuite/tests/let-syntax/let_syntax.ml[596,12537+34]..[596,12537+37])
                        Pexp_tuple
                        [
                          expression (testsuite/tests/let-syntax/let_syntax.ml[596,12537+34]..[596,12537+35])
                            Pexp_ident "x" (testsuite/tests/let-syntax/let_syntax.ml[596,12537+34]..[596,12537+35])
                          expression (testsuite/tests/let-syntax/let_syntax.ml[596,12537+36]..[596,12537+37])
                            Pexp_ident "y" (testsuite/tests/let-syntax/let_syntax.ml[596,12537+36]..[596,12537+37])
                        ]
                      Some
                        expression (testsuite/tests/let-syntax/let_syntax.ml[596,12537+43]..[596,12537+46])
                          Pexp_tuple
                          [
                            expression (testsuite/tests/let-syntax/let_syntax.ml[596,12537+43]..[596,12537+44])
                              Pexp_ident "y" (testsuite/tests/let-syntax/let_syntax.ml[596,12537+43]..[596,12537+44])
                            expression (testsuite/tests/let-syntax/let_syntax.ml[596,12537+45]..[596,12537+46])
                              Pexp_ident "x" (testsuite/tests/let-syntax/let_syntax.ml[596,12537+45]..[596,12537+46])
                          ]
            ]
        ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[598,12590+0]..[604,12722+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[598,12590+9]..[604,12722+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[598,12590+9]..[604,12722+2])
          Pexp_constant PConst_string ("\nmodule And_not_principal :\n  sig\n    val ( let+ ) : 'a -> ('a -> 'b) -> 'b\n    val ( and+ ) : 'a -> 'a -> 'a * 'a\n  end\n",(testsuite/tests/let-syntax/let_syntax.ml[598,12590+11]..[604,12722+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[606,12729+0]..[612,12838+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (testsuite/tests/let-syntax/let_syntax.ml[606,12729+4]..[606,12729+21])
          Ppat_var "and_not_principal" (testsuite/tests/let-syntax/let_syntax.ml[606,12729+4]..[606,12729+21])
        expression (testsuite/tests/let-syntax/let_syntax.ml[607,12753+2]..[612,12838+3])
          Pexp_open Fresh
          module_expr (testsuite/tests/let-syntax/let_syntax.ml[607,12753+2]..[607,12753+19])
            Pmod_ident "And_not_principal" (testsuite/tests/let-syntax/let_syntax.ml[607,12753+2]..[607,12753+19])
          expression (testsuite/tests/let-syntax/let_syntax.ml[608,12775+4]..[611,12829+8])
            Pexp_fun
            Nolabel
            None
            pattern (testsuite/tests/let-syntax/let_syntax.ml[608,12775+8]..[608,12775+9])
              Ppat_var "x" (testsuite/tests/let-syntax/let_syntax.ml[608,12775+8]..[608,12775+9])
            expression (testsuite/tests/let-syntax/let_syntax.ml[608,12775+10]..[611,12829+8]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (testsuite/tests/let-syntax/let_syntax.ml[608,12775+10]..[608,12775+11])
                Ppat_var "y" (testsuite/tests/let-syntax/let_syntax.ml[608,12775+10]..[608,12775+11])
              expression (testsuite/tests/let-syntax/let_syntax.ml[609,12790+6]..[611,12829+8])
                Pexp_letop
                <binding_op> "let+" (testsuite/tests/let-syntax/let_syntax.ml[609,12790+6]..[609,12790+10]) (testsuite/tests/let-syntax/let_syntax.ml[609,12790+6]..[611,12829+8])                  pattern (testsuite/tests/let-syntax/let_syntax.ml[609,12790+11]..[609,12790+14])
                    Ppat_construct "A.A" (testsuite/tests/let-syntax/let_syntax.ml[609,12790+11]..[609,12790+14])
                    None
                  expression (testsuite/tests/let-syntax/let_syntax.ml[609,12790+17]..[609,12790+18])
                    Pexp_ident "x" (testsuite/tests/let-syntax/let_syntax.ml[609,12790+17]..[609,12790+18])
                [
                  <binding_op> "and+" (testsuite/tests/let-syntax/let_syntax.ml[610,12809+6]..[610,12809+10]) (testsuite/tests/let-syntax/let_syntax.ml[609,12790+11]..[610,12809+16])                    pattern (testsuite/tests/let-syntax/let_syntax.ml[610,12809+11]..[610,12809+12])
                      Ppat_construct "A" (testsuite/tests/let-syntax/let_syntax.ml[610,12809+11]..[610,12809+12])
                      None
                    expression (testsuite/tests/let-syntax/let_syntax.ml[610,12809+15]..[610,12809+16])
                      Pexp_ident "y" (testsuite/tests/let-syntax/let_syntax.ml[610,12809+15]..[610,12809+16])
                ]
                expression (testsuite/tests/let-syntax/let_syntax.ml[611,12829+6]..[611,12829+8])
                  Pexp_construct "()" (testsuite/tests/let-syntax/let_syntax.ml[611,12829+6]..[611,12829+8])
                  None
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[613,12844+0]..[621,13130+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[613,12844+9]..[621,13130+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[613,12844+9]..[621,13130+2])
          Pexp_tuple
          [
            expression (testsuite/tests/let-syntax/let_syntax.ml[613,12844+9]..[615,12907+2])
              Pexp_constant PConst_string ("\nval and_not_principal : A.t -> A.t -> unit = <fun>\n",(testsuite/tests/let-syntax/let_syntax.ml[613,12844+11]..[615,12907+0]),Some "")
            expression (testsuite/tests/let-syntax/let_syntax.ml[615,12907+4]..[621,13130+2])
              Pexp_construct "Principal" (testsuite/tests/let-syntax/let_syntax.ml[615,12907+4]..[615,12907+13])
              Some
                expression (testsuite/tests/let-syntax/let_syntax.ml[615,12907+13]..[621,13130+2])
                  Pexp_constant PConst_string ("\nLine 5, characters 11-12:\n5 |       and+ A = y in\n               ^\nWarning 18 [not-principal]: this type-based constructor disambiguation is not principal.\nval and_not_principal : A.t -> A.t -> unit = <fun>\n",(testsuite/tests/let-syntax/let_syntax.ml[615,12907+15]..[621,13130+0]),Some "")
          ]
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[623,13137+0]..[625,13195+3])
    Pstr_module
    "Let_not_propagated" (testsuite/tests/let-syntax/let_syntax.ml[623,13137+7]..[623,13137+25])
      module_expr (testsuite/tests/let-syntax/let_syntax.ml[623,13137+28]..[625,13195+3])
        Pmod_structure
        [
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[624,13172+2]..[624,13172+22])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[624,13172+6]..[624,13172+14])
                  Ppat_var "let+" (testsuite/tests/let-syntax/let_syntax.ml[624,13172+6]..[624,13172+14])
                expression (testsuite/tests/let-syntax/let_syntax.ml[624,13172+17]..[624,13172+22])
                  Pexp_ident "apply" (testsuite/tests/let-syntax/let_syntax.ml[624,13172+17]..[624,13172+22])
            ]
        ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[626,13201+0]..[628,13287+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[626,13201+9]..[628,13287+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[626,13201+9]..[628,13287+2])
          Pexp_constant PConst_string ("\nmodule Let_not_propagated : sig val ( let+ ) : 'a -> ('a -> 'b) -> 'b end\n",(testsuite/tests/let-syntax/let_syntax.ml[626,13201+11]..[628,13287+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[630,13294+0]..[634,13372+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (testsuite/tests/let-syntax/let_syntax.ml[630,13294+4]..[630,13294+28]) ghost
          Ppat_constraint
          pattern (testsuite/tests/let-syntax/let_syntax.ml[630,13294+4]..[630,13294+22])
            Ppat_var "let_not_propagated" (testsuite/tests/let-syntax/let_syntax.ml[630,13294+4]..[630,13294+22])
          core_type (testsuite/tests/let-syntax/let_syntax.ml[630,13294+25]..[630,13294+28]) ghost
            Ptyp_poly
            core_type (testsuite/tests/let-syntax/let_syntax.ml[630,13294+25]..[630,13294+28])
              Ptyp_constr "A.t" (testsuite/tests/let-syntax/let_syntax.ml[630,13294+25]..[630,13294+28])
              []
        expression (testsuite/tests/let-syntax/let_syntax.ml[630,13294+4]..[634,13372+3])
          Pexp_constraint
          expression (testsuite/tests/let-syntax/let_syntax.ml[631,13325+2]..[634,13372+3])
            Pexp_open Fresh
            module_expr (testsuite/tests/let-syntax/let_syntax.ml[631,13325+2]..[631,13325+20])
              Pmod_ident "Let_not_propagated" (testsuite/tests/let-syntax/let_syntax.ml[631,13325+2]..[631,13325+20])
            expression (testsuite/tests/let-syntax/let_syntax.ml[632,13348+4]..[633,13366+5])
              Pexp_letop
              <binding_op> "let+" (testsuite/tests/let-syntax/let_syntax.ml[632,13348+4]..[632,13348+8]) (testsuite/tests/let-syntax/let_syntax.ml[632,13348+4]..[633,13366+5])                pattern (testsuite/tests/let-syntax/let_syntax.ml[632,13348+9]..[632,13348+10])
                  Ppat_var "x" (testsuite/tests/let-syntax/let_syntax.ml[632,13348+9]..[632,13348+10])
                expression (testsuite/tests/let-syntax/let_syntax.ml[632,13348+13]..[632,13348+14])
                  Pexp_constant PConst_int (3,None)
              []
              expression (testsuite/tests/let-syntax/let_syntax.ml[633,13366+4]..[633,13366+5])
                Pexp_construct "A" (testsuite/tests/let-syntax/let_syntax.ml[633,13366+4]..[633,13366+5])
                None
          core_type (testsuite/tests/let-syntax/let_syntax.ml[630,13294+25]..[630,13294+28])
            Ptyp_constr "A.t" (testsuite/tests/let-syntax/let_syntax.ml[630,13294+25]..[630,13294+28])
            []
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[635,13378+0]..[640,13463+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[635,13378+9]..[640,13463+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[635,13378+9]..[640,13463+2])
          Pexp_constant PConst_string ("\nLine 4, characters 4-5:\n4 |     A\n        ^\nError: Unbound constructor A\n",(testsuite/tests/let-syntax/let_syntax.ml[635,13378+11]..[640,13463+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[642,13470+0]..[650,13729+3])
    Pstr_module
    "Side_effects_ordering" (testsuite/tests/let-syntax/let_syntax.ml[642,13470+7]..[642,13470+28])
      module_expr (testsuite/tests/let-syntax/let_syntax.ml[642,13470+31]..[650,13729+3])
        Pmod_structure
        [
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[643,13508+2]..[643,13508+16])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[643,13508+6]..[643,13508+7])
                  Ppat_var "r" (testsuite/tests/let-syntax/let_syntax.ml[643,13508+6]..[643,13508+7])
                expression (testsuite/tests/let-syntax/let_syntax.ml[643,13508+10]..[643,13508+16])
                  Pexp_apply
                  expression (testsuite/tests/let-syntax/let_syntax.ml[643,13508+10]..[643,13508+13])
                    Pexp_ident "ref" (testsuite/tests/let-syntax/let_syntax.ml[643,13508+10]..[643,13508+13])
                  [
                    <arg>
                    Nolabel
                      expression (testsuite/tests/let-syntax/let_syntax.ml[643,13508+14]..[643,13508+16])
                        Pexp_construct "[]" (testsuite/tests/let-syntax/let_syntax.ml[643,13508+14]..[643,13508+16])
                        None
                  ]
            ]
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[644,13525+2]..[645,13539+17])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[644,13525+6]..[644,13525+9])
                  Ppat_var "msg" (testsuite/tests/let-syntax/let_syntax.ml[644,13525+6]..[644,13525+9])
                expression (testsuite/tests/let-syntax/let_syntax.ml[644,13525+10]..[645,13539+17]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (testsuite/tests/let-syntax/let_syntax.ml[644,13525+10]..[644,13525+11])
                    Ppat_var "s" (testsuite/tests/let-syntax/let_syntax.ml[644,13525+10]..[644,13525+11])
                  expression (testsuite/tests/let-syntax/let_syntax.ml[645,13539+4]..[645,13539+17])
                    Pexp_apply
                    expression (testsuite/tests/let-syntax/let_syntax.ml[645,13539+6]..[645,13539+8])
                      Pexp_ident ":=" (testsuite/tests/let-syntax/let_syntax.ml[645,13539+6]..[645,13539+8])
                    [
                      <arg>
                      Nolabel
                        expression (testsuite/tests/let-syntax/let_syntax.ml[645,13539+4]..[645,13539+5])
                          Pexp_ident "r" (testsuite/tests/let-syntax/let_syntax.ml[645,13539+4]..[645,13539+5])
                      <arg>
                      Nolabel
                        expression (testsuite/tests/let-syntax/let_syntax.ml[645,13539+9]..[645,13539+17])
                          Pexp_apply
                          expression (testsuite/tests/let-syntax/let_syntax.ml[645,13539+12]..[645,13539+13])
                            Pexp_ident "@" (testsuite/tests/let-syntax/let_syntax.ml[645,13539+12]..[645,13539+13])
                          [
                            <arg>
                            Nolabel
                              expression (testsuite/tests/let-syntax/let_syntax.ml[645,13539+9]..[645,13539+11])
                                Pexp_apply
                                expression (testsuite/tests/let-syntax/let_syntax.ml[645,13539+9]..[645,13539+10])
                                  Pexp_ident "!" (testsuite/tests/let-syntax/let_syntax.ml[645,13539+9]..[645,13539+10])
                                [
                                  <arg>
                                  Nolabel
                                    expression (testsuite/tests/let-syntax/let_syntax.ml[645,13539+10]..[645,13539+11])
                                      Pexp_ident "r" (testsuite/tests/let-syntax/let_syntax.ml[645,13539+10]..[645,13539+11])
                                ]
                            <arg>
                            Nolabel
                              expression (testsuite/tests/let-syntax/let_syntax.ml[645,13539+14]..[645,13539+17])
                                Pexp_construct "::" (testsuite/tests/let-syntax/let_syntax.ml[645,13539+15]..[645,13539+17]) ghost
                                Some
                                  expression (testsuite/tests/let-syntax/let_syntax.ml[645,13539+15]..[645,13539+17]) ghost
                                    Pexp_tuple
                                    [
                                      expression (testsuite/tests/let-syntax/let_syntax.ml[645,13539+15]..[645,13539+16])
                                        Pexp_ident "s" (testsuite/tests/let-syntax/let_syntax.ml[645,13539+15]..[645,13539+16])
                                      expression (testsuite/tests/let-syntax/let_syntax.ml[645,13539+16]..[645,13539+17]) ghost
                                        Pexp_construct "[]" (testsuite/tests/let-syntax/let_syntax.ml[645,13539+16]..[645,13539+17]) ghost
                                        None
                                    ]
                          ]
                    ]
            ]
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[646,13557+2]..[646,13557+20])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[646,13557+6]..[646,13557+12])
                  Ppat_var "output" (testsuite/tests/let-syntax/let_syntax.ml[646,13557+6]..[646,13557+12])
                expression (testsuite/tests/let-syntax/let_syntax.ml[646,13557+13]..[646,13557+20]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (testsuite/tests/let-syntax/let_syntax.ml[646,13557+13]..[646,13557+15])
                    Ppat_construct "()" (testsuite/tests/let-syntax/let_syntax.ml[646,13557+13]..[646,13557+15])
                    None
                  expression (testsuite/tests/let-syntax/let_syntax.ml[646,13557+18]..[646,13557+20])
                    Pexp_apply
                    expression (testsuite/tests/let-syntax/let_syntax.ml[646,13557+18]..[646,13557+19])
                      Pexp_ident "!" (testsuite/tests/let-syntax/let_syntax.ml[646,13557+18]..[646,13557+19])
                    [
                      <arg>
                      Nolabel
                        expression (testsuite/tests/let-syntax/let_syntax.ml[646,13557+19]..[646,13557+20])
                          Pexp_ident "r" (testsuite/tests/let-syntax/let_syntax.ml[646,13557+19]..[646,13557+20])
                    ]
            ]
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[647,13578+2]..[647,13578+44])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[647,13578+6]..[647,13578+14])
                  Ppat_var "let+" (testsuite/tests/let-syntax/let_syntax.ml[647,13578+6]..[647,13578+14])
                expression (testsuite/tests/let-syntax/let_syntax.ml[647,13578+15]..[647,13578+44]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (testsuite/tests/let-syntax/let_syntax.ml[647,13578+15]..[647,13578+16])
                    Ppat_var "x" (testsuite/tests/let-syntax/let_syntax.ml[647,13578+15]..[647,13578+16])
                  expression (testsuite/tests/let-syntax/let_syntax.ml[647,13578+17]..[647,13578+44]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (testsuite/tests/let-syntax/let_syntax.ml[647,13578+17]..[647,13578+18])
                      Ppat_var "f" (testsuite/tests/let-syntax/let_syntax.ml[647,13578+17]..[647,13578+18])
                    expression (testsuite/tests/let-syntax/let_syntax.ml[647,13578+21]..[647,13578+44])
                      Pexp_sequence
                      expression (testsuite/tests/let-syntax/let_syntax.ml[647,13578+21]..[647,13578+39])
                        Pexp_apply
                        expression (testsuite/tests/let-syntax/let_syntax.ml[647,13578+21]..[647,13578+24])
                          Pexp_ident "msg" (testsuite/tests/let-syntax/let_syntax.ml[647,13578+21]..[647,13578+24])
                        [
                          <arg>
                          Nolabel
                            expression (testsuite/tests/let-syntax/let_syntax.ml[647,13578+25]..[647,13578+39])
                              Pexp_constant PConst_string("Let operator",(testsuite/tests/let-syntax/let_syntax.ml[647,13578+26]..[647,13578+38]),None)
                        ]
                      expression (testsuite/tests/let-syntax/let_syntax.ml[647,13578+41]..[647,13578+44])
                        Pexp_apply
                        expression (testsuite/tests/let-syntax/let_syntax.ml[647,13578+41]..[647,13578+42])
                          Pexp_ident "f" (testsuite/tests/let-syntax/let_syntax.ml[647,13578+41]..[647,13578+42])
                        [
                          <arg>
                          Nolabel
                            expression (testsuite/tests/let-syntax/let_syntax.ml[647,13578+43]..[647,13578+44])
                              Pexp_ident "x" (testsuite/tests/let-syntax/let_syntax.ml[647,13578+43]..[647,13578+44])
                        ]
            ]
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[648,13623+2]..[648,13623+51])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[648,13623+6]..[648,13623+14])
                  Ppat_var "and+" (testsuite/tests/let-syntax/let_syntax.ml[648,13623+6]..[648,13623+14])
                expression (testsuite/tests/let-syntax/let_syntax.ml[648,13623+15]..[648,13623+51]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (testsuite/tests/let-syntax/let_syntax.ml[648,13623+15]..[648,13623+16])
                    Ppat_var "a" (testsuite/tests/let-syntax/let_syntax.ml[648,13623+15]..[648,13623+16])
                  expression (testsuite/tests/let-syntax/let_syntax.ml[648,13623+17]..[648,13623+51]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (testsuite/tests/let-syntax/let_syntax.ml[648,13623+17]..[648,13623+18])
                      Ppat_var "b" (testsuite/tests/let-syntax/let_syntax.ml[648,13623+17]..[648,13623+18])
                    expression (testsuite/tests/let-syntax/let_syntax.ml[648,13623+21]..[648,13623+51])
                      Pexp_sequence
                      expression (testsuite/tests/let-syntax/let_syntax.ml[648,13623+21]..[648,13623+45])
                        Pexp_apply
                        expression (testsuite/tests/let-syntax/let_syntax.ml[648,13623+21]..[648,13623+24])
                          Pexp_ident "msg" (testsuite/tests/let-syntax/let_syntax.ml[648,13623+21]..[648,13623+24])
                        [
                          <arg>
                          Nolabel
                            expression (testsuite/tests/let-syntax/let_syntax.ml[648,13623+25]..[648,13623+45])
                              Pexp_constant PConst_string("First and operator",(testsuite/tests/let-syntax/let_syntax.ml[648,13623+26]..[648,13623+44]),None)
                        ]
                      expression (testsuite/tests/let-syntax/let_syntax.ml[648,13623+47]..[648,13623+51])
                        Pexp_tuple
                        [
                          expression (testsuite/tests/let-syntax/let_syntax.ml[648,13623+47]..[648,13623+48])
                            Pexp_ident "a" (testsuite/tests/let-syntax/let_syntax.ml[648,13623+47]..[648,13623+48])
                          expression (testsuite/tests/let-syntax/let_syntax.ml[648,13623+50]..[648,13623+51])
                            Pexp_ident "b" (testsuite/tests/let-syntax/let_syntax.ml[648,13623+50]..[648,13623+51])
                        ]
            ]
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[649,13675+2]..[649,13675+53])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[649,13675+6]..[649,13675+15])
                  Ppat_var "and++" (testsuite/tests/let-syntax/let_syntax.ml[649,13675+6]..[649,13675+15])
                expression (testsuite/tests/let-syntax/let_syntax.ml[649,13675+16]..[649,13675+53]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (testsuite/tests/let-syntax/let_syntax.ml[649,13675+16]..[649,13675+17])
                    Ppat_var "a" (testsuite/tests/let-syntax/let_syntax.ml[649,13675+16]..[649,13675+17])
                  expression (testsuite/tests/let-syntax/let_syntax.ml[649,13675+18]..[649,13675+53]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (testsuite/tests/let-syntax/let_syntax.ml[649,13675+18]..[649,13675+19])
                      Ppat_var "b" (testsuite/tests/let-syntax/let_syntax.ml[649,13675+18]..[649,13675+19])
                    expression (testsuite/tests/let-syntax/let_syntax.ml[649,13675+22]..[649,13675+53])
                      Pexp_sequence
                      expression (testsuite/tests/let-syntax/let_syntax.ml[649,13675+22]..[649,13675+47])
                        Pexp_apply
                        expression (testsuite/tests/let-syntax/let_syntax.ml[649,13675+22]..[649,13675+25])
                          Pexp_ident "msg" (testsuite/tests/let-syntax/let_syntax.ml[649,13675+22]..[649,13675+25])
                        [
                          <arg>
                          Nolabel
                            expression (testsuite/tests/let-syntax/let_syntax.ml[649,13675+26]..[649,13675+47])
                              Pexp_constant PConst_string("Second and operator",(testsuite/tests/let-syntax/let_syntax.ml[649,13675+27]..[649,13675+46]),None)
                        ]
                      expression (testsuite/tests/let-syntax/let_syntax.ml[649,13675+49]..[649,13675+53])
                        Pexp_tuple
                        [
                          expression (testsuite/tests/let-syntax/let_syntax.ml[649,13675+49]..[649,13675+50])
                            Pexp_ident "a" (testsuite/tests/let-syntax/let_syntax.ml[649,13675+49]..[649,13675+50])
                          expression (testsuite/tests/let-syntax/let_syntax.ml[649,13675+52]..[649,13675+53])
                            Pexp_ident "b" (testsuite/tests/let-syntax/let_syntax.ml[649,13675+52]..[649,13675+53])
                        ]
            ]
        ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[651,13735+0]..[661,14005+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[651,13735+9]..[661,14005+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[651,13735+9]..[661,14005+2])
          Pexp_constant PConst_string ("\nmodule Side_effects_ordering :\n  sig\n    val r : string list ref\n    val msg : string -> unit\n    val output : unit -> string list\n    val ( let+ ) : 'a -> ('a -> 'b) -> 'b\n    val ( and+ ) : 'a -> 'b -> 'a * 'b\n    val ( and++ ) : 'a -> 'b -> 'a * 'b\n  end\n",(testsuite/tests/let-syntax/let_syntax.ml[651,13735+11]..[661,14005+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[663,14012+0]..[669,14190+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (testsuite/tests/let-syntax/let_syntax.ml[663,14012+4]..[663,14012+25])
          Ppat_var "side_effects_ordering" (testsuite/tests/let-syntax/let_syntax.ml[663,14012+4]..[663,14012+25])
        expression (testsuite/tests/let-syntax/let_syntax.ml[664,14040+2]..[669,14190+3])
          Pexp_open Fresh
          module_expr (testsuite/tests/let-syntax/let_syntax.ml[664,14040+2]..[664,14040+23])
            Pmod_ident "Side_effects_ordering" (testsuite/tests/let-syntax/let_syntax.ml[664,14040+2]..[664,14040+23])
          expression (testsuite/tests/let-syntax/let_syntax.ml[665,14066+4]..[668,14176+13])
            Pexp_letop
            <binding_op> "let+" (testsuite/tests/let-syntax/let_syntax.ml[665,14066+4]..[665,14066+8]) (testsuite/tests/let-syntax/let_syntax.ml[665,14066+4]..[668,14176+13])              pattern (testsuite/tests/let-syntax/let_syntax.ml[665,14066+9]..[665,14066+11])
                Ppat_construct "()" (testsuite/tests/let-syntax/let_syntax.ml[665,14066+9]..[665,14066+11])
                None
              expression (testsuite/tests/let-syntax/let_syntax.ml[665,14066+14]..[665,14066+34])
                Pexp_apply
                expression (testsuite/tests/let-syntax/let_syntax.ml[665,14066+14]..[665,14066+17])
                  Pexp_ident "msg" (testsuite/tests/let-syntax/let_syntax.ml[665,14066+14]..[665,14066+17])
                [
                  <arg>
                  Nolabel
                    expression (testsuite/tests/let-syntax/let_syntax.ml[665,14066+18]..[665,14066+34])
                      Pexp_constant PConst_string("First argument",(testsuite/tests/let-syntax/let_syntax.ml[665,14066+19]..[665,14066+33]),None)
                ]
            [
              <binding_op> "and+" (testsuite/tests/let-syntax/let_syntax.ml[666,14101+4]..[666,14101+8]) (testsuite/tests/let-syntax/let_syntax.ml[665,14066+9]..[666,14101+35])                pattern (testsuite/tests/let-syntax/let_syntax.ml[666,14101+9]..[666,14101+11])
                  Ppat_construct "()" (testsuite/tests/let-syntax/let_syntax.ml[666,14101+9]..[666,14101+11])
                  None
                expression (testsuite/tests/let-syntax/let_syntax.ml[666,14101+14]..[666,14101+35])
                  Pexp_apply
                  expression (testsuite/tests/let-syntax/let_syntax.ml[666,14101+14]..[666,14101+17])
                    Pexp_ident "msg" (testsuite/tests/let-syntax/let_syntax.ml[666,14101+14]..[666,14101+17])
                  [
                    <arg>
                    Nolabel
                      expression (testsuite/tests/let-syntax/let_syntax.ml[666,14101+18]..[666,14101+35])
                        Pexp_constant PConst_string("Second argument",(testsuite/tests/let-syntax/let_syntax.ml[666,14101+19]..[666,14101+34]),None)
                  ]
              <binding_op> "and++" (testsuite/tests/let-syntax/let_syntax.ml[667,14137+4]..[667,14137+9]) (testsuite/tests/let-syntax/let_syntax.ml[665,14066+9]..[667,14137+35])                pattern (testsuite/tests/let-syntax/let_syntax.ml[667,14137+10]..[667,14137+12])
                  Ppat_construct "()" (testsuite/tests/let-syntax/let_syntax.ml[667,14137+10]..[667,14137+12])
                  None
                expression (testsuite/tests/let-syntax/let_syntax.ml[667,14137+15]..[667,14137+35])
                  Pexp_apply
                  expression (testsuite/tests/let-syntax/let_syntax.ml[667,14137+15]..[667,14137+18])
                    Pexp_ident "msg" (testsuite/tests/let-syntax/let_syntax.ml[667,14137+15]..[667,14137+18])
                  [
                    <arg>
                    Nolabel
                      expression (testsuite/tests/let-syntax/let_syntax.ml[667,14137+19]..[667,14137+35])
                        Pexp_constant PConst_string("Third argument",(testsuite/tests/let-syntax/let_syntax.ml[667,14137+20]..[667,14137+34]),None)
                  ]
            ]
            expression (testsuite/tests/let-syntax/let_syntax.ml[668,14176+4]..[668,14176+13])
              Pexp_apply
              expression (testsuite/tests/let-syntax/let_syntax.ml[668,14176+4]..[668,14176+10])
                Pexp_ident "output" (testsuite/tests/let-syntax/let_syntax.ml[668,14176+4]..[668,14176+10])
              [
                <arg>
                Nolabel
                  expression (testsuite/tests/let-syntax/let_syntax.ml[668,14176+11]..[668,14176+13])
                    Pexp_construct "()" (testsuite/tests/let-syntax/let_syntax.ml[668,14176+11]..[668,14176+13])
                    None
              ]
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[670,14196+0]..[674,14372+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[670,14196+9]..[674,14372+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[670,14196+9]..[674,14372+2])
          Pexp_constant PConst_string ("\nval side_effects_ordering : string list =\n  [\"First argument\"; \"Second argument\"; \"First and operator\";\n   \"Third argument\"; \"Second and operator\"; \"Let operator\"]\n",(testsuite/tests/let-syntax/let_syntax.ml[670,14196+11]..[674,14372+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[676,14379+0]..[682,14538+3])
    Pstr_module
    "GADT_ordering" (testsuite/tests/let-syntax/let_syntax.ml[676,14379+7]..[676,14379+20])
      module_expr (testsuite/tests/let-syntax/let_syntax.ml[676,14379+23]..[682,14538+3])
        Pmod_structure
        [
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[677,14409+2]..[677,14409+35])
            Pstr_type Rec
            [
              type_declaration "point" (testsuite/tests/let-syntax/let_syntax.ml[677,14409+7]..[677,14409+12]) (testsuite/tests/let-syntax/let_syntax.ml[677,14409+2]..[677,14409+35])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_record
                    [
                      (testsuite/tests/let-syntax/let_syntax.ml[677,14409+17]..[677,14409+25])
                        Immutable
                        "x" (testsuite/tests/let-syntax/let_syntax.ml[677,14409+17]..[677,14409+18])                        core_type (testsuite/tests/let-syntax/let_syntax.ml[677,14409+21]..[677,14409+24])
                          Ptyp_constr "int" (testsuite/tests/let-syntax/let_syntax.ml[677,14409+21]..[677,14409+24])
                          []
                      (testsuite/tests/let-syntax/let_syntax.ml[677,14409+26]..[677,14409+33])
                        Immutable
                        "y" (testsuite/tests/let-syntax/let_syntax.ml[677,14409+26]..[677,14409+27])                        core_type (testsuite/tests/let-syntax/let_syntax.ml[677,14409+30]..[677,14409+33])
                          Ptyp_constr "int" (testsuite/tests/let-syntax/let_syntax.ml[677,14409+30]..[677,14409+33])
                          []
                    ]
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[678,14445+2]..[679,14465+31])
            Pstr_type Rec
            [
              type_declaration "is_point" (testsuite/tests/let-syntax/let_syntax.ml[678,14445+9]..[678,14445+17]) (testsuite/tests/let-syntax/let_syntax.ml[678,14445+2]..[679,14465+31])
                ptype_params =
                  [
                    core_type (testsuite/tests/let-syntax/let_syntax.ml[678,14445+7]..[678,14445+8])
                      Ptyp_any
                  ]
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_variant
                    [
                      (testsuite/tests/let-syntax/let_syntax.ml[679,14465+4]..[679,14465+31])
                        "Is_point" (testsuite/tests/let-syntax/let_syntax.ml[679,14465+6]..[679,14465+14])
                        []
                        Some
                          core_type (testsuite/tests/let-syntax/let_syntax.ml[679,14465+17]..[679,14465+31])
                            Ptyp_constr "is_point" (testsuite/tests/let-syntax/let_syntax.ml[679,14465+23]..[679,14465+31])
                            [
                              core_type (testsuite/tests/let-syntax/let_syntax.ml[679,14465+17]..[679,14465+22])
                                Ptyp_constr "point" (testsuite/tests/let-syntax/let_syntax.ml[679,14465+17]..[679,14465+22])
                                []
                            ]
                    ]
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[680,14497+2]..[680,14497+20])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[680,14497+6]..[680,14497+12])
                  Ppat_var "let+" (testsuite/tests/let-syntax/let_syntax.ml[680,14497+6]..[680,14497+12])
                expression (testsuite/tests/let-syntax/let_syntax.ml[680,14497+15]..[680,14497+20])
                  Pexp_ident "apply" (testsuite/tests/let-syntax/let_syntax.ml[680,14497+15]..[680,14497+20])
            ]
          structure_item (testsuite/tests/let-syntax/let_syntax.ml[681,14518+2]..[681,14518+19])
            Pstr_value Nonrec
            [
              <def>
                pattern (testsuite/tests/let-syntax/let_syntax.ml[681,14518+6]..[681,14518+12])
                  Ppat_var "and+" (testsuite/tests/let-syntax/let_syntax.ml[681,14518+6]..[681,14518+12])
                expression (testsuite/tests/let-syntax/let_syntax.ml[681,14518+15]..[681,14518+19])
                  Pexp_ident "pair" (testsuite/tests/let-syntax/let_syntax.ml[681,14518+15]..[681,14518+19])
            ]
        ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[683,14544+0]..[691,14759+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[683,14544+9]..[691,14759+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[683,14544+9]..[691,14759+2])
          Pexp_constant PConst_string ("\nmodule GADT_ordering :\n  sig\n    type point = { x : int; y : int; }\n    type _ is_point = Is_point : point is_point\n    val ( let+ ) : 'a -> ('a -> 'b) -> 'b\n    val ( and+ ) : 'a -> 'b -> 'a * 'b\n  end\n",(testsuite/tests/let-syntax/let_syntax.ml[683,14544+11]..[691,14759+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[693,14766+0]..[699,14945+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (testsuite/tests/let-syntax/let_syntax.ml[693,14766+4]..[693,14766+17])
          Ppat_var "gadt_ordering" (testsuite/tests/let-syntax/let_syntax.ml[693,14766+4]..[693,14766+17])
        expression (testsuite/tests/let-syntax/let_syntax.ml[694,14786+2]..[699,14945+3])
          Pexp_open Fresh
          module_expr (testsuite/tests/let-syntax/let_syntax.ml[694,14786+2]..[694,14786+15])
            Pmod_ident "GADT_ordering" (testsuite/tests/let-syntax/let_syntax.ml[694,14786+2]..[694,14786+15])
          expression (testsuite/tests/let-syntax/let_syntax.ml[695,14804+4]..[698,14931+13])
            Pexp_newtype "a"
            expression (testsuite/tests/let-syntax/let_syntax.ml[695,14804+17]..[698,14931+13]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (testsuite/tests/let-syntax/let_syntax.ml[695,14804+17]..[695,14804+40])
                Ppat_constraint
                pattern (testsuite/tests/let-syntax/let_syntax.ml[695,14804+18]..[695,14804+26])
                  Ppat_var "is_point" (testsuite/tests/let-syntax/let_syntax.ml[695,14804+18]..[695,14804+26])
                core_type (testsuite/tests/let-syntax/let_syntax.ml[695,14804+29]..[695,14804+39])
                  Ptyp_constr "is_point" (testsuite/tests/let-syntax/let_syntax.ml[695,14804+31]..[695,14804+39])
                  [
                    core_type (testsuite/tests/let-syntax/let_syntax.ml[695,14804+29]..[695,14804+30])
                      Ptyp_constr "a" (testsuite/tests/let-syntax/let_syntax.ml[695,14804+29]..[695,14804+30])
                      []
                  ]
              expression (testsuite/tests/let-syntax/let_syntax.ml[695,14804+41]..[698,14931+13]) ghost
                Pexp_fun
                Nolabel
                None
                pattern (testsuite/tests/let-syntax/let_syntax.ml[695,14804+41]..[695,14804+48])
                  Ppat_constraint
                  pattern (testsuite/tests/let-syntax/let_syntax.ml[695,14804+42]..[695,14804+43])
                    Ppat_var "a" (testsuite/tests/let-syntax/let_syntax.ml[695,14804+42]..[695,14804+43])
                  core_type (testsuite/tests/let-syntax/let_syntax.ml[695,14804+46]..[695,14804+47])
                    Ptyp_constr "a" (testsuite/tests/let-syntax/let_syntax.ml[695,14804+46]..[695,14804+47])
                    []
                expression (testsuite/tests/let-syntax/let_syntax.ml[696,14856+6]..[698,14931+13])
                  Pexp_letop
                  <binding_op> "let+" (testsuite/tests/let-syntax/let_syntax.ml[696,14856+6]..[696,14856+10]) (testsuite/tests/let-syntax/let_syntax.ml[696,14856+6]..[698,14931+13])                    pattern (testsuite/tests/let-syntax/let_syntax.ml[696,14856+11]..[696,14856+32]) ghost
                      Ppat_constraint
                      pattern (testsuite/tests/let-syntax/let_syntax.ml[696,14856+11]..[696,14856+19])
                        Ppat_construct "Is_point" (testsuite/tests/let-syntax/let_syntax.ml[696,14856+11]..[696,14856+19])
                        None
                      core_type (testsuite/tests/let-syntax/let_syntax.ml[696,14856+22]..[696,14856+32])
                        Ptyp_constr "is_point" (testsuite/tests/let-syntax/let_syntax.ml[696,14856+24]..[696,14856+32])
                        [
                          core_type (testsuite/tests/let-syntax/let_syntax.ml[696,14856+22]..[696,14856+23])
                            Ptyp_constr "a" (testsuite/tests/let-syntax/let_syntax.ml[696,14856+22]..[696,14856+23])
                            []
                        ]
                    expression (testsuite/tests/let-syntax/let_syntax.ml[696,14856+35]..[696,14856+43])
                      Pexp_ident "is_point" (testsuite/tests/let-syntax/let_syntax.ml[696,14856+35]..[696,14856+43])
                  [
                    <binding_op> "and+" (testsuite/tests/let-syntax/let_syntax.ml[697,14900+6]..[697,14900+10]) (testsuite/tests/let-syntax/let_syntax.ml[696,14856+11]..[697,14900+27])                      pattern (testsuite/tests/let-syntax/let_syntax.ml[697,14900+11]..[697,14900+23]) ghost
                        Ppat_constraint
                        pattern (testsuite/tests/let-syntax/let_syntax.ml[697,14900+11]..[697,14900+19])
                          Ppat_record Closed
                          [
                            "x" (testsuite/tests/let-syntax/let_syntax.ml[697,14900+13]..[697,14900+14]) ghost
                              pattern (testsuite/tests/let-syntax/let_syntax.ml[697,14900+13]..[697,14900+14])
                                Ppat_var "x" (testsuite/tests/let-syntax/let_syntax.ml[697,14900+13]..[697,14900+14])
                            "y" (testsuite/tests/let-syntax/let_syntax.ml[697,14900+16]..[697,14900+17]) ghost
                              pattern (testsuite/tests/let-syntax/let_syntax.ml[697,14900+16]..[697,14900+17])
                                Ppat_var "y" (testsuite/tests/let-syntax/let_syntax.ml[697,14900+16]..[697,14900+17])
                          ]
                        core_type (testsuite/tests/let-syntax/let_syntax.ml[697,14900+22]..[697,14900+23])
                          Ptyp_constr "a" (testsuite/tests/let-syntax/let_syntax.ml[697,14900+22]..[697,14900+23])
                          []
                      expression (testsuite/tests/let-syntax/let_syntax.ml[697,14900+26]..[697,14900+27])
                        Pexp_ident "a" (testsuite/tests/let-syntax/let_syntax.ml[697,14900+26]..[697,14900+27])
                  ]
                  expression (testsuite/tests/let-syntax/let_syntax.ml[698,14931+8]..[698,14931+13])
                    Pexp_apply
                    expression (testsuite/tests/let-syntax/let_syntax.ml[698,14931+10]..[698,14931+11])
                      Pexp_ident "+" (testsuite/tests/let-syntax/let_syntax.ml[698,14931+10]..[698,14931+11])
                    [
                      <arg>
                      Nolabel
                        expression (testsuite/tests/let-syntax/let_syntax.ml[698,14931+8]..[698,14931+9])
                          Pexp_ident "x" (testsuite/tests/let-syntax/let_syntax.ml[698,14931+8]..[698,14931+9])
                      <arg>
                      Nolabel
                        expression (testsuite/tests/let-syntax/let_syntax.ml[698,14931+12]..[698,14931+13])
                          Pexp_ident "y" (testsuite/tests/let-syntax/let_syntax.ml[698,14931+12]..[698,14931+13])
                    ]
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[700,14951+0]..[702,15030+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[700,14951+9]..[702,15030+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[700,14951+9]..[702,15030+2])
          Pexp_constant PConst_string ("\nval gadt_ordering : 'a GADT_ordering.is_point -> 'a -> int = <fun>\n",(testsuite/tests/let-syntax/let_syntax.ml[700,14951+11]..[702,15030+0]),Some "")
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[708,15367+0]..[714,15528+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (testsuite/tests/let-syntax/let_syntax.ml[708,15367+4]..[708,15367+16])
          Ppat_var "bad_location" (testsuite/tests/let-syntax/let_syntax.ml[708,15367+4]..[708,15367+16])
        expression (testsuite/tests/let-syntax/let_syntax.ml[709,15386+2]..[714,15528+3])
          Pexp_open Fresh
          module_expr (testsuite/tests/let-syntax/let_syntax.ml[709,15386+2]..[709,15386+15])
            Pmod_ident "GADT_ordering" (testsuite/tests/let-syntax/let_syntax.ml[709,15386+2]..[709,15386+15])
          expression (testsuite/tests/let-syntax/let_syntax.ml[710,15404+4]..[713,15514+13])
            Pexp_newtype "a"
            expression (testsuite/tests/let-syntax/let_syntax.ml[710,15404+17]..[713,15514+13]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (testsuite/tests/let-syntax/let_syntax.ml[710,15404+17]..[710,15404+40])
                Ppat_constraint
                pattern (testsuite/tests/let-syntax/let_syntax.ml[710,15404+18]..[710,15404+26])
                  Ppat_var "is_point" (testsuite/tests/let-syntax/let_syntax.ml[710,15404+18]..[710,15404+26])
                core_type (testsuite/tests/let-syntax/let_syntax.ml[710,15404+29]..[710,15404+39])
                  Ptyp_constr "is_point" (testsuite/tests/let-syntax/let_syntax.ml[710,15404+31]..[710,15404+39])
                  [
                    core_type (testsuite/tests/let-syntax/let_syntax.ml[710,15404+29]..[710,15404+30])
                      Ptyp_constr "a" (testsuite/tests/let-syntax/let_syntax.ml[710,15404+29]..[710,15404+30])
                      []
                  ]
              expression (testsuite/tests/let-syntax/let_syntax.ml[710,15404+41]..[713,15514+13]) ghost
                Pexp_fun
                Nolabel
                None
                pattern (testsuite/tests/let-syntax/let_syntax.ml[710,15404+41]..[710,15404+48])
                  Ppat_constraint
                  pattern (testsuite/tests/let-syntax/let_syntax.ml[710,15404+42]..[710,15404+43])
                    Ppat_var "a" (testsuite/tests/let-syntax/let_syntax.ml[710,15404+42]..[710,15404+43])
                  core_type (testsuite/tests/let-syntax/let_syntax.ml[710,15404+46]..[710,15404+47])
                    Ptyp_constr "a" (testsuite/tests/let-syntax/let_syntax.ml[710,15404+46]..[710,15404+47])
                    []
                expression (testsuite/tests/let-syntax/let_syntax.ml[711,15456+6]..[713,15514+13])
                  Pexp_letop
                  <binding_op> "let+" (testsuite/tests/let-syntax/let_syntax.ml[711,15456+6]..[711,15456+10]) (testsuite/tests/let-syntax/let_syntax.ml[711,15456+6]..[713,15514+13])                    pattern (testsuite/tests/let-syntax/let_syntax.ml[711,15456+11]..[711,15456+19])
                      Ppat_construct "Is_point" (testsuite/tests/let-syntax/let_syntax.ml[711,15456+11]..[711,15456+19])
                      None
                    expression (testsuite/tests/let-syntax/let_syntax.ml[711,15456+22]..[711,15456+30])
                      Pexp_ident "is_point" (testsuite/tests/let-syntax/let_syntax.ml[711,15456+22]..[711,15456+30])
                  [
                    <binding_op> "and+" (testsuite/tests/let-syntax/let_syntax.ml[712,15487+6]..[712,15487+10]) (testsuite/tests/let-syntax/let_syntax.ml[711,15456+11]..[712,15487+23])                      pattern (testsuite/tests/let-syntax/let_syntax.ml[712,15487+11]..[712,15487+19])
                        Ppat_record Closed
                        [
                          "x" (testsuite/tests/let-syntax/let_syntax.ml[712,15487+13]..[712,15487+14]) ghost
                            pattern (testsuite/tests/let-syntax/let_syntax.ml[712,15487+13]..[712,15487+14])
                              Ppat_var "x" (testsuite/tests/let-syntax/let_syntax.ml[712,15487+13]..[712,15487+14])
                          "y" (testsuite/tests/let-syntax/let_syntax.ml[712,15487+16]..[712,15487+17]) ghost
                            pattern (testsuite/tests/let-syntax/let_syntax.ml[712,15487+16]..[712,15487+17])
                              Ppat_var "y" (testsuite/tests/let-syntax/let_syntax.ml[712,15487+16]..[712,15487+17])
                        ]
                      expression (testsuite/tests/let-syntax/let_syntax.ml[712,15487+22]..[712,15487+23])
                        Pexp_ident "a" (testsuite/tests/let-syntax/let_syntax.ml[712,15487+22]..[712,15487+23])
                  ]
                  expression (testsuite/tests/let-syntax/let_syntax.ml[713,15514+8]..[713,15514+13])
                    Pexp_apply
                    expression (testsuite/tests/let-syntax/let_syntax.ml[713,15514+10]..[713,15514+11])
                      Pexp_ident "+" (testsuite/tests/let-syntax/let_syntax.ml[713,15514+10]..[713,15514+11])
                    [
                      <arg>
                      Nolabel
                        expression (testsuite/tests/let-syntax/let_syntax.ml[713,15514+8]..[713,15514+9])
                          Pexp_ident "x" (testsuite/tests/let-syntax/let_syntax.ml[713,15514+8]..[713,15514+9])
                      <arg>
                      Nolabel
                        expression (testsuite/tests/let-syntax/let_syntax.ml[713,15514+12]..[713,15514+13])
                          Pexp_ident "y" (testsuite/tests/let-syntax/let_syntax.ml[713,15514+12]..[713,15514+13])
                    ]
    ]
  structure_item (testsuite/tests/let-syntax/let_syntax.ml[715,15534+0]..[731,16216+3])
    Pstr_extension "expect"
    [
      structure_item (testsuite/tests/let-syntax/let_syntax.ml[715,15534+9]..[731,16216+2])
        Pstr_eval
        expression (testsuite/tests/let-syntax/let_syntax.ml[715,15534+9]..[731,16216+2])
          Pexp_tuple
          [
            expression (testsuite/tests/let-syntax/let_syntax.ml[715,15534+9]..[717,15612+2])
              Pexp_constant PConst_string ("\nval bad_location : 'a GADT_ordering.is_point -> 'a -> int = <fun>\n",(testsuite/tests/let-syntax/let_syntax.ml[715,15534+11]..[717,15612+0]),Some "")
            expression (testsuite/tests/let-syntax/let_syntax.ml[717,15612+4]..[731,16216+2])
              Pexp_construct "Principal" (testsuite/tests/let-syntax/let_syntax.ml[717,15612+4]..[717,15612+13])
              Some
                expression (testsuite/tests/let-syntax/let_syntax.ml[717,15612+13]..[731,16216+2])
                  Pexp_constant PConst_string ("\nLine 4, characters 11-19:\n4 |       let+ Is_point = is_point\n               ^^^^^^^^\nWarning 18 [not-principal]: typing this pattern requires considering GADT_ordering.point and a as equal.\nBut the knowledge of these types is not principal.\nLine 5, characters 11-19:\n5 |       and+ { x; y } = a in\n               ^^^^^^^^\nError: This pattern matches values of type GADT_ordering.point\n       but a pattern was expected which matches values of type\n         a = GADT_ordering.point\n       This instance of GADT_ordering.point is ambiguous:\n       it would escape the scope of its equation\n",(testsuite/tests/let-syntax/let_syntax.ml[717,15612+15]..[731,16216+0]),Some "")
          ]
    ]
]

