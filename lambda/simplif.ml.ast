[
  structure_item (lambda/simplif.ml[19,1186+0]..[19,1186+13])
    Pstr_open Fresh
    module_expr (lambda/simplif.ml[19,1186+5]..[19,1186+13])
      Pmod_ident "Asttypes" (lambda/simplif.ml[19,1186+5]..[19,1186+13])
  structure_item (lambda/simplif.ml[20,1200+0]..[20,1200+11])
    Pstr_open Fresh
    module_expr (lambda/simplif.ml[20,1200+5]..[20,1200+11])
      Pmod_ident "Lambda" (lambda/simplif.ml[20,1200+5]..[20,1200+11])
  structure_item (lambda/simplif.ml[21,1212+0]..[21,1212+30])
    Pstr_open Fresh
    module_expr (lambda/simplif.ml[21,1212+5]..[21,1212+30])
      Pmod_ident "Debuginfo.Scoped_location" (lambda/simplif.ml[21,1212+5]..[21,1212+30])
  structure_item (lambda/simplif.ml[25,1300+0]..[25,1300+24])
    Pstr_exception
    type_exception
      ptyext_constructor =
        extension_constructor (lambda/simplif.ml[25,1300+0]..[25,1300+24])
          pext_name = "Real_reference"
          pext_kind =
            Pext_decl
              []
              None
  structure_item (lambda/simplif.ml[27,1326+0]..[94,4079+36])
    Pstr_value Rec
    [
      <def>
        pattern (lambda/simplif.ml[27,1326+8]..[27,1326+21])
          Ppat_var "eliminate_ref" (lambda/simplif.ml[27,1326+8]..[27,1326+21])
        expression (lambda/simplif.ml[27,1326+22]..[94,4079+36]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lambda/simplif.ml[27,1326+22]..[27,1326+24])
            Ppat_var "id" (lambda/simplif.ml[27,1326+22]..[27,1326+24])
          expression (lambda/simplif.ml[27,1326+27]..[94,4079+36])
            Pexp_function
            [
              <case>
                pattern (lambda/simplif.ml[28,1362+4]..[28,1362+17])
                  Ppat_alias "lam" (lambda/simplif.ml[28,1362+14]..[28,1362+17])
                  pattern (lambda/simplif.ml[28,1362+4]..[28,1362+10])
                    Ppat_construct "Lvar" (lambda/simplif.ml[28,1362+4]..[28,1362+8])
                    Some
                      []
                      pattern (lambda/simplif.ml[28,1362+9]..[28,1362+10])
                        Ppat_var "v" (lambda/simplif.ml[28,1362+9]..[28,1362+10])
                expression (lambda/simplif.ml[29,1383+6]..[29,1383+59])
                  Pexp_ifthenelse
                  expression (lambda/simplif.ml[29,1383+9]..[29,1383+24])
                    Pexp_apply
                    expression (lambda/simplif.ml[29,1383+9]..[29,1383+19])
                      Pexp_ident "Ident.same" (lambda/simplif.ml[29,1383+9]..[29,1383+19])
                    [
                      <arg>
                      Nolabel
                        expression (lambda/simplif.ml[29,1383+20]..[29,1383+21])
                          Pexp_ident "v" (lambda/simplif.ml[29,1383+20]..[29,1383+21])
                      <arg>
                      Nolabel
                        expression (lambda/simplif.ml[29,1383+22]..[29,1383+24])
                          Pexp_ident "id" (lambda/simplif.ml[29,1383+22]..[29,1383+24])
                    ]
                  expression (lambda/simplif.ml[29,1383+30]..[29,1383+50])
                    Pexp_apply
                    expression (lambda/simplif.ml[29,1383+30]..[29,1383+35])
                      Pexp_ident "raise" (lambda/simplif.ml[29,1383+30]..[29,1383+35])
                    [
                      <arg>
                      Nolabel
                        expression (lambda/simplif.ml[29,1383+36]..[29,1383+50])
                          Pexp_construct "Real_reference" (lambda/simplif.ml[29,1383+36]..[29,1383+50])
                          None
                    ]
                  Some
                    expression (lambda/simplif.ml[29,1383+56]..[29,1383+59])
                      Pexp_ident "lam" (lambda/simplif.ml[29,1383+56]..[29,1383+59])
              <case>
                pattern (lambda/simplif.ml[30,1443+4]..[30,1443+31])
                  Ppat_alias "lam" (lambda/simplif.ml[30,1443+28]..[30,1443+31])
                  pattern (lambda/simplif.ml[30,1443+4]..[30,1443+24])
                    Ppat_or
                    pattern (lambda/simplif.ml[30,1443+4]..[30,1443+13])
                      Ppat_construct "Lmutvar" (lambda/simplif.ml[30,1443+4]..[30,1443+11])
                      Some
                        []
                        pattern (lambda/simplif.ml[30,1443+12]..[30,1443+13])
                          Ppat_any
                    pattern (lambda/simplif.ml[30,1443+16]..[30,1443+24])
                      Ppat_construct "Lconst" (lambda/simplif.ml[30,1443+16]..[30,1443+22])
                      Some
                        []
                        pattern (lambda/simplif.ml[30,1443+23]..[30,1443+24])
                          Ppat_any
                expression (lambda/simplif.ml[30,1443+35]..[30,1443+38])
                  Pexp_ident "lam" (lambda/simplif.ml[30,1443+35]..[30,1443+38])
              <case>
                pattern (lambda/simplif.ml[31,1482+4]..[31,1482+13])
                  Ppat_construct "Lapply" (lambda/simplif.ml[31,1482+4]..[31,1482+10])
                  Some
                    []
                    pattern (lambda/simplif.ml[31,1482+11]..[31,1482+13])
                      Ppat_var "ap" (lambda/simplif.ml[31,1482+11]..[31,1482+13])
                expression (lambda/simplif.ml[32,1499+6]..[33,1559+70])
                  Pexp_construct "Lapply" (lambda/simplif.ml[32,1499+6]..[32,1499+12])
                  Some
                    expression (lambda/simplif.ml[32,1499+12]..[33,1559+70])
                      Pexp_record
                      [
                        "ap_func" (lambda/simplif.ml[32,1499+21]..[32,1499+28])
                          expression (lambda/simplif.ml[32,1499+31]..[32,1499+58])
                            Pexp_apply
                            expression (lambda/simplif.ml[32,1499+31]..[32,1499+44])
                              Pexp_ident "eliminate_ref" (lambda/simplif.ml[32,1499+31]..[32,1499+44])
                            [
                              <arg>
                              Nolabel
                                expression (lambda/simplif.ml[32,1499+45]..[32,1499+47])
                                  Pexp_ident "id" (lambda/simplif.ml[32,1499+45]..[32,1499+47])
                              <arg>
                              Nolabel
                                expression (lambda/simplif.ml[32,1499+48]..[32,1499+58])
                                  Pexp_field
                                  expression (lambda/simplif.ml[32,1499+48]..[32,1499+50])
                                    Pexp_ident "ap" (lambda/simplif.ml[32,1499+48]..[32,1499+50])
                                  "ap_func" (lambda/simplif.ml[32,1499+51]..[32,1499+58])
                            ]
                        "ap_args" (lambda/simplif.ml[33,1559+21]..[33,1559+28])
                          expression (lambda/simplif.ml[33,1559+31]..[33,1559+69])
                            Pexp_apply
                            expression (lambda/simplif.ml[33,1559+31]..[33,1559+39])
                              Pexp_ident "List.map" (lambda/simplif.ml[33,1559+31]..[33,1559+39])
                            [
                              <arg>
                              Nolabel
                                expression (lambda/simplif.ml[33,1559+40]..[33,1559+58])
                                  Pexp_apply
                                  expression (lambda/simplif.ml[33,1559+41]..[33,1559+54])
                                    Pexp_ident "eliminate_ref" (lambda/simplif.ml[33,1559+41]..[33,1559+54])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[33,1559+55]..[33,1559+57])
                                        Pexp_ident "id" (lambda/simplif.ml[33,1559+55]..[33,1559+57])
                                  ]
                              <arg>
                              Nolabel
                                expression (lambda/simplif.ml[33,1559+59]..[33,1559+69])
                                  Pexp_field
                                  expression (lambda/simplif.ml[33,1559+59]..[33,1559+61])
                                    Pexp_ident "ap" (lambda/simplif.ml[33,1559+59]..[33,1559+61])
                                  "ap_args" (lambda/simplif.ml[33,1559+62]..[33,1559+69])
                            ]
                      ]
                      Some
                        expression (lambda/simplif.ml[32,1499+13]..[32,1499+15])
                          Pexp_ident "ap" (lambda/simplif.ml[32,1499+13]..[32,1499+15])
              <case>
                pattern (lambda/simplif.ml[34,1630+4]..[34,1630+22])
                  Ppat_alias "lam" (lambda/simplif.ml[34,1630+19]..[34,1630+22])
                  pattern (lambda/simplif.ml[34,1630+4]..[34,1630+15])
                    Ppat_construct "Lfunction" (lambda/simplif.ml[34,1630+4]..[34,1630+13])
                    Some
                      []
                      pattern (lambda/simplif.ml[34,1630+14]..[34,1630+15])
                        Ppat_any
                expression (lambda/simplif.ml[35,1656+6]..[37,1735+14])
                  Pexp_ifthenelse
                  expression (lambda/simplif.ml[35,1656+9]..[35,1656+46])
                    Pexp_apply
                    expression (lambda/simplif.ml[35,1656+9]..[35,1656+22])
                      Pexp_ident "Ident.Set.mem" (lambda/simplif.ml[35,1656+9]..[35,1656+22])
                    [
                      <arg>
                      Nolabel
                        expression (lambda/simplif.ml[35,1656+23]..[35,1656+25])
                          Pexp_ident "id" (lambda/simplif.ml[35,1656+23]..[35,1656+25])
                      <arg>
                      Nolabel
                        expression (lambda/simplif.ml[35,1656+26]..[35,1656+46])
                          Pexp_apply
                          expression (lambda/simplif.ml[35,1656+27]..[35,1656+41])
                            Pexp_ident "free_variables" (lambda/simplif.ml[35,1656+27]..[35,1656+41])
                          [
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[35,1656+42]..[35,1656+45])
                                Pexp_ident "lam" (lambda/simplif.ml[35,1656+42]..[35,1656+45])
                          ]
                    ]
                  expression (lambda/simplif.ml[36,1703+11]..[36,1703+31])
                    Pexp_apply
                    expression (lambda/simplif.ml[36,1703+11]..[36,1703+16])
                      Pexp_ident "raise" (lambda/simplif.ml[36,1703+11]..[36,1703+16])
                    [
                      <arg>
                      Nolabel
                        expression (lambda/simplif.ml[36,1703+17]..[36,1703+31])
                          Pexp_construct "Real_reference" (lambda/simplif.ml[36,1703+17]..[36,1703+31])
                          None
                    ]
                  Some
                    expression (lambda/simplif.ml[37,1735+11]..[37,1735+14])
                      Pexp_ident "lam" (lambda/simplif.ml[37,1735+11]..[37,1735+14])
              <case>
                pattern (lambda/simplif.ml[38,1750+4]..[38,1750+30])
                  Ppat_construct "Llet" (lambda/simplif.ml[38,1750+4]..[38,1750+8])
                  Some
                    []
                    pattern (lambda/simplif.ml[38,1750+8]..[38,1750+30])
                      Ppat_tuple
                      [
                        pattern (lambda/simplif.ml[38,1750+9]..[38,1750+12])
                          Ppat_var "str" (lambda/simplif.ml[38,1750+9]..[38,1750+12])
                        pattern (lambda/simplif.ml[38,1750+14]..[38,1750+18])
                          Ppat_var "kind" (lambda/simplif.ml[38,1750+14]..[38,1750+18])
                        pattern (lambda/simplif.ml[38,1750+20]..[38,1750+21])
                          Ppat_var "v" (lambda/simplif.ml[38,1750+20]..[38,1750+21])
                        pattern (lambda/simplif.ml[38,1750+23]..[38,1750+25])
                          Ppat_var "e1" (lambda/simplif.ml[38,1750+23]..[38,1750+25])
                        pattern (lambda/simplif.ml[38,1750+27]..[38,1750+29])
                          Ppat_var "e2" (lambda/simplif.ml[38,1750+27]..[38,1750+29])
                      ]
                expression (lambda/simplif.ml[39,1784+6]..[39,1784+66])
                  Pexp_construct "Llet" (lambda/simplif.ml[39,1784+6]..[39,1784+10])
                  Some
                    expression (lambda/simplif.ml[39,1784+10]..[39,1784+66])
                      Pexp_tuple
                      [
                        expression (lambda/simplif.ml[39,1784+11]..[39,1784+14])
                          Pexp_ident "str" (lambda/simplif.ml[39,1784+11]..[39,1784+14])
                        expression (lambda/simplif.ml[39,1784+16]..[39,1784+20])
                          Pexp_ident "kind" (lambda/simplif.ml[39,1784+16]..[39,1784+20])
                        expression (lambda/simplif.ml[39,1784+22]..[39,1784+23])
                          Pexp_ident "v" (lambda/simplif.ml[39,1784+22]..[39,1784+23])
                        expression (lambda/simplif.ml[39,1784+25]..[39,1784+44])
                          Pexp_apply
                          expression (lambda/simplif.ml[39,1784+25]..[39,1784+38])
                            Pexp_ident "eliminate_ref" (lambda/simplif.ml[39,1784+25]..[39,1784+38])
                          [
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[39,1784+39]..[39,1784+41])
                                Pexp_ident "id" (lambda/simplif.ml[39,1784+39]..[39,1784+41])
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[39,1784+42]..[39,1784+44])
                                Pexp_ident "e1" (lambda/simplif.ml[39,1784+42]..[39,1784+44])
                          ]
                        expression (lambda/simplif.ml[39,1784+46]..[39,1784+65])
                          Pexp_apply
                          expression (lambda/simplif.ml[39,1784+46]..[39,1784+59])
                            Pexp_ident "eliminate_ref" (lambda/simplif.ml[39,1784+46]..[39,1784+59])
                          [
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[39,1784+60]..[39,1784+62])
                                Pexp_ident "id" (lambda/simplif.ml[39,1784+60]..[39,1784+62])
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[39,1784+63]..[39,1784+65])
                                Pexp_ident "e2" (lambda/simplif.ml[39,1784+63]..[39,1784+65])
                          ]
                      ]
              <case>
                pattern (lambda/simplif.ml[40,1851+4]..[40,1851+28])
                  Ppat_construct "Lmutlet" (lambda/simplif.ml[40,1851+4]..[40,1851+11])
                  Some
                    []
                    pattern (lambda/simplif.ml[40,1851+11]..[40,1851+28])
                      Ppat_tuple
                      [
                        pattern (lambda/simplif.ml[40,1851+12]..[40,1851+16])
                          Ppat_var "kind" (lambda/simplif.ml[40,1851+12]..[40,1851+16])
                        pattern (lambda/simplif.ml[40,1851+18]..[40,1851+19])
                          Ppat_var "v" (lambda/simplif.ml[40,1851+18]..[40,1851+19])
                        pattern (lambda/simplif.ml[40,1851+21]..[40,1851+23])
                          Ppat_var "e1" (lambda/simplif.ml[40,1851+21]..[40,1851+23])
                        pattern (lambda/simplif.ml[40,1851+25]..[40,1851+27])
                          Ppat_var "e2" (lambda/simplif.ml[40,1851+25]..[40,1851+27])
                      ]
                expression (lambda/simplif.ml[41,1883+6]..[41,1883+64])
                  Pexp_construct "Lmutlet" (lambda/simplif.ml[41,1883+6]..[41,1883+13])
                  Some
                    expression (lambda/simplif.ml[41,1883+13]..[41,1883+64])
                      Pexp_tuple
                      [
                        expression (lambda/simplif.ml[41,1883+14]..[41,1883+18])
                          Pexp_ident "kind" (lambda/simplif.ml[41,1883+14]..[41,1883+18])
                        expression (lambda/simplif.ml[41,1883+20]..[41,1883+21])
                          Pexp_ident "v" (lambda/simplif.ml[41,1883+20]..[41,1883+21])
                        expression (lambda/simplif.ml[41,1883+23]..[41,1883+42])
                          Pexp_apply
                          expression (lambda/simplif.ml[41,1883+23]..[41,1883+36])
                            Pexp_ident "eliminate_ref" (lambda/simplif.ml[41,1883+23]..[41,1883+36])
                          [
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[41,1883+37]..[41,1883+39])
                                Pexp_ident "id" (lambda/simplif.ml[41,1883+37]..[41,1883+39])
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[41,1883+40]..[41,1883+42])
                                Pexp_ident "e1" (lambda/simplif.ml[41,1883+40]..[41,1883+42])
                          ]
                        expression (lambda/simplif.ml[41,1883+44]..[41,1883+63])
                          Pexp_apply
                          expression (lambda/simplif.ml[41,1883+44]..[41,1883+57])
                            Pexp_ident "eliminate_ref" (lambda/simplif.ml[41,1883+44]..[41,1883+57])
                          [
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[41,1883+58]..[41,1883+60])
                                Pexp_ident "id" (lambda/simplif.ml[41,1883+58]..[41,1883+60])
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[41,1883+61]..[41,1883+63])
                                Pexp_ident "e2" (lambda/simplif.ml[41,1883+61]..[41,1883+63])
                          ]
                      ]
              <case>
                pattern (lambda/simplif.ml[42,1948+4]..[42,1948+21])
                  Ppat_construct "Lletrec" (lambda/simplif.ml[42,1948+4]..[42,1948+11])
                  Some
                    []
                    pattern (lambda/simplif.ml[42,1948+11]..[42,1948+21])
                      Ppat_tuple
                      [
                        pattern (lambda/simplif.ml[42,1948+12]..[42,1948+16])
                          Ppat_var "idel" (lambda/simplif.ml[42,1948+12]..[42,1948+16])
                        pattern (lambda/simplif.ml[42,1948+18]..[42,1948+20])
                          Ppat_var "e2" (lambda/simplif.ml[42,1948+18]..[42,1948+20])
                      ]
                expression (lambda/simplif.ml[43,1973+6]..[44,2042+34])
                  Pexp_construct "Lletrec" (lambda/simplif.ml[43,1973+6]..[43,1973+13])
                  Some
                    expression (lambda/simplif.ml[43,1973+13]..[44,2042+34])
                      Pexp_tuple
                      [
                        expression (lambda/simplif.ml[43,1973+14]..[43,1973+67])
                          Pexp_apply
                          expression (lambda/simplif.ml[43,1973+14]..[43,1973+22])
                            Pexp_ident "List.map" (lambda/simplif.ml[43,1973+14]..[43,1973+22])
                          [
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[43,1973+23]..[43,1973+62])
                                Pexp_fun
                                Nolabel
                                None
                                pattern (lambda/simplif.ml[43,1973+28]..[43,1973+34])
                                  Ppat_tuple
                                  [
                                    pattern (lambda/simplif.ml[43,1973+29]..[43,1973+30])
                                      Ppat_var "v" (lambda/simplif.ml[43,1973+29]..[43,1973+30])
                                    pattern (lambda/simplif.ml[43,1973+32]..[43,1973+33])
                                      Ppat_var "e" (lambda/simplif.ml[43,1973+32]..[43,1973+33])
                                  ]
                                expression (lambda/simplif.ml[43,1973+38]..[43,1973+61])
                                  Pexp_tuple
                                  [
                                    expression (lambda/simplif.ml[43,1973+39]..[43,1973+40])
                                      Pexp_ident "v" (lambda/simplif.ml[43,1973+39]..[43,1973+40])
                                    expression (lambda/simplif.ml[43,1973+42]..[43,1973+60])
                                      Pexp_apply
                                      expression (lambda/simplif.ml[43,1973+42]..[43,1973+55])
                                        Pexp_ident "eliminate_ref" (lambda/simplif.ml[43,1973+42]..[43,1973+55])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lambda/simplif.ml[43,1973+56]..[43,1973+58])
                                            Pexp_ident "id" (lambda/simplif.ml[43,1973+56]..[43,1973+58])
                                        <arg>
                                        Nolabel
                                          expression (lambda/simplif.ml[43,1973+59]..[43,1973+60])
                                            Pexp_ident "e" (lambda/simplif.ml[43,1973+59]..[43,1973+60])
                                      ]
                                  ]
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[43,1973+63]..[43,1973+67])
                                Pexp_ident "idel" (lambda/simplif.ml[43,1973+63]..[43,1973+67])
                          ]
                        expression (lambda/simplif.ml[44,2042+14]..[44,2042+33])
                          Pexp_apply
                          expression (lambda/simplif.ml[44,2042+14]..[44,2042+27])
                            Pexp_ident "eliminate_ref" (lambda/simplif.ml[44,2042+14]..[44,2042+27])
                          [
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[44,2042+28]..[44,2042+30])
                                Pexp_ident "id" (lambda/simplif.ml[44,2042+28]..[44,2042+30])
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[44,2042+31]..[44,2042+33])
                                Pexp_ident "e2" (lambda/simplif.ml[44,2042+31]..[44,2042+33])
                          ]
                      ]
              <case>
                pattern (lambda/simplif.ml[45,2077+4]..[45,2077+32])
                  Ppat_construct "Lprim" (lambda/simplif.ml[45,2077+4]..[45,2077+9])
                  Some
                    []
                    pattern (lambda/simplif.ml[45,2077+9]..[45,2077+32])
                      Ppat_tuple
                      [
                        pattern (lambda/simplif.ml[45,2077+10]..[45,2077+18])
                          Ppat_construct "Pfield" (lambda/simplif.ml[45,2077+10]..[45,2077+16])
                          Some
                            []
                            pattern (lambda/simplif.ml[45,2077+17]..[45,2077+18])
                              Ppat_constant PConst_int (0,None)
                        pattern (lambda/simplif.ml[45,2077+20]..[45,2077+28])
                          Ppat_construct "::" (lambda/simplif.ml[45,2077+21]..[45,2077+28]) ghost
                          Some
                            []
                            pattern (lambda/simplif.ml[45,2077+21]..[45,2077+28]) ghost
                              Ppat_tuple
                              [
                                pattern (lambda/simplif.ml[45,2077+21]..[45,2077+27])
                                  Ppat_construct "Lvar" (lambda/simplif.ml[45,2077+21]..[45,2077+25])
                                  Some
                                    []
                                    pattern (lambda/simplif.ml[45,2077+26]..[45,2077+27])
                                      Ppat_var "v" (lambda/simplif.ml[45,2077+26]..[45,2077+27])
                                pattern (lambda/simplif.ml[45,2077+27]..[45,2077+28]) ghost
                                  Ppat_construct "[]" (lambda/simplif.ml[45,2077+27]..[45,2077+28]) ghost
                                  None
                              ]
                        pattern (lambda/simplif.ml[45,2077+30]..[45,2077+31])
                          Ppat_any
                      ]
                <when>
                  expression (lambda/simplif.ml[45,2077+38]..[45,2077+53])
                    Pexp_apply
                    expression (lambda/simplif.ml[45,2077+38]..[45,2077+48])
                      Pexp_ident "Ident.same" (lambda/simplif.ml[45,2077+38]..[45,2077+48])
                    [
                      <arg>
                      Nolabel
                        expression (lambda/simplif.ml[45,2077+49]..[45,2077+50])
                          Pexp_ident "v" (lambda/simplif.ml[45,2077+49]..[45,2077+50])
                      <arg>
                      Nolabel
                        expression (lambda/simplif.ml[45,2077+51]..[45,2077+53])
                          Pexp_ident "id" (lambda/simplif.ml[45,2077+51]..[45,2077+53])
                    ]
                expression (lambda/simplif.ml[46,2134+6]..[46,2134+16])
                  Pexp_construct "Lmutvar" (lambda/simplif.ml[46,2134+6]..[46,2134+13])
                  Some
                    expression (lambda/simplif.ml[46,2134+14]..[46,2134+16])
                      Pexp_ident "id" (lambda/simplif.ml[46,2134+14]..[46,2134+16])
              <case>
                pattern (lambda/simplif.ml[47,2151+4]..[47,2151+45])
                  Ppat_construct "Lprim" (lambda/simplif.ml[47,2151+4]..[47,2151+9])
                  Some
                    []
                    pattern (lambda/simplif.ml[47,2151+9]..[47,2151+45])
                      Ppat_tuple
                      [
                        pattern (lambda/simplif.ml[47,2151+10]..[47,2151+28])
                          Ppat_construct "Psetfield" (lambda/simplif.ml[47,2151+10]..[47,2151+19])
                          Some
                            []
                            pattern (lambda/simplif.ml[47,2151+19]..[47,2151+28])
                              Ppat_tuple
                              [
                                pattern (lambda/simplif.ml[47,2151+20]..[47,2151+21])
                                  Ppat_constant PConst_int (0,None)
                                pattern (lambda/simplif.ml[47,2151+23]..[47,2151+24])
                                  Ppat_any
                                pattern (lambda/simplif.ml[47,2151+26]..[47,2151+27])
                                  Ppat_any
                              ]
                        pattern (lambda/simplif.ml[47,2151+30]..[47,2151+41])
                          Ppat_construct "::" (lambda/simplif.ml[47,2151+31]..[47,2151+41]) ghost
                          Some
                            []
                            pattern (lambda/simplif.ml[47,2151+31]..[47,2151+41]) ghost
                              Ppat_tuple
                              [
                                pattern (lambda/simplif.ml[47,2151+31]..[47,2151+37])
                                  Ppat_construct "Lvar" (lambda/simplif.ml[47,2151+31]..[47,2151+35])
                                  Some
                                    []
                                    pattern (lambda/simplif.ml[47,2151+36]..[47,2151+37])
                                      Ppat_var "v" (lambda/simplif.ml[47,2151+36]..[47,2151+37])
                                pattern (lambda/simplif.ml[47,2151+39]..[47,2151+41]) ghost
                                  Ppat_construct "::" (lambda/simplif.ml[47,2151+39]..[47,2151+41]) ghost
                                  Some
                                    []
                                    pattern (lambda/simplif.ml[47,2151+39]..[47,2151+41]) ghost
                                      Ppat_tuple
                                      [
                                        pattern (lambda/simplif.ml[47,2151+39]..[47,2151+40])
                                          Ppat_var "e" (lambda/simplif.ml[47,2151+39]..[47,2151+40])
                                        pattern (lambda/simplif.ml[47,2151+40]..[47,2151+41]) ghost
                                          Ppat_construct "[]" (lambda/simplif.ml[47,2151+40]..[47,2151+41]) ghost
                                          None
                                      ]
                              ]
                        pattern (lambda/simplif.ml[47,2151+43]..[47,2151+44])
                          Ppat_any
                      ]
                <when>
                  expression (lambda/simplif.ml[47,2151+51]..[47,2151+66])
                    Pexp_apply
                    expression (lambda/simplif.ml[47,2151+51]..[47,2151+61])
                      Pexp_ident "Ident.same" (lambda/simplif.ml[47,2151+51]..[47,2151+61])
                    [
                      <arg>
                      Nolabel
                        expression (lambda/simplif.ml[47,2151+62]..[47,2151+63])
                          Pexp_ident "v" (lambda/simplif.ml[47,2151+62]..[47,2151+63])
                      <arg>
                      Nolabel
                        expression (lambda/simplif.ml[47,2151+64]..[47,2151+66])
                          Pexp_ident "id" (lambda/simplif.ml[47,2151+64]..[47,2151+66])
                    ]
                expression (lambda/simplif.ml[48,2221+6]..[48,2221+37])
                  Pexp_construct "Lassign" (lambda/simplif.ml[48,2221+6]..[48,2221+13])
                  Some
                    expression (lambda/simplif.ml[48,2221+13]..[48,2221+37])
                      Pexp_tuple
                      [
                        expression (lambda/simplif.ml[48,2221+14]..[48,2221+16])
                          Pexp_ident "id" (lambda/simplif.ml[48,2221+14]..[48,2221+16])
                        expression (lambda/simplif.ml[48,2221+18]..[48,2221+36])
                          Pexp_apply
                          expression (lambda/simplif.ml[48,2221+18]..[48,2221+31])
                            Pexp_ident "eliminate_ref" (lambda/simplif.ml[48,2221+18]..[48,2221+31])
                          [
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[48,2221+32]..[48,2221+34])
                                Pexp_ident "id" (lambda/simplif.ml[48,2221+32]..[48,2221+34])
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[48,2221+35]..[48,2221+36])
                                Pexp_ident "e" (lambda/simplif.ml[48,2221+35]..[48,2221+36])
                          ]
                      ]
              <case>
                pattern (lambda/simplif.ml[49,2259+4]..[49,2259+42])
                  Ppat_construct "Lprim" (lambda/simplif.ml[49,2259+4]..[49,2259+9])
                  Some
                    []
                    pattern (lambda/simplif.ml[49,2259+9]..[49,2259+42])
                      Ppat_tuple
                      [
                        pattern (lambda/simplif.ml[49,2259+10]..[49,2259+26])
                          Ppat_construct "Poffsetref" (lambda/simplif.ml[49,2259+10]..[49,2259+20])
                          Some
                            []
                            pattern (lambda/simplif.ml[49,2259+21]..[49,2259+26])
                              Ppat_var "delta" (lambda/simplif.ml[49,2259+21]..[49,2259+26])
                        pattern (lambda/simplif.ml[49,2259+28]..[49,2259+36])
                          Ppat_construct "::" (lambda/simplif.ml[49,2259+29]..[49,2259+36]) ghost
                          Some
                            []
                            pattern (lambda/simplif.ml[49,2259+29]..[49,2259+36]) ghost
                              Ppat_tuple
                              [
                                pattern (lambda/simplif.ml[49,2259+29]..[49,2259+35])
                                  Ppat_construct "Lvar" (lambda/simplif.ml[49,2259+29]..[49,2259+33])
                                  Some
                                    []
                                    pattern (lambda/simplif.ml[49,2259+34]..[49,2259+35])
                                      Ppat_var "v" (lambda/simplif.ml[49,2259+34]..[49,2259+35])
                                pattern (lambda/simplif.ml[49,2259+35]..[49,2259+36]) ghost
                                  Ppat_construct "[]" (lambda/simplif.ml[49,2259+35]..[49,2259+36]) ghost
                                  None
                              ]
                        pattern (lambda/simplif.ml[49,2259+38]..[49,2259+41])
                          Ppat_var "loc" (lambda/simplif.ml[49,2259+38]..[49,2259+41])
                      ]
                <when>
                  expression (lambda/simplif.ml[49,2259+48]..[49,2259+63])
                    Pexp_apply
                    expression (lambda/simplif.ml[49,2259+48]..[49,2259+58])
                      Pexp_ident "Ident.same" (lambda/simplif.ml[49,2259+48]..[49,2259+58])
                    [
                      <arg>
                      Nolabel
                        expression (lambda/simplif.ml[49,2259+59]..[49,2259+60])
                          Pexp_ident "v" (lambda/simplif.ml[49,2259+59]..[49,2259+60])
                      <arg>
                      Nolabel
                        expression (lambda/simplif.ml[49,2259+61]..[49,2259+63])
                          Pexp_ident "id" (lambda/simplif.ml[49,2259+61]..[49,2259+63])
                    ]
                expression (lambda/simplif.ml[50,2326+6]..[50,2326+61])
                  Pexp_construct "Lassign" (lambda/simplif.ml[50,2326+6]..[50,2326+13])
                  Some
                    expression (lambda/simplif.ml[50,2326+13]..[50,2326+61])
                      Pexp_tuple
                      [
                        expression (lambda/simplif.ml[50,2326+14]..[50,2326+16])
                          Pexp_ident "id" (lambda/simplif.ml[50,2326+14]..[50,2326+16])
                        expression (lambda/simplif.ml[50,2326+18]..[50,2326+60])
                          Pexp_construct "Lprim" (lambda/simplif.ml[50,2326+18]..[50,2326+23])
                          Some
                            expression (lambda/simplif.ml[50,2326+23]..[50,2326+60])
                              Pexp_tuple
                              [
                                expression (lambda/simplif.ml[50,2326+24]..[50,2326+40])
                                  Pexp_construct "Poffsetint" (lambda/simplif.ml[50,2326+24]..[50,2326+34])
                                  Some
                                    expression (lambda/simplif.ml[50,2326+35]..[50,2326+40])
                                      Pexp_ident "delta" (lambda/simplif.ml[50,2326+35]..[50,2326+40])
                                expression (lambda/simplif.ml[50,2326+42]..[50,2326+54])
                                  Pexp_construct "::" (lambda/simplif.ml[50,2326+43]..[50,2326+54]) ghost
                                  Some
                                    expression (lambda/simplif.ml[50,2326+43]..[50,2326+54]) ghost
                                      Pexp_tuple
                                      [
                                        expression (lambda/simplif.ml[50,2326+43]..[50,2326+53])
                                          Pexp_construct "Lmutvar" (lambda/simplif.ml[50,2326+43]..[50,2326+50])
                                          Some
                                            expression (lambda/simplif.ml[50,2326+51]..[50,2326+53])
                                              Pexp_ident "id" (lambda/simplif.ml[50,2326+51]..[50,2326+53])
                                        expression (lambda/simplif.ml[50,2326+53]..[50,2326+54]) ghost
                                          Pexp_construct "[]" (lambda/simplif.ml[50,2326+53]..[50,2326+54]) ghost
                                          None
                                      ]
                                expression (lambda/simplif.ml[50,2326+56]..[50,2326+59])
                                  Pexp_ident "loc" (lambda/simplif.ml[50,2326+56]..[50,2326+59])
                              ]
                      ]
              <case>
                pattern (lambda/simplif.ml[51,2388+4]..[51,2388+21])
                  Ppat_construct "Lprim" (lambda/simplif.ml[51,2388+4]..[51,2388+9])
                  Some
                    []
                    pattern (lambda/simplif.ml[51,2388+9]..[51,2388+21])
                      Ppat_tuple
                      [
                        pattern (lambda/simplif.ml[51,2388+10]..[51,2388+11])
                          Ppat_var "p" (lambda/simplif.ml[51,2388+10]..[51,2388+11])
                        pattern (lambda/simplif.ml[51,2388+13]..[51,2388+15])
                          Ppat_var "el" (lambda/simplif.ml[51,2388+13]..[51,2388+15])
                        pattern (lambda/simplif.ml[51,2388+17]..[51,2388+20])
                          Ppat_var "loc" (lambda/simplif.ml[51,2388+17]..[51,2388+20])
                      ]
                expression (lambda/simplif.ml[52,2413+6]..[52,2413+51])
                  Pexp_construct "Lprim" (lambda/simplif.ml[52,2413+6]..[52,2413+11])
                  Some
                    expression (lambda/simplif.ml[52,2413+11]..[52,2413+51])
                      Pexp_tuple
                      [
                        expression (lambda/simplif.ml[52,2413+12]..[52,2413+13])
                          Pexp_ident "p" (lambda/simplif.ml[52,2413+12]..[52,2413+13])
                        expression (lambda/simplif.ml[52,2413+15]..[52,2413+45])
                          Pexp_apply
                          expression (lambda/simplif.ml[52,2413+15]..[52,2413+23])
                            Pexp_ident "List.map" (lambda/simplif.ml[52,2413+15]..[52,2413+23])
                          [
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[52,2413+24]..[52,2413+42])
                                Pexp_apply
                                expression (lambda/simplif.ml[52,2413+25]..[52,2413+38])
                                  Pexp_ident "eliminate_ref" (lambda/simplif.ml[52,2413+25]..[52,2413+38])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[52,2413+39]..[52,2413+41])
                                      Pexp_ident "id" (lambda/simplif.ml[52,2413+39]..[52,2413+41])
                                ]
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[52,2413+43]..[52,2413+45])
                                Pexp_ident "el" (lambda/simplif.ml[52,2413+43]..[52,2413+45])
                          ]
                        expression (lambda/simplif.ml[52,2413+47]..[52,2413+50])
                          Pexp_ident "loc" (lambda/simplif.ml[52,2413+47]..[52,2413+50])
                      ]
              <case>
                pattern (lambda/simplif.ml[53,2465+4]..[53,2465+23])
                  Ppat_construct "Lswitch" (lambda/simplif.ml[53,2465+4]..[53,2465+11])
                  Some
                    []
                    pattern (lambda/simplif.ml[53,2465+11]..[53,2465+23])
                      Ppat_tuple
                      [
                        pattern (lambda/simplif.ml[53,2465+12]..[53,2465+13])
                          Ppat_var "e" (lambda/simplif.ml[53,2465+12]..[53,2465+13])
                        pattern (lambda/simplif.ml[53,2465+15]..[53,2465+17])
                          Ppat_var "sw" (lambda/simplif.ml[53,2465+15]..[53,2465+17])
                        pattern (lambda/simplif.ml[53,2465+19]..[53,2465+22])
                          Ppat_var "loc" (lambda/simplif.ml[53,2465+19]..[53,2465+22])
                      ]
                expression (lambda/simplif.ml[54,2492+6]..[63,2888+12])
                  Pexp_construct "Lswitch" (lambda/simplif.ml[54,2492+6]..[54,2492+13])
                  Some
                    expression (lambda/simplif.ml[54,2492+13]..[63,2888+12])
                      Pexp_tuple
                      [
                        expression (lambda/simplif.ml[54,2492+14]..[54,2492+32])
                          Pexp_apply
                          expression (lambda/simplif.ml[54,2492+14]..[54,2492+27])
                            Pexp_ident "eliminate_ref" (lambda/simplif.ml[54,2492+14]..[54,2492+27])
                          [
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[54,2492+28]..[54,2492+30])
                                Pexp_ident "id" (lambda/simplif.ml[54,2492+28]..[54,2492+30])
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[54,2492+31]..[54,2492+32])
                                Pexp_ident "e" (lambda/simplif.ml[54,2492+31]..[54,2492+32])
                          ]
                        expression (lambda/simplif.ml[55,2526+8]..[62,2825+61])
                          Pexp_record
                          [
                            "sw_numconsts" (lambda/simplif.ml[55,2526+9]..[55,2526+21])
                              expression (lambda/simplif.ml[55,2526+24]..[55,2526+39])
                                Pexp_field
                                expression (lambda/simplif.ml[55,2526+24]..[55,2526+26])
                                  Pexp_ident "sw" (lambda/simplif.ml[55,2526+24]..[55,2526+26])
                                "sw_numconsts" (lambda/simplif.ml[55,2526+27]..[55,2526+39])
                            "sw_consts" (lambda/simplif.ml[56,2567+9]..[56,2567+18])
                              expression (lambda/simplif.ml[57,2588+12]..[57,2588+73])
                                Pexp_apply
                                expression (lambda/simplif.ml[57,2588+12]..[57,2588+20])
                                  Pexp_ident "List.map" (lambda/simplif.ml[57,2588+12]..[57,2588+20])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[57,2588+21]..[57,2588+60])
                                      Pexp_fun
                                      Nolabel
                                      None
                                      pattern (lambda/simplif.ml[57,2588+26]..[57,2588+32])
                                        Ppat_tuple
                                        [
                                          pattern (lambda/simplif.ml[57,2588+27]..[57,2588+28])
                                            Ppat_var "n" (lambda/simplif.ml[57,2588+27]..[57,2588+28])
                                          pattern (lambda/simplif.ml[57,2588+30]..[57,2588+31])
                                            Ppat_var "e" (lambda/simplif.ml[57,2588+30]..[57,2588+31])
                                        ]
                                      expression (lambda/simplif.ml[57,2588+36]..[57,2588+59])
                                        Pexp_tuple
                                        [
                                          expression (lambda/simplif.ml[57,2588+37]..[57,2588+38])
                                            Pexp_ident "n" (lambda/simplif.ml[57,2588+37]..[57,2588+38])
                                          expression (lambda/simplif.ml[57,2588+40]..[57,2588+58])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[57,2588+40]..[57,2588+53])
                                              Pexp_ident "eliminate_ref" (lambda/simplif.ml[57,2588+40]..[57,2588+53])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[57,2588+54]..[57,2588+56])
                                                  Pexp_ident "id" (lambda/simplif.ml[57,2588+54]..[57,2588+56])
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[57,2588+57]..[57,2588+58])
                                                  Pexp_ident "e" (lambda/simplif.ml[57,2588+57]..[57,2588+58])
                                            ]
                                        ]
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[57,2588+61]..[57,2588+73])
                                      Pexp_field
                                      expression (lambda/simplif.ml[57,2588+61]..[57,2588+63])
                                        Pexp_ident "sw" (lambda/simplif.ml[57,2588+61]..[57,2588+63])
                                      "sw_consts" (lambda/simplif.ml[57,2588+64]..[57,2588+73])
                                ]
                            "sw_numblocks" (lambda/simplif.ml[58,2663+9]..[58,2663+21])
                              expression (lambda/simplif.ml[58,2663+24]..[58,2663+39])
                                Pexp_field
                                expression (lambda/simplif.ml[58,2663+24]..[58,2663+26])
                                  Pexp_ident "sw" (lambda/simplif.ml[58,2663+24]..[58,2663+26])
                                "sw_numblocks" (lambda/simplif.ml[58,2663+27]..[58,2663+39])
                            "sw_blocks" (lambda/simplif.ml[59,2704+9]..[59,2704+18])
                              expression (lambda/simplif.ml[60,2725+12]..[60,2725+73])
                                Pexp_apply
                                expression (lambda/simplif.ml[60,2725+12]..[60,2725+20])
                                  Pexp_ident "List.map" (lambda/simplif.ml[60,2725+12]..[60,2725+20])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[60,2725+21]..[60,2725+60])
                                      Pexp_fun
                                      Nolabel
                                      None
                                      pattern (lambda/simplif.ml[60,2725+26]..[60,2725+32])
                                        Ppat_tuple
                                        [
                                          pattern (lambda/simplif.ml[60,2725+27]..[60,2725+28])
                                            Ppat_var "n" (lambda/simplif.ml[60,2725+27]..[60,2725+28])
                                          pattern (lambda/simplif.ml[60,2725+30]..[60,2725+31])
                                            Ppat_var "e" (lambda/simplif.ml[60,2725+30]..[60,2725+31])
                                        ]
                                      expression (lambda/simplif.ml[60,2725+36]..[60,2725+59])
                                        Pexp_tuple
                                        [
                                          expression (lambda/simplif.ml[60,2725+37]..[60,2725+38])
                                            Pexp_ident "n" (lambda/simplif.ml[60,2725+37]..[60,2725+38])
                                          expression (lambda/simplif.ml[60,2725+40]..[60,2725+58])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[60,2725+40]..[60,2725+53])
                                              Pexp_ident "eliminate_ref" (lambda/simplif.ml[60,2725+40]..[60,2725+53])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[60,2725+54]..[60,2725+56])
                                                  Pexp_ident "id" (lambda/simplif.ml[60,2725+54]..[60,2725+56])
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[60,2725+57]..[60,2725+58])
                                                  Pexp_ident "e" (lambda/simplif.ml[60,2725+57]..[60,2725+58])
                                            ]
                                        ]
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[60,2725+61]..[60,2725+73])
                                      Pexp_field
                                      expression (lambda/simplif.ml[60,2725+61]..[60,2725+63])
                                        Pexp_ident "sw" (lambda/simplif.ml[60,2725+61]..[60,2725+63])
                                      "sw_blocks" (lambda/simplif.ml[60,2725+64]..[60,2725+73])
                                ]
                            "sw_failaction" (lambda/simplif.ml[61,2800+9]..[61,2800+22])
                              expression (lambda/simplif.ml[62,2825+12]..[62,2825+58])
                                Pexp_apply
                                expression (lambda/simplif.ml[62,2825+12]..[62,2825+22])
                                  Pexp_ident "Option.map" (lambda/simplif.ml[62,2825+12]..[62,2825+22])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[62,2825+23]..[62,2825+41])
                                      Pexp_apply
                                      expression (lambda/simplif.ml[62,2825+24]..[62,2825+37])
                                        Pexp_ident "eliminate_ref" (lambda/simplif.ml[62,2825+24]..[62,2825+37])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lambda/simplif.ml[62,2825+38]..[62,2825+40])
                                            Pexp_ident "id" (lambda/simplif.ml[62,2825+38]..[62,2825+40])
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[62,2825+42]..[62,2825+58])
                                      Pexp_field
                                      expression (lambda/simplif.ml[62,2825+42]..[62,2825+44])
                                        Pexp_ident "sw" (lambda/simplif.ml[62,2825+42]..[62,2825+44])
                                      "sw_failaction" (lambda/simplif.ml[62,2825+45]..[62,2825+58])
                                ]
                          ]
                          None
                        expression (lambda/simplif.ml[63,2888+8]..[63,2888+11])
                          Pexp_ident "loc" (lambda/simplif.ml[63,2888+8]..[63,2888+11])
                      ]
              <case>
                pattern (lambda/simplif.ml[64,2901+4]..[64,2901+38])
                  Ppat_construct "Lstringswitch" (lambda/simplif.ml[64,2901+4]..[64,2901+17])
                  Some
                    []
                    pattern (lambda/simplif.ml[64,2901+17]..[64,2901+38])
                      Ppat_tuple
                      [
                        pattern (lambda/simplif.ml[64,2901+18]..[64,2901+19])
                          Ppat_var "e" (lambda/simplif.ml[64,2901+18]..[64,2901+19])
                        pattern (lambda/simplif.ml[64,2901+21]..[64,2901+23])
                          Ppat_var "sw" (lambda/simplif.ml[64,2901+21]..[64,2901+23])
                        pattern (lambda/simplif.ml[64,2901+25]..[64,2901+32])
                          Ppat_var "default" (lambda/simplif.ml[64,2901+25]..[64,2901+32])
                        pattern (lambda/simplif.ml[64,2901+34]..[64,2901+37])
                          Ppat_var "loc" (lambda/simplif.ml[64,2901+34]..[64,2901+37])
                      ]
                expression (lambda/simplif.ml[65,2943+6]..[68,3054+52])
                  Pexp_construct "Lstringswitch" (lambda/simplif.ml[65,2943+6]..[65,2943+19])
                  Some
                    expression (lambda/simplif.ml[66,2963+8]..[68,3054+52])
                      Pexp_tuple
                      [
                        expression (lambda/simplif.ml[66,2963+9]..[66,2963+27])
                          Pexp_apply
                          expression (lambda/simplif.ml[66,2963+9]..[66,2963+22])
                            Pexp_ident "eliminate_ref" (lambda/simplif.ml[66,2963+9]..[66,2963+22])
                          [
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[66,2963+23]..[66,2963+25])
                                Pexp_ident "id" (lambda/simplif.ml[66,2963+23]..[66,2963+25])
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[66,2963+26]..[66,2963+27])
                                Pexp_ident "e" (lambda/simplif.ml[66,2963+26]..[66,2963+27])
                          ]
                        expression (lambda/simplif.ml[67,2992+9]..[67,2992+60])
                          Pexp_apply
                          expression (lambda/simplif.ml[67,2992+9]..[67,2992+17])
                            Pexp_ident "List.map" (lambda/simplif.ml[67,2992+9]..[67,2992+17])
                          [
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[67,2992+18]..[67,2992+57])
                                Pexp_fun
                                Nolabel
                                None
                                pattern (lambda/simplif.ml[67,2992+23]..[67,2992+29])
                                  Ppat_tuple
                                  [
                                    pattern (lambda/simplif.ml[67,2992+24]..[67,2992+25])
                                      Ppat_var "s" (lambda/simplif.ml[67,2992+24]..[67,2992+25])
                                    pattern (lambda/simplif.ml[67,2992+27]..[67,2992+28])
                                      Ppat_var "e" (lambda/simplif.ml[67,2992+27]..[67,2992+28])
                                  ]
                                expression (lambda/simplif.ml[67,2992+33]..[67,2992+56])
                                  Pexp_tuple
                                  [
                                    expression (lambda/simplif.ml[67,2992+34]..[67,2992+35])
                                      Pexp_ident "s" (lambda/simplif.ml[67,2992+34]..[67,2992+35])
                                    expression (lambda/simplif.ml[67,2992+37]..[67,2992+55])
                                      Pexp_apply
                                      expression (lambda/simplif.ml[67,2992+37]..[67,2992+50])
                                        Pexp_ident "eliminate_ref" (lambda/simplif.ml[67,2992+37]..[67,2992+50])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lambda/simplif.ml[67,2992+51]..[67,2992+53])
                                            Pexp_ident "id" (lambda/simplif.ml[67,2992+51]..[67,2992+53])
                                        <arg>
                                        Nolabel
                                          expression (lambda/simplif.ml[67,2992+54]..[67,2992+55])
                                            Pexp_ident "e" (lambda/simplif.ml[67,2992+54]..[67,2992+55])
                                      ]
                                  ]
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[67,2992+58]..[67,2992+60])
                                Pexp_ident "sw" (lambda/simplif.ml[67,2992+58]..[67,2992+60])
                          ]
                        expression (lambda/simplif.ml[68,3054+9]..[68,3054+46])
                          Pexp_apply
                          expression (lambda/simplif.ml[68,3054+9]..[68,3054+19])
                            Pexp_ident "Option.map" (lambda/simplif.ml[68,3054+9]..[68,3054+19])
                          [
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[68,3054+20]..[68,3054+38])
                                Pexp_apply
                                expression (lambda/simplif.ml[68,3054+21]..[68,3054+34])
                                  Pexp_ident "eliminate_ref" (lambda/simplif.ml[68,3054+21]..[68,3054+34])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[68,3054+35]..[68,3054+37])
                                      Pexp_ident "id" (lambda/simplif.ml[68,3054+35]..[68,3054+37])
                                ]
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[68,3054+39]..[68,3054+46])
                                Pexp_ident "default" (lambda/simplif.ml[68,3054+39]..[68,3054+46])
                          ]
                        expression (lambda/simplif.ml[68,3054+48]..[68,3054+51])
                          Pexp_ident "loc" (lambda/simplif.ml[68,3054+48]..[68,3054+51])
                      ]
              <case>
                pattern (lambda/simplif.ml[69,3107+4]..[69,3107+25])
                  Ppat_construct "Lstaticraise" (lambda/simplif.ml[69,3107+4]..[69,3107+16])
                  Some
                    []
                    pattern (lambda/simplif.ml[69,3107+17]..[69,3107+25])
                      Ppat_tuple
                      [
                        pattern (lambda/simplif.ml[69,3107+18]..[69,3107+19])
                          Ppat_var "i" (lambda/simplif.ml[69,3107+18]..[69,3107+19])
                        pattern (lambda/simplif.ml[69,3107+20]..[69,3107+24])
                          Ppat_var "args" (lambda/simplif.ml[69,3107+20]..[69,3107+24])
                      ]
                expression (lambda/simplif.ml[70,3136+6]..[70,3136+55])
                  Pexp_construct "Lstaticraise" (lambda/simplif.ml[70,3136+6]..[70,3136+18])
                  Some
                    expression (lambda/simplif.ml[70,3136+19]..[70,3136+55])
                      Pexp_tuple
                      [
                        expression (lambda/simplif.ml[70,3136+20]..[70,3136+21])
                          Pexp_ident "i" (lambda/simplif.ml[70,3136+20]..[70,3136+21])
                        expression (lambda/simplif.ml[70,3136+22]..[70,3136+54])
                          Pexp_apply
                          expression (lambda/simplif.ml[70,3136+22]..[70,3136+30])
                            Pexp_ident "List.map" (lambda/simplif.ml[70,3136+22]..[70,3136+30])
                          [
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[70,3136+31]..[70,3136+49])
                                Pexp_apply
                                expression (lambda/simplif.ml[70,3136+32]..[70,3136+45])
                                  Pexp_ident "eliminate_ref" (lambda/simplif.ml[70,3136+32]..[70,3136+45])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[70,3136+46]..[70,3136+48])
                                      Pexp_ident "id" (lambda/simplif.ml[70,3136+46]..[70,3136+48])
                                ]
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[70,3136+50]..[70,3136+54])
                                Pexp_ident "args" (lambda/simplif.ml[70,3136+50]..[70,3136+54])
                          ]
                      ]
              <case>
                pattern (lambda/simplif.ml[71,3192+4]..[71,3192+27])
                  Ppat_construct "Lstaticcatch" (lambda/simplif.ml[71,3192+4]..[71,3192+16])
                  Some
                    []
                    pattern (lambda/simplif.ml[71,3192+16]..[71,3192+27])
                      Ppat_tuple
                      [
                        pattern (lambda/simplif.ml[71,3192+17]..[71,3192+19])
                          Ppat_var "e1" (lambda/simplif.ml[71,3192+17]..[71,3192+19])
                        pattern (lambda/simplif.ml[71,3192+21]..[71,3192+22])
                          Ppat_var "i" (lambda/simplif.ml[71,3192+21]..[71,3192+22])
                        pattern (lambda/simplif.ml[71,3192+24]..[71,3192+26])
                          Ppat_var "e2" (lambda/simplif.ml[71,3192+24]..[71,3192+26])
                      ]
                expression (lambda/simplif.ml[72,3223+6]..[72,3223+63])
                  Pexp_construct "Lstaticcatch" (lambda/simplif.ml[72,3223+6]..[72,3223+18])
                  Some
                    expression (lambda/simplif.ml[72,3223+18]..[72,3223+63])
                      Pexp_tuple
                      [
                        expression (lambda/simplif.ml[72,3223+19]..[72,3223+38])
                          Pexp_apply
                          expression (lambda/simplif.ml[72,3223+19]..[72,3223+32])
                            Pexp_ident "eliminate_ref" (lambda/simplif.ml[72,3223+19]..[72,3223+32])
                          [
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[72,3223+33]..[72,3223+35])
                                Pexp_ident "id" (lambda/simplif.ml[72,3223+33]..[72,3223+35])
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[72,3223+36]..[72,3223+38])
                                Pexp_ident "e1" (lambda/simplif.ml[72,3223+36]..[72,3223+38])
                          ]
                        expression (lambda/simplif.ml[72,3223+40]..[72,3223+41])
                          Pexp_ident "i" (lambda/simplif.ml[72,3223+40]..[72,3223+41])
                        expression (lambda/simplif.ml[72,3223+43]..[72,3223+62])
                          Pexp_apply
                          expression (lambda/simplif.ml[72,3223+43]..[72,3223+56])
                            Pexp_ident "eliminate_ref" (lambda/simplif.ml[72,3223+43]..[72,3223+56])
                          [
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[72,3223+57]..[72,3223+59])
                                Pexp_ident "id" (lambda/simplif.ml[72,3223+57]..[72,3223+59])
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[72,3223+60]..[72,3223+62])
                                Pexp_ident "e2" (lambda/simplif.ml[72,3223+60]..[72,3223+62])
                          ]
                      ]
              <case>
                pattern (lambda/simplif.ml[73,3287+4]..[73,3287+23])
                  Ppat_construct "Ltrywith" (lambda/simplif.ml[73,3287+4]..[73,3287+12])
                  Some
                    []
                    pattern (lambda/simplif.ml[73,3287+12]..[73,3287+23])
                      Ppat_tuple
                      [
                        pattern (lambda/simplif.ml[73,3287+13]..[73,3287+15])
                          Ppat_var "e1" (lambda/simplif.ml[73,3287+13]..[73,3287+15])
                        pattern (lambda/simplif.ml[73,3287+17]..[73,3287+18])
                          Ppat_var "v" (lambda/simplif.ml[73,3287+17]..[73,3287+18])
                        pattern (lambda/simplif.ml[73,3287+20]..[73,3287+22])
                          Ppat_var "e2" (lambda/simplif.ml[73,3287+20]..[73,3287+22])
                      ]
                expression (lambda/simplif.ml[74,3314+6]..[74,3314+59])
                  Pexp_construct "Ltrywith" (lambda/simplif.ml[74,3314+6]..[74,3314+14])
                  Some
                    expression (lambda/simplif.ml[74,3314+14]..[74,3314+59])
                      Pexp_tuple
                      [
                        expression (lambda/simplif.ml[74,3314+15]..[74,3314+34])
                          Pexp_apply
                          expression (lambda/simplif.ml[74,3314+15]..[74,3314+28])
                            Pexp_ident "eliminate_ref" (lambda/simplif.ml[74,3314+15]..[74,3314+28])
                          [
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[74,3314+29]..[74,3314+31])
                                Pexp_ident "id" (lambda/simplif.ml[74,3314+29]..[74,3314+31])
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[74,3314+32]..[74,3314+34])
                                Pexp_ident "e1" (lambda/simplif.ml[74,3314+32]..[74,3314+34])
                          ]
                        expression (lambda/simplif.ml[74,3314+36]..[74,3314+37])
                          Pexp_ident "v" (lambda/simplif.ml[74,3314+36]..[74,3314+37])
                        expression (lambda/simplif.ml[74,3314+39]..[74,3314+58])
                          Pexp_apply
                          expression (lambda/simplif.ml[74,3314+39]..[74,3314+52])
                            Pexp_ident "eliminate_ref" (lambda/simplif.ml[74,3314+39]..[74,3314+52])
                          [
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[74,3314+53]..[74,3314+55])
                                Pexp_ident "id" (lambda/simplif.ml[74,3314+53]..[74,3314+55])
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[74,3314+56]..[74,3314+58])
                                Pexp_ident "e2" (lambda/simplif.ml[74,3314+56]..[74,3314+58])
                          ]
                      ]
              <case>
                pattern (lambda/simplif.ml[75,3374+4]..[75,3374+27])
                  Ppat_construct "Lifthenelse" (lambda/simplif.ml[75,3374+4]..[75,3374+15])
                  Some
                    []
                    pattern (lambda/simplif.ml[75,3374+15]..[75,3374+27])
                      Ppat_tuple
                      [
                        pattern (lambda/simplif.ml[75,3374+16]..[75,3374+18])
                          Ppat_var "e1" (lambda/simplif.ml[75,3374+16]..[75,3374+18])
                        pattern (lambda/simplif.ml[75,3374+20]..[75,3374+22])
                          Ppat_var "e2" (lambda/simplif.ml[75,3374+20]..[75,3374+22])
                        pattern (lambda/simplif.ml[75,3374+24]..[75,3374+26])
                          Ppat_var "e3" (lambda/simplif.ml[75,3374+24]..[75,3374+26])
                      ]
                expression (lambda/simplif.ml[76,3405+6]..[78,3483+38])
                  Pexp_construct "Lifthenelse" (lambda/simplif.ml[76,3405+6]..[76,3405+17])
                  Some
                    expression (lambda/simplif.ml[76,3405+17]..[78,3483+38])
                      Pexp_tuple
                      [
                        expression (lambda/simplif.ml[76,3405+18]..[76,3405+37])
                          Pexp_apply
                          expression (lambda/simplif.ml[76,3405+18]..[76,3405+31])
                            Pexp_ident "eliminate_ref" (lambda/simplif.ml[76,3405+18]..[76,3405+31])
                          [
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[76,3405+32]..[76,3405+34])
                                Pexp_ident "id" (lambda/simplif.ml[76,3405+32]..[76,3405+34])
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[76,3405+35]..[76,3405+37])
                                Pexp_ident "e1" (lambda/simplif.ml[76,3405+35]..[76,3405+37])
                          ]
                        expression (lambda/simplif.ml[77,3444+18]..[77,3444+37])
                          Pexp_apply
                          expression (lambda/simplif.ml[77,3444+18]..[77,3444+31])
                            Pexp_ident "eliminate_ref" (lambda/simplif.ml[77,3444+18]..[77,3444+31])
                          [
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[77,3444+32]..[77,3444+34])
                                Pexp_ident "id" (lambda/simplif.ml[77,3444+32]..[77,3444+34])
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[77,3444+35]..[77,3444+37])
                                Pexp_ident "e2" (lambda/simplif.ml[77,3444+35]..[77,3444+37])
                          ]
                        expression (lambda/simplif.ml[78,3483+18]..[78,3483+37])
                          Pexp_apply
                          expression (lambda/simplif.ml[78,3483+18]..[78,3483+31])
                            Pexp_ident "eliminate_ref" (lambda/simplif.ml[78,3483+18]..[78,3483+31])
                          [
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[78,3483+32]..[78,3483+34])
                                Pexp_ident "id" (lambda/simplif.ml[78,3483+32]..[78,3483+34])
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[78,3483+35]..[78,3483+37])
                                Pexp_ident "e3" (lambda/simplif.ml[78,3483+35]..[78,3483+37])
                          ]
                      ]
              <case>
                pattern (lambda/simplif.ml[79,3522+4]..[79,3522+21])
                  Ppat_construct "Lsequence" (lambda/simplif.ml[79,3522+4]..[79,3522+13])
                  Some
                    []
                    pattern (lambda/simplif.ml[79,3522+13]..[79,3522+21])
                      Ppat_tuple
                      [
                        pattern (lambda/simplif.ml[79,3522+14]..[79,3522+16])
                          Ppat_var "e1" (lambda/simplif.ml[79,3522+14]..[79,3522+16])
                        pattern (lambda/simplif.ml[79,3522+18]..[79,3522+20])
                          Ppat_var "e2" (lambda/simplif.ml[79,3522+18]..[79,3522+20])
                      ]
                expression (lambda/simplif.ml[80,3547+6]..[80,3547+57])
                  Pexp_construct "Lsequence" (lambda/simplif.ml[80,3547+6]..[80,3547+15])
                  Some
                    expression (lambda/simplif.ml[80,3547+15]..[80,3547+57])
                      Pexp_tuple
                      [
                        expression (lambda/simplif.ml[80,3547+16]..[80,3547+35])
                          Pexp_apply
                          expression (lambda/simplif.ml[80,3547+16]..[80,3547+29])
                            Pexp_ident "eliminate_ref" (lambda/simplif.ml[80,3547+16]..[80,3547+29])
                          [
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[80,3547+30]..[80,3547+32])
                                Pexp_ident "id" (lambda/simplif.ml[80,3547+30]..[80,3547+32])
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[80,3547+33]..[80,3547+35])
                                Pexp_ident "e1" (lambda/simplif.ml[80,3547+33]..[80,3547+35])
                          ]
                        expression (lambda/simplif.ml[80,3547+37]..[80,3547+56])
                          Pexp_apply
                          expression (lambda/simplif.ml[80,3547+37]..[80,3547+50])
                            Pexp_ident "eliminate_ref" (lambda/simplif.ml[80,3547+37]..[80,3547+50])
                          [
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[80,3547+51]..[80,3547+53])
                                Pexp_ident "id" (lambda/simplif.ml[80,3547+51]..[80,3547+53])
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[80,3547+54]..[80,3547+56])
                                Pexp_ident "e2" (lambda/simplif.ml[80,3547+54]..[80,3547+56])
                          ]
                      ]
              <case>
                pattern (lambda/simplif.ml[81,3605+4]..[81,3605+18])
                  Ppat_construct "Lwhile" (lambda/simplif.ml[81,3605+4]..[81,3605+10])
                  Some
                    []
                    pattern (lambda/simplif.ml[81,3605+10]..[81,3605+18])
                      Ppat_tuple
                      [
                        pattern (lambda/simplif.ml[81,3605+11]..[81,3605+13])
                          Ppat_var "e1" (lambda/simplif.ml[81,3605+11]..[81,3605+13])
                        pattern (lambda/simplif.ml[81,3605+15]..[81,3605+17])
                          Ppat_var "e2" (lambda/simplif.ml[81,3605+15]..[81,3605+17])
                      ]
                expression (lambda/simplif.ml[82,3627+6]..[82,3627+54])
                  Pexp_construct "Lwhile" (lambda/simplif.ml[82,3627+6]..[82,3627+12])
                  Some
                    expression (lambda/simplif.ml[82,3627+12]..[82,3627+54])
                      Pexp_tuple
                      [
                        expression (lambda/simplif.ml[82,3627+13]..[82,3627+32])
                          Pexp_apply
                          expression (lambda/simplif.ml[82,3627+13]..[82,3627+26])
                            Pexp_ident "eliminate_ref" (lambda/simplif.ml[82,3627+13]..[82,3627+26])
                          [
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[82,3627+27]..[82,3627+29])
                                Pexp_ident "id" (lambda/simplif.ml[82,3627+27]..[82,3627+29])
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[82,3627+30]..[82,3627+32])
                                Pexp_ident "e1" (lambda/simplif.ml[82,3627+30]..[82,3627+32])
                          ]
                        expression (lambda/simplif.ml[82,3627+34]..[82,3627+53])
                          Pexp_apply
                          expression (lambda/simplif.ml[82,3627+34]..[82,3627+47])
                            Pexp_ident "eliminate_ref" (lambda/simplif.ml[82,3627+34]..[82,3627+47])
                          [
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[82,3627+48]..[82,3627+50])
                                Pexp_ident "id" (lambda/simplif.ml[82,3627+48]..[82,3627+50])
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[82,3627+51]..[82,3627+53])
                                Pexp_ident "e2" (lambda/simplif.ml[82,3627+51]..[82,3627+53])
                          ]
                      ]
              <case>
                pattern (lambda/simplif.ml[83,3682+4]..[83,3682+28])
                  Ppat_construct "Lfor" (lambda/simplif.ml[83,3682+4]..[83,3682+8])
                  Some
                    []
                    pattern (lambda/simplif.ml[83,3682+8]..[83,3682+28])
                      Ppat_tuple
                      [
                        pattern (lambda/simplif.ml[83,3682+9]..[83,3682+10])
                          Ppat_var "v" (lambda/simplif.ml[83,3682+9]..[83,3682+10])
                        pattern (lambda/simplif.ml[83,3682+12]..[83,3682+14])
                          Ppat_var "e1" (lambda/simplif.ml[83,3682+12]..[83,3682+14])
                        pattern (lambda/simplif.ml[83,3682+16]..[83,3682+18])
                          Ppat_var "e2" (lambda/simplif.ml[83,3682+16]..[83,3682+18])
                        pattern (lambda/simplif.ml[83,3682+20]..[83,3682+23])
                          Ppat_var "dir" (lambda/simplif.ml[83,3682+20]..[83,3682+23])
                        pattern (lambda/simplif.ml[83,3682+25]..[83,3682+27])
                          Ppat_var "e3" (lambda/simplif.ml[83,3682+25]..[83,3682+27])
                      ]
                expression (lambda/simplif.ml[84,3714+6]..[85,3770+36])
                  Pexp_construct "Lfor" (lambda/simplif.ml[84,3714+6]..[84,3714+10])
                  Some
                    expression (lambda/simplif.ml[84,3714+10]..[85,3770+36])
                      Pexp_tuple
                      [
                        expression (lambda/simplif.ml[84,3714+11]..[84,3714+12])
                          Pexp_ident "v" (lambda/simplif.ml[84,3714+11]..[84,3714+12])
                        expression (lambda/simplif.ml[84,3714+14]..[84,3714+33])
                          Pexp_apply
                          expression (lambda/simplif.ml[84,3714+14]..[84,3714+27])
                            Pexp_ident "eliminate_ref" (lambda/simplif.ml[84,3714+14]..[84,3714+27])
                          [
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[84,3714+28]..[84,3714+30])
                                Pexp_ident "id" (lambda/simplif.ml[84,3714+28]..[84,3714+30])
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[84,3714+31]..[84,3714+33])
                                Pexp_ident "e1" (lambda/simplif.ml[84,3714+31]..[84,3714+33])
                          ]
                        expression (lambda/simplif.ml[84,3714+35]..[84,3714+54])
                          Pexp_apply
                          expression (lambda/simplif.ml[84,3714+35]..[84,3714+48])
                            Pexp_ident "eliminate_ref" (lambda/simplif.ml[84,3714+35]..[84,3714+48])
                          [
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[84,3714+49]..[84,3714+51])
                                Pexp_ident "id" (lambda/simplif.ml[84,3714+49]..[84,3714+51])
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[84,3714+52]..[84,3714+54])
                                Pexp_ident "e2" (lambda/simplif.ml[84,3714+52]..[84,3714+54])
                          ]
                        expression (lambda/simplif.ml[85,3770+11]..[85,3770+14])
                          Pexp_ident "dir" (lambda/simplif.ml[85,3770+11]..[85,3770+14])
                        expression (lambda/simplif.ml[85,3770+16]..[85,3770+35])
                          Pexp_apply
                          expression (lambda/simplif.ml[85,3770+16]..[85,3770+29])
                            Pexp_ident "eliminate_ref" (lambda/simplif.ml[85,3770+16]..[85,3770+29])
                          [
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[85,3770+30]..[85,3770+32])
                                Pexp_ident "id" (lambda/simplif.ml[85,3770+30]..[85,3770+32])
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[85,3770+33]..[85,3770+35])
                                Pexp_ident "e3" (lambda/simplif.ml[85,3770+33]..[85,3770+35])
                          ]
                      ]
              <case>
                pattern (lambda/simplif.ml[86,3807+4]..[86,3807+17])
                  Ppat_construct "Lassign" (lambda/simplif.ml[86,3807+4]..[86,3807+11])
                  Some
                    []
                    pattern (lambda/simplif.ml[86,3807+11]..[86,3807+17])
                      Ppat_tuple
                      [
                        pattern (lambda/simplif.ml[86,3807+12]..[86,3807+13])
                          Ppat_var "v" (lambda/simplif.ml[86,3807+12]..[86,3807+13])
                        pattern (lambda/simplif.ml[86,3807+15]..[86,3807+16])
                          Ppat_var "e" (lambda/simplif.ml[86,3807+15]..[86,3807+16])
                      ]
                expression (lambda/simplif.ml[87,3828+6]..[87,3828+36])
                  Pexp_construct "Lassign" (lambda/simplif.ml[87,3828+6]..[87,3828+13])
                  Some
                    expression (lambda/simplif.ml[87,3828+13]..[87,3828+36])
                      Pexp_tuple
                      [
                        expression (lambda/simplif.ml[87,3828+14]..[87,3828+15])
                          Pexp_ident "v" (lambda/simplif.ml[87,3828+14]..[87,3828+15])
                        expression (lambda/simplif.ml[87,3828+17]..[87,3828+35])
                          Pexp_apply
                          expression (lambda/simplif.ml[87,3828+17]..[87,3828+30])
                            Pexp_ident "eliminate_ref" (lambda/simplif.ml[87,3828+17]..[87,3828+30])
                          [
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[87,3828+31]..[87,3828+33])
                                Pexp_ident "id" (lambda/simplif.ml[87,3828+31]..[87,3828+33])
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[87,3828+34]..[87,3828+35])
                                Pexp_ident "e" (lambda/simplif.ml[87,3828+34]..[87,3828+35])
                          ]
                      ]
              <case>
                pattern (lambda/simplif.ml[88,3865+4]..[88,3865+27])
                  Ppat_construct "Lsend" (lambda/simplif.ml[88,3865+4]..[88,3865+9])
                  Some
                    []
                    pattern (lambda/simplif.ml[88,3865+9]..[88,3865+27])
                      Ppat_tuple
                      [
                        pattern (lambda/simplif.ml[88,3865+10]..[88,3865+11])
                          Ppat_var "k" (lambda/simplif.ml[88,3865+10]..[88,3865+11])
                        pattern (lambda/simplif.ml[88,3865+13]..[88,3865+14])
                          Ppat_var "m" (lambda/simplif.ml[88,3865+13]..[88,3865+14])
                        pattern (lambda/simplif.ml[88,3865+16]..[88,3865+17])
                          Ppat_var "o" (lambda/simplif.ml[88,3865+16]..[88,3865+17])
                        pattern (lambda/simplif.ml[88,3865+19]..[88,3865+21])
                          Ppat_var "el" (lambda/simplif.ml[88,3865+19]..[88,3865+21])
                        pattern (lambda/simplif.ml[88,3865+23]..[88,3865+26])
                          Ppat_var "loc" (lambda/simplif.ml[88,3865+23]..[88,3865+26])
                      ]
                expression (lambda/simplif.ml[89,3896+6]..[90,3951+48])
                  Pexp_construct "Lsend" (lambda/simplif.ml[89,3896+6]..[89,3896+11])
                  Some
                    expression (lambda/simplif.ml[89,3896+11]..[90,3951+48])
                      Pexp_tuple
                      [
                        expression (lambda/simplif.ml[89,3896+12]..[89,3896+13])
                          Pexp_ident "k" (lambda/simplif.ml[89,3896+12]..[89,3896+13])
                        expression (lambda/simplif.ml[89,3896+15]..[89,3896+33])
                          Pexp_apply
                          expression (lambda/simplif.ml[89,3896+15]..[89,3896+28])
                            Pexp_ident "eliminate_ref" (lambda/simplif.ml[89,3896+15]..[89,3896+28])
                          [
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[89,3896+29]..[89,3896+31])
                                Pexp_ident "id" (lambda/simplif.ml[89,3896+29]..[89,3896+31])
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[89,3896+32]..[89,3896+33])
                                Pexp_ident "m" (lambda/simplif.ml[89,3896+32]..[89,3896+33])
                          ]
                        expression (lambda/simplif.ml[89,3896+35]..[89,3896+53])
                          Pexp_apply
                          expression (lambda/simplif.ml[89,3896+35]..[89,3896+48])
                            Pexp_ident "eliminate_ref" (lambda/simplif.ml[89,3896+35]..[89,3896+48])
                          [
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[89,3896+49]..[89,3896+51])
                                Pexp_ident "id" (lambda/simplif.ml[89,3896+49]..[89,3896+51])
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[89,3896+52]..[89,3896+53])
                                Pexp_ident "o" (lambda/simplif.ml[89,3896+52]..[89,3896+53])
                          ]
                        expression (lambda/simplif.ml[90,3951+12]..[90,3951+42])
                          Pexp_apply
                          expression (lambda/simplif.ml[90,3951+12]..[90,3951+20])
                            Pexp_ident "List.map" (lambda/simplif.ml[90,3951+12]..[90,3951+20])
                          [
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[90,3951+21]..[90,3951+39])
                                Pexp_apply
                                expression (lambda/simplif.ml[90,3951+22]..[90,3951+35])
                                  Pexp_ident "eliminate_ref" (lambda/simplif.ml[90,3951+22]..[90,3951+35])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[90,3951+36]..[90,3951+38])
                                      Pexp_ident "id" (lambda/simplif.ml[90,3951+36]..[90,3951+38])
                                ]
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[90,3951+40]..[90,3951+42])
                                Pexp_ident "el" (lambda/simplif.ml[90,3951+40]..[90,3951+42])
                          ]
                        expression (lambda/simplif.ml[90,3951+44]..[90,3951+47])
                          Pexp_ident "loc" (lambda/simplif.ml[90,3951+44]..[90,3951+47])
                      ]
              <case>
                pattern (lambda/simplif.ml[91,4000+4]..[91,4000+17])
                  Ppat_construct "Levent" (lambda/simplif.ml[91,4000+4]..[91,4000+10])
                  Some
                    []
                    pattern (lambda/simplif.ml[91,4000+10]..[91,4000+17])
                      Ppat_tuple
                      [
                        pattern (lambda/simplif.ml[91,4000+11]..[91,4000+12])
                          Ppat_var "l" (lambda/simplif.ml[91,4000+11]..[91,4000+12])
                        pattern (lambda/simplif.ml[91,4000+14]..[91,4000+16])
                          Ppat_var "ev" (lambda/simplif.ml[91,4000+14]..[91,4000+16])
                      ]
                expression (lambda/simplif.ml[92,4021+6]..[92,4021+36])
                  Pexp_construct "Levent" (lambda/simplif.ml[92,4021+6]..[92,4021+12])
                  Some
                    expression (lambda/simplif.ml[92,4021+12]..[92,4021+36])
                      Pexp_tuple
                      [
                        expression (lambda/simplif.ml[92,4021+13]..[92,4021+31])
                          Pexp_apply
                          expression (lambda/simplif.ml[92,4021+13]..[92,4021+26])
                            Pexp_ident "eliminate_ref" (lambda/simplif.ml[92,4021+13]..[92,4021+26])
                          [
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[92,4021+27]..[92,4021+29])
                                Pexp_ident "id" (lambda/simplif.ml[92,4021+27]..[92,4021+29])
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[92,4021+30]..[92,4021+31])
                                Pexp_ident "l" (lambda/simplif.ml[92,4021+30]..[92,4021+31])
                          ]
                        expression (lambda/simplif.ml[92,4021+33]..[92,4021+35])
                          Pexp_ident "ev" (lambda/simplif.ml[92,4021+33]..[92,4021+35])
                      ]
              <case>
                pattern (lambda/simplif.ml[93,4058+4]..[93,4058+17])
                  Ppat_construct "Lifused" (lambda/simplif.ml[93,4058+4]..[93,4058+11])
                  Some
                    []
                    pattern (lambda/simplif.ml[93,4058+11]..[93,4058+17])
                      Ppat_tuple
                      [
                        pattern (lambda/simplif.ml[93,4058+12]..[93,4058+13])
                          Ppat_var "v" (lambda/simplif.ml[93,4058+12]..[93,4058+13])
                        pattern (lambda/simplif.ml[93,4058+15]..[93,4058+16])
                          Ppat_var "e" (lambda/simplif.ml[93,4058+15]..[93,4058+16])
                      ]
                expression (lambda/simplif.ml[94,4079+6]..[94,4079+36])
                  Pexp_construct "Lifused" (lambda/simplif.ml[94,4079+6]..[94,4079+13])
                  Some
                    expression (lambda/simplif.ml[94,4079+13]..[94,4079+36])
                      Pexp_tuple
                      [
                        expression (lambda/simplif.ml[94,4079+14]..[94,4079+15])
                          Pexp_ident "v" (lambda/simplif.ml[94,4079+14]..[94,4079+15])
                        expression (lambda/simplif.ml[94,4079+17]..[94,4079+35])
                          Pexp_apply
                          expression (lambda/simplif.ml[94,4079+17]..[94,4079+30])
                            Pexp_ident "eliminate_ref" (lambda/simplif.ml[94,4079+17]..[94,4079+30])
                          [
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[94,4079+31]..[94,4079+33])
                                Pexp_ident "id" (lambda/simplif.ml[94,4079+31]..[94,4079+33])
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[94,4079+34]..[94,4079+35])
                                Pexp_ident "e" (lambda/simplif.ml[94,4079+34]..[94,4079+35])
                          ]
                      ]
            ]
    ]
  structure_item (lambda/simplif.ml[98,4148+0]..[101,4210+1])
    Pstr_type Rec
    [
      type_declaration "exit" (lambda/simplif.ml[98,4148+5]..[98,4148+9]) (lambda/simplif.ml[98,4148+0]..[101,4210+1])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (lambda/simplif.ml[99,4162+2]..[99,4162+21])
                Mutable
                "count" (lambda/simplif.ml[99,4162+10]..[99,4162+15])                core_type (lambda/simplif.ml[99,4162+17]..[99,4162+20])
                  Ptyp_constr "int" (lambda/simplif.ml[99,4162+17]..[99,4162+20])
                  []
              (lambda/simplif.ml[100,4184+2]..[100,4184+25])
                Mutable
                "max_depth" (lambda/simplif.ml[100,4184+10]..[100,4184+19])                core_type (lambda/simplif.ml[100,4184+21]..[100,4184+24])
                  Ptyp_constr "int" (lambda/simplif.ml[100,4184+21]..[100,4184+24])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (lambda/simplif.ml[103,4213+0]..[325,12864+26])
    Pstr_value Nonrec
    [
      <def>
        pattern (lambda/simplif.ml[103,4213+4]..[103,4213+18])
          Ppat_var "simplify_exits" (lambda/simplif.ml[103,4213+4]..[103,4213+18])
        expression (lambda/simplif.ml[103,4213+19]..[325,12864+26]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lambda/simplif.ml[103,4213+19]..[103,4213+22])
            Ppat_var "lam" (lambda/simplif.ml[103,4213+19]..[103,4213+22])
          expression (lambda/simplif.ml[106,4292+2]..[325,12864+26])
            Pexp_let Nonrec
            [
              <def>
                pattern (lambda/simplif.ml[106,4292+6]..[106,4292+11])
                  Ppat_var "exits" (lambda/simplif.ml[106,4292+6]..[106,4292+11])
                expression (lambda/simplif.ml[106,4292+14]..[106,4292+31])
                  Pexp_apply
                  expression (lambda/simplif.ml[106,4292+14]..[106,4292+28])
                    Pexp_ident "Hashtbl.create" (lambda/simplif.ml[106,4292+14]..[106,4292+28])
                  [
                    <arg>
                    Nolabel
                      expression (lambda/simplif.ml[106,4292+29]..[106,4292+31])
                        Pexp_constant PConst_int (17,None)
                  ]
            ]
            expression (lambda/simplif.ml[108,4328+2]..[325,12864+26])
              Pexp_let Nonrec
              [
                <def>
                  pattern (lambda/simplif.ml[108,4328+6]..[108,4328+14])
                    Ppat_var "get_exit" (lambda/simplif.ml[108,4328+6]..[108,4328+14])
                  expression (lambda/simplif.ml[108,4328+15]..[110,4376+48]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (lambda/simplif.ml[108,4328+15]..[108,4328+16])
                      Ppat_var "i" (lambda/simplif.ml[108,4328+15]..[108,4328+16])
                    expression (lambda/simplif.ml[109,4347+4]..[110,4376+48])
                      Pexp_try
                      expression (lambda/simplif.ml[109,4347+8]..[109,4347+28])
                        Pexp_apply
                        expression (lambda/simplif.ml[109,4347+8]..[109,4347+20])
                          Pexp_ident "Hashtbl.find" (lambda/simplif.ml[109,4347+8]..[109,4347+20])
                        [
                          <arg>
                          Nolabel
                            expression (lambda/simplif.ml[109,4347+21]..[109,4347+26])
                              Pexp_ident "exits" (lambda/simplif.ml[109,4347+21]..[109,4347+26])
                          <arg>
                          Nolabel
                            expression (lambda/simplif.ml[109,4347+27]..[109,4347+28])
                              Pexp_ident "i" (lambda/simplif.ml[109,4347+27]..[109,4347+28])
                        ]
                      [
                        <case>
                          pattern (lambda/simplif.ml[110,4376+9]..[110,4376+18])
                            Ppat_construct "Not_found" (lambda/simplif.ml[110,4376+9]..[110,4376+18])
                            None
                          expression (lambda/simplif.ml[110,4376+22]..[110,4376+48])
                            Pexp_record
                            [
                              "count" (lambda/simplif.ml[110,4376+23]..[110,4376+28])
                                expression (lambda/simplif.ml[110,4376+31]..[110,4376+32])
                                  Pexp_constant PConst_int (0,None)
                              "max_depth" (lambda/simplif.ml[110,4376+34]..[110,4376+43])
                                expression (lambda/simplif.ml[110,4376+46]..[110,4376+47])
                                  Pexp_constant PConst_int (0,None)
                            ]
                            None
                      ]
                <def>
                  pattern (lambda/simplif.ml[112,4426+6]..[112,4426+15])
                    Ppat_var "incr_exit" (lambda/simplif.ml[112,4426+6]..[112,4426+15])
                  expression (lambda/simplif.ml[112,4426+16]..[119,4646+29]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (lambda/simplif.ml[112,4426+16]..[112,4426+17])
                      Ppat_var "i" (lambda/simplif.ml[112,4426+16]..[112,4426+17])
                    expression (lambda/simplif.ml[112,4426+18]..[119,4646+29]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lambda/simplif.ml[112,4426+18]..[112,4426+20])
                        Ppat_var "nb" (lambda/simplif.ml[112,4426+18]..[112,4426+20])
                      expression (lambda/simplif.ml[112,4426+21]..[119,4646+29]) ghost
                        Pexp_fun
                        Nolabel
                        None
                        pattern (lambda/simplif.ml[112,4426+21]..[112,4426+22])
                          Ppat_var "d" (lambda/simplif.ml[112,4426+21]..[112,4426+22])
                        expression (lambda/simplif.ml[113,4451+4]..[119,4646+29])
                          Pexp_match
                          expression (lambda/simplif.ml[113,4451+10]..[113,4451+34])
                            Pexp_apply
                            expression (lambda/simplif.ml[113,4451+10]..[113,4451+26])
                              Pexp_ident "Hashtbl.find_opt" (lambda/simplif.ml[113,4451+10]..[113,4451+26])
                            [
                              <arg>
                              Nolabel
                                expression (lambda/simplif.ml[113,4451+27]..[113,4451+32])
                                  Pexp_ident "exits" (lambda/simplif.ml[113,4451+27]..[113,4451+32])
                              <arg>
                              Nolabel
                                expression (lambda/simplif.ml[113,4451+33]..[113,4451+34])
                                  Pexp_ident "i" (lambda/simplif.ml[113,4451+33]..[113,4451+34])
                            ]
                          [
                            <case>
                              pattern (lambda/simplif.ml[114,4491+6]..[114,4491+12])
                                Ppat_construct "Some" (lambda/simplif.ml[114,4491+6]..[114,4491+10])
                                Some
                                  []
                                  pattern (lambda/simplif.ml[114,4491+11]..[114,4491+12])
                                    Ppat_var "r" (lambda/simplif.ml[114,4491+11]..[114,4491+12])
                              expression (lambda/simplif.ml[115,4507+8]..[116,4540+44])
                                Pexp_sequence
                                expression (lambda/simplif.ml[115,4507+8]..[115,4507+31])
                                  Pexp_setfield
                                  expression (lambda/simplif.ml[115,4507+8]..[115,4507+9])
                                    Pexp_ident "r" (lambda/simplif.ml[115,4507+8]..[115,4507+9])
                                  "count" (lambda/simplif.ml[115,4507+10]..[115,4507+15])
                                  expression (lambda/simplif.ml[115,4507+19]..[115,4507+31])
                                    Pexp_apply
                                    expression (lambda/simplif.ml[115,4507+27]..[115,4507+28])
                                      Pexp_ident "+" (lambda/simplif.ml[115,4507+27]..[115,4507+28])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lambda/simplif.ml[115,4507+19]..[115,4507+26])
                                          Pexp_field
                                          expression (lambda/simplif.ml[115,4507+19]..[115,4507+20])
                                            Pexp_ident "r" (lambda/simplif.ml[115,4507+19]..[115,4507+20])
                                          "count" (lambda/simplif.ml[115,4507+21]..[115,4507+26])
                                      <arg>
                                      Nolabel
                                        expression (lambda/simplif.ml[115,4507+29]..[115,4507+31])
                                          Pexp_ident "nb" (lambda/simplif.ml[115,4507+29]..[115,4507+31])
                                    ]
                                expression (lambda/simplif.ml[116,4540+8]..[116,4540+44])
                                  Pexp_setfield
                                  expression (lambda/simplif.ml[116,4540+8]..[116,4540+9])
                                    Pexp_ident "r" (lambda/simplif.ml[116,4540+8]..[116,4540+9])
                                  "max_depth" (lambda/simplif.ml[116,4540+10]..[116,4540+19])
                                  expression (lambda/simplif.ml[116,4540+23]..[116,4540+44])
                                    Pexp_apply
                                    expression (lambda/simplif.ml[116,4540+23]..[116,4540+30])
                                      Pexp_ident "Int.max" (lambda/simplif.ml[116,4540+23]..[116,4540+30])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lambda/simplif.ml[116,4540+31]..[116,4540+42])
                                          Pexp_field
                                          expression (lambda/simplif.ml[116,4540+31]..[116,4540+32])
                                            Pexp_ident "r" (lambda/simplif.ml[116,4540+31]..[116,4540+32])
                                          "max_depth" (lambda/simplif.ml[116,4540+33]..[116,4540+42])
                                      <arg>
                                      Nolabel
                                        expression (lambda/simplif.ml[116,4540+43]..[116,4540+44])
                                          Pexp_ident "d" (lambda/simplif.ml[116,4540+43]..[116,4540+44])
                                    ]
                            <case>
                              pattern (lambda/simplif.ml[117,4585+6]..[117,4585+10])
                                Ppat_construct "None" (lambda/simplif.ml[117,4585+6]..[117,4585+10])
                                None
                              expression (lambda/simplif.ml[118,4599+8]..[119,4646+29])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lambda/simplif.ml[118,4599+12]..[118,4599+13])
                                      Ppat_var "r" (lambda/simplif.ml[118,4599+12]..[118,4599+13])
                                    expression (lambda/simplif.ml[118,4599+16]..[118,4599+43])
                                      Pexp_record
                                      [
                                        "count" (lambda/simplif.ml[118,4599+17]..[118,4599+22])
                                          expression (lambda/simplif.ml[118,4599+25]..[118,4599+27])
                                            Pexp_ident "nb" (lambda/simplif.ml[118,4599+25]..[118,4599+27])
                                        "max_depth" (lambda/simplif.ml[118,4599+29]..[118,4599+38])
                                          expression (lambda/simplif.ml[118,4599+41]..[118,4599+42])
                                            Pexp_ident "d" (lambda/simplif.ml[118,4599+41]..[118,4599+42])
                                      ]
                                      None
                                ]
                                expression (lambda/simplif.ml[119,4646+8]..[119,4646+29])
                                  Pexp_apply
                                  expression (lambda/simplif.ml[119,4646+8]..[119,4646+19])
                                    Pexp_ident "Hashtbl.add" (lambda/simplif.ml[119,4646+8]..[119,4646+19])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[119,4646+20]..[119,4646+25])
                                        Pexp_ident "exits" (lambda/simplif.ml[119,4646+20]..[119,4646+25])
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[119,4646+26]..[119,4646+27])
                                        Pexp_ident "i" (lambda/simplif.ml[119,4646+26]..[119,4646+27])
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[119,4646+28]..[119,4646+29])
                                        Pexp_ident "r" (lambda/simplif.ml[119,4646+28]..[119,4646+29])
                                  ]
                          ]
              ]
              expression (lambda/simplif.ml[122,4682+2]..[325,12864+26])
                Pexp_let Rec
                [
                  <def>
                    pattern (lambda/simplif.ml[122,4682+10]..[122,4682+15])
                      Ppat_var "count" (lambda/simplif.ml[122,4682+10]..[122,4682+15])
                    expression (lambda/simplif.ml[122,4682+16]..[181,6950+40]) ghost
                      Pexp_fun
                      Labelled "try_depth"
                      None
                      pattern (lambda/simplif.ml[122,4682+17]..[122,4682+26])
                        Ppat_var "try_depth" (lambda/simplif.ml[122,4682+17]..[122,4682+26])
                      expression (lambda/simplif.ml[122,4682+29]..[181,6950+40])
                        Pexp_function
                        [
                          <case>
                            pattern (lambda/simplif.ml[123,4720+4]..[123,4720+34])
                              Ppat_or
                              pattern (lambda/simplif.ml[123,4720+5]..[123,4720+22])
                                Ppat_or
                                pattern (lambda/simplif.ml[123,4720+5]..[123,4720+11])
                                  Ppat_construct "Lvar" (lambda/simplif.ml[123,4720+5]..[123,4720+9])
                                  Some
                                    []
                                    pattern (lambda/simplif.ml[123,4720+10]..[123,4720+11])
                                      Ppat_any
                                pattern (lambda/simplif.ml[123,4720+13]..[123,4720+22])
                                  Ppat_construct "Lmutvar" (lambda/simplif.ml[123,4720+13]..[123,4720+20])
                                  Some
                                    []
                                    pattern (lambda/simplif.ml[123,4720+21]..[123,4720+22])
                                      Ppat_any
                              pattern (lambda/simplif.ml[123,4720+25]..[123,4720+33])
                                Ppat_construct "Lconst" (lambda/simplif.ml[123,4720+25]..[123,4720+31])
                                Some
                                  []
                                  pattern (lambda/simplif.ml[123,4720+32]..[123,4720+33])
                                    Ppat_any
                            expression (lambda/simplif.ml[123,4720+38]..[123,4720+40])
                              Pexp_construct "()" (lambda/simplif.ml[123,4720+38]..[123,4720+40])
                              None
                          <case>
                            pattern (lambda/simplif.ml[124,4761+4]..[124,4761+13])
                              Ppat_construct "Lapply" (lambda/simplif.ml[124,4761+4]..[124,4761+10])
                              Some
                                []
                                pattern (lambda/simplif.ml[124,4761+11]..[124,4761+13])
                                  Ppat_var "ap" (lambda/simplif.ml[124,4761+11]..[124,4761+13])
                            expression (lambda/simplif.ml[125,4778+6]..[126,4813+45])
                              Pexp_sequence
                              expression (lambda/simplif.ml[125,4778+6]..[125,4778+33])
                                Pexp_apply
                                expression (lambda/simplif.ml[125,4778+6]..[125,4778+11])
                                  Pexp_ident "count" (lambda/simplif.ml[125,4778+6]..[125,4778+11])
                                [
                                  <arg>
                                  Labelled "try_depth"
                                    expression (lambda/simplif.ml[125,4778+13]..[125,4778+22])
                                      Pexp_ident "try_depth" (lambda/simplif.ml[125,4778+13]..[125,4778+22])
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[125,4778+23]..[125,4778+33])
                                      Pexp_field
                                      expression (lambda/simplif.ml[125,4778+23]..[125,4778+25])
                                        Pexp_ident "ap" (lambda/simplif.ml[125,4778+23]..[125,4778+25])
                                      "ap_func" (lambda/simplif.ml[125,4778+26]..[125,4778+33])
                                ]
                              expression (lambda/simplif.ml[126,4813+6]..[126,4813+45])
                                Pexp_apply
                                expression (lambda/simplif.ml[126,4813+6]..[126,4813+15])
                                  Pexp_ident "List.iter" (lambda/simplif.ml[126,4813+6]..[126,4813+15])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[126,4813+16]..[126,4813+34])
                                      Pexp_apply
                                      expression (lambda/simplif.ml[126,4813+17]..[126,4813+22])
                                        Pexp_ident "count" (lambda/simplif.ml[126,4813+17]..[126,4813+22])
                                      [
                                        <arg>
                                        Labelled "try_depth"
                                          expression (lambda/simplif.ml[126,4813+24]..[126,4813+33])
                                            Pexp_ident "try_depth" (lambda/simplif.ml[126,4813+24]..[126,4813+33])
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[126,4813+35]..[126,4813+45])
                                      Pexp_field
                                      expression (lambda/simplif.ml[126,4813+35]..[126,4813+37])
                                        Pexp_ident "ap" (lambda/simplif.ml[126,4813+35]..[126,4813+37])
                                      "ap_args" (lambda/simplif.ml[126,4813+38]..[126,4813+45])
                                ]
                          <case>
                            pattern (lambda/simplif.ml[127,4859+4]..[127,4859+20])
                              Ppat_construct "Lfunction" (lambda/simplif.ml[127,4859+4]..[127,4859+13])
                              Some
                                []
                                pattern (lambda/simplif.ml[127,4859+14]..[127,4859+20])
                                  Ppat_record Closed
                                  [
                                    "body" (lambda/simplif.ml[127,4859+15]..[127,4859+19]) ghost
                                      pattern (lambda/simplif.ml[127,4859+15]..[127,4859+19])
                                        Ppat_var "body" (lambda/simplif.ml[127,4859+15]..[127,4859+19])
                                  ]
                            expression (lambda/simplif.ml[127,4859+24]..[127,4859+45])
                              Pexp_apply
                              expression (lambda/simplif.ml[127,4859+24]..[127,4859+29])
                                Pexp_ident "count" (lambda/simplif.ml[127,4859+24]..[127,4859+29])
                              [
                                <arg>
                                Labelled "try_depth"
                                  expression (lambda/simplif.ml[127,4859+31]..[127,4859+40])
                                    Pexp_ident "try_depth" (lambda/simplif.ml[127,4859+31]..[127,4859+40])
                                <arg>
                                Nolabel
                                  expression (lambda/simplif.ml[127,4859+41]..[127,4859+45])
                                    Pexp_ident "body" (lambda/simplif.ml[127,4859+41]..[127,4859+45])
                              ]
                          <case>
                            pattern (lambda/simplif.ml[128,4905+4]..[129,4936+30])
                              Ppat_or
                              pattern (lambda/simplif.ml[128,4905+4]..[128,4905+30])
                                Ppat_construct "Llet" (lambda/simplif.ml[128,4905+4]..[128,4905+8])
                                Some
                                  []
                                  pattern (lambda/simplif.ml[128,4905+8]..[128,4905+30])
                                    Ppat_tuple
                                    [
                                      pattern (lambda/simplif.ml[128,4905+9]..[128,4905+10])
                                        Ppat_any
                                      pattern (lambda/simplif.ml[128,4905+12]..[128,4905+17])
                                        Ppat_var "_kind" (lambda/simplif.ml[128,4905+12]..[128,4905+17])
                                      pattern (lambda/simplif.ml[128,4905+19]..[128,4905+21])
                                        Ppat_var "_v" (lambda/simplif.ml[128,4905+19]..[128,4905+21])
                                      pattern (lambda/simplif.ml[128,4905+23]..[128,4905+25])
                                        Ppat_var "l1" (lambda/simplif.ml[128,4905+23]..[128,4905+25])
                                      pattern (lambda/simplif.ml[128,4905+27]..[128,4905+29])
                                        Ppat_var "l2" (lambda/simplif.ml[128,4905+27]..[128,4905+29])
                                    ]
                              pattern (lambda/simplif.ml[129,4936+4]..[129,4936+30])
                                Ppat_construct "Lmutlet" (lambda/simplif.ml[129,4936+4]..[129,4936+11])
                                Some
                                  []
                                  pattern (lambda/simplif.ml[129,4936+11]..[129,4936+30])
                                    Ppat_tuple
                                    [
                                      pattern (lambda/simplif.ml[129,4936+12]..[129,4936+17])
                                        Ppat_var "_kind" (lambda/simplif.ml[129,4936+12]..[129,4936+17])
                                      pattern (lambda/simplif.ml[129,4936+19]..[129,4936+21])
                                        Ppat_var "_v" (lambda/simplif.ml[129,4936+19]..[129,4936+21])
                                      pattern (lambda/simplif.ml[129,4936+23]..[129,4936+25])
                                        Ppat_var "l1" (lambda/simplif.ml[129,4936+23]..[129,4936+25])
                                      pattern (lambda/simplif.ml[129,4936+27]..[129,4936+29])
                                        Ppat_var "l2" (lambda/simplif.ml[129,4936+27]..[129,4936+29])
                                    ]
                            expression (lambda/simplif.ml[130,4970+6]..[130,4970+46])
                              Pexp_sequence
                              expression (lambda/simplif.ml[130,4970+6]..[130,4970+25])
                                Pexp_apply
                                expression (lambda/simplif.ml[130,4970+6]..[130,4970+11])
                                  Pexp_ident "count" (lambda/simplif.ml[130,4970+6]..[130,4970+11])
                                [
                                  <arg>
                                  Labelled "try_depth"
                                    expression (lambda/simplif.ml[130,4970+13]..[130,4970+22])
                                      Pexp_ident "try_depth" (lambda/simplif.ml[130,4970+13]..[130,4970+22])
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[130,4970+23]..[130,4970+25])
                                      Pexp_ident "l2" (lambda/simplif.ml[130,4970+23]..[130,4970+25])
                                ]
                              expression (lambda/simplif.ml[130,4970+27]..[130,4970+46])
                                Pexp_apply
                                expression (lambda/simplif.ml[130,4970+27]..[130,4970+32])
                                  Pexp_ident "count" (lambda/simplif.ml[130,4970+27]..[130,4970+32])
                                [
                                  <arg>
                                  Labelled "try_depth"
                                    expression (lambda/simplif.ml[130,4970+34]..[130,4970+43])
                                      Pexp_ident "try_depth" (lambda/simplif.ml[130,4970+34]..[130,4970+43])
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[130,4970+44]..[130,4970+46])
                                      Pexp_ident "l1" (lambda/simplif.ml[130,4970+44]..[130,4970+46])
                                ]
                          <case>
                            pattern (lambda/simplif.ml[131,5017+4]..[131,5017+27])
                              Ppat_construct "Lletrec" (lambda/simplif.ml[131,5017+4]..[131,5017+11])
                              Some
                                []
                                pattern (lambda/simplif.ml[131,5017+11]..[131,5017+27])
                                  Ppat_tuple
                                  [
                                    pattern (lambda/simplif.ml[131,5017+12]..[131,5017+20])
                                      Ppat_var "bindings" (lambda/simplif.ml[131,5017+12]..[131,5017+20])
                                    pattern (lambda/simplif.ml[131,5017+22]..[131,5017+26])
                                      Ppat_var "body" (lambda/simplif.ml[131,5017+22]..[131,5017+26])
                                  ]
                            expression (lambda/simplif.ml[132,5048+6]..[133,5110+27])
                              Pexp_sequence
                              expression (lambda/simplif.ml[132,5048+6]..[132,5048+60])
                                Pexp_apply
                                expression (lambda/simplif.ml[132,5048+6]..[132,5048+15])
                                  Pexp_ident "List.iter" (lambda/simplif.ml[132,5048+6]..[132,5048+15])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[132,5048+16]..[132,5048+51])
                                      Pexp_fun
                                      Nolabel
                                      None
                                      pattern (lambda/simplif.ml[132,5048+21]..[132,5048+28])
                                        Ppat_tuple
                                        [
                                          pattern (lambda/simplif.ml[132,5048+22]..[132,5048+24])
                                            Ppat_var "_v" (lambda/simplif.ml[132,5048+22]..[132,5048+24])
                                          pattern (lambda/simplif.ml[132,5048+26]..[132,5048+27])
                                            Ppat_var "l" (lambda/simplif.ml[132,5048+26]..[132,5048+27])
                                        ]
                                      expression (lambda/simplif.ml[132,5048+32]..[132,5048+50])
                                        Pexp_apply
                                        expression (lambda/simplif.ml[132,5048+32]..[132,5048+37])
                                          Pexp_ident "count" (lambda/simplif.ml[132,5048+32]..[132,5048+37])
                                        [
                                          <arg>
                                          Labelled "try_depth"
                                            expression (lambda/simplif.ml[132,5048+39]..[132,5048+48])
                                              Pexp_ident "try_depth" (lambda/simplif.ml[132,5048+39]..[132,5048+48])
                                          <arg>
                                          Nolabel
                                            expression (lambda/simplif.ml[132,5048+49]..[132,5048+50])
                                              Pexp_ident "l" (lambda/simplif.ml[132,5048+49]..[132,5048+50])
                                        ]
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[132,5048+52]..[132,5048+60])
                                      Pexp_ident "bindings" (lambda/simplif.ml[132,5048+52]..[132,5048+60])
                                ]
                              expression (lambda/simplif.ml[133,5110+6]..[133,5110+27])
                                Pexp_apply
                                expression (lambda/simplif.ml[133,5110+6]..[133,5110+11])
                                  Pexp_ident "count" (lambda/simplif.ml[133,5110+6]..[133,5110+11])
                                [
                                  <arg>
                                  Labelled "try_depth"
                                    expression (lambda/simplif.ml[133,5110+13]..[133,5110+22])
                                      Pexp_ident "try_depth" (lambda/simplif.ml[133,5110+13]..[133,5110+22])
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[133,5110+23]..[133,5110+27])
                                      Pexp_ident "body" (lambda/simplif.ml[133,5110+23]..[133,5110+27])
                                ]
                          <case>
                            pattern (lambda/simplif.ml[134,5138+4]..[134,5138+20])
                              Ppat_construct "Lprim" (lambda/simplif.ml[134,5138+4]..[134,5138+9])
                              Some
                                []
                                pattern (lambda/simplif.ml[134,5138+9]..[134,5138+20])
                                  Ppat_tuple
                                  [
                                    pattern (lambda/simplif.ml[134,5138+10]..[134,5138+12])
                                      Ppat_var "_p" (lambda/simplif.ml[134,5138+10]..[134,5138+12])
                                    pattern (lambda/simplif.ml[134,5138+14]..[134,5138+16])
                                      Ppat_var "ll" (lambda/simplif.ml[134,5138+14]..[134,5138+16])
                                    pattern (lambda/simplif.ml[134,5138+18]..[134,5138+19])
                                      Ppat_any
                                  ]
                            expression (lambda/simplif.ml[134,5138+24]..[134,5138+55])
                              Pexp_apply
                              expression (lambda/simplif.ml[134,5138+24]..[134,5138+33])
                                Pexp_ident "List.iter" (lambda/simplif.ml[134,5138+24]..[134,5138+33])
                              [
                                <arg>
                                Nolabel
                                  expression (lambda/simplif.ml[134,5138+34]..[134,5138+52])
                                    Pexp_apply
                                    expression (lambda/simplif.ml[134,5138+35]..[134,5138+40])
                                      Pexp_ident "count" (lambda/simplif.ml[134,5138+35]..[134,5138+40])
                                    [
                                      <arg>
                                      Labelled "try_depth"
                                        expression (lambda/simplif.ml[134,5138+42]..[134,5138+51])
                                          Pexp_ident "try_depth" (lambda/simplif.ml[134,5138+42]..[134,5138+51])
                                    ]
                                <arg>
                                Nolabel
                                  expression (lambda/simplif.ml[134,5138+53]..[134,5138+55])
                                    Pexp_ident "ll" (lambda/simplif.ml[134,5138+53]..[134,5138+55])
                              ]
                          <case>
                            pattern (lambda/simplif.ml[135,5194+4]..[135,5194+24])
                              Ppat_construct "Lswitch" (lambda/simplif.ml[135,5194+4]..[135,5194+11])
                              Some
                                []
                                pattern (lambda/simplif.ml[135,5194+11]..[135,5194+24])
                                  Ppat_tuple
                                  [
                                    pattern (lambda/simplif.ml[135,5194+12]..[135,5194+13])
                                      Ppat_var "l" (lambda/simplif.ml[135,5194+12]..[135,5194+13])
                                    pattern (lambda/simplif.ml[135,5194+15]..[135,5194+17])
                                      Ppat_var "sw" (lambda/simplif.ml[135,5194+15]..[135,5194+17])
                                    pattern (lambda/simplif.ml[135,5194+19]..[135,5194+23])
                                      Ppat_var "_loc" (lambda/simplif.ml[135,5194+19]..[135,5194+23])
                                  ]
                            expression (lambda/simplif.ml[136,5222+6]..[139,5349+63])
                              Pexp_sequence
                              expression (lambda/simplif.ml[136,5222+6]..[136,5222+33])
                                Pexp_apply
                                expression (lambda/simplif.ml[136,5222+6]..[136,5222+19])
                                  Pexp_ident "count_default" (lambda/simplif.ml[136,5222+6]..[136,5222+19])
                                [
                                  <arg>
                                  Labelled "try_depth"
                                    expression (lambda/simplif.ml[136,5222+21]..[136,5222+30])
                                      Pexp_ident "try_depth" (lambda/simplif.ml[136,5222+21]..[136,5222+30])
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[136,5222+31]..[136,5222+33])
                                      Pexp_ident "sw" (lambda/simplif.ml[136,5222+31]..[136,5222+33])
                                ]
                              expression (lambda/simplif.ml[137,5258+6]..[139,5349+63])
                                Pexp_sequence
                                expression (lambda/simplif.ml[137,5258+6]..[137,5258+24])
                                  Pexp_apply
                                  expression (lambda/simplif.ml[137,5258+6]..[137,5258+11])
                                    Pexp_ident "count" (lambda/simplif.ml[137,5258+6]..[137,5258+11])
                                  [
                                    <arg>
                                    Labelled "try_depth"
                                      expression (lambda/simplif.ml[137,5258+13]..[137,5258+22])
                                        Pexp_ident "try_depth" (lambda/simplif.ml[137,5258+13]..[137,5258+22])
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[137,5258+23]..[137,5258+24])
                                        Pexp_ident "l" (lambda/simplif.ml[137,5258+23]..[137,5258+24])
                                  ]
                                expression (lambda/simplif.ml[138,5284+6]..[139,5349+63])
                                  Pexp_sequence
                                  expression (lambda/simplif.ml[138,5284+6]..[138,5284+63])
                                    Pexp_apply
                                    expression (lambda/simplif.ml[138,5284+6]..[138,5284+15])
                                      Pexp_ident "List.iter" (lambda/simplif.ml[138,5284+6]..[138,5284+15])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lambda/simplif.ml[138,5284+16]..[138,5284+50])
                                          Pexp_fun
                                          Nolabel
                                          None
                                          pattern (lambda/simplif.ml[138,5284+21]..[138,5284+27])
                                            Ppat_tuple
                                            [
                                              pattern (lambda/simplif.ml[138,5284+22]..[138,5284+23])
                                                Ppat_any
                                              pattern (lambda/simplif.ml[138,5284+25]..[138,5284+26])
                                                Ppat_var "l" (lambda/simplif.ml[138,5284+25]..[138,5284+26])
                                            ]
                                          expression (lambda/simplif.ml[138,5284+31]..[138,5284+49])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[138,5284+31]..[138,5284+36])
                                              Pexp_ident "count" (lambda/simplif.ml[138,5284+31]..[138,5284+36])
                                            [
                                              <arg>
                                              Labelled "try_depth"
                                                expression (lambda/simplif.ml[138,5284+38]..[138,5284+47])
                                                  Pexp_ident "try_depth" (lambda/simplif.ml[138,5284+38]..[138,5284+47])
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[138,5284+48]..[138,5284+49])
                                                  Pexp_ident "l" (lambda/simplif.ml[138,5284+48]..[138,5284+49])
                                            ]
                                      <arg>
                                      Nolabel
                                        expression (lambda/simplif.ml[138,5284+51]..[138,5284+63])
                                          Pexp_field
                                          expression (lambda/simplif.ml[138,5284+51]..[138,5284+53])
                                            Pexp_ident "sw" (lambda/simplif.ml[138,5284+51]..[138,5284+53])
                                          "sw_consts" (lambda/simplif.ml[138,5284+54]..[138,5284+63])
                                    ]
                                  expression (lambda/simplif.ml[139,5349+6]..[139,5349+63])
                                    Pexp_apply
                                    expression (lambda/simplif.ml[139,5349+6]..[139,5349+15])
                                      Pexp_ident "List.iter" (lambda/simplif.ml[139,5349+6]..[139,5349+15])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lambda/simplif.ml[139,5349+16]..[139,5349+50])
                                          Pexp_fun
                                          Nolabel
                                          None
                                          pattern (lambda/simplif.ml[139,5349+21]..[139,5349+27])
                                            Ppat_tuple
                                            [
                                              pattern (lambda/simplif.ml[139,5349+22]..[139,5349+23])
                                                Ppat_any
                                              pattern (lambda/simplif.ml[139,5349+25]..[139,5349+26])
                                                Ppat_var "l" (lambda/simplif.ml[139,5349+25]..[139,5349+26])
                                            ]
                                          expression (lambda/simplif.ml[139,5349+31]..[139,5349+49])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[139,5349+31]..[139,5349+36])
                                              Pexp_ident "count" (lambda/simplif.ml[139,5349+31]..[139,5349+36])
                                            [
                                              <arg>
                                              Labelled "try_depth"
                                                expression (lambda/simplif.ml[139,5349+38]..[139,5349+47])
                                                  Pexp_ident "try_depth" (lambda/simplif.ml[139,5349+38]..[139,5349+47])
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[139,5349+48]..[139,5349+49])
                                                  Pexp_ident "l" (lambda/simplif.ml[139,5349+48]..[139,5349+49])
                                            ]
                                      <arg>
                                      Nolabel
                                        expression (lambda/simplif.ml[139,5349+51]..[139,5349+63])
                                          Pexp_field
                                          expression (lambda/simplif.ml[139,5349+51]..[139,5349+53])
                                            Pexp_ident "sw" (lambda/simplif.ml[139,5349+51]..[139,5349+53])
                                          "sw_blocks" (lambda/simplif.ml[139,5349+54]..[139,5349+63])
                                    ]
                          <case>
                            pattern (lambda/simplif.ml[140,5413+4]..[140,5413+30])
                              Ppat_construct "Lstringswitch" (lambda/simplif.ml[140,5413+4]..[140,5413+17])
                              Some
                                []
                                pattern (lambda/simplif.ml[140,5413+17]..[140,5413+30])
                                  Ppat_tuple
                                  [
                                    pattern (lambda/simplif.ml[140,5413+18]..[140,5413+19])
                                      Ppat_var "l" (lambda/simplif.ml[140,5413+18]..[140,5413+19])
                                    pattern (lambda/simplif.ml[140,5413+21]..[140,5413+23])
                                      Ppat_var "sw" (lambda/simplif.ml[140,5413+21]..[140,5413+23])
                                    pattern (lambda/simplif.ml[140,5413+25]..[140,5413+26])
                                      Ppat_var "d" (lambda/simplif.ml[140,5413+25]..[140,5413+26])
                                    pattern (lambda/simplif.ml[140,5413+28]..[140,5413+29])
                                      Ppat_any
                                  ]
                            expression (lambda/simplif.ml[141,5447+6]..[149,5744+9])
                              Pexp_sequence
                              expression (lambda/simplif.ml[141,5447+6]..[141,5447+24])
                                Pexp_apply
                                expression (lambda/simplif.ml[141,5447+6]..[141,5447+11])
                                  Pexp_ident "count" (lambda/simplif.ml[141,5447+6]..[141,5447+11])
                                [
                                  <arg>
                                  Labelled "try_depth"
                                    expression (lambda/simplif.ml[141,5447+13]..[141,5447+22])
                                      Pexp_ident "try_depth" (lambda/simplif.ml[141,5447+13]..[141,5447+22])
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[141,5447+23]..[141,5447+24])
                                      Pexp_ident "l" (lambda/simplif.ml[141,5447+23]..[141,5447+24])
                                ]
                              expression (lambda/simplif.ml[142,5473+6]..[149,5744+9])
                                Pexp_sequence
                                expression (lambda/simplif.ml[142,5473+6]..[142,5473+53])
                                  Pexp_apply
                                  expression (lambda/simplif.ml[142,5473+6]..[142,5473+15])
                                    Pexp_ident "List.iter" (lambda/simplif.ml[142,5473+6]..[142,5473+15])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[142,5473+16]..[142,5473+50])
                                        Pexp_fun
                                        Nolabel
                                        None
                                        pattern (lambda/simplif.ml[142,5473+21]..[142,5473+27])
                                          Ppat_tuple
                                          [
                                            pattern (lambda/simplif.ml[142,5473+22]..[142,5473+23])
                                              Ppat_any
                                            pattern (lambda/simplif.ml[142,5473+25]..[142,5473+26])
                                              Ppat_var "l" (lambda/simplif.ml[142,5473+25]..[142,5473+26])
                                          ]
                                        expression (lambda/simplif.ml[142,5473+31]..[142,5473+49])
                                          Pexp_apply
                                          expression (lambda/simplif.ml[142,5473+31]..[142,5473+36])
                                            Pexp_ident "count" (lambda/simplif.ml[142,5473+31]..[142,5473+36])
                                          [
                                            <arg>
                                            Labelled "try_depth"
                                              expression (lambda/simplif.ml[142,5473+38]..[142,5473+47])
                                                Pexp_ident "try_depth" (lambda/simplif.ml[142,5473+38]..[142,5473+47])
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[142,5473+48]..[142,5473+49])
                                                Pexp_ident "l" (lambda/simplif.ml[142,5473+48]..[142,5473+49])
                                          ]
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[142,5473+51]..[142,5473+53])
                                        Pexp_ident "sw" (lambda/simplif.ml[142,5473+51]..[142,5473+53])
                                  ]
                                expression (lambda/simplif.ml[143,5528+6]..[149,5744+9])
                                  Pexp_match
                                  expression (lambda/simplif.ml[143,5528+19]..[143,5528+20])
                                    Pexp_ident "d" (lambda/simplif.ml[143,5528+19]..[143,5528+20])
                                  [
                                    <case>
                                      pattern (lambda/simplif.ml[144,5554+8]..[144,5554+12])
                                        Ppat_construct "None" (lambda/simplif.ml[144,5554+8]..[144,5554+12])
                                        None
                                      expression (lambda/simplif.ml[144,5554+16]..[144,5554+18])
                                        Pexp_construct "()" (lambda/simplif.ml[144,5554+16]..[144,5554+18])
                                        None
                                    <case>
                                      pattern (lambda/simplif.ml[145,5573+8]..[145,5573+14])
                                        Ppat_construct "Some" (lambda/simplif.ml[145,5573+8]..[145,5573+12])
                                        Some
                                          []
                                          pattern (lambda/simplif.ml[145,5573+13]..[145,5573+14])
                                            Ppat_var "d" (lambda/simplif.ml[145,5573+13]..[145,5573+14])
                                      expression (lambda/simplif.ml[145,5573+18]..[148,5693+50])
                                        Pexp_match
                                        expression (lambda/simplif.ml[145,5573+24]..[145,5573+26])
                                          Pexp_ident "sw" (lambda/simplif.ml[145,5573+24]..[145,5573+26])
                                        [
                                          <case>
                                            pattern (lambda/simplif.ml[146,5605+10]..[146,5605+16])
                                              Ppat_or
                                              pattern (lambda/simplif.ml[146,5605+10]..[146,5605+12])
                                                Ppat_construct "[]" (lambda/simplif.ml[146,5605+10]..[146,5605+12])
                                                None
                                              pattern (lambda/simplif.ml[146,5605+13]..[146,5605+16])
                                                Ppat_construct "::" (lambda/simplif.ml[146,5605+14]..[146,5605+16]) ghost
                                                Some
                                                  []
                                                  pattern (lambda/simplif.ml[146,5605+14]..[146,5605+16]) ghost
                                                    Ppat_tuple
                                                    [
                                                      pattern (lambda/simplif.ml[146,5605+14]..[146,5605+15])
                                                        Ppat_any
                                                      pattern (lambda/simplif.ml[146,5605+15]..[146,5605+16]) ghost
                                                        Ppat_construct "[]" (lambda/simplif.ml[146,5605+15]..[146,5605+16]) ghost
                                                        None
                                                    ]
                                            expression (lambda/simplif.ml[146,5605+20]..[146,5605+38])
                                              Pexp_apply
                                              expression (lambda/simplif.ml[146,5605+20]..[146,5605+25])
                                                Pexp_ident "count" (lambda/simplif.ml[146,5605+20]..[146,5605+25])
                                              [
                                                <arg>
                                                Labelled "try_depth"
                                                  expression (lambda/simplif.ml[146,5605+27]..[146,5605+36])
                                                    Pexp_ident "try_depth" (lambda/simplif.ml[146,5605+27]..[146,5605+36])
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[146,5605+37]..[146,5605+38])
                                                    Pexp_ident "d" (lambda/simplif.ml[146,5605+37]..[146,5605+38])
                                              ]
                                          <case>
                                            pattern (lambda/simplif.ml[147,5644+10]..[147,5644+11])
                                              Ppat_any
                                            expression (lambda/simplif.ml[148,5693+12]..[148,5693+50])
                                              Pexp_sequence
                                              expression (lambda/simplif.ml[148,5693+12]..[148,5693+30])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[148,5693+12]..[148,5693+17])
                                                  Pexp_ident "count" (lambda/simplif.ml[148,5693+12]..[148,5693+17])
                                                [
                                                  <arg>
                                                  Labelled "try_depth"
                                                    expression (lambda/simplif.ml[148,5693+19]..[148,5693+28])
                                                      Pexp_ident "try_depth" (lambda/simplif.ml[148,5693+19]..[148,5693+28])
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[148,5693+29]..[148,5693+30])
                                                      Pexp_ident "d" (lambda/simplif.ml[148,5693+29]..[148,5693+30])
                                                ]
                                              expression (lambda/simplif.ml[148,5693+32]..[148,5693+50])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[148,5693+32]..[148,5693+37])
                                                  Pexp_ident "count" (lambda/simplif.ml[148,5693+32]..[148,5693+37])
                                                [
                                                  <arg>
                                                  Labelled "try_depth"
                                                    expression (lambda/simplif.ml[148,5693+39]..[148,5693+48])
                                                      Pexp_ident "try_depth" (lambda/simplif.ml[148,5693+39]..[148,5693+48])
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[148,5693+49]..[148,5693+50])
                                                      Pexp_ident "d" (lambda/simplif.ml[148,5693+49]..[148,5693+50])
                                                ]
                                        ]
                                  ]
                          <case>
                            pattern (lambda/simplif.ml[150,5754+4]..[150,5754+23])
                              Ppat_construct "Lstaticraise" (lambda/simplif.ml[150,5754+4]..[150,5754+16])
                              Some
                                []
                                pattern (lambda/simplif.ml[150,5754+17]..[150,5754+23])
                                  Ppat_tuple
                                  [
                                    pattern (lambda/simplif.ml[150,5754+18]..[150,5754+19])
                                      Ppat_var "i" (lambda/simplif.ml[150,5754+18]..[150,5754+19])
                                    pattern (lambda/simplif.ml[150,5754+20]..[150,5754+22])
                                      Ppat_var "ls" (lambda/simplif.ml[150,5754+20]..[150,5754+22])
                                  ]
                            expression (lambda/simplif.ml[151,5781+6]..[152,5812+37])
                              Pexp_sequence
                              expression (lambda/simplif.ml[151,5781+6]..[151,5781+29])
                                Pexp_apply
                                expression (lambda/simplif.ml[151,5781+6]..[151,5781+15])
                                  Pexp_ident "incr_exit" (lambda/simplif.ml[151,5781+6]..[151,5781+15])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[151,5781+16]..[151,5781+17])
                                      Pexp_ident "i" (lambda/simplif.ml[151,5781+16]..[151,5781+17])
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[151,5781+18]..[151,5781+19])
                                      Pexp_constant PConst_int (1,None)
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[151,5781+20]..[151,5781+29])
                                      Pexp_ident "try_depth" (lambda/simplif.ml[151,5781+20]..[151,5781+29])
                                ]
                              expression (lambda/simplif.ml[152,5812+6]..[152,5812+37])
                                Pexp_apply
                                expression (lambda/simplif.ml[152,5812+6]..[152,5812+15])
                                  Pexp_ident "List.iter" (lambda/simplif.ml[152,5812+6]..[152,5812+15])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[152,5812+16]..[152,5812+34])
                                      Pexp_apply
                                      expression (lambda/simplif.ml[152,5812+17]..[152,5812+22])
                                        Pexp_ident "count" (lambda/simplif.ml[152,5812+17]..[152,5812+22])
                                      [
                                        <arg>
                                        Labelled "try_depth"
                                          expression (lambda/simplif.ml[152,5812+24]..[152,5812+33])
                                            Pexp_ident "try_depth" (lambda/simplif.ml[152,5812+24]..[152,5812+33])
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[152,5812+35]..[152,5812+37])
                                      Pexp_ident "ls" (lambda/simplif.ml[152,5812+35]..[152,5812+37])
                                ]
                          <case>
                            pattern (lambda/simplif.ml[153,5850+4]..[153,5850+48])
                              Ppat_construct "Lstaticcatch" (lambda/simplif.ml[153,5850+4]..[153,5850+16])
                              Some
                                []
                                pattern (lambda/simplif.ml[153,5850+17]..[153,5850+48])
                                  Ppat_tuple
                                  [
                                    pattern (lambda/simplif.ml[153,5850+18]..[153,5850+20])
                                      Ppat_var "l1" (lambda/simplif.ml[153,5850+18]..[153,5850+20])
                                    pattern (lambda/simplif.ml[153,5850+21]..[153,5850+27])
                                      Ppat_tuple
                                      [
                                        pattern (lambda/simplif.ml[153,5850+22]..[153,5850+23])
                                          Ppat_var "i" (lambda/simplif.ml[153,5850+22]..[153,5850+23])
                                        pattern (lambda/simplif.ml[153,5850+24]..[153,5850+26])
                                          Ppat_construct "[]" (lambda/simplif.ml[153,5850+24]..[153,5850+26])
                                          None
                                      ]
                                    pattern (lambda/simplif.ml[153,5850+28]..[153,5850+47])
                                      Ppat_construct "Lstaticraise" (lambda/simplif.ml[153,5850+28]..[153,5850+40])
                                      Some
                                        []
                                        pattern (lambda/simplif.ml[153,5850+41]..[153,5850+47])
                                          Ppat_tuple
                                          [
                                            pattern (lambda/simplif.ml[153,5850+42]..[153,5850+43])
                                              Ppat_var "j" (lambda/simplif.ml[153,5850+42]..[153,5850+43])
                                            pattern (lambda/simplif.ml[153,5850+44]..[153,5850+46])
                                              Ppat_construct "[]" (lambda/simplif.ml[153,5850+44]..[153,5850+46])
                                              None
                                          ]
                                  ]
                            expression (lambda/simplif.ml[156,6008+6]..[158,6065+59])
                              Pexp_sequence
                              expression (lambda/simplif.ml[156,6008+6]..[156,6008+25])
                                Pexp_apply
                                expression (lambda/simplif.ml[156,6008+6]..[156,6008+11])
                                  Pexp_ident "count" (lambda/simplif.ml[156,6008+6]..[156,6008+11])
                                [
                                  <arg>
                                  Labelled "try_depth"
                                    expression (lambda/simplif.ml[156,6008+13]..[156,6008+22])
                                      Pexp_ident "try_depth" (lambda/simplif.ml[156,6008+13]..[156,6008+22])
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[156,6008+23]..[156,6008+25])
                                      Pexp_ident "l1" (lambda/simplif.ml[156,6008+23]..[156,6008+25])
                                ]
                              expression (lambda/simplif.ml[157,6036+6]..[158,6065+59])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lambda/simplif.ml[157,6036+10]..[157,6036+12])
                                      Ppat_var "ic" (lambda/simplif.ml[157,6036+10]..[157,6036+12])
                                    expression (lambda/simplif.ml[157,6036+15]..[157,6036+25])
                                      Pexp_apply
                                      expression (lambda/simplif.ml[157,6036+15]..[157,6036+23])
                                        Pexp_ident "get_exit" (lambda/simplif.ml[157,6036+15]..[157,6036+23])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lambda/simplif.ml[157,6036+24]..[157,6036+25])
                                            Pexp_ident "i" (lambda/simplif.ml[157,6036+24]..[157,6036+25])
                                      ]
                                ]
                                expression (lambda/simplif.ml[158,6065+6]..[158,6065+59])
                                  Pexp_apply
                                  expression (lambda/simplif.ml[158,6065+6]..[158,6065+15])
                                    Pexp_ident "incr_exit" (lambda/simplif.ml[158,6065+6]..[158,6065+15])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[158,6065+16]..[158,6065+17])
                                        Pexp_ident "j" (lambda/simplif.ml[158,6065+16]..[158,6065+17])
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[158,6065+18]..[158,6065+26])
                                        Pexp_field
                                        expression (lambda/simplif.ml[158,6065+18]..[158,6065+20])
                                          Pexp_ident "ic" (lambda/simplif.ml[158,6065+18]..[158,6065+20])
                                        "count" (lambda/simplif.ml[158,6065+21]..[158,6065+26])
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[158,6065+27]..[158,6065+59])
                                        Pexp_apply
                                        expression (lambda/simplif.ml[158,6065+28]..[158,6065+35])
                                          Pexp_ident "Int.max" (lambda/simplif.ml[158,6065+28]..[158,6065+35])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lambda/simplif.ml[158,6065+36]..[158,6065+45])
                                              Pexp_ident "try_depth" (lambda/simplif.ml[158,6065+36]..[158,6065+45])
                                          <arg>
                                          Nolabel
                                            expression (lambda/simplif.ml[158,6065+46]..[158,6065+58])
                                              Pexp_field
                                              expression (lambda/simplif.ml[158,6065+46]..[158,6065+48])
                                                Pexp_ident "ic" (lambda/simplif.ml[158,6065+46]..[158,6065+48])
                                              "max_depth" (lambda/simplif.ml[158,6065+49]..[158,6065+58])
                                        ]
                                  ]
                          <case>
                            pattern (lambda/simplif.ml[159,6125+4]..[159,6125+31])
                              Ppat_construct "Lstaticcatch" (lambda/simplif.ml[159,6125+4]..[159,6125+16])
                              Some
                                []
                                pattern (lambda/simplif.ml[159,6125+16]..[159,6125+31])
                                  Ppat_tuple
                                  [
                                    pattern (lambda/simplif.ml[159,6125+17]..[159,6125+19])
                                      Ppat_var "l1" (lambda/simplif.ml[159,6125+17]..[159,6125+19])
                                    pattern (lambda/simplif.ml[159,6125+21]..[159,6125+26])
                                      Ppat_tuple
                                      [
                                        pattern (lambda/simplif.ml[159,6125+22]..[159,6125+23])
                                          Ppat_var "i" (lambda/simplif.ml[159,6125+22]..[159,6125+23])
                                        pattern (lambda/simplif.ml[159,6125+24]..[159,6125+25])
                                          Ppat_any
                                      ]
                                    pattern (lambda/simplif.ml[159,6125+28]..[159,6125+30])
                                      Ppat_var "l2" (lambda/simplif.ml[159,6125+28]..[159,6125+30])
                                  ]
                            expression (lambda/simplif.ml[160,6160+6]..[164,6323+27])
                              Pexp_sequence
                              expression (lambda/simplif.ml[160,6160+6]..[160,6160+25])
                                Pexp_apply
                                expression (lambda/simplif.ml[160,6160+6]..[160,6160+11])
                                  Pexp_ident "count" (lambda/simplif.ml[160,6160+6]..[160,6160+11])
                                [
                                  <arg>
                                  Labelled "try_depth"
                                    expression (lambda/simplif.ml[160,6160+13]..[160,6160+22])
                                      Pexp_ident "try_depth" (lambda/simplif.ml[160,6160+13]..[160,6160+22])
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[160,6160+23]..[160,6160+25])
                                      Pexp_ident "l1" (lambda/simplif.ml[160,6160+23]..[160,6160+25])
                                ]
                              expression (lambda/simplif.ml[163,6286+6]..[164,6323+27])
                                Pexp_ifthenelse
                                expression (lambda/simplif.ml[163,6286+9]..[163,6286+31])
                                  Pexp_apply
                                  expression (lambda/simplif.ml[163,6286+28]..[163,6286+29])
                                    Pexp_ident ">" (lambda/simplif.ml[163,6286+28]..[163,6286+29])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[163,6286+9]..[163,6286+27])
                                        Pexp_field
                                        expression (lambda/simplif.ml[163,6286+9]..[163,6286+21])
                                          Pexp_apply
                                          expression (lambda/simplif.ml[163,6286+10]..[163,6286+18])
                                            Pexp_ident "get_exit" (lambda/simplif.ml[163,6286+10]..[163,6286+18])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[163,6286+19]..[163,6286+20])
                                                Pexp_ident "i" (lambda/simplif.ml[163,6286+19]..[163,6286+20])
                                          ]
                                        "count" (lambda/simplif.ml[163,6286+22]..[163,6286+27])
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[163,6286+30]..[163,6286+31])
                                        Pexp_constant PConst_int (0,None)
                                  ]
                                expression (lambda/simplif.ml[164,6323+8]..[164,6323+27])
                                  Pexp_apply
                                  expression (lambda/simplif.ml[164,6323+8]..[164,6323+13])
                                    Pexp_ident "count" (lambda/simplif.ml[164,6323+8]..[164,6323+13])
                                  [
                                    <arg>
                                    Labelled "try_depth"
                                      expression (lambda/simplif.ml[164,6323+15]..[164,6323+24])
                                        Pexp_ident "try_depth" (lambda/simplif.ml[164,6323+15]..[164,6323+24])
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[164,6323+25]..[164,6323+27])
                                        Pexp_ident "l2" (lambda/simplif.ml[164,6323+25]..[164,6323+27])
                                  ]
                                None
                          <case>
                            pattern (lambda/simplif.ml[165,6351+4]..[165,6351+24])
                              Ppat_construct "Ltrywith" (lambda/simplif.ml[165,6351+4]..[165,6351+12])
                              Some
                                []
                                pattern (lambda/simplif.ml[165,6351+12]..[165,6351+24])
                                  Ppat_tuple
                                  [
                                    pattern (lambda/simplif.ml[165,6351+13]..[165,6351+15])
                                      Ppat_var "l1" (lambda/simplif.ml[165,6351+13]..[165,6351+15])
                                    pattern (lambda/simplif.ml[165,6351+17]..[165,6351+19])
                                      Ppat_var "_v" (lambda/simplif.ml[165,6351+17]..[165,6351+19])
                                    pattern (lambda/simplif.ml[165,6351+21]..[165,6351+23])
                                      Ppat_var "l2" (lambda/simplif.ml[165,6351+21]..[165,6351+23])
                                  ]
                            expression (lambda/simplif.ml[166,6379+6]..[167,6420+26])
                              Pexp_sequence
                              expression (lambda/simplif.ml[166,6379+6]..[166,6379+39])
                                Pexp_apply
                                expression (lambda/simplif.ml[166,6379+6]..[166,6379+11])
                                  Pexp_ident "count" (lambda/simplif.ml[166,6379+6]..[166,6379+11])
                                [
                                  <arg>
                                  Labelled "try_depth"
                                    expression (lambda/simplif.ml[166,6379+23]..[166,6379+36])
                                      Pexp_apply
                                      expression (lambda/simplif.ml[166,6379+33]..[166,6379+34])
                                        Pexp_ident "+" (lambda/simplif.ml[166,6379+33]..[166,6379+34])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lambda/simplif.ml[166,6379+24]..[166,6379+33])
                                            Pexp_ident "try_depth" (lambda/simplif.ml[166,6379+24]..[166,6379+33])
                                        <arg>
                                        Nolabel
                                          expression (lambda/simplif.ml[166,6379+34]..[166,6379+35])
                                            Pexp_constant PConst_int (1,None)
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[166,6379+37]..[166,6379+39])
                                      Pexp_ident "l1" (lambda/simplif.ml[166,6379+37]..[166,6379+39])
                                ]
                              expression (lambda/simplif.ml[167,6420+6]..[167,6420+25])
                                Pexp_apply
                                expression (lambda/simplif.ml[167,6420+6]..[167,6420+11])
                                  Pexp_ident "count" (lambda/simplif.ml[167,6420+6]..[167,6420+11])
                                [
                                  <arg>
                                  Labelled "try_depth"
                                    expression (lambda/simplif.ml[167,6420+13]..[167,6420+22])
                                      Pexp_ident "try_depth" (lambda/simplif.ml[167,6420+13]..[167,6420+22])
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[167,6420+23]..[167,6420+25])
                                      Pexp_ident "l2" (lambda/simplif.ml[167,6420+23]..[167,6420+25])
                                ]
                          <case>
                            pattern (lambda/simplif.ml[168,6447+4]..[168,6447+27])
                              Ppat_construct "Lifthenelse" (lambda/simplif.ml[168,6447+4]..[168,6447+15])
                              Some
                                []
                                pattern (lambda/simplif.ml[168,6447+15]..[168,6447+27])
                                  Ppat_tuple
                                  [
                                    pattern (lambda/simplif.ml[168,6447+16]..[168,6447+18])
                                      Ppat_var "l1" (lambda/simplif.ml[168,6447+16]..[168,6447+18])
                                    pattern (lambda/simplif.ml[168,6447+20]..[168,6447+22])
                                      Ppat_var "l2" (lambda/simplif.ml[168,6447+20]..[168,6447+22])
                                    pattern (lambda/simplif.ml[168,6447+24]..[168,6447+26])
                                      Ppat_var "l3" (lambda/simplif.ml[168,6447+24]..[168,6447+26])
                                  ]
                            expression (lambda/simplif.ml[169,6478+6]..[171,6532+25])
                              Pexp_sequence
                              expression (lambda/simplif.ml[169,6478+6]..[169,6478+25])
                                Pexp_apply
                                expression (lambda/simplif.ml[169,6478+6]..[169,6478+11])
                                  Pexp_ident "count" (lambda/simplif.ml[169,6478+6]..[169,6478+11])
                                [
                                  <arg>
                                  Labelled "try_depth"
                                    expression (lambda/simplif.ml[169,6478+13]..[169,6478+22])
                                      Pexp_ident "try_depth" (lambda/simplif.ml[169,6478+13]..[169,6478+22])
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[169,6478+23]..[169,6478+25])
                                      Pexp_ident "l1" (lambda/simplif.ml[169,6478+23]..[169,6478+25])
                                ]
                              expression (lambda/simplif.ml[170,6505+6]..[171,6532+25])
                                Pexp_sequence
                                expression (lambda/simplif.ml[170,6505+6]..[170,6505+25])
                                  Pexp_apply
                                  expression (lambda/simplif.ml[170,6505+6]..[170,6505+11])
                                    Pexp_ident "count" (lambda/simplif.ml[170,6505+6]..[170,6505+11])
                                  [
                                    <arg>
                                    Labelled "try_depth"
                                      expression (lambda/simplif.ml[170,6505+13]..[170,6505+22])
                                        Pexp_ident "try_depth" (lambda/simplif.ml[170,6505+13]..[170,6505+22])
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[170,6505+23]..[170,6505+25])
                                        Pexp_ident "l2" (lambda/simplif.ml[170,6505+23]..[170,6505+25])
                                  ]
                                expression (lambda/simplif.ml[171,6532+6]..[171,6532+25])
                                  Pexp_apply
                                  expression (lambda/simplif.ml[171,6532+6]..[171,6532+11])
                                    Pexp_ident "count" (lambda/simplif.ml[171,6532+6]..[171,6532+11])
                                  [
                                    <arg>
                                    Labelled "try_depth"
                                      expression (lambda/simplif.ml[171,6532+13]..[171,6532+22])
                                        Pexp_ident "try_depth" (lambda/simplif.ml[171,6532+13]..[171,6532+22])
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[171,6532+23]..[171,6532+25])
                                        Pexp_ident "l3" (lambda/simplif.ml[171,6532+23]..[171,6532+25])
                                  ]
                          <case>
                            pattern (lambda/simplif.ml[172,6558+4]..[172,6558+21])
                              Ppat_construct "Lsequence" (lambda/simplif.ml[172,6558+4]..[172,6558+13])
                              Some
                                []
                                pattern (lambda/simplif.ml[172,6558+13]..[172,6558+21])
                                  Ppat_tuple
                                  [
                                    pattern (lambda/simplif.ml[172,6558+14]..[172,6558+16])
                                      Ppat_var "l1" (lambda/simplif.ml[172,6558+14]..[172,6558+16])
                                    pattern (lambda/simplif.ml[172,6558+18]..[172,6558+20])
                                      Ppat_var "l2" (lambda/simplif.ml[172,6558+18]..[172,6558+20])
                                  ]
                            expression (lambda/simplif.ml[172,6558+25]..[172,6558+65])
                              Pexp_sequence
                              expression (lambda/simplif.ml[172,6558+25]..[172,6558+44])
                                Pexp_apply
                                expression (lambda/simplif.ml[172,6558+25]..[172,6558+30])
                                  Pexp_ident "count" (lambda/simplif.ml[172,6558+25]..[172,6558+30])
                                [
                                  <arg>
                                  Labelled "try_depth"
                                    expression (lambda/simplif.ml[172,6558+32]..[172,6558+41])
                                      Pexp_ident "try_depth" (lambda/simplif.ml[172,6558+32]..[172,6558+41])
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[172,6558+42]..[172,6558+44])
                                      Pexp_ident "l1" (lambda/simplif.ml[172,6558+42]..[172,6558+44])
                                ]
                              expression (lambda/simplif.ml[172,6558+46]..[172,6558+65])
                                Pexp_apply
                                expression (lambda/simplif.ml[172,6558+46]..[172,6558+51])
                                  Pexp_ident "count" (lambda/simplif.ml[172,6558+46]..[172,6558+51])
                                [
                                  <arg>
                                  Labelled "try_depth"
                                    expression (lambda/simplif.ml[172,6558+53]..[172,6558+62])
                                      Pexp_ident "try_depth" (lambda/simplif.ml[172,6558+53]..[172,6558+62])
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[172,6558+63]..[172,6558+65])
                                      Pexp_ident "l2" (lambda/simplif.ml[172,6558+63]..[172,6558+65])
                                ]
                          <case>
                            pattern (lambda/simplif.ml[173,6624+4]..[173,6624+18])
                              Ppat_construct "Lwhile" (lambda/simplif.ml[173,6624+4]..[173,6624+10])
                              Some
                                []
                                pattern (lambda/simplif.ml[173,6624+10]..[173,6624+18])
                                  Ppat_tuple
                                  [
                                    pattern (lambda/simplif.ml[173,6624+11]..[173,6624+13])
                                      Ppat_var "l1" (lambda/simplif.ml[173,6624+11]..[173,6624+13])
                                    pattern (lambda/simplif.ml[173,6624+15]..[173,6624+17])
                                      Ppat_var "l2" (lambda/simplif.ml[173,6624+15]..[173,6624+17])
                                  ]
                            expression (lambda/simplif.ml[173,6624+22]..[173,6624+62])
                              Pexp_sequence
                              expression (lambda/simplif.ml[173,6624+22]..[173,6624+41])
                                Pexp_apply
                                expression (lambda/simplif.ml[173,6624+22]..[173,6624+27])
                                  Pexp_ident "count" (lambda/simplif.ml[173,6624+22]..[173,6624+27])
                                [
                                  <arg>
                                  Labelled "try_depth"
                                    expression (lambda/simplif.ml[173,6624+29]..[173,6624+38])
                                      Pexp_ident "try_depth" (lambda/simplif.ml[173,6624+29]..[173,6624+38])
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[173,6624+39]..[173,6624+41])
                                      Pexp_ident "l1" (lambda/simplif.ml[173,6624+39]..[173,6624+41])
                                ]
                              expression (lambda/simplif.ml[173,6624+43]..[173,6624+62])
                                Pexp_apply
                                expression (lambda/simplif.ml[173,6624+43]..[173,6624+48])
                                  Pexp_ident "count" (lambda/simplif.ml[173,6624+43]..[173,6624+48])
                                [
                                  <arg>
                                  Labelled "try_depth"
                                    expression (lambda/simplif.ml[173,6624+50]..[173,6624+59])
                                      Pexp_ident "try_depth" (lambda/simplif.ml[173,6624+50]..[173,6624+59])
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[173,6624+60]..[173,6624+62])
                                      Pexp_ident "l2" (lambda/simplif.ml[173,6624+60]..[173,6624+62])
                                ]
                          <case>
                            pattern (lambda/simplif.ml[174,6687+4]..[174,6687+29])
                              Ppat_construct "Lfor" (lambda/simplif.ml[174,6687+4]..[174,6687+8])
                              Some
                                []
                                pattern (lambda/simplif.ml[174,6687+8]..[174,6687+29])
                                  Ppat_tuple
                                  [
                                    pattern (lambda/simplif.ml[174,6687+9]..[174,6687+10])
                                      Ppat_any
                                    pattern (lambda/simplif.ml[174,6687+12]..[174,6687+14])
                                      Ppat_var "l1" (lambda/simplif.ml[174,6687+12]..[174,6687+14])
                                    pattern (lambda/simplif.ml[174,6687+16]..[174,6687+18])
                                      Ppat_var "l2" (lambda/simplif.ml[174,6687+16]..[174,6687+18])
                                    pattern (lambda/simplif.ml[174,6687+20]..[174,6687+24])
                                      Ppat_var "_dir" (lambda/simplif.ml[174,6687+20]..[174,6687+24])
                                    pattern (lambda/simplif.ml[174,6687+26]..[174,6687+28])
                                      Ppat_var "l3" (lambda/simplif.ml[174,6687+26]..[174,6687+28])
                                  ]
                            expression (lambda/simplif.ml[175,6720+6]..[177,6774+25])
                              Pexp_sequence
                              expression (lambda/simplif.ml[175,6720+6]..[175,6720+25])
                                Pexp_apply
                                expression (lambda/simplif.ml[175,6720+6]..[175,6720+11])
                                  Pexp_ident "count" (lambda/simplif.ml[175,6720+6]..[175,6720+11])
                                [
                                  <arg>
                                  Labelled "try_depth"
                                    expression (lambda/simplif.ml[175,6720+13]..[175,6720+22])
                                      Pexp_ident "try_depth" (lambda/simplif.ml[175,6720+13]..[175,6720+22])
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[175,6720+23]..[175,6720+25])
                                      Pexp_ident "l1" (lambda/simplif.ml[175,6720+23]..[175,6720+25])
                                ]
                              expression (lambda/simplif.ml[176,6747+6]..[177,6774+25])
                                Pexp_sequence
                                expression (lambda/simplif.ml[176,6747+6]..[176,6747+25])
                                  Pexp_apply
                                  expression (lambda/simplif.ml[176,6747+6]..[176,6747+11])
                                    Pexp_ident "count" (lambda/simplif.ml[176,6747+6]..[176,6747+11])
                                  [
                                    <arg>
                                    Labelled "try_depth"
                                      expression (lambda/simplif.ml[176,6747+13]..[176,6747+22])
                                        Pexp_ident "try_depth" (lambda/simplif.ml[176,6747+13]..[176,6747+22])
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[176,6747+23]..[176,6747+25])
                                        Pexp_ident "l2" (lambda/simplif.ml[176,6747+23]..[176,6747+25])
                                  ]
                                expression (lambda/simplif.ml[177,6774+6]..[177,6774+25])
                                  Pexp_apply
                                  expression (lambda/simplif.ml[177,6774+6]..[177,6774+11])
                                    Pexp_ident "count" (lambda/simplif.ml[177,6774+6]..[177,6774+11])
                                  [
                                    <arg>
                                    Labelled "try_depth"
                                      expression (lambda/simplif.ml[177,6774+13]..[177,6774+22])
                                        Pexp_ident "try_depth" (lambda/simplif.ml[177,6774+13]..[177,6774+22])
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[177,6774+23]..[177,6774+25])
                                        Pexp_ident "l3" (lambda/simplif.ml[177,6774+23]..[177,6774+25])
                                  ]
                          <case>
                            pattern (lambda/simplif.ml[178,6800+4]..[178,6800+18])
                              Ppat_construct "Lassign" (lambda/simplif.ml[178,6800+4]..[178,6800+11])
                              Some
                                []
                                pattern (lambda/simplif.ml[178,6800+11]..[178,6800+18])
                                  Ppat_tuple
                                  [
                                    pattern (lambda/simplif.ml[178,6800+12]..[178,6800+14])
                                      Ppat_var "_v" (lambda/simplif.ml[178,6800+12]..[178,6800+14])
                                    pattern (lambda/simplif.ml[178,6800+16]..[178,6800+17])
                                      Ppat_var "l" (lambda/simplif.ml[178,6800+16]..[178,6800+17])
                                  ]
                            expression (lambda/simplif.ml[178,6800+22]..[178,6800+40])
                              Pexp_apply
                              expression (lambda/simplif.ml[178,6800+22]..[178,6800+27])
                                Pexp_ident "count" (lambda/simplif.ml[178,6800+22]..[178,6800+27])
                              [
                                <arg>
                                Labelled "try_depth"
                                  expression (lambda/simplif.ml[178,6800+29]..[178,6800+38])
                                    Pexp_ident "try_depth" (lambda/simplif.ml[178,6800+29]..[178,6800+38])
                                <arg>
                                Nolabel
                                  expression (lambda/simplif.ml[178,6800+39]..[178,6800+40])
                                    Pexp_ident "l" (lambda/simplif.ml[178,6800+39]..[178,6800+40])
                              ]
                          <case>
                            pattern (lambda/simplif.ml[179,6841+4]..[179,6841+26])
                              Ppat_construct "Lsend" (lambda/simplif.ml[179,6841+4]..[179,6841+9])
                              Some
                                []
                                pattern (lambda/simplif.ml[179,6841+9]..[179,6841+26])
                                  Ppat_tuple
                                  [
                                    pattern (lambda/simplif.ml[179,6841+10]..[179,6841+12])
                                      Ppat_var "_k" (lambda/simplif.ml[179,6841+10]..[179,6841+12])
                                    pattern (lambda/simplif.ml[179,6841+14]..[179,6841+15])
                                      Ppat_var "m" (lambda/simplif.ml[179,6841+14]..[179,6841+15])
                                    pattern (lambda/simplif.ml[179,6841+17]..[179,6841+18])
                                      Ppat_var "o" (lambda/simplif.ml[179,6841+17]..[179,6841+18])
                                    pattern (lambda/simplif.ml[179,6841+20]..[179,6841+22])
                                      Ppat_var "ll" (lambda/simplif.ml[179,6841+20]..[179,6841+22])
                                    pattern (lambda/simplif.ml[179,6841+24]..[179,6841+25])
                                      Ppat_any
                                  ]
                            expression (lambda/simplif.ml[179,6841+30]..[179,6841+69])
                              Pexp_apply
                              expression (lambda/simplif.ml[179,6841+30]..[179,6841+39])
                                Pexp_ident "List.iter" (lambda/simplif.ml[179,6841+30]..[179,6841+39])
                              [
                                <arg>
                                Nolabel
                                  expression (lambda/simplif.ml[179,6841+40]..[179,6841+58])
                                    Pexp_apply
                                    expression (lambda/simplif.ml[179,6841+41]..[179,6841+46])
                                      Pexp_ident "count" (lambda/simplif.ml[179,6841+41]..[179,6841+46])
                                    [
                                      <arg>
                                      Labelled "try_depth"
                                        expression (lambda/simplif.ml[179,6841+48]..[179,6841+57])
                                          Pexp_ident "try_depth" (lambda/simplif.ml[179,6841+48]..[179,6841+57])
                                    ]
                                <arg>
                                Nolabel
                                  expression (lambda/simplif.ml[179,6841+59]..[179,6841+69])
                                    Pexp_construct "::" (lambda/simplif.ml[179,6841+61]..[179,6841+63])
                                    Some
                                      expression (lambda/simplif.ml[179,6841+60]..[179,6841+68]) ghost
                                        Pexp_tuple
                                        [
                                          expression (lambda/simplif.ml[179,6841+60]..[179,6841+61])
                                            Pexp_ident "m" (lambda/simplif.ml[179,6841+60]..[179,6841+61])
                                          expression (lambda/simplif.ml[179,6841+63]..[179,6841+68])
                                            Pexp_construct "::" (lambda/simplif.ml[179,6841+64]..[179,6841+66])
                                            Some
                                              expression (lambda/simplif.ml[179,6841+63]..[179,6841+68]) ghost
                                                Pexp_tuple
                                                [
                                                  expression (lambda/simplif.ml[179,6841+63]..[179,6841+64])
                                                    Pexp_ident "o" (lambda/simplif.ml[179,6841+63]..[179,6841+64])
                                                  expression (lambda/simplif.ml[179,6841+66]..[179,6841+68])
                                                    Pexp_ident "ll" (lambda/simplif.ml[179,6841+66]..[179,6841+68])
                                                ]
                                        ]
                              ]
                          <case>
                            pattern (lambda/simplif.ml[180,6911+4]..[180,6911+16])
                              Ppat_construct "Levent" (lambda/simplif.ml[180,6911+4]..[180,6911+10])
                              Some
                                []
                                pattern (lambda/simplif.ml[180,6911+10]..[180,6911+16])
                                  Ppat_tuple
                                  [
                                    pattern (lambda/simplif.ml[180,6911+11]..[180,6911+12])
                                      Ppat_var "l" (lambda/simplif.ml[180,6911+11]..[180,6911+12])
                                    pattern (lambda/simplif.ml[180,6911+14]..[180,6911+15])
                                      Ppat_any
                                  ]
                            expression (lambda/simplif.ml[180,6911+20]..[180,6911+38])
                              Pexp_apply
                              expression (lambda/simplif.ml[180,6911+20]..[180,6911+25])
                                Pexp_ident "count" (lambda/simplif.ml[180,6911+20]..[180,6911+25])
                              [
                                <arg>
                                Labelled "try_depth"
                                  expression (lambda/simplif.ml[180,6911+27]..[180,6911+36])
                                    Pexp_ident "try_depth" (lambda/simplif.ml[180,6911+27]..[180,6911+36])
                                <arg>
                                Nolabel
                                  expression (lambda/simplif.ml[180,6911+37]..[180,6911+38])
                                    Pexp_ident "l" (lambda/simplif.ml[180,6911+37]..[180,6911+38])
                              ]
                          <case>
                            pattern (lambda/simplif.ml[181,6950+4]..[181,6950+18])
                              Ppat_construct "Lifused" (lambda/simplif.ml[181,6950+4]..[181,6950+11])
                              Some
                                []
                                pattern (lambda/simplif.ml[181,6950+11]..[181,6950+18])
                                  Ppat_tuple
                                  [
                                    pattern (lambda/simplif.ml[181,6950+12]..[181,6950+14])
                                      Ppat_var "_v" (lambda/simplif.ml[181,6950+12]..[181,6950+14])
                                    pattern (lambda/simplif.ml[181,6950+16]..[181,6950+17])
                                      Ppat_var "l" (lambda/simplif.ml[181,6950+16]..[181,6950+17])
                                  ]
                            expression (lambda/simplif.ml[181,6950+22]..[181,6950+40])
                              Pexp_apply
                              expression (lambda/simplif.ml[181,6950+22]..[181,6950+27])
                                Pexp_ident "count" (lambda/simplif.ml[181,6950+22]..[181,6950+27])
                              [
                                <arg>
                                Labelled "try_depth"
                                  expression (lambda/simplif.ml[181,6950+29]..[181,6950+38])
                                    Pexp_ident "try_depth" (lambda/simplif.ml[181,6950+29]..[181,6950+38])
                                <arg>
                                Nolabel
                                  expression (lambda/simplif.ml[181,6950+39]..[181,6950+40])
                                    Pexp_ident "l" (lambda/simplif.ml[181,6950+39]..[181,6950+40])
                              ]
                        ]
                  <def>
                    pattern (lambda/simplif.ml[183,6992+6]..[183,6992+19])
                      Ppat_var "count_default" (lambda/simplif.ml[183,6992+6]..[183,6992+19])
                    expression (lambda/simplif.ml[183,6992+20]..[195,7531+9]) ghost
                      Pexp_fun
                      Labelled "try_depth"
                      None
                      pattern (lambda/simplif.ml[183,6992+21]..[183,6992+30])
                        Ppat_var "try_depth" (lambda/simplif.ml[183,6992+21]..[183,6992+30])
                      expression (lambda/simplif.ml[183,6992+31]..[195,7531+9]) ghost
                        Pexp_fun
                        Nolabel
                        None
                        pattern (lambda/simplif.ml[183,6992+31]..[183,6992+33])
                          Ppat_var "sw" (lambda/simplif.ml[183,6992+31]..[183,6992+33])
                        expression (lambda/simplif.ml[183,6992+36]..[195,7531+9])
                          Pexp_match
                          expression (lambda/simplif.ml[183,6992+42]..[183,6992+58])
                            Pexp_field
                            expression (lambda/simplif.ml[183,6992+42]..[183,6992+44])
                              Pexp_ident "sw" (lambda/simplif.ml[183,6992+42]..[183,6992+44])
                            "sw_failaction" (lambda/simplif.ml[183,6992+45]..[183,6992+58])
                          [
                            <case>
                              pattern (lambda/simplif.ml[184,7056+4]..[184,7056+8])
                                Ppat_construct "None" (lambda/simplif.ml[184,7056+4]..[184,7056+8])
                                None
                              expression (lambda/simplif.ml[184,7056+12]..[184,7056+14])
                                Pexp_construct "()" (lambda/simplif.ml[184,7056+12]..[184,7056+14])
                                None
                            <case>
                              pattern (lambda/simplif.ml[185,7071+4]..[185,7071+11])
                                Ppat_construct "Some" (lambda/simplif.ml[185,7071+4]..[185,7071+8])
                                Some
                                  []
                                  pattern (lambda/simplif.ml[185,7071+9]..[185,7071+11])
                                    Ppat_var "al" (lambda/simplif.ml[185,7071+9]..[185,7071+11])
                              expression (lambda/simplif.ml[186,7086+6]..[195,7531+9])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lambda/simplif.ml[186,7086+10]..[186,7086+17])
                                      Ppat_var "nconsts" (lambda/simplif.ml[186,7086+10]..[186,7086+17])
                                    expression (lambda/simplif.ml[186,7086+20]..[186,7086+44])
                                      Pexp_apply
                                      expression (lambda/simplif.ml[186,7086+20]..[186,7086+31])
                                        Pexp_ident "List.length" (lambda/simplif.ml[186,7086+20]..[186,7086+31])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lambda/simplif.ml[186,7086+32]..[186,7086+44])
                                            Pexp_field
                                            expression (lambda/simplif.ml[186,7086+32]..[186,7086+34])
                                              Pexp_ident "sw" (lambda/simplif.ml[186,7086+32]..[186,7086+34])
                                            "sw_consts" (lambda/simplif.ml[186,7086+35]..[186,7086+44])
                                      ]
                                  <def>
                                    pattern (lambda/simplif.ml[187,7131+10]..[187,7131+17])
                                      Ppat_var "nblocks" (lambda/simplif.ml[187,7131+10]..[187,7131+17])
                                    expression (lambda/simplif.ml[187,7131+20]..[187,7131+44])
                                      Pexp_apply
                                      expression (lambda/simplif.ml[187,7131+20]..[187,7131+31])
                                        Pexp_ident "List.length" (lambda/simplif.ml[187,7131+20]..[187,7131+31])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lambda/simplif.ml[187,7131+32]..[187,7131+44])
                                            Pexp_field
                                            expression (lambda/simplif.ml[187,7131+32]..[187,7131+34])
                                              Pexp_ident "sw" (lambda/simplif.ml[187,7131+32]..[187,7131+34])
                                            "sw_blocks" (lambda/simplif.ml[187,7131+35]..[187,7131+44])
                                      ]
                                ]
                                expression (lambda/simplif.ml[188,7179+6]..[195,7531+9])
                                  Pexp_ifthenelse
                                  expression (lambda/simplif.ml[189,7188+8]..[189,7188+62])
                                    Pexp_apply
                                    expression (lambda/simplif.ml[189,7188+34]..[189,7188+36])
                                      Pexp_ident "&&" (lambda/simplif.ml[189,7188+34]..[189,7188+36])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lambda/simplif.ml[189,7188+8]..[189,7188+33])
                                          Pexp_apply
                                          expression (lambda/simplif.ml[189,7188+16]..[189,7188+17])
                                            Pexp_ident "<" (lambda/simplif.ml[189,7188+16]..[189,7188+17])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[189,7188+8]..[189,7188+15])
                                                Pexp_ident "nconsts" (lambda/simplif.ml[189,7188+8]..[189,7188+15])
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[189,7188+18]..[189,7188+33])
                                                Pexp_field
                                                expression (lambda/simplif.ml[189,7188+18]..[189,7188+20])
                                                  Pexp_ident "sw" (lambda/simplif.ml[189,7188+18]..[189,7188+20])
                                                "sw_numconsts" (lambda/simplif.ml[189,7188+21]..[189,7188+33])
                                          ]
                                      <arg>
                                      Nolabel
                                        expression (lambda/simplif.ml[189,7188+37]..[189,7188+62])
                                          Pexp_apply
                                          expression (lambda/simplif.ml[189,7188+45]..[189,7188+46])
                                            Pexp_ident "<" (lambda/simplif.ml[189,7188+45]..[189,7188+46])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[189,7188+37]..[189,7188+44])
                                                Pexp_ident "nblocks" (lambda/simplif.ml[189,7188+37]..[189,7188+44])
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[189,7188+47]..[189,7188+62])
                                                Pexp_field
                                                expression (lambda/simplif.ml[189,7188+47]..[189,7188+49])
                                                  Pexp_ident "sw" (lambda/simplif.ml[189,7188+47]..[189,7188+49])
                                                "sw_numblocks" (lambda/simplif.ml[189,7188+50]..[189,7188+62])
                                          ]
                                    ]
                                  expression (lambda/simplif.ml[190,7251+11]..[192,7371+9])
                                    Pexp_sequence
                                    expression (lambda/simplif.ml[191,7321+8]..[191,7321+27])
                                      Pexp_apply
                                      expression (lambda/simplif.ml[191,7321+8]..[191,7321+13])
                                        Pexp_ident "count" (lambda/simplif.ml[191,7321+8]..[191,7321+13])
                                      [
                                        <arg>
                                        Labelled "try_depth"
                                          expression (lambda/simplif.ml[191,7321+15]..[191,7321+24])
                                            Pexp_ident "try_depth" (lambda/simplif.ml[191,7321+15]..[191,7321+24])
                                        <arg>
                                        Nolabel
                                          expression (lambda/simplif.ml[191,7321+25]..[191,7321+27])
                                            Pexp_ident "al" (lambda/simplif.ml[191,7321+25]..[191,7321+27])
                                      ]
                                    expression (lambda/simplif.ml[191,7321+30]..[191,7321+49])
                                      Pexp_apply
                                      expression (lambda/simplif.ml[191,7321+30]..[191,7321+35])
                                        Pexp_ident "count" (lambda/simplif.ml[191,7321+30]..[191,7321+35])
                                      [
                                        <arg>
                                        Labelled "try_depth"
                                          expression (lambda/simplif.ml[191,7321+37]..[191,7321+46])
                                            Pexp_ident "try_depth" (lambda/simplif.ml[191,7321+37]..[191,7321+46])
                                        <arg>
                                        Nolabel
                                          expression (lambda/simplif.ml[191,7321+47]..[191,7321+49])
                                            Pexp_ident "al" (lambda/simplif.ml[191,7321+47]..[191,7321+49])
                                      ]
                                  Some
                                    expression (lambda/simplif.ml[192,7371+15]..[195,7531+9])
                                      Pexp_sequence
                                      expression (lambda/simplif.ml[193,7429+8]..[193,7429+71])
                                        Pexp_assert
                                        expression (lambda/simplif.ml[193,7429+15]..[193,7429+71])
                                          Pexp_apply
                                          expression (lambda/simplif.ml[193,7429+42]..[193,7429+44])
                                            Pexp_ident "||" (lambda/simplif.ml[193,7429+42]..[193,7429+44])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[193,7429+16]..[193,7429+41])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[193,7429+24]..[193,7429+25])
                                                  Pexp_ident "<" (lambda/simplif.ml[193,7429+24]..[193,7429+25])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[193,7429+16]..[193,7429+23])
                                                      Pexp_ident "nconsts" (lambda/simplif.ml[193,7429+16]..[193,7429+23])
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[193,7429+26]..[193,7429+41])
                                                      Pexp_field
                                                      expression (lambda/simplif.ml[193,7429+26]..[193,7429+28])
                                                        Pexp_ident "sw" (lambda/simplif.ml[193,7429+26]..[193,7429+28])
                                                      "sw_numconsts" (lambda/simplif.ml[193,7429+29]..[193,7429+41])
                                                ]
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[193,7429+45]..[193,7429+70])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[193,7429+53]..[193,7429+54])
                                                  Pexp_ident "<" (lambda/simplif.ml[193,7429+53]..[193,7429+54])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[193,7429+45]..[193,7429+52])
                                                      Pexp_ident "nblocks" (lambda/simplif.ml[193,7429+45]..[193,7429+52])
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[193,7429+55]..[193,7429+70])
                                                      Pexp_field
                                                      expression (lambda/simplif.ml[193,7429+55]..[193,7429+57])
                                                        Pexp_ident "sw" (lambda/simplif.ml[193,7429+55]..[193,7429+57])
                                                      "sw_numblocks" (lambda/simplif.ml[193,7429+58]..[193,7429+70])
                                                ]
                                          ]
                                      expression (lambda/simplif.ml[194,7503+8]..[194,7503+27])
                                        Pexp_apply
                                        expression (lambda/simplif.ml[194,7503+8]..[194,7503+13])
                                          Pexp_ident "count" (lambda/simplif.ml[194,7503+8]..[194,7503+13])
                                        [
                                          <arg>
                                          Labelled "try_depth"
                                            expression (lambda/simplif.ml[194,7503+15]..[194,7503+24])
                                              Pexp_ident "try_depth" (lambda/simplif.ml[194,7503+15]..[194,7503+24])
                                          <arg>
                                          Nolabel
                                            expression (lambda/simplif.ml[194,7503+25]..[194,7503+27])
                                              Pexp_ident "al" (lambda/simplif.ml[194,7503+25]..[194,7503+27])
                                        ]
                          ]
                ]
                expression (lambda/simplif.ml[197,7546+2]..[325,12864+26])
                  Pexp_sequence
                  expression (lambda/simplif.ml[197,7546+2]..[197,7546+24])
                    Pexp_apply
                    expression (lambda/simplif.ml[197,7546+2]..[197,7546+7])
                      Pexp_ident "count" (lambda/simplif.ml[197,7546+2]..[197,7546+7])
                    [
                      <arg>
                      Labelled "try_depth"
                        expression (lambda/simplif.ml[197,7546+19]..[197,7546+20])
                          Pexp_constant PConst_int (0,None)
                      <arg>
                      Nolabel
                        expression (lambda/simplif.ml[197,7546+21]..[197,7546+24])
                          Pexp_ident "lam" (lambda/simplif.ml[197,7546+21]..[197,7546+24])
                    ]
                  expression (lambda/simplif.ml[216,8265+2]..[325,12864+26])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (lambda/simplif.ml[216,8265+6]..[216,8265+11])
                          Ppat_var "subst" (lambda/simplif.ml[216,8265+6]..[216,8265+11])
                        expression (lambda/simplif.ml[216,8265+14]..[216,8265+31])
                          Pexp_apply
                          expression (lambda/simplif.ml[216,8265+14]..[216,8265+28])
                            Pexp_ident "Hashtbl.create" (lambda/simplif.ml[216,8265+14]..[216,8265+28])
                          [
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[216,8265+29]..[216,8265+31])
                                Pexp_constant PConst_int (17,None)
                          ]
                    ]
                    expression (lambda/simplif.ml[217,8300+2]..[325,12864+26])
                      Pexp_let Rec
                      [
                        <def>
                          pattern (lambda/simplif.ml[217,8300+10]..[217,8300+17])
                            Ppat_var "simplif" (lambda/simplif.ml[217,8300+10]..[217,8300+17])
                          expression (lambda/simplif.ml[217,8300+18]..[323,12805+53]) ghost
                            Pexp_fun
                            Labelled "try_depth"
                            None
                            pattern (lambda/simplif.ml[217,8300+19]..[217,8300+28])
                              Ppat_var "try_depth" (lambda/simplif.ml[217,8300+19]..[217,8300+28])
                            expression (lambda/simplif.ml[217,8300+31]..[323,12805+53])
                              Pexp_function
                              [
                                <case>
                                  pattern (lambda/simplif.ml[218,8340+4]..[218,8340+39])
                                    Ppat_alias "l" (lambda/simplif.ml[218,8340+38]..[218,8340+39])
                                    pattern (lambda/simplif.ml[218,8340+4]..[218,8340+34])
                                      Ppat_or
                                      pattern (lambda/simplif.ml[218,8340+5]..[218,8340+22])
                                        Ppat_or
                                        pattern (lambda/simplif.ml[218,8340+5]..[218,8340+11])
                                          Ppat_construct "Lvar" (lambda/simplif.ml[218,8340+5]..[218,8340+9])
                                          Some
                                            []
                                            pattern (lambda/simplif.ml[218,8340+10]..[218,8340+11])
                                              Ppat_any
                                        pattern (lambda/simplif.ml[218,8340+13]..[218,8340+22])
                                          Ppat_construct "Lmutvar" (lambda/simplif.ml[218,8340+13]..[218,8340+20])
                                          Some
                                            []
                                            pattern (lambda/simplif.ml[218,8340+21]..[218,8340+22])
                                              Ppat_any
                                      pattern (lambda/simplif.ml[218,8340+25]..[218,8340+33])
                                        Ppat_construct "Lconst" (lambda/simplif.ml[218,8340+25]..[218,8340+31])
                                        Some
                                          []
                                          pattern (lambda/simplif.ml[218,8340+32]..[218,8340+33])
                                            Ppat_any
                                  expression (lambda/simplif.ml[218,8340+43]..[218,8340+44])
                                    Pexp_ident "l" (lambda/simplif.ml[218,8340+43]..[218,8340+44])
                                <case>
                                  pattern (lambda/simplif.ml[219,8385+4]..[219,8385+13])
                                    Ppat_construct "Lapply" (lambda/simplif.ml[219,8385+4]..[219,8385+10])
                                    Some
                                      []
                                      pattern (lambda/simplif.ml[219,8385+11]..[219,8385+13])
                                        Ppat_var "ap" (lambda/simplif.ml[219,8385+11]..[219,8385+13])
                                  expression (lambda/simplif.ml[220,8402+6]..[221,8464+72])
                                    Pexp_construct "Lapply" (lambda/simplif.ml[220,8402+6]..[220,8402+12])
                                    Some
                                      expression (lambda/simplif.ml[220,8402+12]..[221,8464+72])
                                        Pexp_record
                                        [
                                          "ap_func" (lambda/simplif.ml[220,8402+21]..[220,8402+28])
                                            expression (lambda/simplif.ml[220,8402+31]..[220,8402+60])
                                              Pexp_apply
                                              expression (lambda/simplif.ml[220,8402+31]..[220,8402+38])
                                                Pexp_ident "simplif" (lambda/simplif.ml[220,8402+31]..[220,8402+38])
                                              [
                                                <arg>
                                                Labelled "try_depth"
                                                  expression (lambda/simplif.ml[220,8402+40]..[220,8402+49])
                                                    Pexp_ident "try_depth" (lambda/simplif.ml[220,8402+40]..[220,8402+49])
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[220,8402+50]..[220,8402+60])
                                                    Pexp_field
                                                    expression (lambda/simplif.ml[220,8402+50]..[220,8402+52])
                                                      Pexp_ident "ap" (lambda/simplif.ml[220,8402+50]..[220,8402+52])
                                                    "ap_func" (lambda/simplif.ml[220,8402+53]..[220,8402+60])
                                              ]
                                          "ap_args" (lambda/simplif.ml[221,8464+21]..[221,8464+28])
                                            expression (lambda/simplif.ml[221,8464+31]..[221,8464+71])
                                              Pexp_apply
                                              expression (lambda/simplif.ml[221,8464+31]..[221,8464+39])
                                                Pexp_ident "List.map" (lambda/simplif.ml[221,8464+31]..[221,8464+39])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[221,8464+40]..[221,8464+60])
                                                    Pexp_apply
                                                    expression (lambda/simplif.ml[221,8464+41]..[221,8464+48])
                                                      Pexp_ident "simplif" (lambda/simplif.ml[221,8464+41]..[221,8464+48])
                                                    [
                                                      <arg>
                                                      Labelled "try_depth"
                                                        expression (lambda/simplif.ml[221,8464+50]..[221,8464+59])
                                                          Pexp_ident "try_depth" (lambda/simplif.ml[221,8464+50]..[221,8464+59])
                                                    ]
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[221,8464+61]..[221,8464+71])
                                                    Pexp_field
                                                    expression (lambda/simplif.ml[221,8464+61]..[221,8464+63])
                                                      Pexp_ident "ap" (lambda/simplif.ml[221,8464+61]..[221,8464+63])
                                                    "ap_args" (lambda/simplif.ml[221,8464+64]..[221,8464+71])
                                              ]
                                        ]
                                        Some
                                          expression (lambda/simplif.ml[220,8402+13]..[220,8402+15])
                                            Pexp_ident "ap" (lambda/simplif.ml[220,8402+13]..[220,8402+15])
                                <case>
                                  pattern (lambda/simplif.ml[222,8537+4]..[222,8537+56])
                                    Ppat_construct "Lfunction" (lambda/simplif.ml[222,8537+4]..[222,8537+13])
                                    Some
                                      []
                                      pattern (lambda/simplif.ml[222,8537+13]..[222,8537+56])
                                        Ppat_record Closed
                                        [
                                          "kind" (lambda/simplif.ml[222,8537+14]..[222,8537+18]) ghost
                                            pattern (lambda/simplif.ml[222,8537+14]..[222,8537+18])
                                              Ppat_var "kind" (lambda/simplif.ml[222,8537+14]..[222,8537+18])
                                          "params" (lambda/simplif.ml[222,8537+20]..[222,8537+26]) ghost
                                            pattern (lambda/simplif.ml[222,8537+20]..[222,8537+26])
                                              Ppat_var "params" (lambda/simplif.ml[222,8537+20]..[222,8537+26])
                                          "return" (lambda/simplif.ml[222,8537+28]..[222,8537+34]) ghost
                                            pattern (lambda/simplif.ml[222,8537+28]..[222,8537+34])
                                              Ppat_var "return" (lambda/simplif.ml[222,8537+28]..[222,8537+34])
                                          "body" (lambda/simplif.ml[222,8537+36]..[222,8537+40])
                                            pattern (lambda/simplif.ml[222,8537+43]..[222,8537+44])
                                              Ppat_var "l" (lambda/simplif.ml[222,8537+43]..[222,8537+44])
                                          "attr" (lambda/simplif.ml[222,8537+46]..[222,8537+50]) ghost
                                            pattern (lambda/simplif.ml[222,8537+46]..[222,8537+50])
                                              Ppat_var "attr" (lambda/simplif.ml[222,8537+46]..[222,8537+50])
                                          "loc" (lambda/simplif.ml[222,8537+52]..[222,8537+55]) ghost
                                            pattern (lambda/simplif.ml[222,8537+52]..[222,8537+55])
                                              Ppat_var "loc" (lambda/simplif.ml[222,8537+52]..[222,8537+55])
                                        ]
                                  expression (lambda/simplif.ml[223,8597+5]..[223,8597+76])
                                    Pexp_construct "Lfunction" (lambda/simplif.ml[223,8597+5]..[223,8597+14])
                                    Some
                                      expression (lambda/simplif.ml[223,8597+14]..[223,8597+76])
                                        Pexp_record
                                        [
                                          "kind" (lambda/simplif.ml[223,8597+15]..[223,8597+19]) ghost
                                            expression (lambda/simplif.ml[223,8597+15]..[223,8597+19])
                                              Pexp_ident "kind" (lambda/simplif.ml[223,8597+15]..[223,8597+19])
                                          "params" (lambda/simplif.ml[223,8597+21]..[223,8597+27]) ghost
                                            expression (lambda/simplif.ml[223,8597+21]..[223,8597+27])
                                              Pexp_ident "params" (lambda/simplif.ml[223,8597+21]..[223,8597+27])
                                          "return" (lambda/simplif.ml[223,8597+29]..[223,8597+35]) ghost
                                            expression (lambda/simplif.ml[223,8597+29]..[223,8597+35])
                                              Pexp_ident "return" (lambda/simplif.ml[223,8597+29]..[223,8597+35])
                                          "body" (lambda/simplif.ml[223,8597+37]..[223,8597+41])
                                            expression (lambda/simplif.ml[223,8597+44]..[223,8597+64])
                                              Pexp_apply
                                              expression (lambda/simplif.ml[223,8597+44]..[223,8597+51])
                                                Pexp_ident "simplif" (lambda/simplif.ml[223,8597+44]..[223,8597+51])
                                              [
                                                <arg>
                                                Labelled "try_depth"
                                                  expression (lambda/simplif.ml[223,8597+53]..[223,8597+62])
                                                    Pexp_ident "try_depth" (lambda/simplif.ml[223,8597+53]..[223,8597+62])
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[223,8597+63]..[223,8597+64])
                                                    Pexp_ident "l" (lambda/simplif.ml[223,8597+63]..[223,8597+64])
                                              ]
                                          "attr" (lambda/simplif.ml[223,8597+66]..[223,8597+70]) ghost
                                            expression (lambda/simplif.ml[223,8597+66]..[223,8597+70])
                                              Pexp_ident "attr" (lambda/simplif.ml[223,8597+66]..[223,8597+70])
                                          "loc" (lambda/simplif.ml[223,8597+72]..[223,8597+75]) ghost
                                            expression (lambda/simplif.ml[223,8597+72]..[223,8597+75])
                                              Pexp_ident "loc" (lambda/simplif.ml[223,8597+72]..[223,8597+75])
                                        ]
                                        None
                                <case>
                                  pattern (lambda/simplif.ml[224,8674+4]..[224,8674+30])
                                    Ppat_construct "Llet" (lambda/simplif.ml[224,8674+4]..[224,8674+8])
                                    Some
                                      []
                                      pattern (lambda/simplif.ml[224,8674+8]..[224,8674+30])
                                        Ppat_tuple
                                        [
                                          pattern (lambda/simplif.ml[224,8674+9]..[224,8674+12])
                                            Ppat_var "str" (lambda/simplif.ml[224,8674+9]..[224,8674+12])
                                          pattern (lambda/simplif.ml[224,8674+14]..[224,8674+18])
                                            Ppat_var "kind" (lambda/simplif.ml[224,8674+14]..[224,8674+18])
                                          pattern (lambda/simplif.ml[224,8674+20]..[224,8674+21])
                                            Ppat_var "v" (lambda/simplif.ml[224,8674+20]..[224,8674+21])
                                          pattern (lambda/simplif.ml[224,8674+23]..[224,8674+25])
                                            Ppat_var "l1" (lambda/simplif.ml[224,8674+23]..[224,8674+25])
                                          pattern (lambda/simplif.ml[224,8674+27]..[224,8674+29])
                                            Ppat_var "l2" (lambda/simplif.ml[224,8674+27]..[224,8674+29])
                                        ]
                                  expression (lambda/simplif.ml[225,8708+6]..[225,8708+70])
                                    Pexp_construct "Llet" (lambda/simplif.ml[225,8708+6]..[225,8708+10])
                                    Some
                                      expression (lambda/simplif.ml[225,8708+10]..[225,8708+70])
                                        Pexp_tuple
                                        [
                                          expression (lambda/simplif.ml[225,8708+11]..[225,8708+14])
                                            Pexp_ident "str" (lambda/simplif.ml[225,8708+11]..[225,8708+14])
                                          expression (lambda/simplif.ml[225,8708+16]..[225,8708+20])
                                            Pexp_ident "kind" (lambda/simplif.ml[225,8708+16]..[225,8708+20])
                                          expression (lambda/simplif.ml[225,8708+22]..[225,8708+23])
                                            Pexp_ident "v" (lambda/simplif.ml[225,8708+22]..[225,8708+23])
                                          expression (lambda/simplif.ml[225,8708+25]..[225,8708+46])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[225,8708+25]..[225,8708+32])
                                              Pexp_ident "simplif" (lambda/simplif.ml[225,8708+25]..[225,8708+32])
                                            [
                                              <arg>
                                              Labelled "try_depth"
                                                expression (lambda/simplif.ml[225,8708+34]..[225,8708+43])
                                                  Pexp_ident "try_depth" (lambda/simplif.ml[225,8708+34]..[225,8708+43])
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[225,8708+44]..[225,8708+46])
                                                  Pexp_ident "l1" (lambda/simplif.ml[225,8708+44]..[225,8708+46])
                                            ]
                                          expression (lambda/simplif.ml[225,8708+48]..[225,8708+69])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[225,8708+48]..[225,8708+55])
                                              Pexp_ident "simplif" (lambda/simplif.ml[225,8708+48]..[225,8708+55])
                                            [
                                              <arg>
                                              Labelled "try_depth"
                                                expression (lambda/simplif.ml[225,8708+57]..[225,8708+66])
                                                  Pexp_ident "try_depth" (lambda/simplif.ml[225,8708+57]..[225,8708+66])
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[225,8708+67]..[225,8708+69])
                                                  Pexp_ident "l2" (lambda/simplif.ml[225,8708+67]..[225,8708+69])
                                            ]
                                        ]
                                <case>
                                  pattern (lambda/simplif.ml[226,8779+4]..[226,8779+28])
                                    Ppat_construct "Lmutlet" (lambda/simplif.ml[226,8779+4]..[226,8779+11])
                                    Some
                                      []
                                      pattern (lambda/simplif.ml[226,8779+11]..[226,8779+28])
                                        Ppat_tuple
                                        [
                                          pattern (lambda/simplif.ml[226,8779+12]..[226,8779+16])
                                            Ppat_var "kind" (lambda/simplif.ml[226,8779+12]..[226,8779+16])
                                          pattern (lambda/simplif.ml[226,8779+18]..[226,8779+19])
                                            Ppat_var "v" (lambda/simplif.ml[226,8779+18]..[226,8779+19])
                                          pattern (lambda/simplif.ml[226,8779+21]..[226,8779+23])
                                            Ppat_var "l1" (lambda/simplif.ml[226,8779+21]..[226,8779+23])
                                          pattern (lambda/simplif.ml[226,8779+25]..[226,8779+27])
                                            Ppat_var "l2" (lambda/simplif.ml[226,8779+25]..[226,8779+27])
                                        ]
                                  expression (lambda/simplif.ml[227,8811+6]..[227,8811+68])
                                    Pexp_construct "Lmutlet" (lambda/simplif.ml[227,8811+6]..[227,8811+13])
                                    Some
                                      expression (lambda/simplif.ml[227,8811+13]..[227,8811+68])
                                        Pexp_tuple
                                        [
                                          expression (lambda/simplif.ml[227,8811+14]..[227,8811+18])
                                            Pexp_ident "kind" (lambda/simplif.ml[227,8811+14]..[227,8811+18])
                                          expression (lambda/simplif.ml[227,8811+20]..[227,8811+21])
                                            Pexp_ident "v" (lambda/simplif.ml[227,8811+20]..[227,8811+21])
                                          expression (lambda/simplif.ml[227,8811+23]..[227,8811+44])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[227,8811+23]..[227,8811+30])
                                              Pexp_ident "simplif" (lambda/simplif.ml[227,8811+23]..[227,8811+30])
                                            [
                                              <arg>
                                              Labelled "try_depth"
                                                expression (lambda/simplif.ml[227,8811+32]..[227,8811+41])
                                                  Pexp_ident "try_depth" (lambda/simplif.ml[227,8811+32]..[227,8811+41])
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[227,8811+42]..[227,8811+44])
                                                  Pexp_ident "l1" (lambda/simplif.ml[227,8811+42]..[227,8811+44])
                                            ]
                                          expression (lambda/simplif.ml[227,8811+46]..[227,8811+67])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[227,8811+46]..[227,8811+53])
                                              Pexp_ident "simplif" (lambda/simplif.ml[227,8811+46]..[227,8811+53])
                                            [
                                              <arg>
                                              Labelled "try_depth"
                                                expression (lambda/simplif.ml[227,8811+55]..[227,8811+64])
                                                  Pexp_ident "try_depth" (lambda/simplif.ml[227,8811+55]..[227,8811+64])
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[227,8811+65]..[227,8811+67])
                                                  Pexp_ident "l2" (lambda/simplif.ml[227,8811+65]..[227,8811+67])
                                            ]
                                        ]
                                <case>
                                  pattern (lambda/simplif.ml[228,8880+4]..[228,8880+27])
                                    Ppat_construct "Lletrec" (lambda/simplif.ml[228,8880+4]..[228,8880+11])
                                    Some
                                      []
                                      pattern (lambda/simplif.ml[228,8880+11]..[228,8880+27])
                                        Ppat_tuple
                                        [
                                          pattern (lambda/simplif.ml[228,8880+12]..[228,8880+20])
                                            Ppat_var "bindings" (lambda/simplif.ml[228,8880+12]..[228,8880+20])
                                          pattern (lambda/simplif.ml[228,8880+22]..[228,8880+26])
                                            Ppat_var "body" (lambda/simplif.ml[228,8880+22]..[228,8880+26])
                                        ]
                                  expression (lambda/simplif.ml[229,8911+6]..[230,8986+30])
                                    Pexp_construct "Lletrec" (lambda/simplif.ml[229,8911+6]..[229,8911+13])
                                    Some
                                      expression (lambda/simplif.ml[229,8911+13]..[230,8986+30])
                                        Pexp_tuple
                                        [
                                          expression (lambda/simplif.ml[229,8911+14]..[229,8911+73])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[229,8911+14]..[229,8911+22])
                                              Pexp_ident "List.map" (lambda/simplif.ml[229,8911+14]..[229,8911+22])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[229,8911+23]..[229,8911+64])
                                                  Pexp_fun
                                                  Nolabel
                                                  None
                                                  pattern (lambda/simplif.ml[229,8911+28]..[229,8911+34])
                                                    Ppat_tuple
                                                    [
                                                      pattern (lambda/simplif.ml[229,8911+29]..[229,8911+30])
                                                        Ppat_var "v" (lambda/simplif.ml[229,8911+29]..[229,8911+30])
                                                      pattern (lambda/simplif.ml[229,8911+32]..[229,8911+33])
                                                        Ppat_var "l" (lambda/simplif.ml[229,8911+32]..[229,8911+33])
                                                    ]
                                                  expression (lambda/simplif.ml[229,8911+38]..[229,8911+63])
                                                    Pexp_tuple
                                                    [
                                                      expression (lambda/simplif.ml[229,8911+39]..[229,8911+40])
                                                        Pexp_ident "v" (lambda/simplif.ml[229,8911+39]..[229,8911+40])
                                                      expression (lambda/simplif.ml[229,8911+42]..[229,8911+62])
                                                        Pexp_apply
                                                        expression (lambda/simplif.ml[229,8911+42]..[229,8911+49])
                                                          Pexp_ident "simplif" (lambda/simplif.ml[229,8911+42]..[229,8911+49])
                                                        [
                                                          <arg>
                                                          Labelled "try_depth"
                                                            expression (lambda/simplif.ml[229,8911+51]..[229,8911+60])
                                                              Pexp_ident "try_depth" (lambda/simplif.ml[229,8911+51]..[229,8911+60])
                                                          <arg>
                                                          Nolabel
                                                            expression (lambda/simplif.ml[229,8911+61]..[229,8911+62])
                                                              Pexp_ident "l" (lambda/simplif.ml[229,8911+61]..[229,8911+62])
                                                        ]
                                                    ]
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[229,8911+65]..[229,8911+73])
                                                  Pexp_ident "bindings" (lambda/simplif.ml[229,8911+65]..[229,8911+73])
                                            ]
                                          expression (lambda/simplif.ml[230,8986+6]..[230,8986+29])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[230,8986+6]..[230,8986+13])
                                              Pexp_ident "simplif" (lambda/simplif.ml[230,8986+6]..[230,8986+13])
                                            [
                                              <arg>
                                              Labelled "try_depth"
                                                expression (lambda/simplif.ml[230,8986+15]..[230,8986+24])
                                                  Pexp_ident "try_depth" (lambda/simplif.ml[230,8986+15]..[230,8986+24])
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[230,8986+25]..[230,8986+29])
                                                  Pexp_ident "body" (lambda/simplif.ml[230,8986+25]..[230,8986+29])
                                            ]
                                        ]
                                <case>
                                  pattern (lambda/simplif.ml[231,9017+4]..[231,9017+21])
                                    Ppat_construct "Lprim" (lambda/simplif.ml[231,9017+4]..[231,9017+9])
                                    Some
                                      []
                                      pattern (lambda/simplif.ml[231,9017+9]..[231,9017+21])
                                        Ppat_tuple
                                        [
                                          pattern (lambda/simplif.ml[231,9017+10]..[231,9017+11])
                                            Ppat_var "p" (lambda/simplif.ml[231,9017+10]..[231,9017+11])
                                          pattern (lambda/simplif.ml[231,9017+13]..[231,9017+15])
                                            Ppat_var "ll" (lambda/simplif.ml[231,9017+13]..[231,9017+15])
                                          pattern (lambda/simplif.ml[231,9017+17]..[231,9017+20])
                                            Ppat_var "loc" (lambda/simplif.ml[231,9017+17]..[231,9017+20])
                                        ]
                                  expression (lambda/simplif.ml[231,9017+25]..[245,9617+8])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lambda/simplif.ml[232,9048+8]..[232,9048+10])
                                          Ppat_var "ll" (lambda/simplif.ml[232,9048+8]..[232,9048+10])
                                        expression (lambda/simplif.ml[232,9048+13]..[232,9048+45])
                                          Pexp_apply
                                          expression (lambda/simplif.ml[232,9048+13]..[232,9048+21])
                                            Pexp_ident "List.map" (lambda/simplif.ml[232,9048+13]..[232,9048+21])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[232,9048+22]..[232,9048+42])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[232,9048+23]..[232,9048+30])
                                                  Pexp_ident "simplif" (lambda/simplif.ml[232,9048+23]..[232,9048+30])
                                                [
                                                  <arg>
                                                  Labelled "try_depth"
                                                    expression (lambda/simplif.ml[232,9048+32]..[232,9048+41])
                                                      Pexp_ident "try_depth" (lambda/simplif.ml[232,9048+32]..[232,9048+41])
                                                ]
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[232,9048+43]..[232,9048+45])
                                                Pexp_ident "ll" (lambda/simplif.ml[232,9048+43]..[232,9048+45])
                                          ]
                                    ]
                                    expression (lambda/simplif.ml[233,9097+4]..[244,9586+30])
                                      Pexp_match
                                      expression (lambda/simplif.ml[233,9097+10]..[233,9097+15])
                                        Pexp_tuple
                                        [
                                          expression (lambda/simplif.ml[233,9097+10]..[233,9097+11])
                                            Pexp_ident "p" (lambda/simplif.ml[233,9097+10]..[233,9097+11])
                                          expression (lambda/simplif.ml[233,9097+13]..[233,9097+15])
                                            Pexp_ident "ll" (lambda/simplif.ml[233,9097+13]..[233,9097+15])
                                        ]
                                      [
                                        <case>
                                          pattern (lambda/simplif.ml[235,9154+8]..[237,9265+57])
                                            Ppat_tuple
                                            [
                                              pattern (lambda/simplif.ml[235,9154+8]..[235,9154+63])
                                                Ppat_construct "Pccall" (lambda/simplif.ml[235,9154+8]..[235,9154+14])
                                                Some
                                                  []
                                                  pattern (lambda/simplif.ml[235,9154+15]..[235,9154+63])
                                                    Ppat_record Open
                                                    [
                                                      "Primitive.prim_name" (lambda/simplif.ml[235,9154+17]..[235,9154+36])
                                                        pattern (lambda/simplif.ml[235,9154+39]..[235,9154+58])
                                                          Ppat_constant PConst_string("caml_obj_with_tag",(lambda/simplif.ml[235,9154+40]..[235,9154+57]),None)
                                                    ]
                                              pattern (lambda/simplif.ml[236,9219+8]..[237,9265+57])
                                                Ppat_construct "::" (lambda/simplif.ml[236,9219+9]..[237,9265+57]) ghost
                                                Some
                                                  []
                                                  pattern (lambda/simplif.ml[236,9219+9]..[237,9265+57]) ghost
                                                    Ppat_tuple
                                                    [
                                                      pattern (lambda/simplif.ml[236,9219+9]..[236,9219+44])
                                                        Ppat_construct "Lconst" (lambda/simplif.ml[236,9219+9]..[236,9219+15])
                                                        Some
                                                          []
                                                          pattern (lambda/simplif.ml[236,9219+16]..[236,9219+44])
                                                            Ppat_construct "Const_base" (lambda/simplif.ml[236,9219+17]..[236,9219+27])
                                                            Some
                                                              []
                                                              pattern (lambda/simplif.ml[236,9219+28]..[236,9219+43])
                                                                Ppat_construct "Const_int" (lambda/simplif.ml[236,9219+29]..[236,9219+38])
                                                                Some
                                                                  []
                                                                  pattern (lambda/simplif.ml[236,9219+39]..[236,9219+42])
                                                                    Ppat_var "tag" (lambda/simplif.ml[236,9219+39]..[236,9219+42])
                                                      pattern (lambda/simplif.ml[237,9265+9]..[237,9265+57]) ghost
                                                        Ppat_construct "::" (lambda/simplif.ml[237,9265+9]..[237,9265+57]) ghost
                                                        Some
                                                          []
                                                          pattern (lambda/simplif.ml[237,9265+9]..[237,9265+57]) ghost
                                                            Ppat_tuple
                                                            [
                                                              pattern (lambda/simplif.ml[237,9265+9]..[237,9265+56])
                                                                Ppat_construct "Lprim" (lambda/simplif.ml[237,9265+9]..[237,9265+14])
                                                                Some
                                                                  []
                                                                  pattern (lambda/simplif.ml[237,9265+15]..[237,9265+56])
                                                                    Ppat_tuple
                                                                    [
                                                                      pattern (lambda/simplif.ml[237,9265+16]..[237,9265+42])
Ppat_construct "Pmakeblock" (lambda/simplif.ml[237,9265+16]..[237,9265+26])
Some
  []
  pattern (lambda/simplif.ml[237,9265+27]..[237,9265+42])
    Ppat_tuple
    [
      pattern (lambda/simplif.ml[237,9265+28]..[237,9265+29])
        Ppat_any
      pattern (lambda/simplif.ml[237,9265+31]..[237,9265+34])
        Ppat_var "mut" (lambda/simplif.ml[237,9265+31]..[237,9265+34])
      pattern (lambda/simplif.ml[237,9265+36]..[237,9265+41])
        Ppat_var "shape" (lambda/simplif.ml[237,9265+36]..[237,9265+41])
    ]
                                                                      pattern (lambda/simplif.ml[237,9265+44]..[237,9265+50])
Ppat_var "fields" (lambda/simplif.ml[237,9265+44]..[237,9265+50])
                                                                      pattern (lambda/simplif.ml[237,9265+52]..[237,9265+55])
Ppat_var "loc" (lambda/simplif.ml[237,9265+52]..[237,9265+55])
                                                                    ]
                                                              pattern (lambda/simplif.ml[237,9265+56]..[237,9265+57]) ghost
                                                                Ppat_construct "[]" (lambda/simplif.ml[237,9265+56]..[237,9265+57]) ghost
                                                                None
                                                            ]
                                                    ]
                                            ]
                                          expression (lambda/simplif.ml[238,9326+9]..[238,9326+57])
                                            Pexp_construct "Lprim" (lambda/simplif.ml[238,9326+9]..[238,9326+14])
                                            Some
                                              expression (lambda/simplif.ml[238,9326+15]..[238,9326+57])
                                                Pexp_tuple
                                                [
                                                  expression (lambda/simplif.ml[238,9326+16]..[238,9326+43])
                                                    Pexp_construct "Pmakeblock" (lambda/simplif.ml[238,9326+16]..[238,9326+26])
                                                    Some
                                                      expression (lambda/simplif.ml[238,9326+26]..[238,9326+43])
                                                        Pexp_tuple
                                                        [
                                                          expression (lambda/simplif.ml[238,9326+27]..[238,9326+30])
                                                            Pexp_ident "tag" (lambda/simplif.ml[238,9326+27]..[238,9326+30])
                                                          expression (lambda/simplif.ml[238,9326+32]..[238,9326+35])
                                                            Pexp_ident "mut" (lambda/simplif.ml[238,9326+32]..[238,9326+35])
                                                          expression (lambda/simplif.ml[238,9326+37]..[238,9326+42])
                                                            Pexp_ident "shape" (lambda/simplif.ml[238,9326+37]..[238,9326+42])
                                                        ]
                                                  expression (lambda/simplif.ml[238,9326+45]..[238,9326+51])
                                                    Pexp_ident "fields" (lambda/simplif.ml[238,9326+45]..[238,9326+51])
                                                  expression (lambda/simplif.ml[238,9326+53]..[238,9326+56])
                                                    Pexp_ident "loc" (lambda/simplif.ml[238,9326+53]..[238,9326+56])
                                                ]
                                        <case>
                                          pattern (lambda/simplif.ml[239,9384+8]..[241,9495+42])
                                            Ppat_tuple
                                            [
                                              pattern (lambda/simplif.ml[239,9384+8]..[239,9384+63])
                                                Ppat_construct "Pccall" (lambda/simplif.ml[239,9384+8]..[239,9384+14])
                                                Some
                                                  []
                                                  pattern (lambda/simplif.ml[239,9384+15]..[239,9384+63])
                                                    Ppat_record Open
                                                    [
                                                      "Primitive.prim_name" (lambda/simplif.ml[239,9384+17]..[239,9384+36])
                                                        pattern (lambda/simplif.ml[239,9384+39]..[239,9384+58])
                                                          Ppat_constant PConst_string("caml_obj_with_tag",(lambda/simplif.ml[239,9384+40]..[239,9384+57]),None)
                                                    ]
                                              pattern (lambda/simplif.ml[240,9449+8]..[241,9495+42])
                                                Ppat_construct "::" (lambda/simplif.ml[240,9449+9]..[241,9495+42]) ghost
                                                Some
                                                  []
                                                  pattern (lambda/simplif.ml[240,9449+9]..[241,9495+42]) ghost
                                                    Ppat_tuple
                                                    [
                                                      pattern (lambda/simplif.ml[240,9449+9]..[240,9449+44])
                                                        Ppat_construct "Lconst" (lambda/simplif.ml[240,9449+9]..[240,9449+15])
                                                        Some
                                                          []
                                                          pattern (lambda/simplif.ml[240,9449+16]..[240,9449+44])
                                                            Ppat_construct "Const_base" (lambda/simplif.ml[240,9449+17]..[240,9449+27])
                                                            Some
                                                              []
                                                              pattern (lambda/simplif.ml[240,9449+28]..[240,9449+43])
                                                                Ppat_construct "Const_int" (lambda/simplif.ml[240,9449+29]..[240,9449+38])
                                                                Some
                                                                  []
                                                                  pattern (lambda/simplif.ml[240,9449+39]..[240,9449+42])
                                                                    Ppat_var "tag" (lambda/simplif.ml[240,9449+39]..[240,9449+42])
                                                      pattern (lambda/simplif.ml[241,9495+9]..[241,9495+42]) ghost
                                                        Ppat_construct "::" (lambda/simplif.ml[241,9495+9]..[241,9495+42]) ghost
                                                        Some
                                                          []
                                                          pattern (lambda/simplif.ml[241,9495+9]..[241,9495+42]) ghost
                                                            Ppat_tuple
                                                            [
                                                              pattern (lambda/simplif.ml[241,9495+9]..[241,9495+41])
                                                                Ppat_construct "Lconst" (lambda/simplif.ml[241,9495+9]..[241,9495+15])
                                                                Some
                                                                  []
                                                                  pattern (lambda/simplif.ml[241,9495+16]..[241,9495+41])
                                                                    Ppat_construct "Const_block" (lambda/simplif.ml[241,9495+17]..[241,9495+28])
                                                                    Some
                                                                      []
                                                                      pattern (lambda/simplif.ml[241,9495+29]..[241,9495+40])
Ppat_tuple
[
  pattern (lambda/simplif.ml[241,9495+30]..[241,9495+31])
    Ppat_any
  pattern (lambda/simplif.ml[241,9495+33]..[241,9495+39])
    Ppat_var "fields" (lambda/simplif.ml[241,9495+33]..[241,9495+39])
]
                                                              pattern (lambda/simplif.ml[241,9495+41]..[241,9495+42]) ghost
                                                                Ppat_construct "[]" (lambda/simplif.ml[241,9495+41]..[241,9495+42]) ghost
                                                                None
                                                            ]
                                                    ]
                                            ]
                                          expression (lambda/simplif.ml[242,9541+9]..[242,9541+43])
                                            Pexp_construct "Lconst" (lambda/simplif.ml[242,9541+9]..[242,9541+15])
                                            Some
                                              expression (lambda/simplif.ml[242,9541+16]..[242,9541+43])
                                                Pexp_construct "Const_block" (lambda/simplif.ml[242,9541+17]..[242,9541+28])
                                                Some
                                                  expression (lambda/simplif.ml[242,9541+29]..[242,9541+42])
                                                    Pexp_tuple
                                                    [
                                                      expression (lambda/simplif.ml[242,9541+30]..[242,9541+33])
                                                        Pexp_ident "tag" (lambda/simplif.ml[242,9541+30]..[242,9541+33])
                                                      expression (lambda/simplif.ml[242,9541+35]..[242,9541+41])
                                                        Pexp_ident "fields" (lambda/simplif.ml[242,9541+35]..[242,9541+41])
                                                    ]
                                        <case>
                                          pattern (lambda/simplif.ml[244,9586+8]..[244,9586+9])
                                            Ppat_any
                                          expression (lambda/simplif.ml[244,9586+13]..[244,9586+30])
                                            Pexp_construct "Lprim" (lambda/simplif.ml[244,9586+13]..[244,9586+18])
                                            Some
                                              expression (lambda/simplif.ml[244,9586+18]..[244,9586+30])
                                                Pexp_tuple
                                                [
                                                  expression (lambda/simplif.ml[244,9586+19]..[244,9586+20])
                                                    Pexp_ident "p" (lambda/simplif.ml[244,9586+19]..[244,9586+20])
                                                  expression (lambda/simplif.ml[244,9586+22]..[244,9586+24])
                                                    Pexp_ident "ll" (lambda/simplif.ml[244,9586+22]..[244,9586+24])
                                                  expression (lambda/simplif.ml[244,9586+26]..[244,9586+29])
                                                    Pexp_ident "loc" (lambda/simplif.ml[244,9586+26]..[244,9586+29])
                                                ]
                                      ]
                                <case>
                                  pattern (lambda/simplif.ml[246,9626+4]..[246,9626+23])
                                    Ppat_construct "Lswitch" (lambda/simplif.ml[246,9626+4]..[246,9626+11])
                                    Some
                                      []
                                      pattern (lambda/simplif.ml[246,9626+11]..[246,9626+23])
                                        Ppat_tuple
                                        [
                                          pattern (lambda/simplif.ml[246,9626+12]..[246,9626+13])
                                            Ppat_var "l" (lambda/simplif.ml[246,9626+12]..[246,9626+13])
                                          pattern (lambda/simplif.ml[246,9626+15]..[246,9626+17])
                                            Ppat_var "sw" (lambda/simplif.ml[246,9626+15]..[246,9626+17])
                                          pattern (lambda/simplif.ml[246,9626+19]..[246,9626+22])
                                            Ppat_var "loc" (lambda/simplif.ml[246,9626+19]..[246,9626+22])
                                        ]
                                  expression (lambda/simplif.ml[247,9653+6]..[257,10093+13])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lambda/simplif.ml[247,9653+10]..[247,9653+15])
                                          Ppat_var "new_l" (lambda/simplif.ml[247,9653+10]..[247,9653+15])
                                        expression (lambda/simplif.ml[247,9653+18]..[247,9653+38])
                                          Pexp_apply
                                          expression (lambda/simplif.ml[247,9653+18]..[247,9653+25])
                                            Pexp_ident "simplif" (lambda/simplif.ml[247,9653+18]..[247,9653+25])
                                          [
                                            <arg>
                                            Labelled "try_depth"
                                              expression (lambda/simplif.ml[247,9653+27]..[247,9653+36])
                                                Pexp_ident "try_depth" (lambda/simplif.ml[247,9653+27]..[247,9653+36])
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[247,9653+37]..[247,9653+38])
                                                Pexp_ident "l" (lambda/simplif.ml[247,9653+37]..[247,9653+38])
                                          ]
                                      <def>
                                        pattern (lambda/simplif.ml[248,9692+10]..[248,9692+20])
                                          Ppat_var "new_consts" (lambda/simplif.ml[248,9692+10]..[248,9692+20])
                                        expression (lambda/simplif.ml[249,9715+6]..[249,9715+69])
                                          Pexp_apply
                                          expression (lambda/simplif.ml[249,9715+6]..[249,9715+14])
                                            Pexp_ident "List.map" (lambda/simplif.ml[249,9715+6]..[249,9715+14])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[249,9715+15]..[249,9715+56])
                                                Pexp_fun
                                                Nolabel
                                                None
                                                pattern (lambda/simplif.ml[249,9715+20]..[249,9715+26])
                                                  Ppat_tuple
                                                  [
                                                    pattern (lambda/simplif.ml[249,9715+21]..[249,9715+22])
                                                      Ppat_var "n" (lambda/simplif.ml[249,9715+21]..[249,9715+22])
                                                    pattern (lambda/simplif.ml[249,9715+24]..[249,9715+25])
                                                      Ppat_var "e" (lambda/simplif.ml[249,9715+24]..[249,9715+25])
                                                  ]
                                                expression (lambda/simplif.ml[249,9715+30]..[249,9715+55])
                                                  Pexp_tuple
                                                  [
                                                    expression (lambda/simplif.ml[249,9715+31]..[249,9715+32])
                                                      Pexp_ident "n" (lambda/simplif.ml[249,9715+31]..[249,9715+32])
                                                    expression (lambda/simplif.ml[249,9715+34]..[249,9715+54])
                                                      Pexp_apply
                                                      expression (lambda/simplif.ml[249,9715+34]..[249,9715+41])
                                                        Pexp_ident "simplif" (lambda/simplif.ml[249,9715+34]..[249,9715+41])
                                                      [
                                                        <arg>
                                                        Labelled "try_depth"
                                                          expression (lambda/simplif.ml[249,9715+43]..[249,9715+52])
                                                            Pexp_ident "try_depth" (lambda/simplif.ml[249,9715+43]..[249,9715+52])
                                                        <arg>
                                                        Nolabel
                                                          expression (lambda/simplif.ml[249,9715+53]..[249,9715+54])
                                                            Pexp_ident "e" (lambda/simplif.ml[249,9715+53]..[249,9715+54])
                                                      ]
                                                  ]
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[249,9715+57]..[249,9715+69])
                                                Pexp_field
                                                expression (lambda/simplif.ml[249,9715+57]..[249,9715+59])
                                                  Pexp_ident "sw" (lambda/simplif.ml[249,9715+57]..[249,9715+59])
                                                "sw_consts" (lambda/simplif.ml[249,9715+60]..[249,9715+69])
                                          ]
                                      <def>
                                        pattern (lambda/simplif.ml[250,9785+10]..[250,9785+20])
                                          Ppat_var "new_blocks" (lambda/simplif.ml[250,9785+10]..[250,9785+20])
                                        expression (lambda/simplif.ml[251,9808+6]..[251,9808+69])
                                          Pexp_apply
                                          expression (lambda/simplif.ml[251,9808+6]..[251,9808+14])
                                            Pexp_ident "List.map" (lambda/simplif.ml[251,9808+6]..[251,9808+14])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[251,9808+15]..[251,9808+56])
                                                Pexp_fun
                                                Nolabel
                                                None
                                                pattern (lambda/simplif.ml[251,9808+20]..[251,9808+26])
                                                  Ppat_tuple
                                                  [
                                                    pattern (lambda/simplif.ml[251,9808+21]..[251,9808+22])
                                                      Ppat_var "n" (lambda/simplif.ml[251,9808+21]..[251,9808+22])
                                                    pattern (lambda/simplif.ml[251,9808+24]..[251,9808+25])
                                                      Ppat_var "e" (lambda/simplif.ml[251,9808+24]..[251,9808+25])
                                                  ]
                                                expression (lambda/simplif.ml[251,9808+30]..[251,9808+55])
                                                  Pexp_tuple
                                                  [
                                                    expression (lambda/simplif.ml[251,9808+31]..[251,9808+32])
                                                      Pexp_ident "n" (lambda/simplif.ml[251,9808+31]..[251,9808+32])
                                                    expression (lambda/simplif.ml[251,9808+34]..[251,9808+54])
                                                      Pexp_apply
                                                      expression (lambda/simplif.ml[251,9808+34]..[251,9808+41])
                                                        Pexp_ident "simplif" (lambda/simplif.ml[251,9808+34]..[251,9808+41])
                                                      [
                                                        <arg>
                                                        Labelled "try_depth"
                                                          expression (lambda/simplif.ml[251,9808+43]..[251,9808+52])
                                                            Pexp_ident "try_depth" (lambda/simplif.ml[251,9808+43]..[251,9808+52])
                                                        <arg>
                                                        Nolabel
                                                          expression (lambda/simplif.ml[251,9808+53]..[251,9808+54])
                                                            Pexp_ident "e" (lambda/simplif.ml[251,9808+53]..[251,9808+54])
                                                      ]
                                                  ]
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[251,9808+57]..[251,9808+69])
                                                Pexp_field
                                                expression (lambda/simplif.ml[251,9808+57]..[251,9808+59])
                                                  Pexp_ident "sw" (lambda/simplif.ml[251,9808+57]..[251,9808+59])
                                                "sw_blocks" (lambda/simplif.ml[251,9808+60]..[251,9808+69])
                                          ]
                                      <def>
                                        pattern (lambda/simplif.ml[252,9878+10]..[252,9878+18])
                                          Ppat_var "new_fail" (lambda/simplif.ml[252,9878+10]..[252,9878+18])
                                        expression (lambda/simplif.ml[252,9878+21]..[252,9878+69])
                                          Pexp_apply
                                          expression (lambda/simplif.ml[252,9878+21]..[252,9878+31])
                                            Pexp_ident "Option.map" (lambda/simplif.ml[252,9878+21]..[252,9878+31])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[252,9878+32]..[252,9878+52])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[252,9878+33]..[252,9878+40])
                                                  Pexp_ident "simplif" (lambda/simplif.ml[252,9878+33]..[252,9878+40])
                                                [
                                                  <arg>
                                                  Labelled "try_depth"
                                                    expression (lambda/simplif.ml[252,9878+42]..[252,9878+51])
                                                      Pexp_ident "try_depth" (lambda/simplif.ml[252,9878+42]..[252,9878+51])
                                                ]
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[252,9878+53]..[252,9878+69])
                                                Pexp_field
                                                expression (lambda/simplif.ml[252,9878+53]..[252,9878+55])
                                                  Pexp_ident "sw" (lambda/simplif.ml[252,9878+53]..[252,9878+55])
                                                "sw_failaction" (lambda/simplif.ml[252,9878+56]..[252,9878+69])
                                          ]
                                    ]
                                    expression (lambda/simplif.ml[253,9951+6]..[257,10093+13])
                                      Pexp_construct "Lswitch" (lambda/simplif.ml[253,9951+6]..[253,9951+13])
                                      Some
                                        expression (lambda/simplif.ml[254,9965+8]..[257,10093+13])
                                          Pexp_tuple
                                          [
                                            expression (lambda/simplif.ml[254,9965+9]..[254,9965+14])
                                              Pexp_ident "new_l" (lambda/simplif.ml[254,9965+9]..[254,9965+14])
                                            expression (lambda/simplif.ml[255,9981+9]..[256,10048+43])
                                              Pexp_record
                                              [
                                                "sw_consts" (lambda/simplif.ml[255,9981+18]..[255,9981+27])
                                                  expression (lambda/simplif.ml[255,9981+30]..[255,9981+40])
                                                    Pexp_ident "new_consts" (lambda/simplif.ml[255,9981+30]..[255,9981+40])
                                                "sw_blocks" (lambda/simplif.ml[255,9981+43]..[255,9981+52])
                                                  expression (lambda/simplif.ml[255,9981+55]..[255,9981+65])
                                                    Pexp_ident "new_blocks" (lambda/simplif.ml[255,9981+55]..[255,9981+65])
                                                "sw_failaction" (lambda/simplif.ml[256,10048+18]..[256,10048+31])
                                                  expression (lambda/simplif.ml[256,10048+34]..[256,10048+42])
                                                    Pexp_ident "new_fail" (lambda/simplif.ml[256,10048+34]..[256,10048+42])
                                              ]
                                              Some
                                                expression (lambda/simplif.ml[255,9981+10]..[255,9981+12])
                                                  Pexp_ident "sw" (lambda/simplif.ml[255,9981+10]..[255,9981+12])
                                            expression (lambda/simplif.ml[257,10093+9]..[257,10093+12])
                                              Pexp_ident "loc" (lambda/simplif.ml[257,10093+9]..[257,10093+12])
                                          ]
                                <case>
                                  pattern (lambda/simplif.ml[258,10107+4]..[258,10107+29])
                                    Ppat_construct "Lstringswitch" (lambda/simplif.ml[258,10107+4]..[258,10107+17])
                                    Some
                                      []
                                      pattern (lambda/simplif.ml[258,10107+17]..[258,10107+29])
                                        Ppat_tuple
                                        [
                                          pattern (lambda/simplif.ml[258,10107+18]..[258,10107+19])
                                            Ppat_var "l" (lambda/simplif.ml[258,10107+18]..[258,10107+19])
                                          pattern (lambda/simplif.ml[258,10107+20]..[258,10107+22])
                                            Ppat_var "sw" (lambda/simplif.ml[258,10107+20]..[258,10107+22])
                                          pattern (lambda/simplif.ml[258,10107+23]..[258,10107+24])
                                            Ppat_var "d" (lambda/simplif.ml[258,10107+23]..[258,10107+24])
                                          pattern (lambda/simplif.ml[258,10107+25]..[258,10107+28])
                                            Ppat_var "loc" (lambda/simplif.ml[258,10107+25]..[258,10107+28])
                                        ]
                                  expression (lambda/simplif.ml[259,10140+6]..[261,10241+47])
                                    Pexp_construct "Lstringswitch" (lambda/simplif.ml[259,10140+6]..[259,10140+19])
                                    Some
                                      expression (lambda/simplif.ml[260,10160+8]..[261,10241+47])
                                        Pexp_tuple
                                        [
                                          expression (lambda/simplif.ml[260,10160+9]..[260,10160+29])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[260,10160+9]..[260,10160+16])
                                              Pexp_ident "simplif" (lambda/simplif.ml[260,10160+9]..[260,10160+16])
                                            [
                                              <arg>
                                              Labelled "try_depth"
                                                expression (lambda/simplif.ml[260,10160+18]..[260,10160+27])
                                                  Pexp_ident "try_depth" (lambda/simplif.ml[260,10160+18]..[260,10160+27])
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[260,10160+28]..[260,10160+29])
                                                  Pexp_ident "l" (lambda/simplif.ml[260,10160+28]..[260,10160+29])
                                            ]
                                          expression (lambda/simplif.ml[260,10160+30]..[260,10160+79])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[260,10160+30]..[260,10160+38])
                                              Pexp_ident "List.map" (lambda/simplif.ml[260,10160+30]..[260,10160+38])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[260,10160+39]..[260,10160+76])
                                                  Pexp_fun
                                                  Nolabel
                                                  None
                                                  pattern (lambda/simplif.ml[260,10160+44]..[260,10160+49])
                                                    Ppat_tuple
                                                    [
                                                      pattern (lambda/simplif.ml[260,10160+45]..[260,10160+46])
                                                        Ppat_var "s" (lambda/simplif.ml[260,10160+45]..[260,10160+46])
                                                      pattern (lambda/simplif.ml[260,10160+47]..[260,10160+48])
                                                        Ppat_var "l" (lambda/simplif.ml[260,10160+47]..[260,10160+48])
                                                    ]
                                                  expression (lambda/simplif.ml[260,10160+53]..[260,10160+75])
                                                    Pexp_tuple
                                                    [
                                                      expression (lambda/simplif.ml[260,10160+53]..[260,10160+54])
                                                        Pexp_ident "s" (lambda/simplif.ml[260,10160+53]..[260,10160+54])
                                                      expression (lambda/simplif.ml[260,10160+55]..[260,10160+75])
                                                        Pexp_apply
                                                        expression (lambda/simplif.ml[260,10160+55]..[260,10160+62])
                                                          Pexp_ident "simplif" (lambda/simplif.ml[260,10160+55]..[260,10160+62])
                                                        [
                                                          <arg>
                                                          Labelled "try_depth"
                                                            expression (lambda/simplif.ml[260,10160+64]..[260,10160+73])
                                                              Pexp_ident "try_depth" (lambda/simplif.ml[260,10160+64]..[260,10160+73])
                                                          <arg>
                                                          Nolabel
                                                            expression (lambda/simplif.ml[260,10160+74]..[260,10160+75])
                                                              Pexp_ident "l" (lambda/simplif.ml[260,10160+74]..[260,10160+75])
                                                        ]
                                                    ]
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[260,10160+77]..[260,10160+79])
                                                  Pexp_ident "sw" (lambda/simplif.ml[260,10160+77]..[260,10160+79])
                                            ]
                                          expression (lambda/simplif.ml[261,10241+9]..[261,10241+42])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[261,10241+9]..[261,10241+19])
                                              Pexp_ident "Option.map" (lambda/simplif.ml[261,10241+9]..[261,10241+19])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[261,10241+20]..[261,10241+40])
                                                  Pexp_apply
                                                  expression (lambda/simplif.ml[261,10241+21]..[261,10241+28])
                                                    Pexp_ident "simplif" (lambda/simplif.ml[261,10241+21]..[261,10241+28])
                                                  [
                                                    <arg>
                                                    Labelled "try_depth"
                                                      expression (lambda/simplif.ml[261,10241+30]..[261,10241+39])
                                                        Pexp_ident "try_depth" (lambda/simplif.ml[261,10241+30]..[261,10241+39])
                                                  ]
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[261,10241+41]..[261,10241+42])
                                                  Pexp_ident "d" (lambda/simplif.ml[261,10241+41]..[261,10241+42])
                                            ]
                                          expression (lambda/simplif.ml[261,10241+43]..[261,10241+46])
                                            Pexp_ident "loc" (lambda/simplif.ml[261,10241+43]..[261,10241+46])
                                        ]
                                <case>
                                  pattern (lambda/simplif.ml[262,10289+4]..[262,10289+28])
                                    Ppat_alias "l" (lambda/simplif.ml[262,10289+27]..[262,10289+28])
                                    pattern (lambda/simplif.ml[262,10289+4]..[262,10289+23])
                                      Ppat_construct "Lstaticraise" (lambda/simplif.ml[262,10289+4]..[262,10289+16])
                                      Some
                                        []
                                        pattern (lambda/simplif.ml[262,10289+17]..[262,10289+23])
                                          Ppat_tuple
                                          [
                                            pattern (lambda/simplif.ml[262,10289+18]..[262,10289+19])
                                              Ppat_var "i" (lambda/simplif.ml[262,10289+18]..[262,10289+19])
                                            pattern (lambda/simplif.ml[262,10289+20]..[262,10289+22])
                                              Ppat_construct "[]" (lambda/simplif.ml[262,10289+20]..[262,10289+22])
                                              None
                                          ]
                                  expression (lambda/simplif.ml[263,10321+6]..[268,10436+9])
                                    Pexp_try
                                    expression (lambda/simplif.ml[264,10337+8]..[265,10386+15])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (lambda/simplif.ml[264,10337+12]..[264,10337+21])
                                            Ppat_tuple
                                            [
                                              pattern (lambda/simplif.ml[264,10337+12]..[264,10337+13])
                                                Ppat_any
                                              pattern (lambda/simplif.ml[264,10337+14]..[264,10337+21])
                                                Ppat_var "handler" (lambda/simplif.ml[264,10337+14]..[264,10337+21])
                                            ]
                                          expression (lambda/simplif.ml[264,10337+25]..[264,10337+45])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[264,10337+25]..[264,10337+37])
                                              Pexp_ident "Hashtbl.find" (lambda/simplif.ml[264,10337+25]..[264,10337+37])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[264,10337+38]..[264,10337+43])
                                                  Pexp_ident "subst" (lambda/simplif.ml[264,10337+38]..[264,10337+43])
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[264,10337+44]..[264,10337+45])
                                                  Pexp_ident "i" (lambda/simplif.ml[264,10337+44]..[264,10337+45])
                                            ]
                                      ]
                                      expression (lambda/simplif.ml[265,10386+8]..[265,10386+15])
                                        Pexp_ident "handler" (lambda/simplif.ml[265,10386+8]..[265,10386+15])
                                    [
                                      <case>
                                        pattern (lambda/simplif.ml[267,10413+8]..[267,10413+17])
                                          Ppat_construct "Not_found" (lambda/simplif.ml[267,10413+8]..[267,10413+17])
                                          None
                                        expression (lambda/simplif.ml[267,10413+21]..[267,10413+22])
                                          Pexp_ident "l" (lambda/simplif.ml[267,10413+21]..[267,10413+22])
                                    ]
                                <case>
                                  pattern (lambda/simplif.ml[269,10446+4]..[269,10446+23])
                                    Ppat_construct "Lstaticraise" (lambda/simplif.ml[269,10446+4]..[269,10446+16])
                                    Some
                                      []
                                      pattern (lambda/simplif.ml[269,10446+17]..[269,10446+23])
                                        Ppat_tuple
                                        [
                                          pattern (lambda/simplif.ml[269,10446+18]..[269,10446+19])
                                            Ppat_var "i" (lambda/simplif.ml[269,10446+18]..[269,10446+19])
                                          pattern (lambda/simplif.ml[269,10446+20]..[269,10446+22])
                                            Ppat_var "ls" (lambda/simplif.ml[269,10446+20]..[269,10446+22])
                                        ]
                                  expression (lambda/simplif.ml[270,10473+6]..[290,11293+9])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lambda/simplif.ml[270,10473+10]..[270,10473+12])
                                          Ppat_var "ls" (lambda/simplif.ml[270,10473+10]..[270,10473+12])
                                        expression (lambda/simplif.ml[270,10473+15]..[270,10473+47])
                                          Pexp_apply
                                          expression (lambda/simplif.ml[270,10473+15]..[270,10473+23])
                                            Pexp_ident "List.map" (lambda/simplif.ml[270,10473+15]..[270,10473+23])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[270,10473+24]..[270,10473+44])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[270,10473+25]..[270,10473+32])
                                                  Pexp_ident "simplif" (lambda/simplif.ml[270,10473+25]..[270,10473+32])
                                                [
                                                  <arg>
                                                  Labelled "try_depth"
                                                    expression (lambda/simplif.ml[270,10473+34]..[270,10473+43])
                                                      Pexp_ident "try_depth" (lambda/simplif.ml[270,10473+34]..[270,10473+43])
                                                ]
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[270,10473+45]..[270,10473+47])
                                                Pexp_ident "ls" (lambda/simplif.ml[270,10473+45]..[270,10473+47])
                                          ]
                                    ]
                                    expression (lambda/simplif.ml[271,10524+6]..[290,11293+9])
                                      Pexp_try
                                      expression (lambda/simplif.ml[272,10540+8]..[287,11197+43])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (lambda/simplif.ml[272,10540+12]..[272,10540+22])
                                              Ppat_tuple
                                              [
                                                pattern (lambda/simplif.ml[272,10540+12]..[272,10540+14])
                                                  Ppat_var "xs" (lambda/simplif.ml[272,10540+12]..[272,10540+14])
                                                pattern (lambda/simplif.ml[272,10540+15]..[272,10540+22])
                                                  Ppat_var "handler" (lambda/simplif.ml[272,10540+15]..[272,10540+22])
                                              ]
                                            expression (lambda/simplif.ml[272,10540+26]..[272,10540+46])
                                              Pexp_apply
                                              expression (lambda/simplif.ml[272,10540+26]..[272,10540+38])
                                                Pexp_ident "Hashtbl.find" (lambda/simplif.ml[272,10540+26]..[272,10540+38])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[272,10540+39]..[272,10540+44])
                                                    Pexp_ident "subst" (lambda/simplif.ml[272,10540+39]..[272,10540+44])
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[272,10540+45]..[272,10540+46])
                                                    Pexp_ident "i" (lambda/simplif.ml[272,10540+45]..[272,10540+46])
                                              ]
                                        ]
                                        expression (lambda/simplif.ml[273,10590+8]..[287,11197+43])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (lambda/simplif.ml[273,10590+12]..[273,10590+14])
                                                Ppat_var "ys" (lambda/simplif.ml[273,10590+12]..[273,10590+14])
                                              expression (lambda/simplif.ml[273,10590+17]..[273,10590+62])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[273,10590+17]..[273,10590+25])
                                                  Pexp_ident "List.map" (lambda/simplif.ml[273,10590+17]..[273,10590+25])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[273,10590+26]..[273,10590+59])
                                                      Pexp_fun
                                                      Nolabel
                                                      None
                                                      pattern (lambda/simplif.ml[273,10590+31]..[273,10590+37])
                                                        Ppat_tuple
                                                        [
                                                          pattern (lambda/simplif.ml[273,10590+32]..[273,10590+33])
                                                            Ppat_var "x" (lambda/simplif.ml[273,10590+32]..[273,10590+33])
                                                          pattern (lambda/simplif.ml[273,10590+35]..[273,10590+36])
                                                            Ppat_var "k" (lambda/simplif.ml[273,10590+35]..[273,10590+36])
                                                        ]
                                                      expression (lambda/simplif.ml[273,10590+41]..[273,10590+58])
                                                        Pexp_tuple
                                                        [
                                                          expression (lambda/simplif.ml[273,10590+41]..[273,10590+55])
                                                            Pexp_apply
                                                            expression (lambda/simplif.ml[273,10590+41]..[273,10590+53])
                                                              Pexp_ident "Ident.rename" (lambda/simplif.ml[273,10590+41]..[273,10590+53])
                                                            [
                                                              <arg>
                                                              Nolabel
                                                                expression (lambda/simplif.ml[273,10590+54]..[273,10590+55])
                                                                  Pexp_ident "x" (lambda/simplif.ml[273,10590+54]..[273,10590+55])
                                                            ]
                                                          expression (lambda/simplif.ml[273,10590+57]..[273,10590+58])
                                                            Pexp_ident "k" (lambda/simplif.ml[273,10590+57]..[273,10590+58])
                                                        ]
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[273,10590+60]..[273,10590+62])
                                                      Pexp_ident "xs" (lambda/simplif.ml[273,10590+60]..[273,10590+62])
                                                ]
                                          ]
                                          expression (lambda/simplif.ml[274,10656+8]..[287,11197+43])
                                            Pexp_let Nonrec
                                            [
                                              <def>
                                                pattern (lambda/simplif.ml[274,10656+12]..[274,10656+15])
                                                  Ppat_var "env" (lambda/simplif.ml[274,10656+12]..[274,10656+15])
                                                expression (lambda/simplif.ml[275,10674+10]..[277,10762+33])
                                                  Pexp_apply
                                                  expression (lambda/simplif.ml[275,10674+10]..[275,10674+26])
                                                    Pexp_ident "List.fold_right2" (lambda/simplif.ml[275,10674+10]..[275,10674+26])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (lambda/simplif.ml[276,10701+12]..[276,10701+60])
                                                        Pexp_fun
                                                        Nolabel
                                                        None
                                                        pattern (lambda/simplif.ml[276,10701+17]..[276,10701+23])
                                                          Ppat_tuple
                                                          [
                                                            pattern (lambda/simplif.ml[276,10701+18]..[276,10701+19])
                                                              Ppat_var "x" (lambda/simplif.ml[276,10701+18]..[276,10701+19])
                                                            pattern (lambda/simplif.ml[276,10701+21]..[276,10701+22])
                                                              Ppat_any
                                                          ]
                                                        expression (lambda/simplif.ml[276,10701+24]..[276,10701+59]) ghost
                                                          Pexp_fun
                                                          Nolabel
                                                          None
                                                          pattern (lambda/simplif.ml[276,10701+24]..[276,10701+30])
                                                            Ppat_tuple
                                                            [
                                                              pattern (lambda/simplif.ml[276,10701+25]..[276,10701+26])
                                                                Ppat_var "y" (lambda/simplif.ml[276,10701+25]..[276,10701+26])
                                                              pattern (lambda/simplif.ml[276,10701+28]..[276,10701+29])
                                                                Ppat_any
                                                            ]
                                                          expression (lambda/simplif.ml[276,10701+31]..[276,10701+59]) ghost
                                                            Pexp_fun
                                                            Nolabel
                                                            None
                                                            pattern (lambda/simplif.ml[276,10701+31]..[276,10701+34])
                                                              Ppat_var "env" (lambda/simplif.ml[276,10701+31]..[276,10701+34])
                                                            expression (lambda/simplif.ml[276,10701+38]..[276,10701+59])
                                                              Pexp_apply
                                                              expression (lambda/simplif.ml[276,10701+38]..[276,10701+51])
                                                                Pexp_ident "Ident.Map.add" (lambda/simplif.ml[276,10701+38]..[276,10701+51])
                                                              [
                                                                <arg>
                                                                Nolabel
                                                                  expression (lambda/simplif.ml[276,10701+52]..[276,10701+53])
                                                                    Pexp_ident "x" (lambda/simplif.ml[276,10701+52]..[276,10701+53])
                                                                <arg>
                                                                Nolabel
                                                                  expression (lambda/simplif.ml[276,10701+54]..[276,10701+55])
                                                                    Pexp_ident "y" (lambda/simplif.ml[276,10701+54]..[276,10701+55])
                                                                <arg>
                                                                Nolabel
                                                                  expression (lambda/simplif.ml[276,10701+56]..[276,10701+59])
                                                                    Pexp_ident "env" (lambda/simplif.ml[276,10701+56]..[276,10701+59])
                                                              ]
                                                    <arg>
                                                    Nolabel
                                                      expression (lambda/simplif.ml[277,10762+12]..[277,10762+14])
                                                        Pexp_ident "xs" (lambda/simplif.ml[277,10762+12]..[277,10762+14])
                                                    <arg>
                                                    Nolabel
                                                      expression (lambda/simplif.ml[277,10762+15]..[277,10762+17])
                                                        Pexp_ident "ys" (lambda/simplif.ml[277,10762+15]..[277,10762+17])
                                                    <arg>
                                                    Nolabel
                                                      expression (lambda/simplif.ml[277,10762+18]..[277,10762+33])
                                                        Pexp_ident "Ident.Map.empty" (lambda/simplif.ml[277,10762+18]..[277,10762+33])
                                                  ]
                                            ]
                                            expression (lambda/simplif.ml[285,11111+8]..[287,11197+43])
                                              Pexp_apply
                                              expression (lambda/simplif.ml[285,11111+8]..[285,11111+23])
                                                Pexp_ident "List.fold_left2" (lambda/simplif.ml[285,11111+8]..[285,11111+23])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[286,11135+10]..[286,11135+61])
                                                    Pexp_fun
                                                    Nolabel
                                                    None
                                                    pattern (lambda/simplif.ml[286,11135+15]..[286,11135+16])
                                                      Ppat_var "r" (lambda/simplif.ml[286,11135+15]..[286,11135+16])
                                                    expression (lambda/simplif.ml[286,11135+17]..[286,11135+60]) ghost
                                                      Pexp_fun
                                                      Nolabel
                                                      None
                                                      pattern (lambda/simplif.ml[286,11135+17]..[286,11135+26])
                                                        Ppat_tuple
                                                        [
                                                          pattern (lambda/simplif.ml[286,11135+18]..[286,11135+19])
                                                            Ppat_var "y" (lambda/simplif.ml[286,11135+18]..[286,11135+19])
                                                          pattern (lambda/simplif.ml[286,11135+21]..[286,11135+25])
                                                            Ppat_var "kind" (lambda/simplif.ml[286,11135+21]..[286,11135+25])
                                                        ]
                                                      expression (lambda/simplif.ml[286,11135+27]..[286,11135+60]) ghost
                                                        Pexp_fun
                                                        Nolabel
                                                        None
                                                        pattern (lambda/simplif.ml[286,11135+27]..[286,11135+28])
                                                          Ppat_var "l" (lambda/simplif.ml[286,11135+27]..[286,11135+28])
                                                        expression (lambda/simplif.ml[286,11135+32]..[286,11135+60])
                                                          Pexp_construct "Llet" (lambda/simplif.ml[286,11135+32]..[286,11135+36])
                                                          Some
                                                            expression (lambda/simplif.ml[286,11135+37]..[286,11135+60])
                                                              Pexp_tuple
                                                              [
                                                                expression (lambda/simplif.ml[286,11135+38]..[286,11135+44])
                                                                  Pexp_construct "Strict" (lambda/simplif.ml[286,11135+38]..[286,11135+44])
                                                                  None
                                                                expression (lambda/simplif.ml[286,11135+46]..[286,11135+50])
                                                                  Pexp_ident "kind" (lambda/simplif.ml[286,11135+46]..[286,11135+50])
                                                                expression (lambda/simplif.ml[286,11135+52]..[286,11135+53])
                                                                  Pexp_ident "y" (lambda/simplif.ml[286,11135+52]..[286,11135+53])
                                                                expression (lambda/simplif.ml[286,11135+55]..[286,11135+56])
                                                                  Pexp_ident "l" (lambda/simplif.ml[286,11135+55]..[286,11135+56])
                                                                expression (lambda/simplif.ml[286,11135+58]..[286,11135+59])
                                                                  Pexp_ident "r" (lambda/simplif.ml[286,11135+58]..[286,11135+59])
                                                              ]
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[287,11197+10]..[287,11197+37])
                                                    Pexp_apply
                                                    expression (lambda/simplif.ml[287,11197+11]..[287,11197+24])
                                                      Pexp_ident "Lambda.rename" (lambda/simplif.ml[287,11197+11]..[287,11197+24])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (lambda/simplif.ml[287,11197+25]..[287,11197+28])
                                                          Pexp_ident "env" (lambda/simplif.ml[287,11197+25]..[287,11197+28])
                                                      <arg>
                                                      Nolabel
                                                        expression (lambda/simplif.ml[287,11197+29]..[287,11197+36])
                                                          Pexp_ident "handler" (lambda/simplif.ml[287,11197+29]..[287,11197+36])
                                                    ]
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[287,11197+38]..[287,11197+40])
                                                    Pexp_ident "ys" (lambda/simplif.ml[287,11197+38]..[287,11197+40])
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[287,11197+41]..[287,11197+43])
                                                    Pexp_ident "ls" (lambda/simplif.ml[287,11197+41]..[287,11197+43])
                                              ]
                                      [
                                        <case>
                                          pattern (lambda/simplif.ml[289,11252+8]..[289,11252+17])
                                            Ppat_construct "Not_found" (lambda/simplif.ml[289,11252+8]..[289,11252+17])
                                            None
                                          expression (lambda/simplif.ml[289,11252+21]..[289,11252+40])
                                            Pexp_construct "Lstaticraise" (lambda/simplif.ml[289,11252+21]..[289,11252+33])
                                            Some
                                              expression (lambda/simplif.ml[289,11252+34]..[289,11252+40])
                                                Pexp_tuple
                                                [
                                                  expression (lambda/simplif.ml[289,11252+35]..[289,11252+36])
                                                    Pexp_ident "i" (lambda/simplif.ml[289,11252+35]..[289,11252+36])
                                                  expression (lambda/simplif.ml[289,11252+37]..[289,11252+39])
                                                    Pexp_ident "ls" (lambda/simplif.ml[289,11252+37]..[289,11252+39])
                                                ]
                                      ]
                                <case>
                                  pattern (lambda/simplif.ml[291,11303+4]..[291,11303+57])
                                    Ppat_construct "Lstaticcatch" (lambda/simplif.ml[291,11303+4]..[291,11303+16])
                                    Some
                                      []
                                      pattern (lambda/simplif.ml[291,11303+17]..[291,11303+57])
                                        Ppat_tuple
                                        [
                                          pattern (lambda/simplif.ml[291,11303+18]..[291,11303+20])
                                            Ppat_var "l1" (lambda/simplif.ml[291,11303+18]..[291,11303+20])
                                          pattern (lambda/simplif.ml[291,11303+21]..[291,11303+27])
                                            Ppat_tuple
                                            [
                                              pattern (lambda/simplif.ml[291,11303+22]..[291,11303+23])
                                                Ppat_var "i" (lambda/simplif.ml[291,11303+22]..[291,11303+23])
                                              pattern (lambda/simplif.ml[291,11303+24]..[291,11303+26])
                                                Ppat_construct "[]" (lambda/simplif.ml[291,11303+24]..[291,11303+26])
                                                None
                                            ]
                                          pattern (lambda/simplif.ml[291,11303+28]..[291,11303+56])
                                            Ppat_alias "l2" (lambda/simplif.ml[291,11303+53]..[291,11303+55])
                                            pattern (lambda/simplif.ml[291,11303+29]..[291,11303+49])
                                              Ppat_construct "Lstaticraise" (lambda/simplif.ml[291,11303+29]..[291,11303+41])
                                              Some
                                                []
                                                pattern (lambda/simplif.ml[291,11303+42]..[291,11303+49])
                                                  Ppat_tuple
                                                  [
                                                    pattern (lambda/simplif.ml[291,11303+43]..[291,11303+45])
                                                      Ppat_var "_j" (lambda/simplif.ml[291,11303+43]..[291,11303+45])
                                                    pattern (lambda/simplif.ml[291,11303+46]..[291,11303+48])
                                                      Ppat_construct "[]" (lambda/simplif.ml[291,11303+46]..[291,11303+48])
                                                      None
                                                  ]
                                        ]
                                  expression (lambda/simplif.ml[292,11364+6]..[293,11419+27])
                                    Pexp_sequence
                                    expression (lambda/simplif.ml[292,11364+6]..[292,11364+52])
                                      Pexp_apply
                                      expression (lambda/simplif.ml[292,11364+6]..[292,11364+17])
                                        Pexp_ident "Hashtbl.add" (lambda/simplif.ml[292,11364+6]..[292,11364+17])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lambda/simplif.ml[292,11364+18]..[292,11364+23])
                                            Pexp_ident "subst" (lambda/simplif.ml[292,11364+18]..[292,11364+23])
                                        <arg>
                                        Nolabel
                                          expression (lambda/simplif.ml[292,11364+24]..[292,11364+25])
                                            Pexp_ident "i" (lambda/simplif.ml[292,11364+24]..[292,11364+25])
                                        <arg>
                                        Nolabel
                                          expression (lambda/simplif.ml[292,11364+26]..[292,11364+52])
                                            Pexp_tuple
                                            [
                                              expression (lambda/simplif.ml[292,11364+27]..[292,11364+29])
                                                Pexp_construct "[]" (lambda/simplif.ml[292,11364+27]..[292,11364+29])
                                                None
                                              expression (lambda/simplif.ml[292,11364+30]..[292,11364+51])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[292,11364+30]..[292,11364+37])
                                                  Pexp_ident "simplif" (lambda/simplif.ml[292,11364+30]..[292,11364+37])
                                                [
                                                  <arg>
                                                  Labelled "try_depth"
                                                    expression (lambda/simplif.ml[292,11364+39]..[292,11364+48])
                                                      Pexp_ident "try_depth" (lambda/simplif.ml[292,11364+39]..[292,11364+48])
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[292,11364+49]..[292,11364+51])
                                                      Pexp_ident "l2" (lambda/simplif.ml[292,11364+49]..[292,11364+51])
                                                ]
                                            ]
                                      ]
                                    expression (lambda/simplif.ml[293,11419+6]..[293,11419+27])
                                      Pexp_apply
                                      expression (lambda/simplif.ml[293,11419+6]..[293,11419+13])
                                        Pexp_ident "simplif" (lambda/simplif.ml[293,11419+6]..[293,11419+13])
                                      [
                                        <arg>
                                        Labelled "try_depth"
                                          expression (lambda/simplif.ml[293,11419+15]..[293,11419+24])
                                            Pexp_ident "try_depth" (lambda/simplif.ml[293,11419+15]..[293,11419+24])
                                        <arg>
                                        Nolabel
                                          expression (lambda/simplif.ml[293,11419+25]..[293,11419+27])
                                            Pexp_ident "l1" (lambda/simplif.ml[293,11419+25]..[293,11419+27])
                                      ]
                                <case>
                                  pattern (lambda/simplif.ml[294,11447+4]..[294,11447+31])
                                    Ppat_construct "Lstaticcatch" (lambda/simplif.ml[294,11447+4]..[294,11447+16])
                                    Some
                                      []
                                      pattern (lambda/simplif.ml[294,11447+17]..[294,11447+31])
                                        Ppat_tuple
                                        [
                                          pattern (lambda/simplif.ml[294,11447+18]..[294,11447+20])
                                            Ppat_var "l1" (lambda/simplif.ml[294,11447+18]..[294,11447+20])
                                          pattern (lambda/simplif.ml[294,11447+21]..[294,11447+27])
                                            Ppat_tuple
                                            [
                                              pattern (lambda/simplif.ml[294,11447+22]..[294,11447+23])
                                                Ppat_var "i" (lambda/simplif.ml[294,11447+22]..[294,11447+23])
                                              pattern (lambda/simplif.ml[294,11447+24]..[294,11447+26])
                                                Ppat_var "xs" (lambda/simplif.ml[294,11447+24]..[294,11447+26])
                                            ]
                                          pattern (lambda/simplif.ml[294,11447+28]..[294,11447+30])
                                            Ppat_var "l2" (lambda/simplif.ml[294,11447+28]..[294,11447+30])
                                        ]
                                  expression (lambda/simplif.ml[295,11482+6]..[307,11960+75])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lambda/simplif.ml[295,11482+10]..[295,11482+28])
                                          Ppat_record Closed
                                          [
                                            "count" (lambda/simplif.ml[295,11482+11]..[295,11482+16]) ghost
                                              pattern (lambda/simplif.ml[295,11482+11]..[295,11482+16])
                                                Ppat_var "count" (lambda/simplif.ml[295,11482+11]..[295,11482+16])
                                            "max_depth" (lambda/simplif.ml[295,11482+18]..[295,11482+27]) ghost
                                              pattern (lambda/simplif.ml[295,11482+18]..[295,11482+27])
                                                Ppat_var "max_depth" (lambda/simplif.ml[295,11482+18]..[295,11482+27])
                                          ]
                                        expression (lambda/simplif.ml[295,11482+31]..[295,11482+41])
                                          Pexp_apply
                                          expression (lambda/simplif.ml[295,11482+31]..[295,11482+39])
                                            Pexp_ident "get_exit" (lambda/simplif.ml[295,11482+31]..[295,11482+39])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[295,11482+40]..[295,11482+41])
                                                Pexp_ident "i" (lambda/simplif.ml[295,11482+40]..[295,11482+41])
                                          ]
                                    ]
                                    expression (lambda/simplif.ml[296,11527+6]..[307,11960+75])
                                      Pexp_ifthenelse
                                      expression (lambda/simplif.ml[296,11527+9]..[296,11527+18])
                                        Pexp_apply
                                        expression (lambda/simplif.ml[296,11527+15]..[296,11527+16])
                                          Pexp_ident "=" (lambda/simplif.ml[296,11527+15]..[296,11527+16])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lambda/simplif.ml[296,11527+9]..[296,11527+14])
                                              Pexp_ident "count" (lambda/simplif.ml[296,11527+9]..[296,11527+14])
                                          <arg>
                                          Nolabel
                                            expression (lambda/simplif.ml[296,11527+17]..[296,11527+18])
                                              Pexp_constant PConst_int (0,None)
                                        ]
                                      expression (lambda/simplif.ml[298,11604+8]..[298,11604+29])
                                        Pexp_apply
                                        expression (lambda/simplif.ml[298,11604+8]..[298,11604+15])
                                          Pexp_ident "simplif" (lambda/simplif.ml[298,11604+8]..[298,11604+15])
                                        [
                                          <arg>
                                          Labelled "try_depth"
                                            expression (lambda/simplif.ml[298,11604+17]..[298,11604+26])
                                              Pexp_ident "try_depth" (lambda/simplif.ml[298,11604+17]..[298,11604+26])
                                          <arg>
                                          Nolabel
                                            expression (lambda/simplif.ml[298,11604+27]..[298,11604+29])
                                              Pexp_ident "l1" (lambda/simplif.ml[298,11604+27]..[298,11604+29])
                                        ]
                                      Some
                                        expression (lambda/simplif.ml[299,11634+11]..[307,11960+75])
                                          Pexp_ifthenelse
                                          expression (lambda/simplif.ml[300,11648+6]..[300,11648+41])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[300,11648+16]..[300,11648+18])
                                              Pexp_ident "&&" (lambda/simplif.ml[300,11648+16]..[300,11648+18])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[300,11648+6]..[300,11648+15])
                                                  Pexp_apply
                                                  expression (lambda/simplif.ml[300,11648+12]..[300,11648+13])
                                                    Pexp_ident "=" (lambda/simplif.ml[300,11648+12]..[300,11648+13])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (lambda/simplif.ml[300,11648+6]..[300,11648+11])
                                                        Pexp_ident "count" (lambda/simplif.ml[300,11648+6]..[300,11648+11])
                                                    <arg>
                                                    Nolabel
                                                      expression (lambda/simplif.ml[300,11648+14]..[300,11648+15])
                                                        Pexp_constant PConst_int (1,None)
                                                  ]
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[300,11648+19]..[300,11648+41])
                                                  Pexp_apply
                                                  expression (lambda/simplif.ml[300,11648+29]..[300,11648+31])
                                                    Pexp_ident "<=" (lambda/simplif.ml[300,11648+29]..[300,11648+31])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (lambda/simplif.ml[300,11648+19]..[300,11648+28])
                                                        Pexp_ident "max_depth" (lambda/simplif.ml[300,11648+19]..[300,11648+28])
                                                    <arg>
                                                    Nolabel
                                                      expression (lambda/simplif.ml[300,11648+32]..[300,11648+41])
                                                        Pexp_ident "try_depth" (lambda/simplif.ml[300,11648+32]..[300,11648+41])
                                                  ]
                                            ]
                                          expression (lambda/simplif.ml[300,11648+47]..[306,11945+9])
                                            Pexp_sequence
                                            expression (lambda/simplif.ml[303,11820+8]..[303,11820+37])
                                              Pexp_assert
                                              expression (lambda/simplif.ml[303,11820+14]..[303,11820+37])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[303,11820+25]..[303,11820+26])
                                                  Pexp_ident "=" (lambda/simplif.ml[303,11820+25]..[303,11820+26])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[303,11820+15]..[303,11820+24])
                                                      Pexp_ident "max_depth" (lambda/simplif.ml[303,11820+15]..[303,11820+24])
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[303,11820+27]..[303,11820+36])
                                                      Pexp_ident "try_depth" (lambda/simplif.ml[303,11820+27]..[303,11820+36])
                                                ]
                                            expression (lambda/simplif.ml[304,11859+8]..[305,11915+29])
                                              Pexp_sequence
                                              expression (lambda/simplif.ml[304,11859+8]..[304,11859+54])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[304,11859+8]..[304,11859+19])
                                                  Pexp_ident "Hashtbl.add" (lambda/simplif.ml[304,11859+8]..[304,11859+19])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[304,11859+20]..[304,11859+25])
                                                      Pexp_ident "subst" (lambda/simplif.ml[304,11859+20]..[304,11859+25])
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[304,11859+26]..[304,11859+27])
                                                      Pexp_ident "i" (lambda/simplif.ml[304,11859+26]..[304,11859+27])
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[304,11859+28]..[304,11859+54])
                                                      Pexp_tuple
                                                      [
                                                        expression (lambda/simplif.ml[304,11859+29]..[304,11859+31])
                                                          Pexp_ident "xs" (lambda/simplif.ml[304,11859+29]..[304,11859+31])
                                                        expression (lambda/simplif.ml[304,11859+32]..[304,11859+53])
                                                          Pexp_apply
                                                          expression (lambda/simplif.ml[304,11859+32]..[304,11859+39])
                                                            Pexp_ident "simplif" (lambda/simplif.ml[304,11859+32]..[304,11859+39])
                                                          [
                                                            <arg>
                                                            Labelled "try_depth"
                                                              expression (lambda/simplif.ml[304,11859+41]..[304,11859+50])
                                                                Pexp_ident "try_depth" (lambda/simplif.ml[304,11859+41]..[304,11859+50])
                                                            <arg>
                                                            Nolabel
                                                              expression (lambda/simplif.ml[304,11859+51]..[304,11859+53])
                                                                Pexp_ident "l2" (lambda/simplif.ml[304,11859+51]..[304,11859+53])
                                                          ]
                                                      ]
                                                ]
                                              expression (lambda/simplif.ml[305,11915+8]..[305,11915+29])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[305,11915+8]..[305,11915+15])
                                                  Pexp_ident "simplif" (lambda/simplif.ml[305,11915+8]..[305,11915+15])
                                                [
                                                  <arg>
                                                  Labelled "try_depth"
                                                    expression (lambda/simplif.ml[305,11915+17]..[305,11915+26])
                                                      Pexp_ident "try_depth" (lambda/simplif.ml[305,11915+17]..[305,11915+26])
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[305,11915+27]..[305,11915+29])
                                                      Pexp_ident "l1" (lambda/simplif.ml[305,11915+27]..[305,11915+29])
                                                ]
                                          Some
                                            expression (lambda/simplif.ml[307,11960+8]..[307,11960+75])
                                              Pexp_construct "Lstaticcatch" (lambda/simplif.ml[307,11960+8]..[307,11960+20])
                                              Some
                                                expression (lambda/simplif.ml[307,11960+21]..[307,11960+75])
                                                  Pexp_tuple
                                                  [
                                                    expression (lambda/simplif.ml[307,11960+22]..[307,11960+43])
                                                      Pexp_apply
                                                      expression (lambda/simplif.ml[307,11960+22]..[307,11960+29])
                                                        Pexp_ident "simplif" (lambda/simplif.ml[307,11960+22]..[307,11960+29])
                                                      [
                                                        <arg>
                                                        Labelled "try_depth"
                                                          expression (lambda/simplif.ml[307,11960+31]..[307,11960+40])
                                                            Pexp_ident "try_depth" (lambda/simplif.ml[307,11960+31]..[307,11960+40])
                                                        <arg>
                                                        Nolabel
                                                          expression (lambda/simplif.ml[307,11960+41]..[307,11960+43])
                                                            Pexp_ident "l1" (lambda/simplif.ml[307,11960+41]..[307,11960+43])
                                                      ]
                                                    expression (lambda/simplif.ml[307,11960+45]..[307,11960+51])
                                                      Pexp_tuple
                                                      [
                                                        expression (lambda/simplif.ml[307,11960+46]..[307,11960+47])
                                                          Pexp_ident "i" (lambda/simplif.ml[307,11960+46]..[307,11960+47])
                                                        expression (lambda/simplif.ml[307,11960+48]..[307,11960+50])
                                                          Pexp_ident "xs" (lambda/simplif.ml[307,11960+48]..[307,11960+50])
                                                      ]
                                                    expression (lambda/simplif.ml[307,11960+53]..[307,11960+74])
                                                      Pexp_apply
                                                      expression (lambda/simplif.ml[307,11960+53]..[307,11960+60])
                                                        Pexp_ident "simplif" (lambda/simplif.ml[307,11960+53]..[307,11960+60])
                                                      [
                                                        <arg>
                                                        Labelled "try_depth"
                                                          expression (lambda/simplif.ml[307,11960+62]..[307,11960+71])
                                                            Pexp_ident "try_depth" (lambda/simplif.ml[307,11960+62]..[307,11960+71])
                                                        <arg>
                                                        Nolabel
                                                          expression (lambda/simplif.ml[307,11960+72]..[307,11960+74])
                                                            Pexp_ident "l2" (lambda/simplif.ml[307,11960+72]..[307,11960+74])
                                                      ]
                                                  ]
                                <case>
                                  pattern (lambda/simplif.ml[308,12036+4]..[308,12036+23])
                                    Ppat_construct "Ltrywith" (lambda/simplif.ml[308,12036+4]..[308,12036+12])
                                    Some
                                      []
                                      pattern (lambda/simplif.ml[308,12036+12]..[308,12036+23])
                                        Ppat_tuple
                                        [
                                          pattern (lambda/simplif.ml[308,12036+13]..[308,12036+15])
                                            Ppat_var "l1" (lambda/simplif.ml[308,12036+13]..[308,12036+15])
                                          pattern (lambda/simplif.ml[308,12036+17]..[308,12036+18])
                                            Ppat_var "v" (lambda/simplif.ml[308,12036+17]..[308,12036+18])
                                          pattern (lambda/simplif.ml[308,12036+20]..[308,12036+22])
                                            Ppat_var "l2" (lambda/simplif.ml[308,12036+20]..[308,12036+22])
                                        ]
                                  expression (lambda/simplif.ml[309,12063+6]..[310,12119+44])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lambda/simplif.ml[309,12063+10]..[309,12063+12])
                                          Ppat_var "l1" (lambda/simplif.ml[309,12063+10]..[309,12063+12])
                                        expression (lambda/simplif.ml[309,12063+15]..[309,12063+52])
                                          Pexp_apply
                                          expression (lambda/simplif.ml[309,12063+15]..[309,12063+22])
                                            Pexp_ident "simplif" (lambda/simplif.ml[309,12063+15]..[309,12063+22])
                                          [
                                            <arg>
                                            Labelled "try_depth"
                                              expression (lambda/simplif.ml[309,12063+34]..[309,12063+49])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[309,12063+45]..[309,12063+46])
                                                  Pexp_ident "+" (lambda/simplif.ml[309,12063+45]..[309,12063+46])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[309,12063+35]..[309,12063+44])
                                                      Pexp_ident "try_depth" (lambda/simplif.ml[309,12063+35]..[309,12063+44])
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[309,12063+47]..[309,12063+48])
                                                      Pexp_constant PConst_int (1,None)
                                                ]
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[309,12063+50]..[309,12063+52])
                                                Pexp_ident "l1" (lambda/simplif.ml[309,12063+50]..[309,12063+52])
                                          ]
                                    ]
                                    expression (lambda/simplif.ml[310,12119+6]..[310,12119+44])
                                      Pexp_construct "Ltrywith" (lambda/simplif.ml[310,12119+6]..[310,12119+14])
                                      Some
                                        expression (lambda/simplif.ml[310,12119+14]..[310,12119+44])
                                          Pexp_tuple
                                          [
                                            expression (lambda/simplif.ml[310,12119+15]..[310,12119+17])
                                              Pexp_ident "l1" (lambda/simplif.ml[310,12119+15]..[310,12119+17])
                                            expression (lambda/simplif.ml[310,12119+19]..[310,12119+20])
                                              Pexp_ident "v" (lambda/simplif.ml[310,12119+19]..[310,12119+20])
                                            expression (lambda/simplif.ml[310,12119+22]..[310,12119+43])
                                              Pexp_apply
                                              expression (lambda/simplif.ml[310,12119+22]..[310,12119+29])
                                                Pexp_ident "simplif" (lambda/simplif.ml[310,12119+22]..[310,12119+29])
                                              [
                                                <arg>
                                                Labelled "try_depth"
                                                  expression (lambda/simplif.ml[310,12119+31]..[310,12119+40])
                                                    Pexp_ident "try_depth" (lambda/simplif.ml[310,12119+31]..[310,12119+40])
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[310,12119+41]..[310,12119+43])
                                                    Pexp_ident "l2" (lambda/simplif.ml[310,12119+41]..[310,12119+43])
                                              ]
                                          ]
                                <case>
                                  pattern (lambda/simplif.ml[311,12164+4]..[311,12164+27])
                                    Ppat_construct "Lifthenelse" (lambda/simplif.ml[311,12164+4]..[311,12164+15])
                                    Some
                                      []
                                      pattern (lambda/simplif.ml[311,12164+15]..[311,12164+27])
                                        Ppat_tuple
                                        [
                                          pattern (lambda/simplif.ml[311,12164+16]..[311,12164+18])
                                            Ppat_var "l1" (lambda/simplif.ml[311,12164+16]..[311,12164+18])
                                          pattern (lambda/simplif.ml[311,12164+20]..[311,12164+22])
                                            Ppat_var "l2" (lambda/simplif.ml[311,12164+20]..[311,12164+22])
                                          pattern (lambda/simplif.ml[311,12164+24]..[311,12164+26])
                                            Ppat_var "l3" (lambda/simplif.ml[311,12164+24]..[311,12164+26])
                                        ]
                                  expression (lambda/simplif.ml[311,12164+31]..[312,12230+49])
                                    Pexp_construct "Lifthenelse" (lambda/simplif.ml[311,12164+31]..[311,12164+42])
                                    Some
                                      expression (lambda/simplif.ml[311,12164+42]..[312,12230+49])
                                        Pexp_tuple
                                        [
                                          expression (lambda/simplif.ml[311,12164+43]..[311,12164+64])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[311,12164+43]..[311,12164+50])
                                              Pexp_ident "simplif" (lambda/simplif.ml[311,12164+43]..[311,12164+50])
                                            [
                                              <arg>
                                              Labelled "try_depth"
                                                expression (lambda/simplif.ml[311,12164+52]..[311,12164+61])
                                                  Pexp_ident "try_depth" (lambda/simplif.ml[311,12164+52]..[311,12164+61])
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[311,12164+62]..[311,12164+64])
                                                  Pexp_ident "l1" (lambda/simplif.ml[311,12164+62]..[311,12164+64])
                                            ]
                                          expression (lambda/simplif.ml[312,12230+4]..[312,12230+25])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[312,12230+4]..[312,12230+11])
                                              Pexp_ident "simplif" (lambda/simplif.ml[312,12230+4]..[312,12230+11])
                                            [
                                              <arg>
                                              Labelled "try_depth"
                                                expression (lambda/simplif.ml[312,12230+13]..[312,12230+22])
                                                  Pexp_ident "try_depth" (lambda/simplif.ml[312,12230+13]..[312,12230+22])
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[312,12230+23]..[312,12230+25])
                                                  Pexp_ident "l2" (lambda/simplif.ml[312,12230+23]..[312,12230+25])
                                            ]
                                          expression (lambda/simplif.ml[312,12230+27]..[312,12230+48])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[312,12230+27]..[312,12230+34])
                                              Pexp_ident "simplif" (lambda/simplif.ml[312,12230+27]..[312,12230+34])
                                            [
                                              <arg>
                                              Labelled "try_depth"
                                                expression (lambda/simplif.ml[312,12230+36]..[312,12230+45])
                                                  Pexp_ident "try_depth" (lambda/simplif.ml[312,12230+36]..[312,12230+45])
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[312,12230+46]..[312,12230+48])
                                                  Pexp_ident "l3" (lambda/simplif.ml[312,12230+46]..[312,12230+48])
                                            ]
                                        ]
                                <case>
                                  pattern (lambda/simplif.ml[313,12280+4]..[313,12280+21])
                                    Ppat_construct "Lsequence" (lambda/simplif.ml[313,12280+4]..[313,12280+13])
                                    Some
                                      []
                                      pattern (lambda/simplif.ml[313,12280+13]..[313,12280+21])
                                        Ppat_tuple
                                        [
                                          pattern (lambda/simplif.ml[313,12280+14]..[313,12280+16])
                                            Ppat_var "l1" (lambda/simplif.ml[313,12280+14]..[313,12280+16])
                                          pattern (lambda/simplif.ml[313,12280+18]..[313,12280+20])
                                            Ppat_var "l2" (lambda/simplif.ml[313,12280+18]..[313,12280+20])
                                        ]
                                  expression (lambda/simplif.ml[313,12280+25]..[313,12280+80])
                                    Pexp_construct "Lsequence" (lambda/simplif.ml[313,12280+25]..[313,12280+34])
                                    Some
                                      expression (lambda/simplif.ml[313,12280+34]..[313,12280+80])
                                        Pexp_tuple
                                        [
                                          expression (lambda/simplif.ml[313,12280+35]..[313,12280+56])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[313,12280+35]..[313,12280+42])
                                              Pexp_ident "simplif" (lambda/simplif.ml[313,12280+35]..[313,12280+42])
                                            [
                                              <arg>
                                              Labelled "try_depth"
                                                expression (lambda/simplif.ml[313,12280+44]..[313,12280+53])
                                                  Pexp_ident "try_depth" (lambda/simplif.ml[313,12280+44]..[313,12280+53])
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[313,12280+54]..[313,12280+56])
                                                  Pexp_ident "l1" (lambda/simplif.ml[313,12280+54]..[313,12280+56])
                                            ]
                                          expression (lambda/simplif.ml[313,12280+58]..[313,12280+79])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[313,12280+58]..[313,12280+65])
                                              Pexp_ident "simplif" (lambda/simplif.ml[313,12280+58]..[313,12280+65])
                                            [
                                              <arg>
                                              Labelled "try_depth"
                                                expression (lambda/simplif.ml[313,12280+67]..[313,12280+76])
                                                  Pexp_ident "try_depth" (lambda/simplif.ml[313,12280+67]..[313,12280+76])
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[313,12280+77]..[313,12280+79])
                                                  Pexp_ident "l2" (lambda/simplif.ml[313,12280+77]..[313,12280+79])
                                            ]
                                        ]
                                <case>
                                  pattern (lambda/simplif.ml[314,12361+4]..[314,12361+18])
                                    Ppat_construct "Lwhile" (lambda/simplif.ml[314,12361+4]..[314,12361+10])
                                    Some
                                      []
                                      pattern (lambda/simplif.ml[314,12361+10]..[314,12361+18])
                                        Ppat_tuple
                                        [
                                          pattern (lambda/simplif.ml[314,12361+11]..[314,12361+13])
                                            Ppat_var "l1" (lambda/simplif.ml[314,12361+11]..[314,12361+13])
                                          pattern (lambda/simplif.ml[314,12361+15]..[314,12361+17])
                                            Ppat_var "l2" (lambda/simplif.ml[314,12361+15]..[314,12361+17])
                                        ]
                                  expression (lambda/simplif.ml[314,12361+22]..[314,12361+74])
                                    Pexp_construct "Lwhile" (lambda/simplif.ml[314,12361+22]..[314,12361+28])
                                    Some
                                      expression (lambda/simplif.ml[314,12361+28]..[314,12361+74])
                                        Pexp_tuple
                                        [
                                          expression (lambda/simplif.ml[314,12361+29]..[314,12361+50])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[314,12361+29]..[314,12361+36])
                                              Pexp_ident "simplif" (lambda/simplif.ml[314,12361+29]..[314,12361+36])
                                            [
                                              <arg>
                                              Labelled "try_depth"
                                                expression (lambda/simplif.ml[314,12361+38]..[314,12361+47])
                                                  Pexp_ident "try_depth" (lambda/simplif.ml[314,12361+38]..[314,12361+47])
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[314,12361+48]..[314,12361+50])
                                                  Pexp_ident "l1" (lambda/simplif.ml[314,12361+48]..[314,12361+50])
                                            ]
                                          expression (lambda/simplif.ml[314,12361+52]..[314,12361+73])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[314,12361+52]..[314,12361+59])
                                              Pexp_ident "simplif" (lambda/simplif.ml[314,12361+52]..[314,12361+59])
                                            [
                                              <arg>
                                              Labelled "try_depth"
                                                expression (lambda/simplif.ml[314,12361+61]..[314,12361+70])
                                                  Pexp_ident "try_depth" (lambda/simplif.ml[314,12361+61]..[314,12361+70])
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[314,12361+71]..[314,12361+73])
                                                  Pexp_ident "l2" (lambda/simplif.ml[314,12361+71]..[314,12361+73])
                                            ]
                                        ]
                                <case>
                                  pattern (lambda/simplif.ml[315,12436+4]..[315,12436+28])
                                    Ppat_construct "Lfor" (lambda/simplif.ml[315,12436+4]..[315,12436+8])
                                    Some
                                      []
                                      pattern (lambda/simplif.ml[315,12436+8]..[315,12436+28])
                                        Ppat_tuple
                                        [
                                          pattern (lambda/simplif.ml[315,12436+9]..[315,12436+10])
                                            Ppat_var "v" (lambda/simplif.ml[315,12436+9]..[315,12436+10])
                                          pattern (lambda/simplif.ml[315,12436+12]..[315,12436+14])
                                            Ppat_var "l1" (lambda/simplif.ml[315,12436+12]..[315,12436+14])
                                          pattern (lambda/simplif.ml[315,12436+16]..[315,12436+18])
                                            Ppat_var "l2" (lambda/simplif.ml[315,12436+16]..[315,12436+18])
                                          pattern (lambda/simplif.ml[315,12436+20]..[315,12436+23])
                                            Ppat_var "dir" (lambda/simplif.ml[315,12436+20]..[315,12436+23])
                                          pattern (lambda/simplif.ml[315,12436+25]..[315,12436+27])
                                            Ppat_var "l3" (lambda/simplif.ml[315,12436+25]..[315,12436+27])
                                        ]
                                  expression (lambda/simplif.ml[316,12468+6]..[317,12533+28])
                                    Pexp_construct "Lfor" (lambda/simplif.ml[316,12468+6]..[316,12468+10])
                                    Some
                                      expression (lambda/simplif.ml[316,12468+10]..[317,12533+28])
                                        Pexp_tuple
                                        [
                                          expression (lambda/simplif.ml[316,12468+11]..[316,12468+12])
                                            Pexp_ident "v" (lambda/simplif.ml[316,12468+11]..[316,12468+12])
                                          expression (lambda/simplif.ml[316,12468+14]..[316,12468+35])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[316,12468+14]..[316,12468+21])
                                              Pexp_ident "simplif" (lambda/simplif.ml[316,12468+14]..[316,12468+21])
                                            [
                                              <arg>
                                              Labelled "try_depth"
                                                expression (lambda/simplif.ml[316,12468+23]..[316,12468+32])
                                                  Pexp_ident "try_depth" (lambda/simplif.ml[316,12468+23]..[316,12468+32])
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[316,12468+33]..[316,12468+35])
                                                  Pexp_ident "l1" (lambda/simplif.ml[316,12468+33]..[316,12468+35])
                                            ]
                                          expression (lambda/simplif.ml[316,12468+37]..[316,12468+58])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[316,12468+37]..[316,12468+44])
                                              Pexp_ident "simplif" (lambda/simplif.ml[316,12468+37]..[316,12468+44])
                                            [
                                              <arg>
                                              Labelled "try_depth"
                                                expression (lambda/simplif.ml[316,12468+46]..[316,12468+55])
                                                  Pexp_ident "try_depth" (lambda/simplif.ml[316,12468+46]..[316,12468+55])
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[316,12468+56]..[316,12468+58])
                                                  Pexp_ident "l2" (lambda/simplif.ml[316,12468+56]..[316,12468+58])
                                            ]
                                          expression (lambda/simplif.ml[316,12468+60]..[316,12468+63])
                                            Pexp_ident "dir" (lambda/simplif.ml[316,12468+60]..[316,12468+63])
                                          expression (lambda/simplif.ml[317,12533+6]..[317,12533+27])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[317,12533+6]..[317,12533+13])
                                              Pexp_ident "simplif" (lambda/simplif.ml[317,12533+6]..[317,12533+13])
                                            [
                                              <arg>
                                              Labelled "try_depth"
                                                expression (lambda/simplif.ml[317,12533+15]..[317,12533+24])
                                                  Pexp_ident "try_depth" (lambda/simplif.ml[317,12533+15]..[317,12533+24])
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[317,12533+25]..[317,12533+27])
                                                  Pexp_ident "l3" (lambda/simplif.ml[317,12533+25]..[317,12533+27])
                                            ]
                                        ]
                                <case>
                                  pattern (lambda/simplif.ml[318,12562+4]..[318,12562+17])
                                    Ppat_construct "Lassign" (lambda/simplif.ml[318,12562+4]..[318,12562+11])
                                    Some
                                      []
                                      pattern (lambda/simplif.ml[318,12562+11]..[318,12562+17])
                                        Ppat_tuple
                                        [
                                          pattern (lambda/simplif.ml[318,12562+12]..[318,12562+13])
                                            Ppat_var "v" (lambda/simplif.ml[318,12562+12]..[318,12562+13])
                                          pattern (lambda/simplif.ml[318,12562+15]..[318,12562+16])
                                            Ppat_var "l" (lambda/simplif.ml[318,12562+15]..[318,12562+16])
                                        ]
                                  expression (lambda/simplif.ml[318,12562+21]..[318,12562+53])
                                    Pexp_construct "Lassign" (lambda/simplif.ml[318,12562+21]..[318,12562+28])
                                    Some
                                      expression (lambda/simplif.ml[318,12562+28]..[318,12562+53])
                                        Pexp_tuple
                                        [
                                          expression (lambda/simplif.ml[318,12562+29]..[318,12562+30])
                                            Pexp_ident "v" (lambda/simplif.ml[318,12562+29]..[318,12562+30])
                                          expression (lambda/simplif.ml[318,12562+32]..[318,12562+52])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[318,12562+32]..[318,12562+39])
                                              Pexp_ident "simplif" (lambda/simplif.ml[318,12562+32]..[318,12562+39])
                                            [
                                              <arg>
                                              Labelled "try_depth"
                                                expression (lambda/simplif.ml[318,12562+41]..[318,12562+50])
                                                  Pexp_ident "try_depth" (lambda/simplif.ml[318,12562+41]..[318,12562+50])
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[318,12562+51]..[318,12562+52])
                                                  Pexp_ident "l" (lambda/simplif.ml[318,12562+51]..[318,12562+52])
                                            ]
                                        ]
                                <case>
                                  pattern (lambda/simplif.ml[319,12616+4]..[319,12616+27])
                                    Ppat_construct "Lsend" (lambda/simplif.ml[319,12616+4]..[319,12616+9])
                                    Some
                                      []
                                      pattern (lambda/simplif.ml[319,12616+9]..[319,12616+27])
                                        Ppat_tuple
                                        [
                                          pattern (lambda/simplif.ml[319,12616+10]..[319,12616+11])
                                            Ppat_var "k" (lambda/simplif.ml[319,12616+10]..[319,12616+11])
                                          pattern (lambda/simplif.ml[319,12616+13]..[319,12616+14])
                                            Ppat_var "m" (lambda/simplif.ml[319,12616+13]..[319,12616+14])
                                          pattern (lambda/simplif.ml[319,12616+16]..[319,12616+17])
                                            Ppat_var "o" (lambda/simplif.ml[319,12616+16]..[319,12616+17])
                                          pattern (lambda/simplif.ml[319,12616+19]..[319,12616+21])
                                            Ppat_var "ll" (lambda/simplif.ml[319,12616+19]..[319,12616+21])
                                          pattern (lambda/simplif.ml[319,12616+23]..[319,12616+26])
                                            Ppat_var "loc" (lambda/simplif.ml[319,12616+23]..[319,12616+26])
                                        ]
                                  expression (lambda/simplif.ml[320,12647+6]..[321,12706+44])
                                    Pexp_construct "Lsend" (lambda/simplif.ml[320,12647+6]..[320,12647+11])
                                    Some
                                      expression (lambda/simplif.ml[320,12647+11]..[321,12706+44])
                                        Pexp_tuple
                                        [
                                          expression (lambda/simplif.ml[320,12647+12]..[320,12647+13])
                                            Pexp_ident "k" (lambda/simplif.ml[320,12647+12]..[320,12647+13])
                                          expression (lambda/simplif.ml[320,12647+15]..[320,12647+35])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[320,12647+15]..[320,12647+22])
                                              Pexp_ident "simplif" (lambda/simplif.ml[320,12647+15]..[320,12647+22])
                                            [
                                              <arg>
                                              Labelled "try_depth"
                                                expression (lambda/simplif.ml[320,12647+24]..[320,12647+33])
                                                  Pexp_ident "try_depth" (lambda/simplif.ml[320,12647+24]..[320,12647+33])
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[320,12647+34]..[320,12647+35])
                                                  Pexp_ident "m" (lambda/simplif.ml[320,12647+34]..[320,12647+35])
                                            ]
                                          expression (lambda/simplif.ml[320,12647+37]..[320,12647+57])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[320,12647+37]..[320,12647+44])
                                              Pexp_ident "simplif" (lambda/simplif.ml[320,12647+37]..[320,12647+44])
                                            [
                                              <arg>
                                              Labelled "try_depth"
                                                expression (lambda/simplif.ml[320,12647+46]..[320,12647+55])
                                                  Pexp_ident "try_depth" (lambda/simplif.ml[320,12647+46]..[320,12647+55])
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[320,12647+56]..[320,12647+57])
                                                  Pexp_ident "o" (lambda/simplif.ml[320,12647+56]..[320,12647+57])
                                            ]
                                          expression (lambda/simplif.ml[321,12706+6]..[321,12706+38])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[321,12706+6]..[321,12706+14])
                                              Pexp_ident "List.map" (lambda/simplif.ml[321,12706+6]..[321,12706+14])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[321,12706+15]..[321,12706+35])
                                                  Pexp_apply
                                                  expression (lambda/simplif.ml[321,12706+16]..[321,12706+23])
                                                    Pexp_ident "simplif" (lambda/simplif.ml[321,12706+16]..[321,12706+23])
                                                  [
                                                    <arg>
                                                    Labelled "try_depth"
                                                      expression (lambda/simplif.ml[321,12706+25]..[321,12706+34])
                                                        Pexp_ident "try_depth" (lambda/simplif.ml[321,12706+25]..[321,12706+34])
                                                  ]
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[321,12706+36]..[321,12706+38])
                                                  Pexp_ident "ll" (lambda/simplif.ml[321,12706+36]..[321,12706+38])
                                            ]
                                          expression (lambda/simplif.ml[321,12706+40]..[321,12706+43])
                                            Pexp_ident "loc" (lambda/simplif.ml[321,12706+40]..[321,12706+43])
                                        ]
                                <case>
                                  pattern (lambda/simplif.ml[322,12751+4]..[322,12751+17])
                                    Ppat_construct "Levent" (lambda/simplif.ml[322,12751+4]..[322,12751+10])
                                    Some
                                      []
                                      pattern (lambda/simplif.ml[322,12751+10]..[322,12751+17])
                                        Ppat_tuple
                                        [
                                          pattern (lambda/simplif.ml[322,12751+11]..[322,12751+12])
                                            Ppat_var "l" (lambda/simplif.ml[322,12751+11]..[322,12751+12])
                                          pattern (lambda/simplif.ml[322,12751+14]..[322,12751+16])
                                            Ppat_var "ev" (lambda/simplif.ml[322,12751+14]..[322,12751+16])
                                        ]
                                  expression (lambda/simplif.ml[322,12751+21]..[322,12751+53])
                                    Pexp_construct "Levent" (lambda/simplif.ml[322,12751+21]..[322,12751+27])
                                    Some
                                      expression (lambda/simplif.ml[322,12751+27]..[322,12751+53])
                                        Pexp_tuple
                                        [
                                          expression (lambda/simplif.ml[322,12751+28]..[322,12751+48])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[322,12751+28]..[322,12751+35])
                                              Pexp_ident "simplif" (lambda/simplif.ml[322,12751+28]..[322,12751+35])
                                            [
                                              <arg>
                                              Labelled "try_depth"
                                                expression (lambda/simplif.ml[322,12751+37]..[322,12751+46])
                                                  Pexp_ident "try_depth" (lambda/simplif.ml[322,12751+37]..[322,12751+46])
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[322,12751+47]..[322,12751+48])
                                                  Pexp_ident "l" (lambda/simplif.ml[322,12751+47]..[322,12751+48])
                                            ]
                                          expression (lambda/simplif.ml[322,12751+50]..[322,12751+52])
                                            Pexp_ident "ev" (lambda/simplif.ml[322,12751+50]..[322,12751+52])
                                        ]
                                <case>
                                  pattern (lambda/simplif.ml[323,12805+4]..[323,12805+17])
                                    Ppat_construct "Lifused" (lambda/simplif.ml[323,12805+4]..[323,12805+11])
                                    Some
                                      []
                                      pattern (lambda/simplif.ml[323,12805+11]..[323,12805+17])
                                        Ppat_tuple
                                        [
                                          pattern (lambda/simplif.ml[323,12805+12]..[323,12805+13])
                                            Ppat_var "v" (lambda/simplif.ml[323,12805+12]..[323,12805+13])
                                          pattern (lambda/simplif.ml[323,12805+15]..[323,12805+16])
                                            Ppat_var "l" (lambda/simplif.ml[323,12805+15]..[323,12805+16])
                                        ]
                                  expression (lambda/simplif.ml[323,12805+21]..[323,12805+53])
                                    Pexp_construct "Lifused" (lambda/simplif.ml[323,12805+21]..[323,12805+28])
                                    Some
                                      expression (lambda/simplif.ml[323,12805+29]..[323,12805+53])
                                        Pexp_tuple
                                        [
                                          expression (lambda/simplif.ml[323,12805+30]..[323,12805+31])
                                            Pexp_ident "v" (lambda/simplif.ml[323,12805+30]..[323,12805+31])
                                          expression (lambda/simplif.ml[323,12805+32]..[323,12805+52])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[323,12805+32]..[323,12805+39])
                                              Pexp_ident "simplif" (lambda/simplif.ml[323,12805+32]..[323,12805+39])
                                            [
                                              <arg>
                                              Labelled "try_depth"
                                                expression (lambda/simplif.ml[323,12805+41]..[323,12805+50])
                                                  Pexp_ident "try_depth" (lambda/simplif.ml[323,12805+41]..[323,12805+50])
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[323,12805+51]..[323,12805+52])
                                                  Pexp_ident "l" (lambda/simplif.ml[323,12805+51]..[323,12805+52])
                                            ]
                                        ]
                              ]
                      ]
                      expression (lambda/simplif.ml[325,12864+2]..[325,12864+26])
                        Pexp_apply
                        expression (lambda/simplif.ml[325,12864+2]..[325,12864+9])
                          Pexp_ident "simplif" (lambda/simplif.ml[325,12864+2]..[325,12864+9])
                        [
                          <arg>
                          Labelled "try_depth"
                            expression (lambda/simplif.ml[325,12864+21]..[325,12864+22])
                              Pexp_constant PConst_int (0,None)
                          <arg>
                          Nolabel
                            expression (lambda/simplif.ml[325,12864+23]..[325,12864+26])
                              Pexp_ident "lam" (lambda/simplif.ml[325,12864+23]..[325,12864+26])
                        ]
    ]
  structure_item (lambda/simplif.ml[335,13251+0]..[352,13829+9])
    Pstr_value Nonrec
    [
      <def>
        pattern (lambda/simplif.ml[335,13251+4]..[335,13251+21])
          Ppat_var "exact_application" (lambda/simplif.ml[335,13251+4]..[335,13251+21])
        expression (lambda/simplif.ml[335,13251+22]..[352,13829+9]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lambda/simplif.ml[335,13251+22]..[335,13251+39])
            Ppat_record Open
            [
              "kind" (lambda/simplif.ml[335,13251+23]..[335,13251+27]) ghost
                pattern (lambda/simplif.ml[335,13251+23]..[335,13251+27])
                  Ppat_var "kind" (lambda/simplif.ml[335,13251+23]..[335,13251+27])
              "params" (lambda/simplif.ml[335,13251+29]..[335,13251+35]) ghost
                pattern (lambda/simplif.ml[335,13251+29]..[335,13251+35])
                  Ppat_var "params" (lambda/simplif.ml[335,13251+29]..[335,13251+35])
            ]
          expression (lambda/simplif.ml[335,13251+40]..[352,13829+9]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (lambda/simplif.ml[335,13251+40]..[335,13251+44])
              Ppat_var "args" (lambda/simplif.ml[335,13251+40]..[335,13251+44])
            expression (lambda/simplif.ml[336,13298+2]..[352,13829+9])
              Pexp_match
              expression (lambda/simplif.ml[336,13298+8]..[336,13298+12])
                Pexp_ident "kind" (lambda/simplif.ml[336,13298+8]..[336,13298+12])
              [
                <case>
                  pattern (lambda/simplif.ml[337,13316+4]..[337,13316+11])
                    Ppat_construct "Curried" (lambda/simplif.ml[337,13316+4]..[337,13316+11])
                    None
                  expression (lambda/simplif.ml[338,13331+6]..[340,13395+20])
                    Pexp_ifthenelse
                    expression (lambda/simplif.ml[338,13331+9]..[338,13331+47])
                      Pexp_apply
                      expression (lambda/simplif.ml[338,13331+28]..[338,13331+30])
                        Pexp_ident "<>" (lambda/simplif.ml[338,13331+28]..[338,13331+30])
                      [
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[338,13331+9]..[338,13331+27])
                            Pexp_apply
                            expression (lambda/simplif.ml[338,13331+9]..[338,13331+20])
                              Pexp_ident "List.length" (lambda/simplif.ml[338,13331+9]..[338,13331+20])
                            [
                              <arg>
                              Nolabel
                                expression (lambda/simplif.ml[338,13331+21]..[338,13331+27])
                                  Pexp_ident "params" (lambda/simplif.ml[338,13331+21]..[338,13331+27])
                            ]
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[338,13331+31]..[338,13331+47])
                            Pexp_apply
                            expression (lambda/simplif.ml[338,13331+31]..[338,13331+42])
                              Pexp_ident "List.length" (lambda/simplif.ml[338,13331+31]..[338,13331+42])
                            [
                              <arg>
                              Nolabel
                                expression (lambda/simplif.ml[338,13331+43]..[338,13331+47])
                                  Pexp_ident "args" (lambda/simplif.ml[338,13331+43]..[338,13331+47])
                            ]
                      ]
                    expression (lambda/simplif.ml[339,13379+11]..[339,13379+15])
                      Pexp_construct "None" (lambda/simplif.ml[339,13379+11]..[339,13379+15])
                      None
                    Some
                      expression (lambda/simplif.ml[340,13395+11]..[340,13395+20])
                        Pexp_construct "Some" (lambda/simplif.ml[340,13395+11]..[340,13395+15])
                        Some
                          expression (lambda/simplif.ml[340,13395+16]..[340,13395+20])
                            Pexp_ident "args" (lambda/simplif.ml[340,13395+16]..[340,13395+20])
                <case>
                  pattern (lambda/simplif.ml[341,13416+4]..[341,13416+10])
                    Ppat_construct "Tupled" (lambda/simplif.ml[341,13416+4]..[341,13416+10])
                    None
                  expression (lambda/simplif.ml[342,13430+6]..[352,13829+9])
                    Pexp_match
                    expression (lambda/simplif.ml[342,13430+18]..[342,13430+22])
                      Pexp_ident "args" (lambda/simplif.ml[342,13430+18]..[342,13430+22])
                    [
                      <case>
                        pattern (lambda/simplif.ml[343,13458+8]..[343,13458+45])
                          Ppat_construct "::" (lambda/simplif.ml[343,13458+9]..[343,13458+45]) ghost
                          Some
                            []
                            pattern (lambda/simplif.ml[343,13458+9]..[343,13458+45]) ghost
                              Ppat_tuple
                              [
                                pattern (lambda/simplif.ml[343,13458+9]..[343,13458+44])
                                  Ppat_construct "Lprim" (lambda/simplif.ml[343,13458+9]..[343,13458+14])
                                  Some
                                    []
                                    pattern (lambda/simplif.ml[343,13458+14]..[343,13458+44])
                                      Ppat_tuple
                                      [
                                        pattern (lambda/simplif.ml[343,13458+15]..[343,13458+27])
                                          Ppat_construct "Pmakeblock" (lambda/simplif.ml[343,13458+15]..[343,13458+25])
                                          Some
                                            []
                                            pattern (lambda/simplif.ml[343,13458+26]..[343,13458+27])
                                              Ppat_any
                                        pattern (lambda/simplif.ml[343,13458+29]..[343,13458+40])
                                          Ppat_var "tupled_args" (lambda/simplif.ml[343,13458+29]..[343,13458+40])
                                        pattern (lambda/simplif.ml[343,13458+42]..[343,13458+43])
                                          Ppat_any
                                      ]
                                pattern (lambda/simplif.ml[343,13458+44]..[343,13458+45]) ghost
                                  Ppat_construct "[]" (lambda/simplif.ml[343,13458+44]..[343,13458+45]) ghost
                                  None
                              ]
                        expression (lambda/simplif.ml[344,13507+10]..[346,13586+31])
                          Pexp_ifthenelse
                          expression (lambda/simplif.ml[344,13507+13]..[344,13507+58])
                            Pexp_apply
                            expression (lambda/simplif.ml[344,13507+32]..[344,13507+34])
                              Pexp_ident "<>" (lambda/simplif.ml[344,13507+32]..[344,13507+34])
                            [
                              <arg>
                              Nolabel
                                expression (lambda/simplif.ml[344,13507+13]..[344,13507+31])
                                  Pexp_apply
                                  expression (lambda/simplif.ml[344,13507+13]..[344,13507+24])
                                    Pexp_ident "List.length" (lambda/simplif.ml[344,13507+13]..[344,13507+24])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[344,13507+25]..[344,13507+31])
                                        Pexp_ident "params" (lambda/simplif.ml[344,13507+25]..[344,13507+31])
                                  ]
                              <arg>
                              Nolabel
                                expression (lambda/simplif.ml[344,13507+35]..[344,13507+58])
                                  Pexp_apply
                                  expression (lambda/simplif.ml[344,13507+35]..[344,13507+46])
                                    Pexp_ident "List.length" (lambda/simplif.ml[344,13507+35]..[344,13507+46])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[344,13507+47]..[344,13507+58])
                                        Pexp_ident "tupled_args" (lambda/simplif.ml[344,13507+47]..[344,13507+58])
                                  ]
                            ]
                          expression (lambda/simplif.ml[345,13566+15]..[345,13566+19])
                            Pexp_construct "None" (lambda/simplif.ml[345,13566+15]..[345,13566+19])
                            None
                          Some
                            expression (lambda/simplif.ml[346,13586+15]..[346,13586+31])
                              Pexp_construct "Some" (lambda/simplif.ml[346,13586+15]..[346,13586+19])
                              Some
                                expression (lambda/simplif.ml[346,13586+20]..[346,13586+31])
                                  Pexp_ident "tupled_args" (lambda/simplif.ml[346,13586+20]..[346,13586+31])
                      <case>
                        pattern (lambda/simplif.ml[347,13618+8]..[347,13618+45])
                          Ppat_construct "::" (lambda/simplif.ml[347,13618+9]..[347,13618+45]) ghost
                          Some
                            []
                            pattern (lambda/simplif.ml[347,13618+9]..[347,13618+45]) ghost
                              Ppat_tuple
                              [
                                pattern (lambda/simplif.ml[347,13618+9]..[347,13618+44])
                                  Ppat_construct "Lconst" (lambda/simplif.ml[347,13618+9]..[347,13618+15])
                                  Some
                                    []
                                    pattern (lambda/simplif.ml[347,13618+15]..[347,13618+44])
                                      Ppat_construct "Const_block" (lambda/simplif.ml[347,13618+16]..[347,13618+27])
                                      Some
                                        []
                                        pattern (lambda/simplif.ml[347,13618+28]..[347,13618+43])
                                          Ppat_tuple
                                          [
                                            pattern (lambda/simplif.ml[347,13618+29]..[347,13618+30])
                                              Ppat_any
                                            pattern (lambda/simplif.ml[347,13618+32]..[347,13618+42])
                                              Ppat_var "const_args" (lambda/simplif.ml[347,13618+32]..[347,13618+42])
                                          ]
                                pattern (lambda/simplif.ml[347,13618+44]..[347,13618+45]) ghost
                                  Ppat_construct "[]" (lambda/simplif.ml[347,13618+44]..[347,13618+45]) ghost
                                  None
                              ]
                        expression (lambda/simplif.ml[348,13667+10]..[350,13745+65])
                          Pexp_ifthenelse
                          expression (lambda/simplif.ml[348,13667+13]..[348,13667+57])
                            Pexp_apply
                            expression (lambda/simplif.ml[348,13667+32]..[348,13667+34])
                              Pexp_ident "<>" (lambda/simplif.ml[348,13667+32]..[348,13667+34])
                            [
                              <arg>
                              Nolabel
                                expression (lambda/simplif.ml[348,13667+13]..[348,13667+31])
                                  Pexp_apply
                                  expression (lambda/simplif.ml[348,13667+13]..[348,13667+24])
                                    Pexp_ident "List.length" (lambda/simplif.ml[348,13667+13]..[348,13667+24])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[348,13667+25]..[348,13667+31])
                                        Pexp_ident "params" (lambda/simplif.ml[348,13667+25]..[348,13667+31])
                                  ]
                              <arg>
                              Nolabel
                                expression (lambda/simplif.ml[348,13667+35]..[348,13667+57])
                                  Pexp_apply
                                  expression (lambda/simplif.ml[348,13667+35]..[348,13667+46])
                                    Pexp_ident "List.length" (lambda/simplif.ml[348,13667+35]..[348,13667+46])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[348,13667+47]..[348,13667+57])
                                        Pexp_ident "const_args" (lambda/simplif.ml[348,13667+47]..[348,13667+57])
                                  ]
                            ]
                          expression (lambda/simplif.ml[349,13725+15]..[349,13725+19])
                            Pexp_construct "None" (lambda/simplif.ml[349,13725+15]..[349,13725+19])
                            None
                          Some
                            expression (lambda/simplif.ml[350,13745+15]..[350,13745+65])
                              Pexp_construct "Some" (lambda/simplif.ml[350,13745+15]..[350,13745+19])
                              Some
                                expression (lambda/simplif.ml[350,13745+20]..[350,13745+65])
                                  Pexp_apply
                                  expression (lambda/simplif.ml[350,13745+21]..[350,13745+29])
                                    Pexp_ident "List.map" (lambda/simplif.ml[350,13745+21]..[350,13745+29])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[350,13745+30]..[350,13745+53])
                                        Pexp_fun
                                        Nolabel
                                        None
                                        pattern (lambda/simplif.ml[350,13745+35]..[350,13745+38])
                                          Ppat_var "cst" (lambda/simplif.ml[350,13745+35]..[350,13745+38])
                                        expression (lambda/simplif.ml[350,13745+42]..[350,13745+52])
                                          Pexp_construct "Lconst" (lambda/simplif.ml[350,13745+42]..[350,13745+48])
                                          Some
                                            expression (lambda/simplif.ml[350,13745+49]..[350,13745+52])
                                              Pexp_ident "cst" (lambda/simplif.ml[350,13745+49]..[350,13745+52])
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[350,13745+54]..[350,13745+64])
                                        Pexp_ident "const_args" (lambda/simplif.ml[350,13745+54]..[350,13745+64])
                                  ]
                      <case>
                        pattern (lambda/simplif.ml[351,13811+8]..[351,13811+9])
                          Ppat_any
                        expression (lambda/simplif.ml[351,13811+13]..[351,13811+17])
                          Pexp_construct "None" (lambda/simplif.ml[351,13811+13]..[351,13811+17])
                          None
                    ]
              ]
    ]
  structure_item (lambda/simplif.ml[354,13840+0]..[356,13956+34])
    Pstr_value Nonrec
    [
      <def>
        pattern (lambda/simplif.ml[354,13840+4]..[354,13840+15])
          Ppat_var "beta_reduce" (lambda/simplif.ml[354,13840+4]..[354,13840+15])
        expression (lambda/simplif.ml[354,13840+16]..[356,13956+34]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lambda/simplif.ml[354,13840+16]..[354,13840+22])
            Ppat_var "params" (lambda/simplif.ml[354,13840+16]..[354,13840+22])
          expression (lambda/simplif.ml[354,13840+23]..[356,13956+34]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (lambda/simplif.ml[354,13840+23]..[354,13840+27])
              Ppat_var "body" (lambda/simplif.ml[354,13840+23]..[354,13840+27])
            expression (lambda/simplif.ml[354,13840+28]..[356,13956+34]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (lambda/simplif.ml[354,13840+28]..[354,13840+32])
                Ppat_var "args" (lambda/simplif.ml[354,13840+28]..[354,13840+32])
              expression (lambda/simplif.ml[355,13875+2]..[356,13956+34])
                Pexp_apply
                expression (lambda/simplif.ml[355,13875+2]..[355,13875+17])
                  Pexp_ident "List.fold_left2" (lambda/simplif.ml[355,13875+2]..[355,13875+17])
                [
                  <arg>
                  Nolabel
                    expression (lambda/simplif.ml[355,13875+18]..[355,13875+80])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lambda/simplif.ml[355,13875+23]..[355,13875+24])
                        Ppat_var "l" (lambda/simplif.ml[355,13875+23]..[355,13875+24])
                      expression (lambda/simplif.ml[355,13875+25]..[355,13875+79]) ghost
                        Pexp_fun
                        Nolabel
                        None
                        pattern (lambda/simplif.ml[355,13875+25]..[355,13875+38])
                          Ppat_tuple
                          [
                            pattern (lambda/simplif.ml[355,13875+26]..[355,13875+31])
                              Ppat_var "param" (lambda/simplif.ml[355,13875+26]..[355,13875+31])
                            pattern (lambda/simplif.ml[355,13875+33]..[355,13875+37])
                              Ppat_var "kind" (lambda/simplif.ml[355,13875+33]..[355,13875+37])
                          ]
                        expression (lambda/simplif.ml[355,13875+39]..[355,13875+79]) ghost
                          Pexp_fun
                          Nolabel
                          None
                          pattern (lambda/simplif.ml[355,13875+39]..[355,13875+42])
                            Ppat_var "arg" (lambda/simplif.ml[355,13875+39]..[355,13875+42])
                          expression (lambda/simplif.ml[355,13875+46]..[355,13875+79])
                            Pexp_construct "Llet" (lambda/simplif.ml[355,13875+46]..[355,13875+50])
                            Some
                              expression (lambda/simplif.ml[355,13875+50]..[355,13875+79])
                                Pexp_tuple
                                [
                                  expression (lambda/simplif.ml[355,13875+51]..[355,13875+57])
                                    Pexp_construct "Strict" (lambda/simplif.ml[355,13875+51]..[355,13875+57])
                                    None
                                  expression (lambda/simplif.ml[355,13875+59]..[355,13875+63])
                                    Pexp_ident "kind" (lambda/simplif.ml[355,13875+59]..[355,13875+63])
                                  expression (lambda/simplif.ml[355,13875+65]..[355,13875+70])
                                    Pexp_ident "param" (lambda/simplif.ml[355,13875+65]..[355,13875+70])
                                  expression (lambda/simplif.ml[355,13875+72]..[355,13875+75])
                                    Pexp_ident "arg" (lambda/simplif.ml[355,13875+72]..[355,13875+75])
                                  expression (lambda/simplif.ml[355,13875+77]..[355,13875+78])
                                    Pexp_ident "l" (lambda/simplif.ml[355,13875+77]..[355,13875+78])
                                ]
                  <arg>
                  Nolabel
                    expression (lambda/simplif.ml[356,13956+18]..[356,13956+22])
                      Pexp_ident "body" (lambda/simplif.ml[356,13956+18]..[356,13956+22])
                  <arg>
                  Nolabel
                    expression (lambda/simplif.ml[356,13956+23]..[356,13956+29])
                      Pexp_ident "params" (lambda/simplif.ml[356,13956+23]..[356,13956+29])
                  <arg>
                  Nolabel
                    expression (lambda/simplif.ml[356,13956+30]..[356,13956+34])
                      Pexp_ident "args" (lambda/simplif.ml[356,13956+30]..[356,13956+34])
                ]
    ]
  structure_item (lambda/simplif.ml[360,14022+0]..[611,23330+13])
    Pstr_value Nonrec
    [
      <def>
        pattern (lambda/simplif.ml[360,14022+4]..[360,14022+17])
          Ppat_var "simplify_lets" (lambda/simplif.ml[360,14022+4]..[360,14022+17])
        expression (lambda/simplif.ml[360,14022+18]..[611,23330+13]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lambda/simplif.ml[360,14022+18]..[360,14022+21])
            Ppat_var "lam" (lambda/simplif.ml[360,14022+18]..[360,14022+21])
          expression (lambda/simplif.ml[363,14115+2]..[611,23330+13])
            Pexp_let Nonrec
            [
              <def>
                pattern (lambda/simplif.ml[363,14115+6]..[363,14115+14])
                  Ppat_var "optimize" (lambda/simplif.ml[363,14115+6]..[363,14115+14])
                expression (lambda/simplif.ml[363,14115+17]..[363,14115+59])
                  Pexp_apply
                  expression (lambda/simplif.ml[363,14115+38]..[363,14115+40])
                    Pexp_ident "||" (lambda/simplif.ml[363,14115+38]..[363,14115+40])
                  [
                    <arg>
                    Nolabel
                      expression (lambda/simplif.ml[363,14115+17]..[363,14115+37])
                        Pexp_apply
                        expression (lambda/simplif.ml[363,14115+17]..[363,14115+18])
                          Pexp_ident "!" (lambda/simplif.ml[363,14115+17]..[363,14115+18])
                        [
                          <arg>
                          Nolabel
                            expression (lambda/simplif.ml[363,14115+18]..[363,14115+37])
                              Pexp_ident "Clflags.native_code" (lambda/simplif.ml[363,14115+18]..[363,14115+37])
                        ]
                    <arg>
                    Nolabel
                      expression (lambda/simplif.ml[363,14115+41]..[363,14115+59])
                        Pexp_apply
                        expression (lambda/simplif.ml[363,14115+41]..[363,14115+44])
                          Pexp_ident "not" (lambda/simplif.ml[363,14115+41]..[363,14115+44])
                        [
                          <arg>
                          Nolabel
                            expression (lambda/simplif.ml[363,14115+45]..[363,14115+59])
                              Pexp_apply
                              expression (lambda/simplif.ml[363,14115+45]..[363,14115+46])
                                Pexp_ident "!" (lambda/simplif.ml[363,14115+45]..[363,14115+46])
                              [
                                <arg>
                                Nolabel
                                  expression (lambda/simplif.ml[363,14115+46]..[363,14115+59])
                                    Pexp_ident "Clflags.debug" (lambda/simplif.ml[363,14115+46]..[363,14115+59])
                              ]
                        ]
                  ]
            ]
            expression (lambda/simplif.ml[367,14251+2]..[611,23330+13])
              Pexp_let Nonrec
              [
                <def>
                  pattern (lambda/simplif.ml[367,14251+6]..[367,14251+9])
                    Ppat_var "occ" (lambda/simplif.ml[367,14251+6]..[367,14251+9])
                  expression (lambda/simplif.ml[367,14251+12]..[367,14251+61])
                    Pexp_constraint
                    expression (lambda/simplif.ml[367,14251+13]..[367,14251+30])
                      Pexp_apply
                      expression (lambda/simplif.ml[367,14251+13]..[367,14251+27])
                        Pexp_ident "Hashtbl.create" (lambda/simplif.ml[367,14251+13]..[367,14251+27])
                      [
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[367,14251+28]..[367,14251+30])
                            Pexp_constant PConst_int (83,None)
                      ]
                    core_type (lambda/simplif.ml[367,14251+32]..[367,14251+60])
                      Ptyp_constr "Hashtbl.t" (lambda/simplif.ml[367,14251+51]..[367,14251+60])
                      [
                        core_type (lambda/simplif.ml[367,14251+33]..[367,14251+40])
                          Ptyp_constr "Ident.t" (lambda/simplif.ml[367,14251+33]..[367,14251+40])
                          []
                        core_type (lambda/simplif.ml[367,14251+42]..[367,14251+49])
                          Ptyp_constr "ref" (lambda/simplif.ml[367,14251+46]..[367,14251+49])
                          [
                            core_type (lambda/simplif.ml[367,14251+42]..[367,14251+45])
                              Ptyp_constr "int" (lambda/simplif.ml[367,14251+42]..[367,14251+45])
                              []
                          ]
                      ]
              ]
              expression (lambda/simplif.ml[378,14832+2]..[611,23330+13])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (lambda/simplif.ml[378,14832+6]..[378,14832+15])
                      Ppat_var "count_var" (lambda/simplif.ml[378,14832+6]..[378,14832+15])
                    expression (lambda/simplif.ml[378,14832+16]..[382,14910+7]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lambda/simplif.ml[378,14832+16]..[378,14832+17])
                        Ppat_var "v" (lambda/simplif.ml[378,14832+16]..[378,14832+17])
                      expression (lambda/simplif.ml[379,14852+4]..[382,14910+7])
                        Pexp_try
                        expression (lambda/simplif.ml[380,14860+6]..[380,14860+27])
                          Pexp_apply
                          expression (lambda/simplif.ml[380,14860+6]..[380,14860+7])
                            Pexp_ident "!" (lambda/simplif.ml[380,14860+6]..[380,14860+7])
                          [
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[380,14860+7]..[380,14860+27])
                                Pexp_apply
                                expression (lambda/simplif.ml[380,14860+8]..[380,14860+20])
                                  Pexp_ident "Hashtbl.find" (lambda/simplif.ml[380,14860+8]..[380,14860+20])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[380,14860+21]..[380,14860+24])
                                      Pexp_ident "occ" (lambda/simplif.ml[380,14860+21]..[380,14860+24])
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[380,14860+25]..[380,14860+26])
                                      Pexp_ident "v" (lambda/simplif.ml[380,14860+25]..[380,14860+26])
                                ]
                          ]
                        [
                          <case>
                            pattern (lambda/simplif.ml[381,14888+9]..[381,14888+18])
                              Ppat_construct "Not_found" (lambda/simplif.ml[381,14888+9]..[381,14888+18])
                              None
                            expression (lambda/simplif.ml[382,14910+6]..[382,14910+7])
                              Pexp_constant PConst_int (0,None)
                        ]
                  <def>
                    pattern (lambda/simplif.ml[385,14968+6]..[385,14968+14])
                      Ppat_var "bind_var" (lambda/simplif.ml[385,14968+6]..[385,14968+14])
                    expression (lambda/simplif.ml[385,14968+15]..[388,15036+24]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lambda/simplif.ml[385,14968+15]..[385,14968+17])
                        Ppat_var "bv" (lambda/simplif.ml[385,14968+15]..[385,14968+17])
                      expression (lambda/simplif.ml[385,14968+18]..[388,15036+24]) ghost
                        Pexp_fun
                        Nolabel
                        None
                        pattern (lambda/simplif.ml[385,14968+18]..[385,14968+19])
                          Ppat_var "v" (lambda/simplif.ml[385,14968+18]..[385,14968+19])
                        expression (lambda/simplif.ml[386,14990+4]..[388,15036+24])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lambda/simplif.ml[386,14990+8]..[386,14990+9])
                                Ppat_var "r" (lambda/simplif.ml[386,14990+8]..[386,14990+9])
                              expression (lambda/simplif.ml[386,14990+12]..[386,14990+17])
                                Pexp_apply
                                expression (lambda/simplif.ml[386,14990+12]..[386,14990+15])
                                  Pexp_ident "ref" (lambda/simplif.ml[386,14990+12]..[386,14990+15])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[386,14990+16]..[386,14990+17])
                                      Pexp_constant PConst_int (0,None)
                                ]
                          ]
                          expression (lambda/simplif.ml[387,15011+4]..[388,15036+24])
                            Pexp_sequence
                            expression (lambda/simplif.ml[387,15011+4]..[387,15011+23])
                              Pexp_apply
                              expression (lambda/simplif.ml[387,15011+4]..[387,15011+15])
                                Pexp_ident "Hashtbl.add" (lambda/simplif.ml[387,15011+4]..[387,15011+15])
                              [
                                <arg>
                                Nolabel
                                  expression (lambda/simplif.ml[387,15011+16]..[387,15011+19])
                                    Pexp_ident "occ" (lambda/simplif.ml[387,15011+16]..[387,15011+19])
                                <arg>
                                Nolabel
                                  expression (lambda/simplif.ml[387,15011+20]..[387,15011+21])
                                    Pexp_ident "v" (lambda/simplif.ml[387,15011+20]..[387,15011+21])
                                <arg>
                                Nolabel
                                  expression (lambda/simplif.ml[387,15011+22]..[387,15011+23])
                                    Pexp_ident "r" (lambda/simplif.ml[387,15011+22]..[387,15011+23])
                              ]
                            expression (lambda/simplif.ml[388,15036+4]..[388,15036+24])
                              Pexp_apply
                              expression (lambda/simplif.ml[388,15036+4]..[388,15036+17])
                                Pexp_ident "Ident.Map.add" (lambda/simplif.ml[388,15036+4]..[388,15036+17])
                              [
                                <arg>
                                Nolabel
                                  expression (lambda/simplif.ml[388,15036+18]..[388,15036+19])
                                    Pexp_ident "v" (lambda/simplif.ml[388,15036+18]..[388,15036+19])
                                <arg>
                                Nolabel
                                  expression (lambda/simplif.ml[388,15036+20]..[388,15036+21])
                                    Pexp_ident "r" (lambda/simplif.ml[388,15036+20]..[388,15036+21])
                                <arg>
                                Nolabel
                                  expression (lambda/simplif.ml[388,15036+22]..[388,15036+24])
                                    Pexp_ident "bv" (lambda/simplif.ml[388,15036+22]..[388,15036+24])
                              ]
                  <def>
                    pattern (lambda/simplif.ml[391,15097+6]..[391,15097+13])
                      Ppat_var "use_var" (lambda/simplif.ml[391,15097+6]..[391,15097+13])
                    expression (lambda/simplif.ml[391,15097+14]..[402,15517+8]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lambda/simplif.ml[391,15097+14]..[391,15097+16])
                        Ppat_var "bv" (lambda/simplif.ml[391,15097+14]..[391,15097+16])
                      expression (lambda/simplif.ml[391,15097+17]..[402,15517+8]) ghost
                        Pexp_fun
                        Nolabel
                        None
                        pattern (lambda/simplif.ml[391,15097+17]..[391,15097+18])
                          Ppat_var "v" (lambda/simplif.ml[391,15097+17]..[391,15097+18])
                        expression (lambda/simplif.ml[391,15097+19]..[402,15517+8]) ghost
                          Pexp_fun
                          Nolabel
                          None
                          pattern (lambda/simplif.ml[391,15097+19]..[391,15097+20])
                            Ppat_var "n" (lambda/simplif.ml[391,15097+19]..[391,15097+20])
                          expression (lambda/simplif.ml[392,15120+4]..[402,15517+8])
                            Pexp_try
                            expression (lambda/simplif.ml[393,15128+6]..[393,15128+48])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lambda/simplif.ml[393,15128+10]..[393,15128+11])
                                    Ppat_var "r" (lambda/simplif.ml[393,15128+10]..[393,15128+11])
                                  expression (lambda/simplif.ml[393,15128+14]..[393,15128+33])
                                    Pexp_apply
                                    expression (lambda/simplif.ml[393,15128+14]..[393,15128+28])
                                      Pexp_ident "Ident.Map.find" (lambda/simplif.ml[393,15128+14]..[393,15128+28])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lambda/simplif.ml[393,15128+29]..[393,15128+30])
                                          Pexp_ident "v" (lambda/simplif.ml[393,15128+29]..[393,15128+30])
                                      <arg>
                                      Nolabel
                                        expression (lambda/simplif.ml[393,15128+31]..[393,15128+33])
                                          Pexp_ident "bv" (lambda/simplif.ml[393,15128+31]..[393,15128+33])
                                    ]
                              ]
                              expression (lambda/simplif.ml[393,15128+37]..[393,15128+48])
                                Pexp_apply
                                expression (lambda/simplif.ml[393,15128+39]..[393,15128+41])
                                  Pexp_ident ":=" (lambda/simplif.ml[393,15128+39]..[393,15128+41])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[393,15128+37]..[393,15128+38])
                                      Pexp_ident "r" (lambda/simplif.ml[393,15128+37]..[393,15128+38])
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[393,15128+42]..[393,15128+48])
                                      Pexp_apply
                                      expression (lambda/simplif.ml[393,15128+45]..[393,15128+46])
                                        Pexp_ident "+" (lambda/simplif.ml[393,15128+45]..[393,15128+46])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lambda/simplif.ml[393,15128+42]..[393,15128+44])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[393,15128+42]..[393,15128+43])
                                              Pexp_ident "!" (lambda/simplif.ml[393,15128+42]..[393,15128+43])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[393,15128+43]..[393,15128+44])
                                                  Pexp_ident "r" (lambda/simplif.ml[393,15128+43]..[393,15128+44])
                                            ]
                                        <arg>
                                        Nolabel
                                          expression (lambda/simplif.ml[393,15128+47]..[393,15128+48])
                                            Pexp_ident "n" (lambda/simplif.ml[393,15128+47]..[393,15128+48])
                                      ]
                                ]
                            [
                              <case>
                                pattern (lambda/simplif.ml[394,15177+9]..[394,15177+18])
                                  Ppat_construct "Not_found" (lambda/simplif.ml[394,15177+9]..[394,15177+18])
                                  None
                                expression (lambda/simplif.ml[398,15394+4]..[402,15517+8])
                                  Pexp_try
                                  expression (lambda/simplif.ml[399,15402+6]..[399,15402+47])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lambda/simplif.ml[399,15402+10]..[399,15402+11])
                                          Ppat_var "r" (lambda/simplif.ml[399,15402+10]..[399,15402+11])
                                        expression (lambda/simplif.ml[399,15402+14]..[399,15402+32])
                                          Pexp_apply
                                          expression (lambda/simplif.ml[399,15402+14]..[399,15402+26])
                                            Pexp_ident "Hashtbl.find" (lambda/simplif.ml[399,15402+14]..[399,15402+26])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[399,15402+27]..[399,15402+30])
                                                Pexp_ident "occ" (lambda/simplif.ml[399,15402+27]..[399,15402+30])
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[399,15402+31]..[399,15402+32])
                                                Pexp_ident "v" (lambda/simplif.ml[399,15402+31]..[399,15402+32])
                                          ]
                                    ]
                                    expression (lambda/simplif.ml[399,15402+36]..[399,15402+47])
                                      Pexp_apply
                                      expression (lambda/simplif.ml[399,15402+38]..[399,15402+40])
                                        Pexp_ident ":=" (lambda/simplif.ml[399,15402+38]..[399,15402+40])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lambda/simplif.ml[399,15402+36]..[399,15402+37])
                                            Pexp_ident "r" (lambda/simplif.ml[399,15402+36]..[399,15402+37])
                                        <arg>
                                        Nolabel
                                          expression (lambda/simplif.ml[399,15402+41]..[399,15402+47])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[399,15402+44]..[399,15402+45])
                                              Pexp_ident "+" (lambda/simplif.ml[399,15402+44]..[399,15402+45])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[399,15402+41]..[399,15402+43])
                                                  Pexp_apply
                                                  expression (lambda/simplif.ml[399,15402+41]..[399,15402+42])
                                                    Pexp_ident "!" (lambda/simplif.ml[399,15402+41]..[399,15402+42])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (lambda/simplif.ml[399,15402+42]..[399,15402+43])
                                                        Pexp_ident "r" (lambda/simplif.ml[399,15402+42]..[399,15402+43])
                                                  ]
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[399,15402+46]..[399,15402+47])
                                                  Pexp_constant PConst_int (2,None)
                                            ]
                                      ]
                                  [
                                    <case>
                                      pattern (lambda/simplif.ml[400,15450+9]..[400,15450+18])
                                        Ppat_construct "Not_found" (lambda/simplif.ml[400,15450+9]..[400,15450+18])
                                        None
                                      expression (lambda/simplif.ml[402,15517+6]..[402,15517+8])
                                        Pexp_construct "()" (lambda/simplif.ml[402,15517+6]..[402,15517+8])
                                        None
                                  ]
                            ]
                ]
                expression (lambda/simplif.ml[404,15530+2]..[611,23330+13])
                  Pexp_let Rec
                  [
                    <def>
                      pattern (lambda/simplif.ml[404,15530+10]..[404,15530+15])
                        Ppat_var "count" (lambda/simplif.ml[404,15530+10]..[404,15530+15])
                      expression (lambda/simplif.ml[404,15530+16]..[469,17902+40]) ghost
                        Pexp_fun
                        Nolabel
                        None
                        pattern (lambda/simplif.ml[404,15530+16]..[404,15530+18])
                          Ppat_var "bv" (lambda/simplif.ml[404,15530+16]..[404,15530+18])
                        expression (lambda/simplif.ml[404,15530+21]..[469,17902+40])
                          Pexp_function
                          [
                            <case>
                              pattern (lambda/simplif.ml[405,15560+4]..[405,15560+12])
                                Ppat_construct "Lconst" (lambda/simplif.ml[405,15560+4]..[405,15560+10])
                                Some
                                  []
                                  pattern (lambda/simplif.ml[405,15560+11]..[405,15560+12])
                                    Ppat_any
                              expression (lambda/simplif.ml[405,15560+16]..[405,15560+18])
                                Pexp_construct "()" (lambda/simplif.ml[405,15560+16]..[405,15560+18])
                                None
                            <case>
                              pattern (lambda/simplif.ml[406,15579+4]..[406,15579+10])
                                Ppat_construct "Lvar" (lambda/simplif.ml[406,15579+4]..[406,15579+8])
                                Some
                                  []
                                  pattern (lambda/simplif.ml[406,15579+9]..[406,15579+10])
                                    Ppat_var "v" (lambda/simplif.ml[406,15579+9]..[406,15579+10])
                              expression (lambda/simplif.ml[407,15593+5]..[407,15593+19])
                                Pexp_apply
                                expression (lambda/simplif.ml[407,15593+5]..[407,15593+12])
                                  Pexp_ident "use_var" (lambda/simplif.ml[407,15593+5]..[407,15593+12])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[407,15593+13]..[407,15593+15])
                                      Pexp_ident "bv" (lambda/simplif.ml[407,15593+13]..[407,15593+15])
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[407,15593+16]..[407,15593+17])
                                      Pexp_ident "v" (lambda/simplif.ml[407,15593+16]..[407,15593+17])
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[407,15593+18]..[407,15593+19])
                                      Pexp_constant PConst_int (1,None)
                                ]
                            <case>
                              pattern (lambda/simplif.ml[408,15613+4]..[408,15613+13])
                                Ppat_construct "Lmutvar" (lambda/simplif.ml[408,15613+4]..[408,15613+11])
                                Some
                                  []
                                  pattern (lambda/simplif.ml[408,15613+12]..[408,15613+13])
                                    Ppat_any
                              expression (lambda/simplif.ml[408,15613+17]..[408,15613+19])
                                Pexp_construct "()" (lambda/simplif.ml[408,15613+17]..[408,15613+19])
                                None
                            <case>
                              pattern (lambda/simplif.ml[409,15633+4]..[409,15633+40])
                                Ppat_construct "Lapply" (lambda/simplif.ml[409,15633+4]..[409,15633+10])
                                Some
                                  []
                                  pattern (lambda/simplif.ml[409,15633+10]..[409,15633+40])
                                    Ppat_record Closed
                                    [
                                      "ap_func" (lambda/simplif.ml[409,15633+11]..[409,15633+18])
                                        pattern (lambda/simplif.ml[409,15633+21]..[409,15633+23])
                                          Ppat_var "ll" (lambda/simplif.ml[409,15633+21]..[409,15633+23])
                                      "ap_args" (lambda/simplif.ml[409,15633+25]..[409,15633+32])
                                        pattern (lambda/simplif.ml[409,15633+35]..[409,15633+39])
                                          Ppat_var "args" (lambda/simplif.ml[409,15633+35]..[409,15633+39])
                                    ]
                              expression (lambda/simplif.ml[410,15677+6]..[419,16022+9])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lambda/simplif.ml[410,15677+10]..[410,15677+16])
                                      Ppat_var "no_opt" (lambda/simplif.ml[410,15677+10]..[410,15677+16])
                                    expression (lambda/simplif.ml[410,15677+17]..[410,15677+60]) ghost
                                      Pexp_fun
                                      Nolabel
                                      None
                                      pattern (lambda/simplif.ml[410,15677+17]..[410,15677+19])
                                        Ppat_construct "()" (lambda/simplif.ml[410,15677+17]..[410,15677+19])
                                        None
                                      expression (lambda/simplif.ml[410,15677+22]..[410,15677+60])
                                        Pexp_sequence
                                        expression (lambda/simplif.ml[410,15677+22]..[410,15677+33])
                                          Pexp_apply
                                          expression (lambda/simplif.ml[410,15677+22]..[410,15677+27])
                                            Pexp_ident "count" (lambda/simplif.ml[410,15677+22]..[410,15677+27])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[410,15677+28]..[410,15677+30])
                                                Pexp_ident "bv" (lambda/simplif.ml[410,15677+28]..[410,15677+30])
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[410,15677+31]..[410,15677+33])
                                                Pexp_ident "ll" (lambda/simplif.ml[410,15677+31]..[410,15677+33])
                                          ]
                                        expression (lambda/simplif.ml[410,15677+35]..[410,15677+60])
                                          Pexp_apply
                                          expression (lambda/simplif.ml[410,15677+35]..[410,15677+44])
                                            Pexp_ident "List.iter" (lambda/simplif.ml[410,15677+35]..[410,15677+44])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[410,15677+45]..[410,15677+55])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[410,15677+46]..[410,15677+51])
                                                  Pexp_ident "count" (lambda/simplif.ml[410,15677+46]..[410,15677+51])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[410,15677+52]..[410,15677+54])
                                                      Pexp_ident "bv" (lambda/simplif.ml[410,15677+52]..[410,15677+54])
                                                ]
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[410,15677+56]..[410,15677+60])
                                                Pexp_ident "args" (lambda/simplif.ml[410,15677+56]..[410,15677+60])
                                          ]
                                ]
                                expression (lambda/simplif.ml[411,15741+6]..[419,16022+9])
                                  Pexp_match
                                  expression (lambda/simplif.ml[411,15741+18]..[411,15741+20])
                                    Pexp_ident "ll" (lambda/simplif.ml[411,15741+18]..[411,15741+20])
                                  [
                                    <case>
                                      pattern (lambda/simplif.ml[412,15767+8]..[412,15767+20])
                                        Ppat_construct "Lfunction" (lambda/simplif.ml[412,15767+8]..[412,15767+17])
                                        Some
                                          []
                                          pattern (lambda/simplif.ml[412,15767+18]..[412,15767+20])
                                            Ppat_var "lf" (lambda/simplif.ml[412,15767+18]..[412,15767+20])
                                      <when>
                                        expression (lambda/simplif.ml[412,15767+26]..[412,15767+34])
                                          Pexp_ident "optimize" (lambda/simplif.ml[412,15767+26]..[412,15767+34])
                                      expression (lambda/simplif.ml[413,15805+10]..[417,15985+13])
                                        Pexp_match
                                        expression (lambda/simplif.ml[413,15805+22]..[413,15805+47])
                                          Pexp_apply
                                          expression (lambda/simplif.ml[413,15805+22]..[413,15805+39])
                                            Pexp_ident "exact_application" (lambda/simplif.ml[413,15805+22]..[413,15805+39])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[413,15805+40]..[413,15805+42])
                                                Pexp_ident "lf" (lambda/simplif.ml[413,15805+40]..[413,15805+42])
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[413,15805+43]..[413,15805+47])
                                                Pexp_ident "args" (lambda/simplif.ml[413,15805+43]..[413,15805+47])
                                          ]
                                        [
                                          <case>
                                            pattern (lambda/simplif.ml[414,15858+12]..[414,15858+16])
                                              Ppat_construct "None" (lambda/simplif.ml[414,15858+12]..[414,15858+16])
                                              None
                                            expression (lambda/simplif.ml[414,15858+20]..[414,15858+29])
                                              Pexp_apply
                                              expression (lambda/simplif.ml[414,15858+20]..[414,15858+26])
                                                Pexp_ident "no_opt" (lambda/simplif.ml[414,15858+20]..[414,15858+26])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[414,15858+27]..[414,15858+29])
                                                    Pexp_construct "()" (lambda/simplif.ml[414,15858+27]..[414,15858+29])
                                                    None
                                              ]
                                          <case>
                                            pattern (lambda/simplif.ml[415,15888+12]..[415,15888+27])
                                              Ppat_construct "Some" (lambda/simplif.ml[415,15888+12]..[415,15888+16])
                                              Some
                                                []
                                                pattern (lambda/simplif.ml[415,15888+17]..[415,15888+27])
                                                  Ppat_var "exact_args" (lambda/simplif.ml[415,15888+17]..[415,15888+27])
                                            expression (lambda/simplif.ml[416,15919+14]..[416,15919+65])
                                              Pexp_apply
                                              expression (lambda/simplif.ml[416,15919+14]..[416,15919+19])
                                                Pexp_ident "count" (lambda/simplif.ml[416,15919+14]..[416,15919+19])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[416,15919+20]..[416,15919+22])
                                                    Pexp_ident "bv" (lambda/simplif.ml[416,15919+20]..[416,15919+22])
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[416,15919+23]..[416,15919+65])
                                                    Pexp_apply
                                                    expression (lambda/simplif.ml[416,15919+24]..[416,15919+35])
                                                      Pexp_ident "beta_reduce" (lambda/simplif.ml[416,15919+24]..[416,15919+35])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (lambda/simplif.ml[416,15919+36]..[416,15919+45])
                                                          Pexp_field
                                                          expression (lambda/simplif.ml[416,15919+36]..[416,15919+38])
                                                            Pexp_ident "lf" (lambda/simplif.ml[416,15919+36]..[416,15919+38])
                                                          "params" (lambda/simplif.ml[416,15919+39]..[416,15919+45])
                                                      <arg>
                                                      Nolabel
                                                        expression (lambda/simplif.ml[416,15919+46]..[416,15919+53])
                                                          Pexp_field
                                                          expression (lambda/simplif.ml[416,15919+46]..[416,15919+48])
                                                            Pexp_ident "lf" (lambda/simplif.ml[416,15919+46]..[416,15919+48])
                                                          "body" (lambda/simplif.ml[416,15919+49]..[416,15919+53])
                                                      <arg>
                                                      Nolabel
                                                        expression (lambda/simplif.ml[416,15919+54]..[416,15919+64])
                                                          Pexp_ident "exact_args" (lambda/simplif.ml[416,15919+54]..[416,15919+64])
                                                    ]
                                              ]
                                        ]
                                    <case>
                                      pattern (lambda/simplif.ml[418,15999+8]..[418,15999+9])
                                        Ppat_any
                                      expression (lambda/simplif.ml[418,15999+13]..[418,15999+22])
                                        Pexp_apply
                                        expression (lambda/simplif.ml[418,15999+13]..[418,15999+19])
                                          Pexp_ident "no_opt" (lambda/simplif.ml[418,15999+13]..[418,15999+19])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lambda/simplif.ml[418,15999+20]..[418,15999+22])
                                              Pexp_construct "()" (lambda/simplif.ml[418,15999+20]..[418,15999+22])
                                              None
                                        ]
                                  ]
                            <case>
                              pattern (lambda/simplif.ml[420,16032+4]..[420,16032+20])
                                Ppat_construct "Lfunction" (lambda/simplif.ml[420,16032+4]..[420,16032+13])
                                Some
                                  []
                                  pattern (lambda/simplif.ml[420,16032+14]..[420,16032+20])
                                    Ppat_record Closed
                                    [
                                      "body" (lambda/simplif.ml[420,16032+15]..[420,16032+19]) ghost
                                        pattern (lambda/simplif.ml[420,16032+15]..[420,16032+19])
                                          Ppat_var "body" (lambda/simplif.ml[420,16032+15]..[420,16032+19])
                                    ]
                              expression (lambda/simplif.ml[421,16056+6]..[421,16056+32])
                                Pexp_apply
                                expression (lambda/simplif.ml[421,16056+6]..[421,16056+11])
                                  Pexp_ident "count" (lambda/simplif.ml[421,16056+6]..[421,16056+11])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[421,16056+12]..[421,16056+27])
                                      Pexp_ident "Ident.Map.empty" (lambda/simplif.ml[421,16056+12]..[421,16056+27])
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[421,16056+28]..[421,16056+32])
                                      Pexp_ident "body" (lambda/simplif.ml[421,16056+28]..[421,16056+32])
                                ]
                            <case>
                              pattern (lambda/simplif.ml[422,16089+4]..[422,16089+33])
                                Ppat_construct "Llet" (lambda/simplif.ml[422,16089+4]..[422,16089+8])
                                Some
                                  []
                                  pattern (lambda/simplif.ml[422,16089+8]..[422,16089+33])
                                    Ppat_tuple
                                    [
                                      pattern (lambda/simplif.ml[422,16089+9]..[422,16089+13])
                                        Ppat_var "_str" (lambda/simplif.ml[422,16089+9]..[422,16089+13])
                                      pattern (lambda/simplif.ml[422,16089+15]..[422,16089+17])
                                        Ppat_var "_k" (lambda/simplif.ml[422,16089+15]..[422,16089+17])
                                      pattern (lambda/simplif.ml[422,16089+19]..[422,16089+20])
                                        Ppat_var "v" (lambda/simplif.ml[422,16089+19]..[422,16089+20])
                                      pattern (lambda/simplif.ml[422,16089+22]..[422,16089+28])
                                        Ppat_construct "Lvar" (lambda/simplif.ml[422,16089+22]..[422,16089+26])
                                        Some
                                          []
                                          pattern (lambda/simplif.ml[422,16089+27]..[422,16089+28])
                                            Ppat_var "w" (lambda/simplif.ml[422,16089+27]..[422,16089+28])
                                      pattern (lambda/simplif.ml[422,16089+30]..[422,16089+32])
                                        Ppat_var "l2" (lambda/simplif.ml[422,16089+30]..[422,16089+32])
                                    ]
                              <when>
                                expression (lambda/simplif.ml[422,16089+39]..[422,16089+47])
                                  Pexp_ident "optimize" (lambda/simplif.ml[422,16089+39]..[422,16089+47])
                              expression (lambda/simplif.ml[425,16245+6]..[426,16277+32])
                                Pexp_sequence
                                expression (lambda/simplif.ml[425,16245+6]..[425,16245+30])
                                  Pexp_apply
                                  expression (lambda/simplif.ml[425,16245+6]..[425,16245+11])
                                    Pexp_ident "count" (lambda/simplif.ml[425,16245+6]..[425,16245+11])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[425,16245+12]..[425,16245+27])
                                        Pexp_apply
                                        expression (lambda/simplif.ml[425,16245+13]..[425,16245+21])
                                          Pexp_ident "bind_var" (lambda/simplif.ml[425,16245+13]..[425,16245+21])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lambda/simplif.ml[425,16245+22]..[425,16245+24])
                                              Pexp_ident "bv" (lambda/simplif.ml[425,16245+22]..[425,16245+24])
                                          <arg>
                                          Nolabel
                                            expression (lambda/simplif.ml[425,16245+25]..[425,16245+26])
                                              Pexp_ident "v" (lambda/simplif.ml[425,16245+25]..[425,16245+26])
                                        ]
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[425,16245+28]..[425,16245+30])
                                        Pexp_ident "l2" (lambda/simplif.ml[425,16245+28]..[425,16245+30])
                                  ]
                                expression (lambda/simplif.ml[426,16277+6]..[426,16277+32])
                                  Pexp_apply
                                  expression (lambda/simplif.ml[426,16277+6]..[426,16277+13])
                                    Pexp_ident "use_var" (lambda/simplif.ml[426,16277+6]..[426,16277+13])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[426,16277+14]..[426,16277+16])
                                        Pexp_ident "bv" (lambda/simplif.ml[426,16277+14]..[426,16277+16])
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[426,16277+17]..[426,16277+18])
                                        Pexp_ident "w" (lambda/simplif.ml[426,16277+17]..[426,16277+18])
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[426,16277+19]..[426,16277+32])
                                        Pexp_apply
                                        expression (lambda/simplif.ml[426,16277+20]..[426,16277+29])
                                          Pexp_ident "count_var" (lambda/simplif.ml[426,16277+20]..[426,16277+29])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lambda/simplif.ml[426,16277+30]..[426,16277+31])
                                              Pexp_ident "v" (lambda/simplif.ml[426,16277+30]..[426,16277+31])
                                        ]
                                  ]
                            <case>
                              pattern (lambda/simplif.ml[427,16310+4]..[427,16310+31])
                                Ppat_construct "Llet" (lambda/simplif.ml[427,16310+4]..[427,16310+8])
                                Some
                                  []
                                  pattern (lambda/simplif.ml[427,16310+8]..[427,16310+31])
                                    Ppat_tuple
                                    [
                                      pattern (lambda/simplif.ml[427,16310+9]..[427,16310+12])
                                        Ppat_var "str" (lambda/simplif.ml[427,16310+9]..[427,16310+12])
                                      pattern (lambda/simplif.ml[427,16310+14]..[427,16310+19])
                                        Ppat_var "_kind" (lambda/simplif.ml[427,16310+14]..[427,16310+19])
                                      pattern (lambda/simplif.ml[427,16310+21]..[427,16310+22])
                                        Ppat_var "v" (lambda/simplif.ml[427,16310+21]..[427,16310+22])
                                      pattern (lambda/simplif.ml[427,16310+24]..[427,16310+26])
                                        Ppat_var "l1" (lambda/simplif.ml[427,16310+24]..[427,16310+26])
                                      pattern (lambda/simplif.ml[427,16310+28]..[427,16310+30])
                                        Ppat_var "l2" (lambda/simplif.ml[427,16310+28]..[427,16310+30])
                                    ]
                              expression (lambda/simplif.ml[428,16345+6]..[430,16454+57])
                                Pexp_sequence
                                expression (lambda/simplif.ml[428,16345+6]..[428,16345+30])
                                  Pexp_apply
                                  expression (lambda/simplif.ml[428,16345+6]..[428,16345+11])
                                    Pexp_ident "count" (lambda/simplif.ml[428,16345+6]..[428,16345+11])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[428,16345+12]..[428,16345+27])
                                        Pexp_apply
                                        expression (lambda/simplif.ml[428,16345+13]..[428,16345+21])
                                          Pexp_ident "bind_var" (lambda/simplif.ml[428,16345+13]..[428,16345+21])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lambda/simplif.ml[428,16345+22]..[428,16345+24])
                                              Pexp_ident "bv" (lambda/simplif.ml[428,16345+22]..[428,16345+24])
                                          <arg>
                                          Nolabel
                                            expression (lambda/simplif.ml[428,16345+25]..[428,16345+26])
                                              Pexp_ident "v" (lambda/simplif.ml[428,16345+25]..[428,16345+26])
                                        ]
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[428,16345+28]..[428,16345+30])
                                        Pexp_ident "l2" (lambda/simplif.ml[428,16345+28]..[428,16345+30])
                                  ]
                                expression (lambda/simplif.ml[430,16454+6]..[430,16454+57])
                                  Pexp_ifthenelse
                                  expression (lambda/simplif.ml[430,16454+9]..[430,16454+40])
                                    Pexp_apply
                                    expression (lambda/simplif.ml[430,16454+22]..[430,16454+24])
                                      Pexp_ident "||" (lambda/simplif.ml[430,16454+22]..[430,16454+24])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lambda/simplif.ml[430,16454+9]..[430,16454+21])
                                          Pexp_apply
                                          expression (lambda/simplif.ml[430,16454+13]..[430,16454+14])
                                            Pexp_ident "=" (lambda/simplif.ml[430,16454+13]..[430,16454+14])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[430,16454+9]..[430,16454+12])
                                                Pexp_ident "str" (lambda/simplif.ml[430,16454+9]..[430,16454+12])
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[430,16454+15]..[430,16454+21])
                                                Pexp_construct "Strict" (lambda/simplif.ml[430,16454+15]..[430,16454+21])
                                                None
                                          ]
                                      <arg>
                                      Nolabel
                                        expression (lambda/simplif.ml[430,16454+25]..[430,16454+40])
                                          Pexp_apply
                                          expression (lambda/simplif.ml[430,16454+37]..[430,16454+38])
                                            Pexp_ident ">" (lambda/simplif.ml[430,16454+37]..[430,16454+38])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[430,16454+25]..[430,16454+36])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[430,16454+25]..[430,16454+34])
                                                  Pexp_ident "count_var" (lambda/simplif.ml[430,16454+25]..[430,16454+34])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[430,16454+35]..[430,16454+36])
                                                      Pexp_ident "v" (lambda/simplif.ml[430,16454+35]..[430,16454+36])
                                                ]
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[430,16454+39]..[430,16454+40])
                                                Pexp_constant PConst_int (0,None)
                                          ]
                                    ]
                                  expression (lambda/simplif.ml[430,16454+46]..[430,16454+57])
                                    Pexp_apply
                                    expression (lambda/simplif.ml[430,16454+46]..[430,16454+51])
                                      Pexp_ident "count" (lambda/simplif.ml[430,16454+46]..[430,16454+51])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lambda/simplif.ml[430,16454+52]..[430,16454+54])
                                          Pexp_ident "bv" (lambda/simplif.ml[430,16454+52]..[430,16454+54])
                                      <arg>
                                      Nolabel
                                        expression (lambda/simplif.ml[430,16454+55]..[430,16454+57])
                                          Pexp_ident "l1" (lambda/simplif.ml[430,16454+55]..[430,16454+57])
                                    ]
                                  None
                            <case>
                              pattern (lambda/simplif.ml[431,16512+4]..[431,16512+30])
                                Ppat_construct "Lmutlet" (lambda/simplif.ml[431,16512+4]..[431,16512+11])
                                Some
                                  []
                                  pattern (lambda/simplif.ml[431,16512+11]..[431,16512+30])
                                    Ppat_tuple
                                    [
                                      pattern (lambda/simplif.ml[431,16512+12]..[431,16512+17])
                                        Ppat_var "_kind" (lambda/simplif.ml[431,16512+12]..[431,16512+17])
                                      pattern (lambda/simplif.ml[431,16512+19]..[431,16512+21])
                                        Ppat_var "_v" (lambda/simplif.ml[431,16512+19]..[431,16512+21])
                                      pattern (lambda/simplif.ml[431,16512+23]..[431,16512+25])
                                        Ppat_var "l1" (lambda/simplif.ml[431,16512+23]..[431,16512+25])
                                      pattern (lambda/simplif.ml[431,16512+27]..[431,16512+29])
                                        Ppat_var "l2" (lambda/simplif.ml[431,16512+27]..[431,16512+29])
                                    ]
                              expression (lambda/simplif.ml[432,16546+5]..[433,16564+16])
                                Pexp_sequence
                                expression (lambda/simplif.ml[432,16546+5]..[432,16546+16])
                                  Pexp_apply
                                  expression (lambda/simplif.ml[432,16546+5]..[432,16546+10])
                                    Pexp_ident "count" (lambda/simplif.ml[432,16546+5]..[432,16546+10])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[432,16546+11]..[432,16546+13])
                                        Pexp_ident "bv" (lambda/simplif.ml[432,16546+11]..[432,16546+13])
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[432,16546+14]..[432,16546+16])
                                        Pexp_ident "l1" (lambda/simplif.ml[432,16546+14]..[432,16546+16])
                                  ]
                                expression (lambda/simplif.ml[433,16564+5]..[433,16564+16])
                                  Pexp_apply
                                  expression (lambda/simplif.ml[433,16564+5]..[433,16564+10])
                                    Pexp_ident "count" (lambda/simplif.ml[433,16564+5]..[433,16564+10])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[433,16564+11]..[433,16564+13])
                                        Pexp_ident "bv" (lambda/simplif.ml[433,16564+11]..[433,16564+13])
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[433,16564+14]..[433,16564+16])
                                        Pexp_ident "l2" (lambda/simplif.ml[433,16564+14]..[433,16564+16])
                                  ]
                            <case>
                              pattern (lambda/simplif.ml[434,16581+4]..[434,16581+27])
                                Ppat_construct "Lletrec" (lambda/simplif.ml[434,16581+4]..[434,16581+11])
                                Some
                                  []
                                  pattern (lambda/simplif.ml[434,16581+11]..[434,16581+27])
                                    Ppat_tuple
                                    [
                                      pattern (lambda/simplif.ml[434,16581+12]..[434,16581+20])
                                        Ppat_var "bindings" (lambda/simplif.ml[434,16581+12]..[434,16581+20])
                                      pattern (lambda/simplif.ml[434,16581+22]..[434,16581+26])
                                        Ppat_var "body" (lambda/simplif.ml[434,16581+22]..[434,16581+26])
                                    ]
                              expression (lambda/simplif.ml[435,16612+6]..[436,16666+19])
                                Pexp_sequence
                                expression (lambda/simplif.ml[435,16612+6]..[435,16612+52])
                                  Pexp_apply
                                  expression (lambda/simplif.ml[435,16612+6]..[435,16612+15])
                                    Pexp_ident "List.iter" (lambda/simplif.ml[435,16612+6]..[435,16612+15])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[435,16612+16]..[435,16612+43])
                                        Pexp_fun
                                        Nolabel
                                        None
                                        pattern (lambda/simplif.ml[435,16612+21]..[435,16612+28])
                                          Ppat_tuple
                                          [
                                            pattern (lambda/simplif.ml[435,16612+22]..[435,16612+24])
                                              Ppat_var "_v" (lambda/simplif.ml[435,16612+22]..[435,16612+24])
                                            pattern (lambda/simplif.ml[435,16612+26]..[435,16612+27])
                                              Ppat_var "l" (lambda/simplif.ml[435,16612+26]..[435,16612+27])
                                          ]
                                        expression (lambda/simplif.ml[435,16612+32]..[435,16612+42])
                                          Pexp_apply
                                          expression (lambda/simplif.ml[435,16612+32]..[435,16612+37])
                                            Pexp_ident "count" (lambda/simplif.ml[435,16612+32]..[435,16612+37])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[435,16612+38]..[435,16612+40])
                                                Pexp_ident "bv" (lambda/simplif.ml[435,16612+38]..[435,16612+40])
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[435,16612+41]..[435,16612+42])
                                                Pexp_ident "l" (lambda/simplif.ml[435,16612+41]..[435,16612+42])
                                          ]
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[435,16612+44]..[435,16612+52])
                                        Pexp_ident "bindings" (lambda/simplif.ml[435,16612+44]..[435,16612+52])
                                  ]
                                expression (lambda/simplif.ml[436,16666+6]..[436,16666+19])
                                  Pexp_apply
                                  expression (lambda/simplif.ml[436,16666+6]..[436,16666+11])
                                    Pexp_ident "count" (lambda/simplif.ml[436,16666+6]..[436,16666+11])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[436,16666+12]..[436,16666+14])
                                        Pexp_ident "bv" (lambda/simplif.ml[436,16666+12]..[436,16666+14])
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[436,16666+15]..[436,16666+19])
                                        Pexp_ident "body" (lambda/simplif.ml[436,16666+15]..[436,16666+19])
                                  ]
                            <case>
                              pattern (lambda/simplif.ml[437,16686+4]..[437,16686+20])
                                Ppat_construct "Lprim" (lambda/simplif.ml[437,16686+4]..[437,16686+9])
                                Some
                                  []
                                  pattern (lambda/simplif.ml[437,16686+9]..[437,16686+20])
                                    Ppat_tuple
                                    [
                                      pattern (lambda/simplif.ml[437,16686+10]..[437,16686+12])
                                        Ppat_var "_p" (lambda/simplif.ml[437,16686+10]..[437,16686+12])
                                      pattern (lambda/simplif.ml[437,16686+14]..[437,16686+16])
                                        Ppat_var "ll" (lambda/simplif.ml[437,16686+14]..[437,16686+16])
                                      pattern (lambda/simplif.ml[437,16686+18]..[437,16686+19])
                                        Ppat_any
                                    ]
                              expression (lambda/simplif.ml[437,16686+24]..[437,16686+47])
                                Pexp_apply
                                expression (lambda/simplif.ml[437,16686+24]..[437,16686+33])
                                  Pexp_ident "List.iter" (lambda/simplif.ml[437,16686+24]..[437,16686+33])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[437,16686+34]..[437,16686+44])
                                      Pexp_apply
                                      expression (lambda/simplif.ml[437,16686+35]..[437,16686+40])
                                        Pexp_ident "count" (lambda/simplif.ml[437,16686+35]..[437,16686+40])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lambda/simplif.ml[437,16686+41]..[437,16686+43])
                                            Pexp_ident "bv" (lambda/simplif.ml[437,16686+41]..[437,16686+43])
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[437,16686+45]..[437,16686+47])
                                      Pexp_ident "ll" (lambda/simplif.ml[437,16686+45]..[437,16686+47])
                                ]
                            <case>
                              pattern (lambda/simplif.ml[438,16734+4]..[438,16734+24])
                                Ppat_construct "Lswitch" (lambda/simplif.ml[438,16734+4]..[438,16734+11])
                                Some
                                  []
                                  pattern (lambda/simplif.ml[438,16734+11]..[438,16734+24])
                                    Ppat_tuple
                                    [
                                      pattern (lambda/simplif.ml[438,16734+12]..[438,16734+13])
                                        Ppat_var "l" (lambda/simplif.ml[438,16734+12]..[438,16734+13])
                                      pattern (lambda/simplif.ml[438,16734+15]..[438,16734+17])
                                        Ppat_var "sw" (lambda/simplif.ml[438,16734+15]..[438,16734+17])
                                      pattern (lambda/simplif.ml[438,16734+19]..[438,16734+23])
                                        Ppat_var "_loc" (lambda/simplif.ml[438,16734+19]..[438,16734+23])
                                    ]
                              expression (lambda/simplif.ml[439,16762+6]..[442,16865+55])
                                Pexp_sequence
                                expression (lambda/simplif.ml[439,16762+6]..[439,16762+25])
                                  Pexp_apply
                                  expression (lambda/simplif.ml[439,16762+6]..[439,16762+19])
                                    Pexp_ident "count_default" (lambda/simplif.ml[439,16762+6]..[439,16762+19])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[439,16762+20]..[439,16762+22])
                                        Pexp_ident "bv" (lambda/simplif.ml[439,16762+20]..[439,16762+22])
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[439,16762+23]..[439,16762+25])
                                        Pexp_ident "sw" (lambda/simplif.ml[439,16762+23]..[439,16762+25])
                                  ]
                                expression (lambda/simplif.ml[440,16790+6]..[442,16865+55])
                                  Pexp_sequence
                                  expression (lambda/simplif.ml[440,16790+6]..[440,16790+16])
                                    Pexp_apply
                                    expression (lambda/simplif.ml[440,16790+6]..[440,16790+11])
                                      Pexp_ident "count" (lambda/simplif.ml[440,16790+6]..[440,16790+11])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lambda/simplif.ml[440,16790+12]..[440,16790+14])
                                          Pexp_ident "bv" (lambda/simplif.ml[440,16790+12]..[440,16790+14])
                                      <arg>
                                      Nolabel
                                        expression (lambda/simplif.ml[440,16790+15]..[440,16790+16])
                                          Pexp_ident "l" (lambda/simplif.ml[440,16790+15]..[440,16790+16])
                                    ]
                                  expression (lambda/simplif.ml[441,16808+6]..[442,16865+55])
                                    Pexp_sequence
                                    expression (lambda/simplif.ml[441,16808+6]..[441,16808+55])
                                      Pexp_apply
                                      expression (lambda/simplif.ml[441,16808+6]..[441,16808+15])
                                        Pexp_ident "List.iter" (lambda/simplif.ml[441,16808+6]..[441,16808+15])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lambda/simplif.ml[441,16808+16]..[441,16808+42])
                                            Pexp_fun
                                            Nolabel
                                            None
                                            pattern (lambda/simplif.ml[441,16808+21]..[441,16808+27])
                                              Ppat_tuple
                                              [
                                                pattern (lambda/simplif.ml[441,16808+22]..[441,16808+23])
                                                  Ppat_any
                                                pattern (lambda/simplif.ml[441,16808+25]..[441,16808+26])
                                                  Ppat_var "l" (lambda/simplif.ml[441,16808+25]..[441,16808+26])
                                              ]
                                            expression (lambda/simplif.ml[441,16808+31]..[441,16808+41])
                                              Pexp_apply
                                              expression (lambda/simplif.ml[441,16808+31]..[441,16808+36])
                                                Pexp_ident "count" (lambda/simplif.ml[441,16808+31]..[441,16808+36])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[441,16808+37]..[441,16808+39])
                                                    Pexp_ident "bv" (lambda/simplif.ml[441,16808+37]..[441,16808+39])
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[441,16808+40]..[441,16808+41])
                                                    Pexp_ident "l" (lambda/simplif.ml[441,16808+40]..[441,16808+41])
                                              ]
                                        <arg>
                                        Nolabel
                                          expression (lambda/simplif.ml[441,16808+43]..[441,16808+55])
                                            Pexp_field
                                            expression (lambda/simplif.ml[441,16808+43]..[441,16808+45])
                                              Pexp_ident "sw" (lambda/simplif.ml[441,16808+43]..[441,16808+45])
                                            "sw_consts" (lambda/simplif.ml[441,16808+46]..[441,16808+55])
                                      ]
                                    expression (lambda/simplif.ml[442,16865+6]..[442,16865+55])
                                      Pexp_apply
                                      expression (lambda/simplif.ml[442,16865+6]..[442,16865+15])
                                        Pexp_ident "List.iter" (lambda/simplif.ml[442,16865+6]..[442,16865+15])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lambda/simplif.ml[442,16865+16]..[442,16865+42])
                                            Pexp_fun
                                            Nolabel
                                            None
                                            pattern (lambda/simplif.ml[442,16865+21]..[442,16865+27])
                                              Ppat_tuple
                                              [
                                                pattern (lambda/simplif.ml[442,16865+22]..[442,16865+23])
                                                  Ppat_any
                                                pattern (lambda/simplif.ml[442,16865+25]..[442,16865+26])
                                                  Ppat_var "l" (lambda/simplif.ml[442,16865+25]..[442,16865+26])
                                              ]
                                            expression (lambda/simplif.ml[442,16865+31]..[442,16865+41])
                                              Pexp_apply
                                              expression (lambda/simplif.ml[442,16865+31]..[442,16865+36])
                                                Pexp_ident "count" (lambda/simplif.ml[442,16865+31]..[442,16865+36])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[442,16865+37]..[442,16865+39])
                                                    Pexp_ident "bv" (lambda/simplif.ml[442,16865+37]..[442,16865+39])
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[442,16865+40]..[442,16865+41])
                                                    Pexp_ident "l" (lambda/simplif.ml[442,16865+40]..[442,16865+41])
                                              ]
                                        <arg>
                                        Nolabel
                                          expression (lambda/simplif.ml[442,16865+43]..[442,16865+55])
                                            Pexp_field
                                            expression (lambda/simplif.ml[442,16865+43]..[442,16865+45])
                                              Pexp_ident "sw" (lambda/simplif.ml[442,16865+43]..[442,16865+45])
                                            "sw_blocks" (lambda/simplif.ml[442,16865+46]..[442,16865+55])
                                      ]
                            <case>
                              pattern (lambda/simplif.ml[443,16921+4]..[443,16921+30])
                                Ppat_construct "Lstringswitch" (lambda/simplif.ml[443,16921+4]..[443,16921+17])
                                Some
                                  []
                                  pattern (lambda/simplif.ml[443,16921+17]..[443,16921+30])
                                    Ppat_tuple
                                    [
                                      pattern (lambda/simplif.ml[443,16921+18]..[443,16921+19])
                                        Ppat_var "l" (lambda/simplif.ml[443,16921+18]..[443,16921+19])
                                      pattern (lambda/simplif.ml[443,16921+21]..[443,16921+23])
                                        Ppat_var "sw" (lambda/simplif.ml[443,16921+21]..[443,16921+23])
                                      pattern (lambda/simplif.ml[443,16921+25]..[443,16921+26])
                                        Ppat_var "d" (lambda/simplif.ml[443,16921+25]..[443,16921+26])
                                      pattern (lambda/simplif.ml[443,16921+28]..[443,16921+29])
                                        Ppat_any
                                    ]
                              expression (lambda/simplif.ml[444,16955+6]..[453,17202+9])
                                Pexp_sequence
                                expression (lambda/simplif.ml[444,16955+6]..[444,16955+16])
                                  Pexp_apply
                                  expression (lambda/simplif.ml[444,16955+6]..[444,16955+11])
                                    Pexp_ident "count" (lambda/simplif.ml[444,16955+6]..[444,16955+11])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[444,16955+12]..[444,16955+14])
                                        Pexp_ident "bv" (lambda/simplif.ml[444,16955+12]..[444,16955+14])
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[444,16955+15]..[444,16955+16])
                                        Pexp_ident "l" (lambda/simplif.ml[444,16955+15]..[444,16955+16])
                                  ]
                                expression (lambda/simplif.ml[445,16974+6]..[453,17202+9])
                                  Pexp_sequence
                                  expression (lambda/simplif.ml[445,16974+6]..[445,16974+45])
                                    Pexp_apply
                                    expression (lambda/simplif.ml[445,16974+6]..[445,16974+15])
                                      Pexp_ident "List.iter" (lambda/simplif.ml[445,16974+6]..[445,16974+15])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lambda/simplif.ml[445,16974+16]..[445,16974+42])
                                          Pexp_fun
                                          Nolabel
                                          None
                                          pattern (lambda/simplif.ml[445,16974+21]..[445,16974+27])
                                            Ppat_tuple
                                            [
                                              pattern (lambda/simplif.ml[445,16974+22]..[445,16974+23])
                                                Ppat_any
                                              pattern (lambda/simplif.ml[445,16974+25]..[445,16974+26])
                                                Ppat_var "l" (lambda/simplif.ml[445,16974+25]..[445,16974+26])
                                            ]
                                          expression (lambda/simplif.ml[445,16974+31]..[445,16974+41])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[445,16974+31]..[445,16974+36])
                                              Pexp_ident "count" (lambda/simplif.ml[445,16974+31]..[445,16974+36])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[445,16974+37]..[445,16974+39])
                                                  Pexp_ident "bv" (lambda/simplif.ml[445,16974+37]..[445,16974+39])
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[445,16974+40]..[445,16974+41])
                                                  Pexp_ident "l" (lambda/simplif.ml[445,16974+40]..[445,16974+41])
                                            ]
                                      <arg>
                                      Nolabel
                                        expression (lambda/simplif.ml[445,16974+43]..[445,16974+45])
                                          Pexp_ident "sw" (lambda/simplif.ml[445,16974+43]..[445,16974+45])
                                    ]
                                  expression (lambda/simplif.ml[446,17022+6]..[453,17202+9])
                                    Pexp_match
                                    expression (lambda/simplif.ml[446,17022+18]..[446,17022+19])
                                      Pexp_ident "d" (lambda/simplif.ml[446,17022+18]..[446,17022+19])
                                    [
                                      <case>
                                        pattern (lambda/simplif.ml[447,17047+8]..[447,17047+14])
                                          Ppat_construct "Some" (lambda/simplif.ml[447,17047+8]..[447,17047+12])
                                          Some
                                            []
                                            pattern (lambda/simplif.ml[447,17047+13]..[447,17047+14])
                                              Ppat_var "d" (lambda/simplif.ml[447,17047+13]..[447,17047+14])
                                        expression (lambda/simplif.ml[448,17065+10]..[451,17169+13])
                                          Pexp_match
                                          expression (lambda/simplif.ml[448,17065+22]..[448,17065+24])
                                            Pexp_ident "sw" (lambda/simplif.ml[448,17065+22]..[448,17065+24])
                                          [
                                            <case>
                                              pattern (lambda/simplif.ml[449,17095+12]..[449,17095+18])
                                                Ppat_or
                                                pattern (lambda/simplif.ml[449,17095+12]..[449,17095+14])
                                                  Ppat_construct "[]" (lambda/simplif.ml[449,17095+12]..[449,17095+14])
                                                  None
                                                pattern (lambda/simplif.ml[449,17095+15]..[449,17095+18])
                                                  Ppat_construct "::" (lambda/simplif.ml[449,17095+16]..[449,17095+18]) ghost
                                                  Some
                                                    []
                                                    pattern (lambda/simplif.ml[449,17095+16]..[449,17095+18]) ghost
                                                      Ppat_tuple
                                                      [
                                                        pattern (lambda/simplif.ml[449,17095+16]..[449,17095+17])
                                                          Ppat_any
                                                        pattern (lambda/simplif.ml[449,17095+17]..[449,17095+18]) ghost
                                                          Ppat_construct "[]" (lambda/simplif.ml[449,17095+17]..[449,17095+18]) ghost
                                                          None
                                                      ]
                                              expression (lambda/simplif.ml[449,17095+22]..[449,17095+32])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[449,17095+22]..[449,17095+27])
                                                  Pexp_ident "count" (lambda/simplif.ml[449,17095+22]..[449,17095+27])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[449,17095+28]..[449,17095+30])
                                                      Pexp_ident "bv" (lambda/simplif.ml[449,17095+28]..[449,17095+30])
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[449,17095+31]..[449,17095+32])
                                                      Pexp_ident "d" (lambda/simplif.ml[449,17095+31]..[449,17095+32])
                                                ]
                                            <case>
                                              pattern (lambda/simplif.ml[450,17128+12]..[450,17128+13])
                                                Ppat_any
                                              expression (lambda/simplif.ml[450,17128+17]..[450,17128+40])
                                                Pexp_sequence
                                                expression (lambda/simplif.ml[450,17128+17]..[450,17128+27])
                                                  Pexp_apply
                                                  expression (lambda/simplif.ml[450,17128+17]..[450,17128+22])
                                                    Pexp_ident "count" (lambda/simplif.ml[450,17128+17]..[450,17128+22])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (lambda/simplif.ml[450,17128+23]..[450,17128+25])
                                                        Pexp_ident "bv" (lambda/simplif.ml[450,17128+23]..[450,17128+25])
                                                    <arg>
                                                    Nolabel
                                                      expression (lambda/simplif.ml[450,17128+26]..[450,17128+27])
                                                        Pexp_ident "d" (lambda/simplif.ml[450,17128+26]..[450,17128+27])
                                                  ]
                                                expression (lambda/simplif.ml[450,17128+30]..[450,17128+40])
                                                  Pexp_apply
                                                  expression (lambda/simplif.ml[450,17128+30]..[450,17128+35])
                                                    Pexp_ident "count" (lambda/simplif.ml[450,17128+30]..[450,17128+35])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (lambda/simplif.ml[450,17128+36]..[450,17128+38])
                                                        Pexp_ident "bv" (lambda/simplif.ml[450,17128+36]..[450,17128+38])
                                                    <arg>
                                                    Nolabel
                                                      expression (lambda/simplif.ml[450,17128+39]..[450,17128+40])
                                                        Pexp_ident "d" (lambda/simplif.ml[450,17128+39]..[450,17128+40])
                                                  ]
                                          ]
                                      <case>
                                        pattern (lambda/simplif.ml[452,17183+8]..[452,17183+12])
                                          Ppat_construct "None" (lambda/simplif.ml[452,17183+8]..[452,17183+12])
                                          None
                                        expression (lambda/simplif.ml[452,17183+16]..[452,17183+18])
                                          Pexp_construct "()" (lambda/simplif.ml[452,17183+16]..[452,17183+18])
                                          None
                                    ]
                            <case>
                              pattern (lambda/simplif.ml[454,17212+4]..[454,17212+24])
                                Ppat_construct "Lstaticraise" (lambda/simplif.ml[454,17212+4]..[454,17212+16])
                                Some
                                  []
                                  pattern (lambda/simplif.ml[454,17212+17]..[454,17212+24])
                                    Ppat_tuple
                                    [
                                      pattern (lambda/simplif.ml[454,17212+18]..[454,17212+20])
                                        Ppat_var "_i" (lambda/simplif.ml[454,17212+18]..[454,17212+20])
                                      pattern (lambda/simplif.ml[454,17212+21]..[454,17212+23])
                                        Ppat_var "ls" (lambda/simplif.ml[454,17212+21]..[454,17212+23])
                                    ]
                              expression (lambda/simplif.ml[454,17212+28]..[454,17212+51])
                                Pexp_apply
                                expression (lambda/simplif.ml[454,17212+28]..[454,17212+37])
                                  Pexp_ident "List.iter" (lambda/simplif.ml[454,17212+28]..[454,17212+37])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[454,17212+38]..[454,17212+48])
                                      Pexp_apply
                                      expression (lambda/simplif.ml[454,17212+39]..[454,17212+44])
                                        Pexp_ident "count" (lambda/simplif.ml[454,17212+39]..[454,17212+44])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lambda/simplif.ml[454,17212+45]..[454,17212+47])
                                            Pexp_ident "bv" (lambda/simplif.ml[454,17212+45]..[454,17212+47])
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[454,17212+49]..[454,17212+51])
                                      Pexp_ident "ls" (lambda/simplif.ml[454,17212+49]..[454,17212+51])
                                ]
                            <case>
                              pattern (lambda/simplif.ml[455,17264+4]..[455,17264+27])
                                Ppat_construct "Lstaticcatch" (lambda/simplif.ml[455,17264+4]..[455,17264+16])
                                Some
                                  []
                                  pattern (lambda/simplif.ml[455,17264+16]..[455,17264+27])
                                    Ppat_tuple
                                    [
                                      pattern (lambda/simplif.ml[455,17264+17]..[455,17264+19])
                                        Ppat_var "l1" (lambda/simplif.ml[455,17264+17]..[455,17264+19])
                                      pattern (lambda/simplif.ml[455,17264+21]..[455,17264+22])
                                        Ppat_any
                                      pattern (lambda/simplif.ml[455,17264+24]..[455,17264+26])
                                        Ppat_var "l2" (lambda/simplif.ml[455,17264+24]..[455,17264+26])
                                    ]
                              expression (lambda/simplif.ml[455,17264+31]..[455,17264+55])
                                Pexp_sequence
                                expression (lambda/simplif.ml[455,17264+31]..[455,17264+42])
                                  Pexp_apply
                                  expression (lambda/simplif.ml[455,17264+31]..[455,17264+36])
                                    Pexp_ident "count" (lambda/simplif.ml[455,17264+31]..[455,17264+36])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[455,17264+37]..[455,17264+39])
                                        Pexp_ident "bv" (lambda/simplif.ml[455,17264+37]..[455,17264+39])
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[455,17264+40]..[455,17264+42])
                                        Pexp_ident "l1" (lambda/simplif.ml[455,17264+40]..[455,17264+42])
                                  ]
                                expression (lambda/simplif.ml[455,17264+44]..[455,17264+55])
                                  Pexp_apply
                                  expression (lambda/simplif.ml[455,17264+44]..[455,17264+49])
                                    Pexp_ident "count" (lambda/simplif.ml[455,17264+44]..[455,17264+49])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[455,17264+50]..[455,17264+52])
                                        Pexp_ident "bv" (lambda/simplif.ml[455,17264+50]..[455,17264+52])
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[455,17264+53]..[455,17264+55])
                                        Pexp_ident "l2" (lambda/simplif.ml[455,17264+53]..[455,17264+55])
                                  ]
                            <case>
                              pattern (lambda/simplif.ml[456,17320+4]..[456,17320+24])
                                Ppat_construct "Ltrywith" (lambda/simplif.ml[456,17320+4]..[456,17320+12])
                                Some
                                  []
                                  pattern (lambda/simplif.ml[456,17320+12]..[456,17320+24])
                                    Ppat_tuple
                                    [
                                      pattern (lambda/simplif.ml[456,17320+13]..[456,17320+15])
                                        Ppat_var "l1" (lambda/simplif.ml[456,17320+13]..[456,17320+15])
                                      pattern (lambda/simplif.ml[456,17320+17]..[456,17320+19])
                                        Ppat_var "_v" (lambda/simplif.ml[456,17320+17]..[456,17320+19])
                                      pattern (lambda/simplif.ml[456,17320+21]..[456,17320+23])
                                        Ppat_var "l2" (lambda/simplif.ml[456,17320+21]..[456,17320+23])
                                    ]
                              expression (lambda/simplif.ml[456,17320+28]..[456,17320+52])
                                Pexp_sequence
                                expression (lambda/simplif.ml[456,17320+28]..[456,17320+39])
                                  Pexp_apply
                                  expression (lambda/simplif.ml[456,17320+28]..[456,17320+33])
                                    Pexp_ident "count" (lambda/simplif.ml[456,17320+28]..[456,17320+33])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[456,17320+34]..[456,17320+36])
                                        Pexp_ident "bv" (lambda/simplif.ml[456,17320+34]..[456,17320+36])
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[456,17320+37]..[456,17320+39])
                                        Pexp_ident "l1" (lambda/simplif.ml[456,17320+37]..[456,17320+39])
                                  ]
                                expression (lambda/simplif.ml[456,17320+41]..[456,17320+52])
                                  Pexp_apply
                                  expression (lambda/simplif.ml[456,17320+41]..[456,17320+46])
                                    Pexp_ident "count" (lambda/simplif.ml[456,17320+41]..[456,17320+46])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[456,17320+47]..[456,17320+49])
                                        Pexp_ident "bv" (lambda/simplif.ml[456,17320+47]..[456,17320+49])
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[456,17320+50]..[456,17320+52])
                                        Pexp_ident "l2" (lambda/simplif.ml[456,17320+50]..[456,17320+52])
                                  ]
                            <case>
                              pattern (lambda/simplif.ml[457,17373+4]..[457,17373+27])
                                Ppat_construct "Lifthenelse" (lambda/simplif.ml[457,17373+4]..[457,17373+15])
                                Some
                                  []
                                  pattern (lambda/simplif.ml[457,17373+15]..[457,17373+27])
                                    Ppat_tuple
                                    [
                                      pattern (lambda/simplif.ml[457,17373+16]..[457,17373+18])
                                        Ppat_var "l1" (lambda/simplif.ml[457,17373+16]..[457,17373+18])
                                      pattern (lambda/simplif.ml[457,17373+20]..[457,17373+22])
                                        Ppat_var "l2" (lambda/simplif.ml[457,17373+20]..[457,17373+22])
                                      pattern (lambda/simplif.ml[457,17373+24]..[457,17373+26])
                                        Ppat_var "l3" (lambda/simplif.ml[457,17373+24]..[457,17373+26])
                                    ]
                              expression (lambda/simplif.ml[457,17373+31]..[457,17373+68])
                                Pexp_sequence
                                expression (lambda/simplif.ml[457,17373+31]..[457,17373+42])
                                  Pexp_apply
                                  expression (lambda/simplif.ml[457,17373+31]..[457,17373+36])
                                    Pexp_ident "count" (lambda/simplif.ml[457,17373+31]..[457,17373+36])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[457,17373+37]..[457,17373+39])
                                        Pexp_ident "bv" (lambda/simplif.ml[457,17373+37]..[457,17373+39])
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[457,17373+40]..[457,17373+42])
                                        Pexp_ident "l1" (lambda/simplif.ml[457,17373+40]..[457,17373+42])
                                  ]
                                expression (lambda/simplif.ml[457,17373+44]..[457,17373+68])
                                  Pexp_sequence
                                  expression (lambda/simplif.ml[457,17373+44]..[457,17373+55])
                                    Pexp_apply
                                    expression (lambda/simplif.ml[457,17373+44]..[457,17373+49])
                                      Pexp_ident "count" (lambda/simplif.ml[457,17373+44]..[457,17373+49])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lambda/simplif.ml[457,17373+50]..[457,17373+52])
                                          Pexp_ident "bv" (lambda/simplif.ml[457,17373+50]..[457,17373+52])
                                      <arg>
                                      Nolabel
                                        expression (lambda/simplif.ml[457,17373+53]..[457,17373+55])
                                          Pexp_ident "l2" (lambda/simplif.ml[457,17373+53]..[457,17373+55])
                                    ]
                                  expression (lambda/simplif.ml[457,17373+57]..[457,17373+68])
                                    Pexp_apply
                                    expression (lambda/simplif.ml[457,17373+57]..[457,17373+62])
                                      Pexp_ident "count" (lambda/simplif.ml[457,17373+57]..[457,17373+62])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lambda/simplif.ml[457,17373+63]..[457,17373+65])
                                          Pexp_ident "bv" (lambda/simplif.ml[457,17373+63]..[457,17373+65])
                                      <arg>
                                      Nolabel
                                        expression (lambda/simplif.ml[457,17373+66]..[457,17373+68])
                                          Pexp_ident "l3" (lambda/simplif.ml[457,17373+66]..[457,17373+68])
                                    ]
                            <case>
                              pattern (lambda/simplif.ml[458,17442+4]..[458,17442+21])
                                Ppat_construct "Lsequence" (lambda/simplif.ml[458,17442+4]..[458,17442+13])
                                Some
                                  []
                                  pattern (lambda/simplif.ml[458,17442+13]..[458,17442+21])
                                    Ppat_tuple
                                    [
                                      pattern (lambda/simplif.ml[458,17442+14]..[458,17442+16])
                                        Ppat_var "l1" (lambda/simplif.ml[458,17442+14]..[458,17442+16])
                                      pattern (lambda/simplif.ml[458,17442+18]..[458,17442+20])
                                        Ppat_var "l2" (lambda/simplif.ml[458,17442+18]..[458,17442+20])
                                    ]
                              expression (lambda/simplif.ml[458,17442+25]..[458,17442+49])
                                Pexp_sequence
                                expression (lambda/simplif.ml[458,17442+25]..[458,17442+36])
                                  Pexp_apply
                                  expression (lambda/simplif.ml[458,17442+25]..[458,17442+30])
                                    Pexp_ident "count" (lambda/simplif.ml[458,17442+25]..[458,17442+30])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[458,17442+31]..[458,17442+33])
                                        Pexp_ident "bv" (lambda/simplif.ml[458,17442+31]..[458,17442+33])
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[458,17442+34]..[458,17442+36])
                                        Pexp_ident "l1" (lambda/simplif.ml[458,17442+34]..[458,17442+36])
                                  ]
                                expression (lambda/simplif.ml[458,17442+38]..[458,17442+49])
                                  Pexp_apply
                                  expression (lambda/simplif.ml[458,17442+38]..[458,17442+43])
                                    Pexp_ident "count" (lambda/simplif.ml[458,17442+38]..[458,17442+43])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[458,17442+44]..[458,17442+46])
                                        Pexp_ident "bv" (lambda/simplif.ml[458,17442+44]..[458,17442+46])
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[458,17442+47]..[458,17442+49])
                                        Pexp_ident "l2" (lambda/simplif.ml[458,17442+47]..[458,17442+49])
                                  ]
                            <case>
                              pattern (lambda/simplif.ml[459,17492+4]..[459,17492+18])
                                Ppat_construct "Lwhile" (lambda/simplif.ml[459,17492+4]..[459,17492+10])
                                Some
                                  []
                                  pattern (lambda/simplif.ml[459,17492+10]..[459,17492+18])
                                    Ppat_tuple
                                    [
                                      pattern (lambda/simplif.ml[459,17492+11]..[459,17492+13])
                                        Ppat_var "l1" (lambda/simplif.ml[459,17492+11]..[459,17492+13])
                                      pattern (lambda/simplif.ml[459,17492+15]..[459,17492+17])
                                        Ppat_var "l2" (lambda/simplif.ml[459,17492+15]..[459,17492+17])
                                    ]
                              expression (lambda/simplif.ml[459,17492+22]..[459,17492+72])
                                Pexp_sequence
                                expression (lambda/simplif.ml[459,17492+22]..[459,17492+46])
                                  Pexp_apply
                                  expression (lambda/simplif.ml[459,17492+22]..[459,17492+27])
                                    Pexp_ident "count" (lambda/simplif.ml[459,17492+22]..[459,17492+27])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[459,17492+28]..[459,17492+43])
                                        Pexp_ident "Ident.Map.empty" (lambda/simplif.ml[459,17492+28]..[459,17492+43])
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[459,17492+44]..[459,17492+46])
                                        Pexp_ident "l1" (lambda/simplif.ml[459,17492+44]..[459,17492+46])
                                  ]
                                expression (lambda/simplif.ml[459,17492+48]..[459,17492+72])
                                  Pexp_apply
                                  expression (lambda/simplif.ml[459,17492+48]..[459,17492+53])
                                    Pexp_ident "count" (lambda/simplif.ml[459,17492+48]..[459,17492+53])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[459,17492+54]..[459,17492+69])
                                        Pexp_ident "Ident.Map.empty" (lambda/simplif.ml[459,17492+54]..[459,17492+69])
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[459,17492+70]..[459,17492+72])
                                        Pexp_ident "l2" (lambda/simplif.ml[459,17492+70]..[459,17492+72])
                                  ]
                            <case>
                              pattern (lambda/simplif.ml[460,17565+4]..[460,17565+29])
                                Ppat_construct "Lfor" (lambda/simplif.ml[460,17565+4]..[460,17565+8])
                                Some
                                  []
                                  pattern (lambda/simplif.ml[460,17565+8]..[460,17565+29])
                                    Ppat_tuple
                                    [
                                      pattern (lambda/simplif.ml[460,17565+9]..[460,17565+10])
                                        Ppat_any
                                      pattern (lambda/simplif.ml[460,17565+12]..[460,17565+14])
                                        Ppat_var "l1" (lambda/simplif.ml[460,17565+12]..[460,17565+14])
                                      pattern (lambda/simplif.ml[460,17565+16]..[460,17565+18])
                                        Ppat_var "l2" (lambda/simplif.ml[460,17565+16]..[460,17565+18])
                                      pattern (lambda/simplif.ml[460,17565+20]..[460,17565+24])
                                        Ppat_var "_dir" (lambda/simplif.ml[460,17565+20]..[460,17565+24])
                                      pattern (lambda/simplif.ml[460,17565+26]..[460,17565+28])
                                        Ppat_var "l3" (lambda/simplif.ml[460,17565+26]..[460,17565+28])
                                    ]
                              expression (lambda/simplif.ml[461,17598+6]..[461,17598+56])
                                Pexp_sequence
                                expression (lambda/simplif.ml[461,17598+6]..[461,17598+17])
                                  Pexp_apply
                                  expression (lambda/simplif.ml[461,17598+6]..[461,17598+11])
                                    Pexp_ident "count" (lambda/simplif.ml[461,17598+6]..[461,17598+11])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[461,17598+12]..[461,17598+14])
                                        Pexp_ident "bv" (lambda/simplif.ml[461,17598+12]..[461,17598+14])
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[461,17598+15]..[461,17598+17])
                                        Pexp_ident "l1" (lambda/simplif.ml[461,17598+15]..[461,17598+17])
                                  ]
                                expression (lambda/simplif.ml[461,17598+19]..[461,17598+56])
                                  Pexp_sequence
                                  expression (lambda/simplif.ml[461,17598+19]..[461,17598+30])
                                    Pexp_apply
                                    expression (lambda/simplif.ml[461,17598+19]..[461,17598+24])
                                      Pexp_ident "count" (lambda/simplif.ml[461,17598+19]..[461,17598+24])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lambda/simplif.ml[461,17598+25]..[461,17598+27])
                                          Pexp_ident "bv" (lambda/simplif.ml[461,17598+25]..[461,17598+27])
                                      <arg>
                                      Nolabel
                                        expression (lambda/simplif.ml[461,17598+28]..[461,17598+30])
                                          Pexp_ident "l2" (lambda/simplif.ml[461,17598+28]..[461,17598+30])
                                    ]
                                  expression (lambda/simplif.ml[461,17598+32]..[461,17598+56])
                                    Pexp_apply
                                    expression (lambda/simplif.ml[461,17598+32]..[461,17598+37])
                                      Pexp_ident "count" (lambda/simplif.ml[461,17598+32]..[461,17598+37])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lambda/simplif.ml[461,17598+38]..[461,17598+53])
                                          Pexp_ident "Ident.Map.empty" (lambda/simplif.ml[461,17598+38]..[461,17598+53])
                                      <arg>
                                      Nolabel
                                        expression (lambda/simplif.ml[461,17598+54]..[461,17598+56])
                                          Pexp_ident "l3" (lambda/simplif.ml[461,17598+54]..[461,17598+56])
                                    ]
                            <case>
                              pattern (lambda/simplif.ml[462,17655+4]..[462,17655+18])
                                Ppat_construct "Lassign" (lambda/simplif.ml[462,17655+4]..[462,17655+11])
                                Some
                                  []
                                  pattern (lambda/simplif.ml[462,17655+11]..[462,17655+18])
                                    Ppat_tuple
                                    [
                                      pattern (lambda/simplif.ml[462,17655+12]..[462,17655+14])
                                        Ppat_var "_v" (lambda/simplif.ml[462,17655+12]..[462,17655+14])
                                      pattern (lambda/simplif.ml[462,17655+16]..[462,17655+17])
                                        Ppat_var "l" (lambda/simplif.ml[462,17655+16]..[462,17655+17])
                                    ]
                              expression (lambda/simplif.ml[465,17772+6]..[465,17772+16])
                                Pexp_apply
                                expression (lambda/simplif.ml[465,17772+6]..[465,17772+11])
                                  Pexp_ident "count" (lambda/simplif.ml[465,17772+6]..[465,17772+11])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[465,17772+12]..[465,17772+14])
                                      Pexp_ident "bv" (lambda/simplif.ml[465,17772+12]..[465,17772+14])
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[465,17772+15]..[465,17772+16])
                                      Pexp_ident "l" (lambda/simplif.ml[465,17772+15]..[465,17772+16])
                                ]
                            <case>
                              pattern (lambda/simplif.ml[466,17789+4]..[466,17789+25])
                                Ppat_construct "Lsend" (lambda/simplif.ml[466,17789+4]..[466,17789+9])
                                Some
                                  []
                                  pattern (lambda/simplif.ml[466,17789+9]..[466,17789+25])
                                    Ppat_tuple
                                    [
                                      pattern (lambda/simplif.ml[466,17789+10]..[466,17789+11])
                                        Ppat_any
                                      pattern (lambda/simplif.ml[466,17789+13]..[466,17789+14])
                                        Ppat_var "m" (lambda/simplif.ml[466,17789+13]..[466,17789+14])
                                      pattern (lambda/simplif.ml[466,17789+16]..[466,17789+17])
                                        Ppat_var "o" (lambda/simplif.ml[466,17789+16]..[466,17789+17])
                                      pattern (lambda/simplif.ml[466,17789+19]..[466,17789+21])
                                        Ppat_var "ll" (lambda/simplif.ml[466,17789+19]..[466,17789+21])
                                      pattern (lambda/simplif.ml[466,17789+23]..[466,17789+24])
                                        Ppat_any
                                    ]
                              expression (lambda/simplif.ml[466,17789+29]..[466,17789+60])
                                Pexp_apply
                                expression (lambda/simplif.ml[466,17789+29]..[466,17789+38])
                                  Pexp_ident "List.iter" (lambda/simplif.ml[466,17789+29]..[466,17789+38])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[466,17789+39]..[466,17789+49])
                                      Pexp_apply
                                      expression (lambda/simplif.ml[466,17789+40]..[466,17789+45])
                                        Pexp_ident "count" (lambda/simplif.ml[466,17789+40]..[466,17789+45])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lambda/simplif.ml[466,17789+46]..[466,17789+48])
                                            Pexp_ident "bv" (lambda/simplif.ml[466,17789+46]..[466,17789+48])
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[466,17789+50]..[466,17789+60])
                                      Pexp_construct "::" (lambda/simplif.ml[466,17789+52]..[466,17789+54])
                                      Some
                                        expression (lambda/simplif.ml[466,17789+51]..[466,17789+59]) ghost
                                          Pexp_tuple
                                          [
                                            expression (lambda/simplif.ml[466,17789+51]..[466,17789+52])
                                              Pexp_ident "m" (lambda/simplif.ml[466,17789+51]..[466,17789+52])
                                            expression (lambda/simplif.ml[466,17789+54]..[466,17789+59])
                                              Pexp_construct "::" (lambda/simplif.ml[466,17789+55]..[466,17789+57])
                                              Some
                                                expression (lambda/simplif.ml[466,17789+54]..[466,17789+59]) ghost
                                                  Pexp_tuple
                                                  [
                                                    expression (lambda/simplif.ml[466,17789+54]..[466,17789+55])
                                                      Pexp_ident "o" (lambda/simplif.ml[466,17789+54]..[466,17789+55])
                                                    expression (lambda/simplif.ml[466,17789+57]..[466,17789+59])
                                                      Pexp_ident "ll" (lambda/simplif.ml[466,17789+57]..[466,17789+59])
                                                  ]
                                          ]
                                ]
                            <case>
                              pattern (lambda/simplif.ml[467,17850+4]..[467,17850+16])
                                Ppat_construct "Levent" (lambda/simplif.ml[467,17850+4]..[467,17850+10])
                                Some
                                  []
                                  pattern (lambda/simplif.ml[467,17850+10]..[467,17850+16])
                                    Ppat_tuple
                                    [
                                      pattern (lambda/simplif.ml[467,17850+11]..[467,17850+12])
                                        Ppat_var "l" (lambda/simplif.ml[467,17850+11]..[467,17850+12])
                                      pattern (lambda/simplif.ml[467,17850+14]..[467,17850+15])
                                        Ppat_any
                                    ]
                              expression (lambda/simplif.ml[467,17850+20]..[467,17850+30])
                                Pexp_apply
                                expression (lambda/simplif.ml[467,17850+20]..[467,17850+25])
                                  Pexp_ident "count" (lambda/simplif.ml[467,17850+20]..[467,17850+25])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[467,17850+26]..[467,17850+28])
                                      Pexp_ident "bv" (lambda/simplif.ml[467,17850+26]..[467,17850+28])
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[467,17850+29]..[467,17850+30])
                                      Pexp_ident "l" (lambda/simplif.ml[467,17850+29]..[467,17850+30])
                                ]
                            <case>
                              pattern (lambda/simplif.ml[468,17881+4]..[468,17881+17])
                                Ppat_construct "Lifused" (lambda/simplif.ml[468,17881+4]..[468,17881+11])
                                Some
                                  []
                                  pattern (lambda/simplif.ml[468,17881+11]..[468,17881+17])
                                    Ppat_tuple
                                    [
                                      pattern (lambda/simplif.ml[468,17881+12]..[468,17881+13])
                                        Ppat_var "v" (lambda/simplif.ml[468,17881+12]..[468,17881+13])
                                      pattern (lambda/simplif.ml[468,17881+15]..[468,17881+16])
                                        Ppat_var "l" (lambda/simplif.ml[468,17881+15]..[468,17881+16])
                                    ]
                              expression (lambda/simplif.ml[469,17902+6]..[469,17902+40])
                                Pexp_ifthenelse
                                expression (lambda/simplif.ml[469,17902+9]..[469,17902+24])
                                  Pexp_apply
                                  expression (lambda/simplif.ml[469,17902+21]..[469,17902+22])
                                    Pexp_ident ">" (lambda/simplif.ml[469,17902+21]..[469,17902+22])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[469,17902+9]..[469,17902+20])
                                        Pexp_apply
                                        expression (lambda/simplif.ml[469,17902+9]..[469,17902+18])
                                          Pexp_ident "count_var" (lambda/simplif.ml[469,17902+9]..[469,17902+18])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lambda/simplif.ml[469,17902+19]..[469,17902+20])
                                              Pexp_ident "v" (lambda/simplif.ml[469,17902+19]..[469,17902+20])
                                        ]
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[469,17902+23]..[469,17902+24])
                                        Pexp_constant PConst_int (0,None)
                                  ]
                                expression (lambda/simplif.ml[469,17902+30]..[469,17902+40])
                                  Pexp_apply
                                  expression (lambda/simplif.ml[469,17902+30]..[469,17902+35])
                                    Pexp_ident "count" (lambda/simplif.ml[469,17902+30]..[469,17902+35])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[469,17902+36]..[469,17902+38])
                                        Pexp_ident "bv" (lambda/simplif.ml[469,17902+36]..[469,17902+38])
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[469,17902+39]..[469,17902+40])
                                        Pexp_ident "l" (lambda/simplif.ml[469,17902+39]..[469,17902+40])
                                  ]
                                None
                          ]
                    <def>
                      pattern (lambda/simplif.ml[471,17944+6]..[471,17944+19])
                        Ppat_var "count_default" (lambda/simplif.ml[471,17944+6]..[471,17944+19])
                      expression (lambda/simplif.ml[471,17944+20]..[483,18451+9]) ghost
                        Pexp_fun
                        Nolabel
                        None
                        pattern (lambda/simplif.ml[471,17944+20]..[471,17944+22])
                          Ppat_var "bv" (lambda/simplif.ml[471,17944+20]..[471,17944+22])
                        expression (lambda/simplif.ml[471,17944+23]..[483,18451+9]) ghost
                          Pexp_fun
                          Nolabel
                          None
                          pattern (lambda/simplif.ml[471,17944+23]..[471,17944+25])
                            Ppat_var "sw" (lambda/simplif.ml[471,17944+23]..[471,17944+25])
                          expression (lambda/simplif.ml[471,17944+28]..[483,18451+9])
                            Pexp_match
                            expression (lambda/simplif.ml[471,17944+34]..[471,17944+50])
                              Pexp_field
                              expression (lambda/simplif.ml[471,17944+34]..[471,17944+36])
                                Pexp_ident "sw" (lambda/simplif.ml[471,17944+34]..[471,17944+36])
                              "sw_failaction" (lambda/simplif.ml[471,17944+37]..[471,17944+50])
                            [
                              <case>
                                pattern (lambda/simplif.ml[472,18000+4]..[472,18000+8])
                                  Ppat_construct "None" (lambda/simplif.ml[472,18000+4]..[472,18000+8])
                                  None
                                expression (lambda/simplif.ml[472,18000+12]..[472,18000+14])
                                  Pexp_construct "()" (lambda/simplif.ml[472,18000+12]..[472,18000+14])
                                  None
                              <case>
                                pattern (lambda/simplif.ml[473,18015+4]..[473,18015+11])
                                  Ppat_construct "Some" (lambda/simplif.ml[473,18015+4]..[473,18015+8])
                                  Some
                                    []
                                    pattern (lambda/simplif.ml[473,18015+9]..[473,18015+11])
                                      Ppat_var "al" (lambda/simplif.ml[473,18015+9]..[473,18015+11])
                                expression (lambda/simplif.ml[474,18030+6]..[483,18451+9])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lambda/simplif.ml[474,18030+10]..[474,18030+17])
                                        Ppat_var "nconsts" (lambda/simplif.ml[474,18030+10]..[474,18030+17])
                                      expression (lambda/simplif.ml[474,18030+20]..[474,18030+44])
                                        Pexp_apply
                                        expression (lambda/simplif.ml[474,18030+20]..[474,18030+31])
                                          Pexp_ident "List.length" (lambda/simplif.ml[474,18030+20]..[474,18030+31])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lambda/simplif.ml[474,18030+32]..[474,18030+44])
                                              Pexp_field
                                              expression (lambda/simplif.ml[474,18030+32]..[474,18030+34])
                                                Pexp_ident "sw" (lambda/simplif.ml[474,18030+32]..[474,18030+34])
                                              "sw_consts" (lambda/simplif.ml[474,18030+35]..[474,18030+44])
                                        ]
                                    <def>
                                      pattern (lambda/simplif.ml[475,18075+10]..[475,18075+17])
                                        Ppat_var "nblocks" (lambda/simplif.ml[475,18075+10]..[475,18075+17])
                                      expression (lambda/simplif.ml[475,18075+20]..[475,18075+44])
                                        Pexp_apply
                                        expression (lambda/simplif.ml[475,18075+20]..[475,18075+31])
                                          Pexp_ident "List.length" (lambda/simplif.ml[475,18075+20]..[475,18075+31])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lambda/simplif.ml[475,18075+32]..[475,18075+44])
                                              Pexp_field
                                              expression (lambda/simplif.ml[475,18075+32]..[475,18075+34])
                                                Pexp_ident "sw" (lambda/simplif.ml[475,18075+32]..[475,18075+34])
                                              "sw_blocks" (lambda/simplif.ml[475,18075+35]..[475,18075+44])
                                        ]
                                  ]
                                  expression (lambda/simplif.ml[476,18123+6]..[483,18451+9])
                                    Pexp_ifthenelse
                                    expression (lambda/simplif.ml[477,18132+8]..[477,18132+62])
                                      Pexp_apply
                                      expression (lambda/simplif.ml[477,18132+34]..[477,18132+36])
                                        Pexp_ident "&&" (lambda/simplif.ml[477,18132+34]..[477,18132+36])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lambda/simplif.ml[477,18132+8]..[477,18132+33])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[477,18132+16]..[477,18132+17])
                                              Pexp_ident "<" (lambda/simplif.ml[477,18132+16]..[477,18132+17])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[477,18132+8]..[477,18132+15])
                                                  Pexp_ident "nconsts" (lambda/simplif.ml[477,18132+8]..[477,18132+15])
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[477,18132+18]..[477,18132+33])
                                                  Pexp_field
                                                  expression (lambda/simplif.ml[477,18132+18]..[477,18132+20])
                                                    Pexp_ident "sw" (lambda/simplif.ml[477,18132+18]..[477,18132+20])
                                                  "sw_numconsts" (lambda/simplif.ml[477,18132+21]..[477,18132+33])
                                            ]
                                        <arg>
                                        Nolabel
                                          expression (lambda/simplif.ml[477,18132+37]..[477,18132+62])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[477,18132+45]..[477,18132+46])
                                              Pexp_ident "<" (lambda/simplif.ml[477,18132+45]..[477,18132+46])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[477,18132+37]..[477,18132+44])
                                                  Pexp_ident "nblocks" (lambda/simplif.ml[477,18132+37]..[477,18132+44])
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[477,18132+47]..[477,18132+62])
                                                  Pexp_field
                                                  expression (lambda/simplif.ml[477,18132+47]..[477,18132+49])
                                                    Pexp_ident "sw" (lambda/simplif.ml[477,18132+47]..[477,18132+49])
                                                  "sw_numblocks" (lambda/simplif.ml[477,18132+50]..[477,18132+62])
                                            ]
                                      ]
                                    expression (lambda/simplif.ml[478,18195+11]..[480,18299+9])
                                      Pexp_sequence
                                      expression (lambda/simplif.ml[479,18265+8]..[479,18265+19])
                                        Pexp_apply
                                        expression (lambda/simplif.ml[479,18265+8]..[479,18265+13])
                                          Pexp_ident "count" (lambda/simplif.ml[479,18265+8]..[479,18265+13])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lambda/simplif.ml[479,18265+14]..[479,18265+16])
                                              Pexp_ident "bv" (lambda/simplif.ml[479,18265+14]..[479,18265+16])
                                          <arg>
                                          Nolabel
                                            expression (lambda/simplif.ml[479,18265+17]..[479,18265+19])
                                              Pexp_ident "al" (lambda/simplif.ml[479,18265+17]..[479,18265+19])
                                        ]
                                      expression (lambda/simplif.ml[479,18265+22]..[479,18265+33])
                                        Pexp_apply
                                        expression (lambda/simplif.ml[479,18265+22]..[479,18265+27])
                                          Pexp_ident "count" (lambda/simplif.ml[479,18265+22]..[479,18265+27])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lambda/simplif.ml[479,18265+28]..[479,18265+30])
                                              Pexp_ident "bv" (lambda/simplif.ml[479,18265+28]..[479,18265+30])
                                          <arg>
                                          Nolabel
                                            expression (lambda/simplif.ml[479,18265+31]..[479,18265+33])
                                              Pexp_ident "al" (lambda/simplif.ml[479,18265+31]..[479,18265+33])
                                        ]
                                    Some
                                      expression (lambda/simplif.ml[480,18299+15]..[483,18451+9])
                                        Pexp_sequence
                                        expression (lambda/simplif.ml[481,18357+8]..[481,18357+71])
                                          Pexp_assert
                                          expression (lambda/simplif.ml[481,18357+15]..[481,18357+71])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[481,18357+42]..[481,18357+44])
                                              Pexp_ident "||" (lambda/simplif.ml[481,18357+42]..[481,18357+44])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[481,18357+16]..[481,18357+41])
                                                  Pexp_apply
                                                  expression (lambda/simplif.ml[481,18357+24]..[481,18357+25])
                                                    Pexp_ident "<" (lambda/simplif.ml[481,18357+24]..[481,18357+25])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (lambda/simplif.ml[481,18357+16]..[481,18357+23])
                                                        Pexp_ident "nconsts" (lambda/simplif.ml[481,18357+16]..[481,18357+23])
                                                    <arg>
                                                    Nolabel
                                                      expression (lambda/simplif.ml[481,18357+26]..[481,18357+41])
                                                        Pexp_field
                                                        expression (lambda/simplif.ml[481,18357+26]..[481,18357+28])
                                                          Pexp_ident "sw" (lambda/simplif.ml[481,18357+26]..[481,18357+28])
                                                        "sw_numconsts" (lambda/simplif.ml[481,18357+29]..[481,18357+41])
                                                  ]
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[481,18357+45]..[481,18357+70])
                                                  Pexp_apply
                                                  expression (lambda/simplif.ml[481,18357+53]..[481,18357+54])
                                                    Pexp_ident "<" (lambda/simplif.ml[481,18357+53]..[481,18357+54])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (lambda/simplif.ml[481,18357+45]..[481,18357+52])
                                                        Pexp_ident "nblocks" (lambda/simplif.ml[481,18357+45]..[481,18357+52])
                                                    <arg>
                                                    Nolabel
                                                      expression (lambda/simplif.ml[481,18357+55]..[481,18357+70])
                                                        Pexp_field
                                                        expression (lambda/simplif.ml[481,18357+55]..[481,18357+57])
                                                          Pexp_ident "sw" (lambda/simplif.ml[481,18357+55]..[481,18357+57])
                                                        "sw_numblocks" (lambda/simplif.ml[481,18357+58]..[481,18357+70])
                                                  ]
                                            ]
                                        expression (lambda/simplif.ml[482,18431+8]..[482,18431+19])
                                          Pexp_apply
                                          expression (lambda/simplif.ml[482,18431+8]..[482,18431+13])
                                            Pexp_ident "count" (lambda/simplif.ml[482,18431+8]..[482,18431+13])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[482,18431+14]..[482,18431+16])
                                                Pexp_ident "bv" (lambda/simplif.ml[482,18431+14]..[482,18431+16])
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[482,18431+17]..[482,18431+19])
                                                Pexp_ident "al" (lambda/simplif.ml[482,18431+17]..[482,18431+19])
                                          ]
                            ]
                  ]
                  expression (lambda/simplif.ml[485,18466+2]..[611,23330+13])
                    Pexp_sequence
                    expression (lambda/simplif.ml[485,18466+2]..[485,18466+27])
                      Pexp_apply
                      expression (lambda/simplif.ml[485,18466+2]..[485,18466+7])
                        Pexp_ident "count" (lambda/simplif.ml[485,18466+2]..[485,18466+7])
                      [
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[485,18466+8]..[485,18466+23])
                            Pexp_ident "Ident.Map.empty" (lambda/simplif.ml[485,18466+8]..[485,18466+23])
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[485,18466+24]..[485,18466+27])
                            Pexp_ident "lam" (lambda/simplif.ml[485,18466+24]..[485,18466+27])
                      ]
                    expression (lambda/simplif.ml[490,18627+2]..[611,23330+13])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (lambda/simplif.ml[490,18627+6]..[490,18627+11])
                            Ppat_var "subst" (lambda/simplif.ml[490,18627+6]..[490,18627+11])
                          expression (lambda/simplif.ml[490,18627+14]..[490,18627+31])
                            Pexp_apply
                            expression (lambda/simplif.ml[490,18627+14]..[490,18627+28])
                              Pexp_ident "Hashtbl.create" (lambda/simplif.ml[490,18627+14]..[490,18627+28])
                            [
                              <arg>
                              Nolabel
                                expression (lambda/simplif.ml[490,18627+29]..[490,18627+31])
                                  Pexp_constant PConst_int (83,None)
                            ]
                      ]
                      expression (lambda/simplif.ml[495,18757+2]..[611,23330+13])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lambda/simplif.ml[495,18757+6]..[495,18757+11])
                              Ppat_var "mklet" (lambda/simplif.ml[495,18757+6]..[495,18757+11])
                            expression (lambda/simplif.ml[495,18757+12]..[498,18857+35]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (lambda/simplif.ml[495,18757+12]..[495,18757+15])
                                Ppat_var "str" (lambda/simplif.ml[495,18757+12]..[495,18757+15])
                              expression (lambda/simplif.ml[495,18757+16]..[498,18857+35]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (lambda/simplif.ml[495,18757+16]..[495,18757+20])
                                  Ppat_var "kind" (lambda/simplif.ml[495,18757+16]..[495,18757+20])
                                expression (lambda/simplif.ml[495,18757+21]..[498,18857+35]) ghost
                                  Pexp_fun
                                  Nolabel
                                  None
                                  pattern (lambda/simplif.ml[495,18757+21]..[495,18757+22])
                                    Ppat_var "v" (lambda/simplif.ml[495,18757+21]..[495,18757+22])
                                  expression (lambda/simplif.ml[495,18757+23]..[498,18857+35]) ghost
                                    Pexp_fun
                                    Nolabel
                                    None
                                    pattern (lambda/simplif.ml[495,18757+23]..[495,18757+25])
                                      Ppat_var "e1" (lambda/simplif.ml[495,18757+23]..[495,18757+25])
                                    expression (lambda/simplif.ml[495,18757+26]..[498,18857+35]) ghost
                                      Pexp_fun
                                      Nolabel
                                      None
                                      pattern (lambda/simplif.ml[495,18757+26]..[495,18757+28])
                                        Ppat_var "e2" (lambda/simplif.ml[495,18757+26]..[495,18757+28])
                                      expression (lambda/simplif.ml[496,18788+4]..[498,18857+35])
                                        Pexp_match
                                        expression (lambda/simplif.ml[496,18788+10]..[496,18788+12])
                                          Pexp_ident "e2" (lambda/simplif.ml[496,18788+10]..[496,18788+12])
                                        [
                                          <case>
                                            pattern (lambda/simplif.ml[497,18806+6]..[497,18806+12])
                                              Ppat_construct "Lvar" (lambda/simplif.ml[497,18806+6]..[497,18806+10])
                                              Some
                                                []
                                                pattern (lambda/simplif.ml[497,18806+11]..[497,18806+12])
                                                  Ppat_var "w" (lambda/simplif.ml[497,18806+11]..[497,18806+12])
                                            <when>
                                              expression (lambda/simplif.ml[497,18806+18]..[497,18806+44])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[497,18806+27]..[497,18806+29])
                                                  Pexp_ident "&&" (lambda/simplif.ml[497,18806+27]..[497,18806+29])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[497,18806+18]..[497,18806+26])
                                                      Pexp_ident "optimize" (lambda/simplif.ml[497,18806+18]..[497,18806+26])
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[497,18806+30]..[497,18806+44])
                                                      Pexp_apply
                                                      expression (lambda/simplif.ml[497,18806+30]..[497,18806+40])
                                                        Pexp_ident "Ident.same" (lambda/simplif.ml[497,18806+30]..[497,18806+40])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (lambda/simplif.ml[497,18806+41]..[497,18806+42])
                                                            Pexp_ident "v" (lambda/simplif.ml[497,18806+41]..[497,18806+42])
                                                        <arg>
                                                        Nolabel
                                                          expression (lambda/simplif.ml[497,18806+43]..[497,18806+44])
                                                            Pexp_ident "w" (lambda/simplif.ml[497,18806+43]..[497,18806+44])
                                                      ]
                                                ]
                                            expression (lambda/simplif.ml[497,18806+48]..[497,18806+50])
                                              Pexp_ident "e1" (lambda/simplif.ml[497,18806+48]..[497,18806+50])
                                          <case>
                                            pattern (lambda/simplif.ml[498,18857+6]..[498,18857+7])
                                              Ppat_any
                                            expression (lambda/simplif.ml[498,18857+11]..[498,18857+35])
                                              Pexp_construct "Llet" (lambda/simplif.ml[498,18857+11]..[498,18857+15])
                                              Some
                                                expression (lambda/simplif.ml[498,18857+16]..[498,18857+35])
                                                  Pexp_tuple
                                                  [
                                                    expression (lambda/simplif.ml[498,18857+17]..[498,18857+20])
                                                      Pexp_ident "str" (lambda/simplif.ml[498,18857+17]..[498,18857+20])
                                                    expression (lambda/simplif.ml[498,18857+22]..[498,18857+26])
                                                      Pexp_ident "kind" (lambda/simplif.ml[498,18857+22]..[498,18857+26])
                                                    expression (lambda/simplif.ml[498,18857+27]..[498,18857+28])
                                                      Pexp_ident "v" (lambda/simplif.ml[498,18857+27]..[498,18857+28])
                                                    expression (lambda/simplif.ml[498,18857+29]..[498,18857+31])
                                                      Pexp_ident "e1" (lambda/simplif.ml[498,18857+29]..[498,18857+31])
                                                    expression (lambda/simplif.ml[498,18857+32]..[498,18857+34])
                                                      Pexp_ident "e2" (lambda/simplif.ml[498,18857+32]..[498,18857+34])
                                                  ]
                                        ]
                        ]
                        expression (lambda/simplif.ml[501,18899+2]..[611,23330+13])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lambda/simplif.ml[501,18899+6]..[501,18899+14])
                                Ppat_var "mkmutlet" (lambda/simplif.ml[501,18899+6]..[501,18899+14])
                              expression (lambda/simplif.ml[501,18899+15]..[504,19001+33]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (lambda/simplif.ml[501,18899+15]..[501,18899+19])
                                  Ppat_var "kind" (lambda/simplif.ml[501,18899+15]..[501,18899+19])
                                expression (lambda/simplif.ml[501,18899+20]..[504,19001+33]) ghost
                                  Pexp_fun
                                  Nolabel
                                  None
                                  pattern (lambda/simplif.ml[501,18899+20]..[501,18899+21])
                                    Ppat_var "v" (lambda/simplif.ml[501,18899+20]..[501,18899+21])
                                  expression (lambda/simplif.ml[501,18899+22]..[504,19001+33]) ghost
                                    Pexp_fun
                                    Nolabel
                                    None
                                    pattern (lambda/simplif.ml[501,18899+22]..[501,18899+24])
                                      Ppat_var "e1" (lambda/simplif.ml[501,18899+22]..[501,18899+24])
                                    expression (lambda/simplif.ml[501,18899+25]..[504,19001+33]) ghost
                                      Pexp_fun
                                      Nolabel
                                      None
                                      pattern (lambda/simplif.ml[501,18899+25]..[501,18899+27])
                                        Ppat_var "e2" (lambda/simplif.ml[501,18899+25]..[501,18899+27])
                                      expression (lambda/simplif.ml[502,18929+4]..[504,19001+33])
                                        Pexp_match
                                        expression (lambda/simplif.ml[502,18929+10]..[502,18929+12])
                                          Pexp_ident "e2" (lambda/simplif.ml[502,18929+10]..[502,18929+12])
                                        [
                                          <case>
                                            pattern (lambda/simplif.ml[503,18947+6]..[503,18947+15])
                                              Ppat_construct "Lmutvar" (lambda/simplif.ml[503,18947+6]..[503,18947+13])
                                              Some
                                                []
                                                pattern (lambda/simplif.ml[503,18947+14]..[503,18947+15])
                                                  Ppat_var "w" (lambda/simplif.ml[503,18947+14]..[503,18947+15])
                                            <when>
                                              expression (lambda/simplif.ml[503,18947+21]..[503,18947+47])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[503,18947+30]..[503,18947+32])
                                                  Pexp_ident "&&" (lambda/simplif.ml[503,18947+30]..[503,18947+32])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[503,18947+21]..[503,18947+29])
                                                      Pexp_ident "optimize" (lambda/simplif.ml[503,18947+21]..[503,18947+29])
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[503,18947+33]..[503,18947+47])
                                                      Pexp_apply
                                                      expression (lambda/simplif.ml[503,18947+33]..[503,18947+43])
                                                        Pexp_ident "Ident.same" (lambda/simplif.ml[503,18947+33]..[503,18947+43])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (lambda/simplif.ml[503,18947+44]..[503,18947+45])
                                                            Pexp_ident "v" (lambda/simplif.ml[503,18947+44]..[503,18947+45])
                                                        <arg>
                                                        Nolabel
                                                          expression (lambda/simplif.ml[503,18947+46]..[503,18947+47])
                                                            Pexp_ident "w" (lambda/simplif.ml[503,18947+46]..[503,18947+47])
                                                      ]
                                                ]
                                            expression (lambda/simplif.ml[503,18947+51]..[503,18947+53])
                                              Pexp_ident "e1" (lambda/simplif.ml[503,18947+51]..[503,18947+53])
                                          <case>
                                            pattern (lambda/simplif.ml[504,19001+6]..[504,19001+7])
                                              Ppat_any
                                            expression (lambda/simplif.ml[504,19001+11]..[504,19001+33])
                                              Pexp_construct "Lmutlet" (lambda/simplif.ml[504,19001+11]..[504,19001+18])
                                              Some
                                                expression (lambda/simplif.ml[504,19001+19]..[504,19001+33])
                                                  Pexp_tuple
                                                  [
                                                    expression (lambda/simplif.ml[504,19001+20]..[504,19001+24])
                                                      Pexp_ident "kind" (lambda/simplif.ml[504,19001+20]..[504,19001+24])
                                                    expression (lambda/simplif.ml[504,19001+25]..[504,19001+26])
                                                      Pexp_ident "v" (lambda/simplif.ml[504,19001+25]..[504,19001+26])
                                                    expression (lambda/simplif.ml[504,19001+27]..[504,19001+29])
                                                      Pexp_ident "e1" (lambda/simplif.ml[504,19001+27]..[504,19001+29])
                                                    expression (lambda/simplif.ml[504,19001+30]..[504,19001+32])
                                                      Pexp_ident "e2" (lambda/simplif.ml[504,19001+30]..[504,19001+32])
                                                  ]
                                        ]
                          ]
                          expression (lambda/simplif.ml[507,19041+2]..[611,23330+13])
                            Pexp_let Rec
                            [
                              <def>
                                pattern (lambda/simplif.ml[507,19041+10]..[507,19041+17])
                                  Ppat_var "simplif" (lambda/simplif.ml[507,19041+10]..[507,19041+17])
                                expression (lambda/simplif.ml[507,19041+20]..[609,23268+56])
                                  Pexp_function
                                  [
                                    <case>
                                      pattern (lambda/simplif.ml[508,19070+4]..[508,19070+15])
                                        Ppat_alias "l" (lambda/simplif.ml[508,19070+14]..[508,19070+15])
                                        pattern (lambda/simplif.ml[508,19070+4]..[508,19070+10])
                                          Ppat_construct "Lvar" (lambda/simplif.ml[508,19070+4]..[508,19070+8])
                                          Some
                                            []
                                            pattern (lambda/simplif.ml[508,19070+9]..[508,19070+10])
                                              Ppat_var "v" (lambda/simplif.ml[508,19070+9]..[508,19070+10])
                                      expression (lambda/simplif.ml[509,19089+6]..[513,19168+9])
                                        Pexp_try
                                        expression (lambda/simplif.ml[510,19105+8]..[510,19105+28])
                                          Pexp_apply
                                          expression (lambda/simplif.ml[510,19105+8]..[510,19105+20])
                                            Pexp_ident "Hashtbl.find" (lambda/simplif.ml[510,19105+8]..[510,19105+20])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[510,19105+21]..[510,19105+26])
                                                Pexp_ident "subst" (lambda/simplif.ml[510,19105+21]..[510,19105+26])
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[510,19105+27]..[510,19105+28])
                                                Pexp_ident "v" (lambda/simplif.ml[510,19105+27]..[510,19105+28])
                                          ]
                                        [
                                          <case>
                                            pattern (lambda/simplif.ml[511,19134+11]..[511,19134+20])
                                              Ppat_construct "Not_found" (lambda/simplif.ml[511,19134+11]..[511,19134+20])
                                              None
                                            expression (lambda/simplif.ml[512,19158+8]..[512,19158+9])
                                              Pexp_ident "l" (lambda/simplif.ml[512,19158+8]..[512,19158+9])
                                        ]
                                    <case>
                                      pattern (lambda/simplif.ml[514,19178+4]..[514,19178+29])
                                        Ppat_alias "l" (lambda/simplif.ml[514,19178+28]..[514,19178+29])
                                        pattern (lambda/simplif.ml[514,19178+4]..[514,19178+24])
                                          Ppat_or
                                          pattern (lambda/simplif.ml[514,19178+4]..[514,19178+13])
                                            Ppat_construct "Lmutvar" (lambda/simplif.ml[514,19178+4]..[514,19178+11])
                                            Some
                                              []
                                              pattern (lambda/simplif.ml[514,19178+12]..[514,19178+13])
                                                Ppat_any
                                          pattern (lambda/simplif.ml[514,19178+16]..[514,19178+24])
                                            Ppat_construct "Lconst" (lambda/simplif.ml[514,19178+16]..[514,19178+22])
                                            Some
                                              []
                                              pattern (lambda/simplif.ml[514,19178+23]..[514,19178+24])
                                                Ppat_any
                                      expression (lambda/simplif.ml[514,19178+33]..[514,19178+34])
                                        Pexp_ident "l" (lambda/simplif.ml[514,19178+33]..[514,19178+34])
                                    <case>
                                      pattern (lambda/simplif.ml[515,19213+4]..[515,19213+49])
                                        Ppat_construct "Lapply" (lambda/simplif.ml[515,19213+4]..[515,19213+10])
                                        Some
                                          []
                                          pattern (lambda/simplif.ml[515,19213+11]..[515,19213+49])
                                            Ppat_alias "ap" (lambda/simplif.ml[515,19213+46]..[515,19213+48])
                                            pattern (lambda/simplif.ml[515,19213+12]..[515,19213+42])
                                              Ppat_record Closed
                                              [
                                                "ap_func" (lambda/simplif.ml[515,19213+13]..[515,19213+20])
                                                  pattern (lambda/simplif.ml[515,19213+23]..[515,19213+25])
                                                    Ppat_var "ll" (lambda/simplif.ml[515,19213+23]..[515,19213+25])
                                                "ap_args" (lambda/simplif.ml[515,19213+27]..[515,19213+34])
                                                  pattern (lambda/simplif.ml[515,19213+37]..[515,19213+41])
                                                    Ppat_var "args" (lambda/simplif.ml[515,19213+37]..[515,19213+41])
                                              ]
                                      expression (lambda/simplif.ml[516,19266+6]..[527,19688+9])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (lambda/simplif.ml[516,19266+10]..[516,19266+16])
                                              Ppat_var "no_opt" (lambda/simplif.ml[516,19266+10]..[516,19266+16])
                                            expression (lambda/simplif.ml[516,19266+17]..[518,19342+62]) ghost
                                              Pexp_fun
                                              Nolabel
                                              None
                                              pattern (lambda/simplif.ml[516,19266+17]..[516,19266+19])
                                                Ppat_construct "()" (lambda/simplif.ml[516,19266+17]..[516,19266+19])
                                                None
                                              expression (lambda/simplif.ml[517,19288+8]..[518,19342+62])
                                                Pexp_construct "Lapply" (lambda/simplif.ml[517,19288+8]..[517,19288+14])
                                                Some
                                                  expression (lambda/simplif.ml[517,19288+15]..[518,19342+62])
                                                    Pexp_record
                                                    [
                                                      "ap_func" (lambda/simplif.ml[517,19288+24]..[517,19288+31])
                                                        expression (lambda/simplif.ml[517,19288+34]..[517,19288+52])
                                                          Pexp_apply
                                                          expression (lambda/simplif.ml[517,19288+34]..[517,19288+41])
                                                            Pexp_ident "simplif" (lambda/simplif.ml[517,19288+34]..[517,19288+41])
                                                          [
                                                            <arg>
                                                            Nolabel
                                                              expression (lambda/simplif.ml[517,19288+42]..[517,19288+52])
                                                                Pexp_field
                                                                expression (lambda/simplif.ml[517,19288+42]..[517,19288+44])
                                                                  Pexp_ident "ap" (lambda/simplif.ml[517,19288+42]..[517,19288+44])
                                                                "ap_func" (lambda/simplif.ml[517,19288+45]..[517,19288+52])
                                                          ]
                                                      "ap_args" (lambda/simplif.ml[518,19342+24]..[518,19342+31])
                                                        expression (lambda/simplif.ml[518,19342+34]..[518,19342+61])
                                                          Pexp_apply
                                                          expression (lambda/simplif.ml[518,19342+34]..[518,19342+42])
                                                            Pexp_ident "List.map" (lambda/simplif.ml[518,19342+34]..[518,19342+42])
                                                          [
                                                            <arg>
                                                            Nolabel
                                                              expression (lambda/simplif.ml[518,19342+43]..[518,19342+50])
                                                                Pexp_ident "simplif" (lambda/simplif.ml[518,19342+43]..[518,19342+50])
                                                            <arg>
                                                            Nolabel
                                                              expression (lambda/simplif.ml[518,19342+51]..[518,19342+61])
                                                                Pexp_field
                                                                expression (lambda/simplif.ml[518,19342+51]..[518,19342+53])
                                                                  Pexp_ident "ap" (lambda/simplif.ml[518,19342+51]..[518,19342+53])
                                                                "ap_args" (lambda/simplif.ml[518,19342+54]..[518,19342+61])
                                                          ]
                                                    ]
                                                    Some
                                                      expression (lambda/simplif.ml[517,19288+16]..[517,19288+18])
                                                        Pexp_ident "ap" (lambda/simplif.ml[517,19288+16]..[517,19288+18])
                                        ]
                                        expression (lambda/simplif.ml[519,19408+6]..[527,19688+9])
                                          Pexp_match
                                          expression (lambda/simplif.ml[519,19408+18]..[519,19408+20])
                                            Pexp_ident "ll" (lambda/simplif.ml[519,19408+18]..[519,19408+20])
                                          [
                                            <case>
                                              pattern (lambda/simplif.ml[520,19434+8]..[520,19434+20])
                                                Ppat_construct "Lfunction" (lambda/simplif.ml[520,19434+8]..[520,19434+17])
                                                Some
                                                  []
                                                  pattern (lambda/simplif.ml[520,19434+18]..[520,19434+20])
                                                    Ppat_var "lf" (lambda/simplif.ml[520,19434+18]..[520,19434+20])
                                              <when>
                                                expression (lambda/simplif.ml[520,19434+26]..[520,19434+34])
                                                  Pexp_ident "optimize" (lambda/simplif.ml[520,19434+26]..[520,19434+34])
                                              expression (lambda/simplif.ml[521,19472+10]..[525,19651+13])
                                                Pexp_match
                                                expression (lambda/simplif.ml[521,19472+22]..[521,19472+47])
                                                  Pexp_apply
                                                  expression (lambda/simplif.ml[521,19472+22]..[521,19472+39])
                                                    Pexp_ident "exact_application" (lambda/simplif.ml[521,19472+22]..[521,19472+39])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (lambda/simplif.ml[521,19472+40]..[521,19472+42])
                                                        Pexp_ident "lf" (lambda/simplif.ml[521,19472+40]..[521,19472+42])
                                                    <arg>
                                                    Nolabel
                                                      expression (lambda/simplif.ml[521,19472+43]..[521,19472+47])
                                                        Pexp_ident "args" (lambda/simplif.ml[521,19472+43]..[521,19472+47])
                                                  ]
                                                [
                                                  <case>
                                                    pattern (lambda/simplif.ml[522,19525+12]..[522,19525+16])
                                                      Ppat_construct "None" (lambda/simplif.ml[522,19525+12]..[522,19525+16])
                                                      None
                                                    expression (lambda/simplif.ml[522,19525+20]..[522,19525+29])
                                                      Pexp_apply
                                                      expression (lambda/simplif.ml[522,19525+20]..[522,19525+26])
                                                        Pexp_ident "no_opt" (lambda/simplif.ml[522,19525+20]..[522,19525+26])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (lambda/simplif.ml[522,19525+27]..[522,19525+29])
                                                            Pexp_construct "()" (lambda/simplif.ml[522,19525+27]..[522,19525+29])
                                                            None
                                                      ]
                                                  <case>
                                                    pattern (lambda/simplif.ml[523,19555+12]..[523,19555+27])
                                                      Ppat_construct "Some" (lambda/simplif.ml[523,19555+12]..[523,19555+16])
                                                      Some
                                                        []
                                                        pattern (lambda/simplif.ml[523,19555+17]..[523,19555+27])
                                                          Ppat_var "exact_args" (lambda/simplif.ml[523,19555+17]..[523,19555+27])
                                                    expression (lambda/simplif.ml[524,19586+14]..[524,19586+64])
                                                      Pexp_apply
                                                      expression (lambda/simplif.ml[524,19586+14]..[524,19586+21])
                                                        Pexp_ident "simplif" (lambda/simplif.ml[524,19586+14]..[524,19586+21])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (lambda/simplif.ml[524,19586+22]..[524,19586+64])
                                                            Pexp_apply
                                                            expression (lambda/simplif.ml[524,19586+23]..[524,19586+34])
                                                              Pexp_ident "beta_reduce" (lambda/simplif.ml[524,19586+23]..[524,19586+34])
                                                            [
                                                              <arg>
                                                              Nolabel
                                                                expression (lambda/simplif.ml[524,19586+35]..[524,19586+44])
                                                                  Pexp_field
                                                                  expression (lambda/simplif.ml[524,19586+35]..[524,19586+37])
                                                                    Pexp_ident "lf" (lambda/simplif.ml[524,19586+35]..[524,19586+37])
                                                                  "params" (lambda/simplif.ml[524,19586+38]..[524,19586+44])
                                                              <arg>
                                                              Nolabel
                                                                expression (lambda/simplif.ml[524,19586+45]..[524,19586+52])
                                                                  Pexp_field
                                                                  expression (lambda/simplif.ml[524,19586+45]..[524,19586+47])
                                                                    Pexp_ident "lf" (lambda/simplif.ml[524,19586+45]..[524,19586+47])
                                                                  "body" (lambda/simplif.ml[524,19586+48]..[524,19586+52])
                                                              <arg>
                                                              Nolabel
                                                                expression (lambda/simplif.ml[524,19586+53]..[524,19586+63])
                                                                  Pexp_ident "exact_args" (lambda/simplif.ml[524,19586+53]..[524,19586+63])
                                                            ]
                                                      ]
                                                ]
                                            <case>
                                              pattern (lambda/simplif.ml[526,19665+8]..[526,19665+9])
                                                Ppat_any
                                              expression (lambda/simplif.ml[526,19665+13]..[526,19665+22])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[526,19665+13]..[526,19665+19])
                                                  Pexp_ident "no_opt" (lambda/simplif.ml[526,19665+13]..[526,19665+19])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[526,19665+20]..[526,19665+22])
                                                      Pexp_construct "()" (lambda/simplif.ml[526,19665+20]..[526,19665+22])
                                                      None
                                                ]
                                          ]
                                    <case>
                                      pattern (lambda/simplif.ml[528,19698+4]..[528,19698+64])
                                        Ppat_construct "Lfunction" (lambda/simplif.ml[528,19698+4]..[528,19698+13])
                                        Some
                                          []
                                          pattern (lambda/simplif.ml[528,19698+13]..[528,19698+64])
                                            Ppat_record Closed
                                            [
                                              "kind" (lambda/simplif.ml[528,19698+14]..[528,19698+18]) ghost
                                                pattern (lambda/simplif.ml[528,19698+14]..[528,19698+18])
                                                  Ppat_var "kind" (lambda/simplif.ml[528,19698+14]..[528,19698+18])
                                              "params" (lambda/simplif.ml[528,19698+20]..[528,19698+26]) ghost
                                                pattern (lambda/simplif.ml[528,19698+20]..[528,19698+26])
                                                  Ppat_var "params" (lambda/simplif.ml[528,19698+20]..[528,19698+26])
                                              "return" (lambda/simplif.ml[528,19698+28]..[528,19698+34])
                                                pattern (lambda/simplif.ml[528,19698+35]..[528,19698+42])
                                                  Ppat_var "return1" (lambda/simplif.ml[528,19698+35]..[528,19698+42])
                                              "body" (lambda/simplif.ml[528,19698+44]..[528,19698+48])
                                                pattern (lambda/simplif.ml[528,19698+51]..[528,19698+52])
                                                  Ppat_var "l" (lambda/simplif.ml[528,19698+51]..[528,19698+52])
                                              "attr" (lambda/simplif.ml[528,19698+54]..[528,19698+58]) ghost
                                                pattern (lambda/simplif.ml[528,19698+54]..[528,19698+58])
                                                  Ppat_var "attr" (lambda/simplif.ml[528,19698+54]..[528,19698+58])
                                              "loc" (lambda/simplif.ml[528,19698+60]..[528,19698+63]) ghost
                                                pattern (lambda/simplif.ml[528,19698+60]..[528,19698+63])
                                                  Ppat_var "loc" (lambda/simplif.ml[528,19698+60]..[528,19698+63])
                                            ]
                                      expression (lambda/simplif.ml[529,19766+6]..[541,20481+9])
                                        Pexp_match
                                        expression (lambda/simplif.ml[529,19766+18]..[529,19766+27])
                                          Pexp_apply
                                          expression (lambda/simplif.ml[529,19766+18]..[529,19766+25])
                                            Pexp_ident "simplif" (lambda/simplif.ml[529,19766+18]..[529,19766+25])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[529,19766+26]..[529,19766+27])
                                                Pexp_ident "l" (lambda/simplif.ml[529,19766+26]..[529,19766+27])
                                          ]
                                        [
                                          <case>
                                            pattern (lambda/simplif.ml[530,19799+8]..[530,19799+80])
                                              Ppat_construct "Lfunction" (lambda/simplif.ml[530,19799+8]..[530,19799+17])
                                              Some
                                                []
                                                pattern (lambda/simplif.ml[530,19799+17]..[530,19799+80])
                                                  Ppat_record Closed
                                                  [
                                                    "kind" (lambda/simplif.ml[530,19799+18]..[530,19799+22])
                                                      pattern (lambda/simplif.ml[530,19799+23]..[530,19799+30])
                                                        Ppat_construct "Curried" (lambda/simplif.ml[530,19799+23]..[530,19799+30])
                                                        None
                                                    "params" (lambda/simplif.ml[530,19799+32]..[530,19799+38])
                                                      pattern (lambda/simplif.ml[530,19799+39]..[530,19799+46])
                                                        Ppat_var "params'" (lambda/simplif.ml[530,19799+39]..[530,19799+46])
                                                    "return" (lambda/simplif.ml[530,19799+48]..[530,19799+54])
                                                      pattern (lambda/simplif.ml[530,19799+55]..[530,19799+62])
                                                        Ppat_var "return2" (lambda/simplif.ml[530,19799+55]..[530,19799+62])
                                                    "body" (lambda/simplif.ml[530,19799+64]..[530,19799+68]) ghost
                                                      pattern (lambda/simplif.ml[530,19799+64]..[530,19799+68])
                                                        Ppat_var "body" (lambda/simplif.ml[530,19799+64]..[530,19799+68])
                                                    "attr" (lambda/simplif.ml[530,19799+70]..[530,19799+74]) ghost
                                                      pattern (lambda/simplif.ml[530,19799+70]..[530,19799+74])
                                                        Ppat_var "attr" (lambda/simplif.ml[530,19799+70]..[530,19799+74])
                                                    "loc" (lambda/simplif.ml[530,19799+76]..[530,19799+79]) ghost
                                                      pattern (lambda/simplif.ml[530,19799+76]..[530,19799+79])
                                                        Ppat_var "loc" (lambda/simplif.ml[530,19799+76]..[530,19799+79])
                                                  ]
                                            <when>
                                              expression (lambda/simplif.ml[531,19880+13]..[532,19923+75])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[531,19880+28]..[531,19880+30])
                                                  Pexp_ident "&&" (lambda/simplif.ml[531,19880+28]..[531,19880+30])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[531,19880+13]..[531,19880+27])
                                                      Pexp_apply
                                                      expression (lambda/simplif.ml[531,19880+18]..[531,19880+19])
                                                        Pexp_ident "=" (lambda/simplif.ml[531,19880+18]..[531,19880+19])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (lambda/simplif.ml[531,19880+13]..[531,19880+17])
                                                            Pexp_ident "kind" (lambda/simplif.ml[531,19880+13]..[531,19880+17])
                                                        <arg>
                                                        Nolabel
                                                          expression (lambda/simplif.ml[531,19880+20]..[531,19880+27])
                                                            Pexp_construct "Curried" (lambda/simplif.ml[531,19880+20]..[531,19880+27])
                                                            None
                                                      ]
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[531,19880+31]..[532,19923+75])
                                                      Pexp_apply
                                                      expression (lambda/simplif.ml[531,19880+40]..[531,19880+42])
                                                        Pexp_ident "&&" (lambda/simplif.ml[531,19880+40]..[531,19880+42])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (lambda/simplif.ml[531,19880+31]..[531,19880+39])
                                                            Pexp_ident "optimize" (lambda/simplif.ml[531,19880+31]..[531,19880+39])
                                                        <arg>
                                                        Nolabel
                                                          expression (lambda/simplif.ml[532,19923+13]..[532,19923+75])
                                                            Pexp_apply
                                                            expression (lambda/simplif.ml[532,19923+54]..[532,19923+56])
                                                              Pexp_ident "<=" (lambda/simplif.ml[532,19923+54]..[532,19923+56])
                                                            [
                                                              <arg>
                                                              Nolabel
                                                                expression (lambda/simplif.ml[532,19923+13]..[532,19923+53])
                                                                  Pexp_apply
                                                                  expression (lambda/simplif.ml[532,19923+32]..[532,19923+33])
                                                                    Pexp_ident "+" (lambda/simplif.ml[532,19923+32]..[532,19923+33])
                                                                  [
                                                                    <arg>
                                                                    Nolabel
                                                                      expression (lambda/simplif.ml[532,19923+13]..[532,19923+31])
Pexp_apply
expression (lambda/simplif.ml[532,19923+13]..[532,19923+24])
  Pexp_ident "List.length" (lambda/simplif.ml[532,19923+13]..[532,19923+24])
[
  <arg>
  Nolabel
    expression (lambda/simplif.ml[532,19923+25]..[532,19923+31])
      Pexp_ident "params" (lambda/simplif.ml[532,19923+25]..[532,19923+31])
]
                                                                    <arg>
                                                                    Nolabel
                                                                      expression (lambda/simplif.ml[532,19923+34]..[532,19923+53])
Pexp_apply
expression (lambda/simplif.ml[532,19923+34]..[532,19923+45])
  Pexp_ident "List.length" (lambda/simplif.ml[532,19923+34]..[532,19923+45])
[
  <arg>
  Nolabel
    expression (lambda/simplif.ml[532,19923+46]..[532,19923+53])
      Pexp_ident "params'" (lambda/simplif.ml[532,19923+46]..[532,19923+53])
]
                                                                  ]
                                                              <arg>
                                                              Nolabel
                                                                expression (lambda/simplif.ml[532,19923+57]..[532,19923+75])
                                                                  Pexp_apply
                                                                  expression (lambda/simplif.ml[532,19923+57]..[532,19923+73])
                                                                    Pexp_ident "Lambda.max_arity" (lambda/simplif.ml[532,19923+57]..[532,19923+73])
                                                                  [
                                                                    <arg>
                                                                    Nolabel
                                                                      expression (lambda/simplif.ml[532,19923+73]..[532,19923+75])
Pexp_construct "()" (lambda/simplif.ml[532,19923+73]..[532,19923+75])
None
                                                                  ]
                                                            ]
                                                      ]
                                                ]
                                            expression (lambda/simplif.ml[537,20284+10]..[538,20318+77])
                                              Pexp_let Nonrec
                                              [
                                                <def>
                                                  pattern (lambda/simplif.ml[537,20284+14]..[537,20284+20])
                                                    Ppat_var "return" (lambda/simplif.ml[537,20284+14]..[537,20284+20])
                                                  expression (lambda/simplif.ml[537,20284+23]..[537,20284+30])
                                                    Pexp_ident "return2" (lambda/simplif.ml[537,20284+23]..[537,20284+30])
                                              ]
                                              expression (lambda/simplif.ml[538,20318+10]..[538,20318+77])
                                                Pexp_construct "Lfunction" (lambda/simplif.ml[538,20318+10]..[538,20318+19])
                                                Some
                                                  expression (lambda/simplif.ml[538,20318+19]..[538,20318+77])
                                                    Pexp_record
                                                    [
                                                      "kind" (lambda/simplif.ml[538,20318+20]..[538,20318+24]) ghost
                                                        expression (lambda/simplif.ml[538,20318+20]..[538,20318+24])
                                                          Pexp_ident "kind" (lambda/simplif.ml[538,20318+20]..[538,20318+24])
                                                      "params" (lambda/simplif.ml[538,20318+26]..[538,20318+32])
                                                        expression (lambda/simplif.ml[538,20318+35]..[538,20318+51])
                                                          Pexp_apply
                                                          expression (lambda/simplif.ml[538,20318+42]..[538,20318+43])
                                                            Pexp_ident "@" (lambda/simplif.ml[538,20318+42]..[538,20318+43])
                                                          [
                                                            <arg>
                                                            Nolabel
                                                              expression (lambda/simplif.ml[538,20318+35]..[538,20318+41])
                                                                Pexp_ident "params" (lambda/simplif.ml[538,20318+35]..[538,20318+41])
                                                            <arg>
                                                            Nolabel
                                                              expression (lambda/simplif.ml[538,20318+44]..[538,20318+51])
                                                                Pexp_ident "params'" (lambda/simplif.ml[538,20318+44]..[538,20318+51])
                                                          ]
                                                      "return" (lambda/simplif.ml[538,20318+53]..[538,20318+59]) ghost
                                                        expression (lambda/simplif.ml[538,20318+53]..[538,20318+59])
                                                          Pexp_ident "return" (lambda/simplif.ml[538,20318+53]..[538,20318+59])
                                                      "body" (lambda/simplif.ml[538,20318+61]..[538,20318+65]) ghost
                                                        expression (lambda/simplif.ml[538,20318+61]..[538,20318+65])
                                                          Pexp_ident "body" (lambda/simplif.ml[538,20318+61]..[538,20318+65])
                                                      "attr" (lambda/simplif.ml[538,20318+67]..[538,20318+71]) ghost
                                                        expression (lambda/simplif.ml[538,20318+67]..[538,20318+71])
                                                          Pexp_ident "attr" (lambda/simplif.ml[538,20318+67]..[538,20318+71])
                                                      "loc" (lambda/simplif.ml[538,20318+73]..[538,20318+76]) ghost
                                                        expression (lambda/simplif.ml[538,20318+73]..[538,20318+76])
                                                          Pexp_ident "loc" (lambda/simplif.ml[538,20318+73]..[538,20318+76])
                                                    ]
                                                    None
                                          <case>
                                            pattern (lambda/simplif.ml[539,20396+8]..[539,20396+12])
                                              Ppat_var "body" (lambda/simplif.ml[539,20396+8]..[539,20396+12])
                                            expression (lambda/simplif.ml[540,20412+10]..[540,20412+68])
                                              Pexp_construct "Lfunction" (lambda/simplif.ml[540,20412+10]..[540,20412+19])
                                              Some
                                                expression (lambda/simplif.ml[540,20412+19]..[540,20412+68])
                                                  Pexp_record
                                                  [
                                                    "kind" (lambda/simplif.ml[540,20412+20]..[540,20412+24]) ghost
                                                      expression (lambda/simplif.ml[540,20412+20]..[540,20412+24])
                                                        Pexp_ident "kind" (lambda/simplif.ml[540,20412+20]..[540,20412+24])
                                                    "params" (lambda/simplif.ml[540,20412+26]..[540,20412+32]) ghost
                                                      expression (lambda/simplif.ml[540,20412+26]..[540,20412+32])
                                                        Pexp_ident "params" (lambda/simplif.ml[540,20412+26]..[540,20412+32])
                                                    "return" (lambda/simplif.ml[540,20412+34]..[540,20412+40])
                                                      expression (lambda/simplif.ml[540,20412+43]..[540,20412+50])
                                                        Pexp_ident "return1" (lambda/simplif.ml[540,20412+43]..[540,20412+50])
                                                    "body" (lambda/simplif.ml[540,20412+52]..[540,20412+56]) ghost
                                                      expression (lambda/simplif.ml[540,20412+52]..[540,20412+56])
                                                        Pexp_ident "body" (lambda/simplif.ml[540,20412+52]..[540,20412+56])
                                                    "attr" (lambda/simplif.ml[540,20412+58]..[540,20412+62]) ghost
                                                      expression (lambda/simplif.ml[540,20412+58]..[540,20412+62])
                                                        Pexp_ident "attr" (lambda/simplif.ml[540,20412+58]..[540,20412+62])
                                                    "loc" (lambda/simplif.ml[540,20412+64]..[540,20412+67]) ghost
                                                      expression (lambda/simplif.ml[540,20412+64]..[540,20412+67])
                                                        Pexp_ident "loc" (lambda/simplif.ml[540,20412+64]..[540,20412+67])
                                                  ]
                                                  None
                                        ]
                                    <case>
                                      pattern (lambda/simplif.ml[542,20491+4]..[542,20491+33])
                                        Ppat_construct "Llet" (lambda/simplif.ml[542,20491+4]..[542,20491+8])
                                        Some
                                          []
                                          pattern (lambda/simplif.ml[542,20491+8]..[542,20491+33])
                                            Ppat_tuple
                                            [
                                              pattern (lambda/simplif.ml[542,20491+9]..[542,20491+13])
                                                Ppat_var "_str" (lambda/simplif.ml[542,20491+9]..[542,20491+13])
                                              pattern (lambda/simplif.ml[542,20491+15]..[542,20491+17])
                                                Ppat_var "_k" (lambda/simplif.ml[542,20491+15]..[542,20491+17])
                                              pattern (lambda/simplif.ml[542,20491+19]..[542,20491+20])
                                                Ppat_var "v" (lambda/simplif.ml[542,20491+19]..[542,20491+20])
                                              pattern (lambda/simplif.ml[542,20491+22]..[542,20491+28])
                                                Ppat_construct "Lvar" (lambda/simplif.ml[542,20491+22]..[542,20491+26])
                                                Some
                                                  []
                                                  pattern (lambda/simplif.ml[542,20491+27]..[542,20491+28])
                                                    Ppat_var "w" (lambda/simplif.ml[542,20491+27]..[542,20491+28])
                                              pattern (lambda/simplif.ml[542,20491+30]..[542,20491+32])
                                                Ppat_var "l2" (lambda/simplif.ml[542,20491+30]..[542,20491+32])
                                            ]
                                      <when>
                                        expression (lambda/simplif.ml[542,20491+39]..[542,20491+47])
                                          Pexp_ident "optimize" (lambda/simplif.ml[542,20491+39]..[542,20491+47])
                                      expression (lambda/simplif.ml[543,20542+6]..[544,20588+16])
                                        Pexp_sequence
                                        expression (lambda/simplif.ml[543,20542+6]..[543,20542+44])
                                          Pexp_apply
                                          expression (lambda/simplif.ml[543,20542+6]..[543,20542+17])
                                            Pexp_ident "Hashtbl.add" (lambda/simplif.ml[543,20542+6]..[543,20542+17])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[543,20542+18]..[543,20542+23])
                                                Pexp_ident "subst" (lambda/simplif.ml[543,20542+18]..[543,20542+23])
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[543,20542+24]..[543,20542+25])
                                                Pexp_ident "v" (lambda/simplif.ml[543,20542+24]..[543,20542+25])
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[543,20542+26]..[543,20542+44])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[543,20542+27]..[543,20542+34])
                                                  Pexp_ident "simplif" (lambda/simplif.ml[543,20542+27]..[543,20542+34])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[543,20542+35]..[543,20542+43])
                                                      Pexp_construct "Lvar" (lambda/simplif.ml[543,20542+36]..[543,20542+40])
                                                      Some
                                                        expression (lambda/simplif.ml[543,20542+41]..[543,20542+42])
                                                          Pexp_ident "w" (lambda/simplif.ml[543,20542+41]..[543,20542+42])
                                                ]
                                          ]
                                        expression (lambda/simplif.ml[544,20588+6]..[544,20588+16])
                                          Pexp_apply
                                          expression (lambda/simplif.ml[544,20588+6]..[544,20588+13])
                                            Pexp_ident "simplif" (lambda/simplif.ml[544,20588+6]..[544,20588+13])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[544,20588+14]..[544,20588+16])
                                                Pexp_ident "l2" (lambda/simplif.ml[544,20588+14]..[544,20588+16])
                                          ]
                                    <case>
                                      pattern (lambda/simplif.ml[545,20605+4]..[546,20631+78])
                                        Ppat_construct "Llet" (lambda/simplif.ml[545,20605+4]..[545,20605+8])
                                        Some
                                          []
                                          pattern (lambda/simplif.ml[545,20605+8]..[546,20631+78])
                                            Ppat_tuple
                                            [
                                              pattern (lambda/simplif.ml[545,20605+9]..[545,20605+15])
                                                Ppat_construct "Strict" (lambda/simplif.ml[545,20605+9]..[545,20605+15])
                                                None
                                              pattern (lambda/simplif.ml[545,20605+17]..[545,20605+21])
                                                Ppat_var "kind" (lambda/simplif.ml[545,20605+17]..[545,20605+21])
                                              pattern (lambda/simplif.ml[545,20605+23]..[545,20605+24])
                                                Ppat_var "v" (lambda/simplif.ml[545,20605+23]..[545,20605+24])
                                              pattern (lambda/simplif.ml[546,20631+9]..[546,20631+70])
                                                Ppat_construct "Lprim" (lambda/simplif.ml[546,20631+9]..[546,20631+14])
                                                Some
                                                  []
                                                  pattern (lambda/simplif.ml[546,20631+14]..[546,20631+70])
                                                    Ppat_tuple
                                                    [
                                                      pattern (lambda/simplif.ml[546,20631+15]..[546,20631+55])
                                                        Ppat_alias "prim" (lambda/simplif.ml[546,20631+51]..[546,20631+55])
                                                        pattern (lambda/simplif.ml[546,20631+15]..[546,20631+47])
                                                          Ppat_construct "Pmakeblock" (lambda/simplif.ml[546,20631+15]..[546,20631+25])
                                                          Some
                                                            []
                                                            pattern (lambda/simplif.ml[546,20631+25]..[546,20631+47])
                                                              Ppat_tuple
                                                              [
                                                                pattern (lambda/simplif.ml[546,20631+26]..[546,20631+27])
                                                                  Ppat_constant PConst_int (0,None)
                                                                pattern (lambda/simplif.ml[546,20631+29]..[546,20631+36])
                                                                  Ppat_construct "Mutable" (lambda/simplif.ml[546,20631+29]..[546,20631+36])
                                                                  None
                                                                pattern (lambda/simplif.ml[546,20631+38]..[546,20631+46])
                                                                  Ppat_var "kind_ref" (lambda/simplif.ml[546,20631+38]..[546,20631+46])
                                                              ]
                                                      pattern (lambda/simplif.ml[546,20631+57]..[546,20631+64])
                                                        Ppat_construct "::" (lambda/simplif.ml[546,20631+58]..[546,20631+64]) ghost
                                                        Some
                                                          []
                                                          pattern (lambda/simplif.ml[546,20631+58]..[546,20631+64]) ghost
                                                            Ppat_tuple
                                                            [
                                                              pattern (lambda/simplif.ml[546,20631+58]..[546,20631+63])
                                                                Ppat_var "linit" (lambda/simplif.ml[546,20631+58]..[546,20631+63])
                                                              pattern (lambda/simplif.ml[546,20631+63]..[546,20631+64]) ghost
                                                                Ppat_construct "[]" (lambda/simplif.ml[546,20631+63]..[546,20631+64]) ghost
                                                                None
                                                            ]
                                                      pattern (lambda/simplif.ml[546,20631+66]..[546,20631+69])
                                                        Ppat_var "loc" (lambda/simplif.ml[546,20631+66]..[546,20631+69])
                                                    ]
                                              pattern (lambda/simplif.ml[546,20631+72]..[546,20631+77])
                                                Ppat_var "lbody" (lambda/simplif.ml[546,20631+72]..[546,20631+77])
                                            ]
                                      <when>
                                        expression (lambda/simplif.ml[547,20710+9]..[547,20710+17])
                                          Pexp_ident "optimize" (lambda/simplif.ml[547,20710+9]..[547,20710+17])
                                      expression (lambda/simplif.ml[548,20731+6]..[559,21125+9])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (lambda/simplif.ml[548,20731+10]..[548,20731+16])
                                              Ppat_var "slinit" (lambda/simplif.ml[548,20731+10]..[548,20731+16])
                                            expression (lambda/simplif.ml[548,20731+19]..[548,20731+32])
                                              Pexp_apply
                                              expression (lambda/simplif.ml[548,20731+19]..[548,20731+26])
                                                Pexp_ident "simplif" (lambda/simplif.ml[548,20731+19]..[548,20731+26])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[548,20731+27]..[548,20731+32])
                                                    Pexp_ident "linit" (lambda/simplif.ml[548,20731+27]..[548,20731+32])
                                              ]
                                        ]
                                        expression (lambda/simplif.ml[549,20767+6]..[559,21125+9])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (lambda/simplif.ml[549,20767+10]..[549,20767+16])
                                                Ppat_var "slbody" (lambda/simplif.ml[549,20767+10]..[549,20767+16])
                                              expression (lambda/simplif.ml[549,20767+19]..[549,20767+32])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[549,20767+19]..[549,20767+26])
                                                  Pexp_ident "simplif" (lambda/simplif.ml[549,20767+19]..[549,20767+26])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[549,20767+27]..[549,20767+32])
                                                      Pexp_ident "lbody" (lambda/simplif.ml[549,20767+27]..[549,20767+32])
                                                ]
                                          ]
                                          expression (lambda/simplif.ml[550,20803+6]..[559,21125+9])
                                            Pexp_try
                                            expression (lambda/simplif.ml[551,20819+8]..[556,20976+55])
                                              Pexp_let Nonrec
                                              [
                                                <def>
                                                  pattern (lambda/simplif.ml[551,20819+12]..[551,20819+16])
                                                    Ppat_var "kind" (lambda/simplif.ml[551,20819+12]..[551,20819+16])
                                                  expression (lambda/simplif.ml[551,20819+19]..[554,20930+34])
                                                    Pexp_match
                                                    expression (lambda/simplif.ml[551,20819+25]..[551,20819+33])
                                                      Pexp_ident "kind_ref" (lambda/simplif.ml[551,20819+25]..[551,20819+33])
                                                    [
                                                      <case>
                                                        pattern (lambda/simplif.ml[552,20858+12]..[552,20858+16])
                                                          Ppat_construct "None" (lambda/simplif.ml[552,20858+12]..[552,20858+16])
                                                          None
                                                        expression (lambda/simplif.ml[552,20858+20]..[552,20858+27])
                                                          Pexp_construct "Pgenval" (lambda/simplif.ml[552,20858+20]..[552,20858+27])
                                                          None
                                                      <case>
                                                        pattern (lambda/simplif.ml[553,20886+12]..[553,20886+29])
                                                          Ppat_construct "Some" (lambda/simplif.ml[553,20886+12]..[553,20886+16])
                                                          Some
                                                            []
                                                            pattern (lambda/simplif.ml[553,20886+17]..[553,20886+29])
                                                              Ppat_construct "::" (lambda/simplif.ml[553,20886+18]..[553,20886+29]) ghost
                                                              Some
                                                                []
                                                                pattern (lambda/simplif.ml[553,20886+18]..[553,20886+29]) ghost
                                                                  Ppat_tuple
                                                                  [
                                                                    pattern (lambda/simplif.ml[553,20886+18]..[553,20886+28])
                                                                      Ppat_var "field_kind" (lambda/simplif.ml[553,20886+18]..[553,20886+28])
                                                                    pattern (lambda/simplif.ml[553,20886+28]..[553,20886+29]) ghost
                                                                      Ppat_construct "[]" (lambda/simplif.ml[553,20886+28]..[553,20886+29]) ghost
                                                                      None
                                                                  ]
                                                        expression (lambda/simplif.ml[553,20886+33]..[553,20886+43])
                                                          Pexp_ident "field_kind" (lambda/simplif.ml[553,20886+33]..[553,20886+43])
                                                      <case>
                                                        pattern (lambda/simplif.ml[554,20930+12]..[554,20930+18])
                                                          Ppat_construct "Some" (lambda/simplif.ml[554,20930+12]..[554,20930+16])
                                                          Some
                                                            []
                                                            pattern (lambda/simplif.ml[554,20930+17]..[554,20930+18])
                                                              Ppat_any
                                                        expression (lambda/simplif.ml[554,20930+22]..[554,20930+34])
                                                          Pexp_assert
                                                          expression (lambda/simplif.ml[554,20930+29]..[554,20930+34])
                                                            Pexp_construct "false" (lambda/simplif.ml[554,20930+29]..[554,20930+34])
                                                            None
                                                    ]
                                              ]
                                              expression (lambda/simplif.ml[556,20976+8]..[556,20976+55])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[556,20976+8]..[556,20976+16])
                                                  Pexp_ident "mkmutlet" (lambda/simplif.ml[556,20976+8]..[556,20976+16])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[556,20976+17]..[556,20976+21])
                                                      Pexp_ident "kind" (lambda/simplif.ml[556,20976+17]..[556,20976+21])
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[556,20976+22]..[556,20976+23])
                                                      Pexp_ident "v" (lambda/simplif.ml[556,20976+22]..[556,20976+23])
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[556,20976+24]..[556,20976+30])
                                                      Pexp_ident "slinit" (lambda/simplif.ml[556,20976+24]..[556,20976+30])
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[556,20976+31]..[556,20976+55])
                                                      Pexp_apply
                                                      expression (lambda/simplif.ml[556,20976+32]..[556,20976+45])
                                                        Pexp_ident "eliminate_ref" (lambda/simplif.ml[556,20976+32]..[556,20976+45])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (lambda/simplif.ml[556,20976+46]..[556,20976+47])
                                                            Pexp_ident "v" (lambda/simplif.ml[556,20976+46]..[556,20976+47])
                                                        <arg>
                                                        Nolabel
                                                          expression (lambda/simplif.ml[556,20976+48]..[556,20976+54])
                                                            Pexp_ident "slbody" (lambda/simplif.ml[556,20976+48]..[556,20976+54])
                                                      ]
                                                ]
                                            [
                                              <case>
                                                pattern (lambda/simplif.ml[557,21032+11]..[557,21032+25])
                                                  Ppat_construct "Real_reference" (lambda/simplif.ml[557,21032+11]..[557,21032+25])
                                                  None
                                                expression (lambda/simplif.ml[558,21061+8]..[558,21061+63])
                                                  Pexp_apply
                                                  expression (lambda/simplif.ml[558,21061+8]..[558,21061+13])
                                                    Pexp_ident "mklet" (lambda/simplif.ml[558,21061+8]..[558,21061+13])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (lambda/simplif.ml[558,21061+14]..[558,21061+20])
                                                        Pexp_construct "Strict" (lambda/simplif.ml[558,21061+14]..[558,21061+20])
                                                        None
                                                    <arg>
                                                    Nolabel
                                                      expression (lambda/simplif.ml[558,21061+21]..[558,21061+25])
                                                        Pexp_ident "kind" (lambda/simplif.ml[558,21061+21]..[558,21061+25])
                                                    <arg>
                                                    Nolabel
                                                      expression (lambda/simplif.ml[558,21061+26]..[558,21061+27])
                                                        Pexp_ident "v" (lambda/simplif.ml[558,21061+26]..[558,21061+27])
                                                    <arg>
                                                    Nolabel
                                                      expression (lambda/simplif.ml[558,21061+28]..[558,21061+56])
                                                        Pexp_construct "Lprim" (lambda/simplif.ml[558,21061+29]..[558,21061+34])
                                                        Some
                                                          expression (lambda/simplif.ml[558,21061+34]..[558,21061+55])
                                                            Pexp_tuple
                                                            [
                                                              expression (lambda/simplif.ml[558,21061+35]..[558,21061+39])
                                                                Pexp_ident "prim" (lambda/simplif.ml[558,21061+35]..[558,21061+39])
                                                              expression (lambda/simplif.ml[558,21061+41]..[558,21061+49])
                                                                Pexp_construct "::" (lambda/simplif.ml[558,21061+42]..[558,21061+49]) ghost
                                                                Some
                                                                  expression (lambda/simplif.ml[558,21061+42]..[558,21061+49]) ghost
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (lambda/simplif.ml[558,21061+42]..[558,21061+48])
Pexp_ident "slinit" (lambda/simplif.ml[558,21061+42]..[558,21061+48])
                                                                      expression (lambda/simplif.ml[558,21061+48]..[558,21061+49]) ghost
Pexp_construct "[]" (lambda/simplif.ml[558,21061+48]..[558,21061+49]) ghost
None
                                                                    ]
                                                              expression (lambda/simplif.ml[558,21061+51]..[558,21061+54])
                                                                Pexp_ident "loc" (lambda/simplif.ml[558,21061+51]..[558,21061+54])
                                                            ]
                                                    <arg>
                                                    Nolabel
                                                      expression (lambda/simplif.ml[558,21061+57]..[558,21061+63])
                                                        Pexp_ident "slbody" (lambda/simplif.ml[558,21061+57]..[558,21061+63])
                                                  ]
                                            ]
                                    <case>
                                      pattern (lambda/simplif.ml[560,21135+4]..[560,21135+32])
                                        Ppat_construct "Llet" (lambda/simplif.ml[560,21135+4]..[560,21135+8])
                                        Some
                                          []
                                          pattern (lambda/simplif.ml[560,21135+8]..[560,21135+32])
                                            Ppat_tuple
                                            [
                                              pattern (lambda/simplif.ml[560,21135+9]..[560,21135+14])
                                                Ppat_construct "Alias" (lambda/simplif.ml[560,21135+9]..[560,21135+14])
                                                None
                                              pattern (lambda/simplif.ml[560,21135+16]..[560,21135+20])
                                                Ppat_var "kind" (lambda/simplif.ml[560,21135+16]..[560,21135+20])
                                              pattern (lambda/simplif.ml[560,21135+22]..[560,21135+23])
                                                Ppat_var "v" (lambda/simplif.ml[560,21135+22]..[560,21135+23])
                                              pattern (lambda/simplif.ml[560,21135+25]..[560,21135+27])
                                                Ppat_var "l1" (lambda/simplif.ml[560,21135+25]..[560,21135+27])
                                              pattern (lambda/simplif.ml[560,21135+29]..[560,21135+31])
                                                Ppat_var "l2" (lambda/simplif.ml[560,21135+29]..[560,21135+31])
                                            ]
                                      expression (lambda/simplif.ml[561,21171+6]..[565,21360+9])
                                        Pexp_match
                                        expression (lambda/simplif.ml[561,21171+18]..[561,21171+29])
                                          Pexp_apply
                                          expression (lambda/simplif.ml[561,21171+18]..[561,21171+27])
                                            Pexp_ident "count_var" (lambda/simplif.ml[561,21171+18]..[561,21171+27])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[561,21171+28]..[561,21171+29])
                                                Pexp_ident "v" (lambda/simplif.ml[561,21171+28]..[561,21171+29])
                                          ]
                                        [
                                          <case>
                                            pattern (lambda/simplif.ml[562,21206+8]..[562,21206+9])
                                              Ppat_constant PConst_int (0,None)
                                            expression (lambda/simplif.ml[562,21206+13]..[562,21206+23])
                                              Pexp_apply
                                              expression (lambda/simplif.ml[562,21206+13]..[562,21206+20])
                                                Pexp_ident "simplif" (lambda/simplif.ml[562,21206+13]..[562,21206+20])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[562,21206+21]..[562,21206+23])
                                                    Pexp_ident "l2" (lambda/simplif.ml[562,21206+21]..[562,21206+23])
                                              ]
                                          <case>
                                            pattern (lambda/simplif.ml[563,21230+8]..[563,21230+9])
                                              Ppat_constant PConst_int (1,None)
                                            <when>
                                              expression (lambda/simplif.ml[563,21230+15]..[563,21230+23])
                                                Pexp_ident "optimize" (lambda/simplif.ml[563,21230+15]..[563,21230+23])
                                            expression (lambda/simplif.ml[563,21230+27]..[563,21230+71])
                                              Pexp_sequence
                                              expression (lambda/simplif.ml[563,21230+27]..[563,21230+59])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[563,21230+27]..[563,21230+38])
                                                  Pexp_ident "Hashtbl.add" (lambda/simplif.ml[563,21230+27]..[563,21230+38])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[563,21230+39]..[563,21230+44])
                                                      Pexp_ident "subst" (lambda/simplif.ml[563,21230+39]..[563,21230+44])
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[563,21230+45]..[563,21230+46])
                                                      Pexp_ident "v" (lambda/simplif.ml[563,21230+45]..[563,21230+46])
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[563,21230+47]..[563,21230+59])
                                                      Pexp_apply
                                                      expression (lambda/simplif.ml[563,21230+48]..[563,21230+55])
                                                        Pexp_ident "simplif" (lambda/simplif.ml[563,21230+48]..[563,21230+55])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (lambda/simplif.ml[563,21230+56]..[563,21230+58])
                                                            Pexp_ident "l1" (lambda/simplif.ml[563,21230+56]..[563,21230+58])
                                                      ]
                                                ]
                                              expression (lambda/simplif.ml[563,21230+61]..[563,21230+71])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[563,21230+61]..[563,21230+68])
                                                  Pexp_ident "simplif" (lambda/simplif.ml[563,21230+61]..[563,21230+68])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[563,21230+69]..[563,21230+71])
                                                      Pexp_ident "l2" (lambda/simplif.ml[563,21230+69]..[563,21230+71])
                                                ]
                                          <case>
                                            pattern (lambda/simplif.ml[564,21302+8]..[564,21302+9])
                                              Ppat_any
                                            expression (lambda/simplif.ml[564,21302+13]..[564,21302+57])
                                              Pexp_construct "Llet" (lambda/simplif.ml[564,21302+13]..[564,21302+17])
                                              Some
                                                expression (lambda/simplif.ml[564,21302+17]..[564,21302+57])
                                                  Pexp_tuple
                                                  [
                                                    expression (lambda/simplif.ml[564,21302+18]..[564,21302+23])
                                                      Pexp_construct "Alias" (lambda/simplif.ml[564,21302+18]..[564,21302+23])
                                                      None
                                                    expression (lambda/simplif.ml[564,21302+25]..[564,21302+29])
                                                      Pexp_ident "kind" (lambda/simplif.ml[564,21302+25]..[564,21302+29])
                                                    expression (lambda/simplif.ml[564,21302+31]..[564,21302+32])
                                                      Pexp_ident "v" (lambda/simplif.ml[564,21302+31]..[564,21302+32])
                                                    expression (lambda/simplif.ml[564,21302+34]..[564,21302+44])
                                                      Pexp_apply
                                                      expression (lambda/simplif.ml[564,21302+34]..[564,21302+41])
                                                        Pexp_ident "simplif" (lambda/simplif.ml[564,21302+34]..[564,21302+41])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (lambda/simplif.ml[564,21302+42]..[564,21302+44])
                                                            Pexp_ident "l1" (lambda/simplif.ml[564,21302+42]..[564,21302+44])
                                                      ]
                                                    expression (lambda/simplif.ml[564,21302+46]..[564,21302+56])
                                                      Pexp_apply
                                                      expression (lambda/simplif.ml[564,21302+46]..[564,21302+53])
                                                        Pexp_ident "simplif" (lambda/simplif.ml[564,21302+46]..[564,21302+53])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (lambda/simplif.ml[564,21302+54]..[564,21302+56])
                                                            Pexp_ident "l2" (lambda/simplif.ml[564,21302+54]..[564,21302+56])
                                                      ]
                                                  ]
                                        ]
                                    <case>
                                      pattern (lambda/simplif.ml[566,21370+4]..[566,21370+36])
                                        Ppat_construct "Llet" (lambda/simplif.ml[566,21370+4]..[566,21370+8])
                                        Some
                                          []
                                          pattern (lambda/simplif.ml[566,21370+8]..[566,21370+36])
                                            Ppat_tuple
                                            [
                                              pattern (lambda/simplif.ml[566,21370+9]..[566,21370+18])
                                                Ppat_construct "StrictOpt" (lambda/simplif.ml[566,21370+9]..[566,21370+18])
                                                None
                                              pattern (lambda/simplif.ml[566,21370+20]..[566,21370+24])
                                                Ppat_var "kind" (lambda/simplif.ml[566,21370+20]..[566,21370+24])
                                              pattern (lambda/simplif.ml[566,21370+26]..[566,21370+27])
                                                Ppat_var "v" (lambda/simplif.ml[566,21370+26]..[566,21370+27])
                                              pattern (lambda/simplif.ml[566,21370+29]..[566,21370+31])
                                                Ppat_var "l1" (lambda/simplif.ml[566,21370+29]..[566,21370+31])
                                              pattern (lambda/simplif.ml[566,21370+33]..[566,21370+35])
                                                Ppat_var "l2" (lambda/simplif.ml[566,21370+33]..[566,21370+35])
                                            ]
                                      expression (lambda/simplif.ml[567,21410+6]..[570,21531+9])
                                        Pexp_match
                                        expression (lambda/simplif.ml[567,21410+18]..[567,21410+29])
                                          Pexp_apply
                                          expression (lambda/simplif.ml[567,21410+18]..[567,21410+27])
                                            Pexp_ident "count_var" (lambda/simplif.ml[567,21410+18]..[567,21410+27])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[567,21410+28]..[567,21410+29])
                                                Pexp_ident "v" (lambda/simplif.ml[567,21410+28]..[567,21410+29])
                                          ]
                                        [
                                          <case>
                                            pattern (lambda/simplif.ml[568,21445+8]..[568,21445+9])
                                              Ppat_constant PConst_int (0,None)
                                            expression (lambda/simplif.ml[568,21445+13]..[568,21445+23])
                                              Pexp_apply
                                              expression (lambda/simplif.ml[568,21445+13]..[568,21445+20])
                                                Pexp_ident "simplif" (lambda/simplif.ml[568,21445+13]..[568,21445+20])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[568,21445+21]..[568,21445+23])
                                                    Pexp_ident "l2" (lambda/simplif.ml[568,21445+21]..[568,21445+23])
                                              ]
                                          <case>
                                            pattern (lambda/simplif.ml[569,21469+8]..[569,21469+9])
                                              Ppat_any
                                            expression (lambda/simplif.ml[569,21469+13]..[569,21469+61])
                                              Pexp_apply
                                              expression (lambda/simplif.ml[569,21469+13]..[569,21469+18])
                                                Pexp_ident "mklet" (lambda/simplif.ml[569,21469+13]..[569,21469+18])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[569,21469+19]..[569,21469+28])
                                                    Pexp_construct "StrictOpt" (lambda/simplif.ml[569,21469+19]..[569,21469+28])
                                                    None
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[569,21469+29]..[569,21469+33])
                                                    Pexp_ident "kind" (lambda/simplif.ml[569,21469+29]..[569,21469+33])
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[569,21469+34]..[569,21469+35])
                                                    Pexp_ident "v" (lambda/simplif.ml[569,21469+34]..[569,21469+35])
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[569,21469+36]..[569,21469+48])
                                                    Pexp_apply
                                                    expression (lambda/simplif.ml[569,21469+37]..[569,21469+44])
                                                      Pexp_ident "simplif" (lambda/simplif.ml[569,21469+37]..[569,21469+44])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (lambda/simplif.ml[569,21469+45]..[569,21469+47])
                                                          Pexp_ident "l1" (lambda/simplif.ml[569,21469+45]..[569,21469+47])
                                                    ]
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[569,21469+49]..[569,21469+61])
                                                    Pexp_apply
                                                    expression (lambda/simplif.ml[569,21469+50]..[569,21469+57])
                                                      Pexp_ident "simplif" (lambda/simplif.ml[569,21469+50]..[569,21469+57])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (lambda/simplif.ml[569,21469+58]..[569,21469+60])
                                                          Pexp_ident "l2" (lambda/simplif.ml[569,21469+58]..[569,21469+60])
                                                    ]
                                              ]
                                        ]
                                    <case>
                                      pattern (lambda/simplif.ml[571,21541+4]..[571,21541+30])
                                        Ppat_construct "Llet" (lambda/simplif.ml[571,21541+4]..[571,21541+8])
                                        Some
                                          []
                                          pattern (lambda/simplif.ml[571,21541+8]..[571,21541+30])
                                            Ppat_tuple
                                            [
                                              pattern (lambda/simplif.ml[571,21541+9]..[571,21541+12])
                                                Ppat_var "str" (lambda/simplif.ml[571,21541+9]..[571,21541+12])
                                              pattern (lambda/simplif.ml[571,21541+14]..[571,21541+18])
                                                Ppat_var "kind" (lambda/simplif.ml[571,21541+14]..[571,21541+18])
                                              pattern (lambda/simplif.ml[571,21541+20]..[571,21541+21])
                                                Ppat_var "v" (lambda/simplif.ml[571,21541+20]..[571,21541+21])
                                              pattern (lambda/simplif.ml[571,21541+23]..[571,21541+25])
                                                Ppat_var "l1" (lambda/simplif.ml[571,21541+23]..[571,21541+25])
                                              pattern (lambda/simplif.ml[571,21541+27]..[571,21541+29])
                                                Ppat_var "l2" (lambda/simplif.ml[571,21541+27]..[571,21541+29])
                                            ]
                                      expression (lambda/simplif.ml[571,21541+34]..[571,21541+76])
                                        Pexp_apply
                                        expression (lambda/simplif.ml[571,21541+34]..[571,21541+39])
                                          Pexp_ident "mklet" (lambda/simplif.ml[571,21541+34]..[571,21541+39])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lambda/simplif.ml[571,21541+40]..[571,21541+43])
                                              Pexp_ident "str" (lambda/simplif.ml[571,21541+40]..[571,21541+43])
                                          <arg>
                                          Nolabel
                                            expression (lambda/simplif.ml[571,21541+44]..[571,21541+48])
                                              Pexp_ident "kind" (lambda/simplif.ml[571,21541+44]..[571,21541+48])
                                          <arg>
                                          Nolabel
                                            expression (lambda/simplif.ml[571,21541+49]..[571,21541+50])
                                              Pexp_ident "v" (lambda/simplif.ml[571,21541+49]..[571,21541+50])
                                          <arg>
                                          Nolabel
                                            expression (lambda/simplif.ml[571,21541+51]..[571,21541+63])
                                              Pexp_apply
                                              expression (lambda/simplif.ml[571,21541+52]..[571,21541+59])
                                                Pexp_ident "simplif" (lambda/simplif.ml[571,21541+52]..[571,21541+59])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[571,21541+60]..[571,21541+62])
                                                    Pexp_ident "l1" (lambda/simplif.ml[571,21541+60]..[571,21541+62])
                                              ]
                                          <arg>
                                          Nolabel
                                            expression (lambda/simplif.ml[571,21541+64]..[571,21541+76])
                                              Pexp_apply
                                              expression (lambda/simplif.ml[571,21541+65]..[571,21541+72])
                                                Pexp_ident "simplif" (lambda/simplif.ml[571,21541+65]..[571,21541+72])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[571,21541+73]..[571,21541+75])
                                                    Pexp_ident "l2" (lambda/simplif.ml[571,21541+73]..[571,21541+75])
                                              ]
                                        ]
                                    <case>
                                      pattern (lambda/simplif.ml[572,21618+4]..[572,21618+28])
                                        Ppat_construct "Lmutlet" (lambda/simplif.ml[572,21618+4]..[572,21618+11])
                                        Some
                                          []
                                          pattern (lambda/simplif.ml[572,21618+11]..[572,21618+28])
                                            Ppat_tuple
                                            [
                                              pattern (lambda/simplif.ml[572,21618+12]..[572,21618+16])
                                                Ppat_var "kind" (lambda/simplif.ml[572,21618+12]..[572,21618+16])
                                              pattern (lambda/simplif.ml[572,21618+18]..[572,21618+19])
                                                Ppat_var "v" (lambda/simplif.ml[572,21618+18]..[572,21618+19])
                                              pattern (lambda/simplif.ml[572,21618+21]..[572,21618+23])
                                                Ppat_var "l1" (lambda/simplif.ml[572,21618+21]..[572,21618+23])
                                              pattern (lambda/simplif.ml[572,21618+25]..[572,21618+27])
                                                Ppat_var "l2" (lambda/simplif.ml[572,21618+25]..[572,21618+27])
                                            ]
                                      expression (lambda/simplif.ml[572,21618+32]..[572,21618+73])
                                        Pexp_apply
                                        expression (lambda/simplif.ml[572,21618+32]..[572,21618+40])
                                          Pexp_ident "mkmutlet" (lambda/simplif.ml[572,21618+32]..[572,21618+40])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lambda/simplif.ml[572,21618+41]..[572,21618+45])
                                              Pexp_ident "kind" (lambda/simplif.ml[572,21618+41]..[572,21618+45])
                                          <arg>
                                          Nolabel
                                            expression (lambda/simplif.ml[572,21618+46]..[572,21618+47])
                                              Pexp_ident "v" (lambda/simplif.ml[572,21618+46]..[572,21618+47])
                                          <arg>
                                          Nolabel
                                            expression (lambda/simplif.ml[572,21618+48]..[572,21618+60])
                                              Pexp_apply
                                              expression (lambda/simplif.ml[572,21618+49]..[572,21618+56])
                                                Pexp_ident "simplif" (lambda/simplif.ml[572,21618+49]..[572,21618+56])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[572,21618+57]..[572,21618+59])
                                                    Pexp_ident "l1" (lambda/simplif.ml[572,21618+57]..[572,21618+59])
                                              ]
                                          <arg>
                                          Nolabel
                                            expression (lambda/simplif.ml[572,21618+61]..[572,21618+73])
                                              Pexp_apply
                                              expression (lambda/simplif.ml[572,21618+62]..[572,21618+69])
                                                Pexp_ident "simplif" (lambda/simplif.ml[572,21618+62]..[572,21618+69])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[572,21618+70]..[572,21618+72])
                                                    Pexp_ident "l2" (lambda/simplif.ml[572,21618+70]..[572,21618+72])
                                              ]
                                        ]
                                    <case>
                                      pattern (lambda/simplif.ml[573,21692+4]..[573,21692+27])
                                        Ppat_construct "Lletrec" (lambda/simplif.ml[573,21692+4]..[573,21692+11])
                                        Some
                                          []
                                          pattern (lambda/simplif.ml[573,21692+11]..[573,21692+27])
                                            Ppat_tuple
                                            [
                                              pattern (lambda/simplif.ml[573,21692+12]..[573,21692+20])
                                                Ppat_var "bindings" (lambda/simplif.ml[573,21692+12]..[573,21692+20])
                                              pattern (lambda/simplif.ml[573,21692+22]..[573,21692+26])
                                                Ppat_var "body" (lambda/simplif.ml[573,21692+22]..[573,21692+26])
                                            ]
                                      expression (lambda/simplif.ml[574,21723+6]..[574,21723+77])
                                        Pexp_construct "Lletrec" (lambda/simplif.ml[574,21723+6]..[574,21723+13])
                                        Some
                                          expression (lambda/simplif.ml[574,21723+13]..[574,21723+77])
                                            Pexp_tuple
                                            [
                                              expression (lambda/simplif.ml[574,21723+14]..[574,21723+62])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[574,21723+14]..[574,21723+22])
                                                  Pexp_ident "List.map" (lambda/simplif.ml[574,21723+14]..[574,21723+22])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[574,21723+23]..[574,21723+53])
                                                      Pexp_fun
                                                      Nolabel
                                                      None
                                                      pattern (lambda/simplif.ml[574,21723+28]..[574,21723+34])
                                                        Ppat_tuple
                                                        [
                                                          pattern (lambda/simplif.ml[574,21723+29]..[574,21723+30])
                                                            Ppat_var "v" (lambda/simplif.ml[574,21723+29]..[574,21723+30])
                                                          pattern (lambda/simplif.ml[574,21723+32]..[574,21723+33])
                                                            Ppat_var "l" (lambda/simplif.ml[574,21723+32]..[574,21723+33])
                                                        ]
                                                      expression (lambda/simplif.ml[574,21723+38]..[574,21723+52])
                                                        Pexp_tuple
                                                        [
                                                          expression (lambda/simplif.ml[574,21723+39]..[574,21723+40])
                                                            Pexp_ident "v" (lambda/simplif.ml[574,21723+39]..[574,21723+40])
                                                          expression (lambda/simplif.ml[574,21723+42]..[574,21723+51])
                                                            Pexp_apply
                                                            expression (lambda/simplif.ml[574,21723+42]..[574,21723+49])
                                                              Pexp_ident "simplif" (lambda/simplif.ml[574,21723+42]..[574,21723+49])
                                                            [
                                                              <arg>
                                                              Nolabel
                                                                expression (lambda/simplif.ml[574,21723+50]..[574,21723+51])
                                                                  Pexp_ident "l" (lambda/simplif.ml[574,21723+50]..[574,21723+51])
                                                            ]
                                                        ]
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[574,21723+54]..[574,21723+62])
                                                      Pexp_ident "bindings" (lambda/simplif.ml[574,21723+54]..[574,21723+62])
                                                ]
                                              expression (lambda/simplif.ml[574,21723+64]..[574,21723+76])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[574,21723+64]..[574,21723+71])
                                                  Pexp_ident "simplif" (lambda/simplif.ml[574,21723+64]..[574,21723+71])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[574,21723+72]..[574,21723+76])
                                                      Pexp_ident "body" (lambda/simplif.ml[574,21723+72]..[574,21723+76])
                                                ]
                                            ]
                                    <case>
                                      pattern (lambda/simplif.ml[575,21801+4]..[575,21801+21])
                                        Ppat_construct "Lprim" (lambda/simplif.ml[575,21801+4]..[575,21801+9])
                                        Some
                                          []
                                          pattern (lambda/simplif.ml[575,21801+9]..[575,21801+21])
                                            Ppat_tuple
                                            [
                                              pattern (lambda/simplif.ml[575,21801+10]..[575,21801+11])
                                                Ppat_var "p" (lambda/simplif.ml[575,21801+10]..[575,21801+11])
                                              pattern (lambda/simplif.ml[575,21801+13]..[575,21801+15])
                                                Ppat_var "ll" (lambda/simplif.ml[575,21801+13]..[575,21801+15])
                                              pattern (lambda/simplif.ml[575,21801+17]..[575,21801+20])
                                                Ppat_var "loc" (lambda/simplif.ml[575,21801+17]..[575,21801+20])
                                            ]
                                      expression (lambda/simplif.ml[575,21801+25]..[575,21801+59])
                                        Pexp_construct "Lprim" (lambda/simplif.ml[575,21801+25]..[575,21801+30])
                                        Some
                                          expression (lambda/simplif.ml[575,21801+30]..[575,21801+59])
                                            Pexp_tuple
                                            [
                                              expression (lambda/simplif.ml[575,21801+31]..[575,21801+32])
                                                Pexp_ident "p" (lambda/simplif.ml[575,21801+31]..[575,21801+32])
                                              expression (lambda/simplif.ml[575,21801+34]..[575,21801+53])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[575,21801+34]..[575,21801+42])
                                                  Pexp_ident "List.map" (lambda/simplif.ml[575,21801+34]..[575,21801+42])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[575,21801+43]..[575,21801+50])
                                                      Pexp_ident "simplif" (lambda/simplif.ml[575,21801+43]..[575,21801+50])
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[575,21801+51]..[575,21801+53])
                                                      Pexp_ident "ll" (lambda/simplif.ml[575,21801+51]..[575,21801+53])
                                                ]
                                              expression (lambda/simplif.ml[575,21801+55]..[575,21801+58])
                                                Pexp_ident "loc" (lambda/simplif.ml[575,21801+55]..[575,21801+58])
                                            ]
                                    <case>
                                      pattern (lambda/simplif.ml[576,21861+4]..[576,21861+23])
                                        Ppat_construct "Lswitch" (lambda/simplif.ml[576,21861+4]..[576,21861+11])
                                        Some
                                          []
                                          pattern (lambda/simplif.ml[576,21861+11]..[576,21861+23])
                                            Ppat_tuple
                                            [
                                              pattern (lambda/simplif.ml[576,21861+12]..[576,21861+13])
                                                Ppat_var "l" (lambda/simplif.ml[576,21861+12]..[576,21861+13])
                                              pattern (lambda/simplif.ml[576,21861+15]..[576,21861+17])
                                                Ppat_var "sw" (lambda/simplif.ml[576,21861+15]..[576,21861+17])
                                              pattern (lambda/simplif.ml[576,21861+19]..[576,21861+22])
                                                Ppat_var "loc" (lambda/simplif.ml[576,21861+19]..[576,21861+22])
                                            ]
                                      expression (lambda/simplif.ml[577,21888+6]..[585,22272+13])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (lambda/simplif.ml[577,21888+10]..[577,21888+15])
                                              Ppat_var "new_l" (lambda/simplif.ml[577,21888+10]..[577,21888+15])
                                            expression (lambda/simplif.ml[577,21888+18]..[577,21888+27])
                                              Pexp_apply
                                              expression (lambda/simplif.ml[577,21888+18]..[577,21888+25])
                                                Pexp_ident "simplif" (lambda/simplif.ml[577,21888+18]..[577,21888+25])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[577,21888+26]..[577,21888+27])
                                                    Pexp_ident "l" (lambda/simplif.ml[577,21888+26]..[577,21888+27])
                                              ]
                                          <def>
                                            pattern (lambda/simplif.ml[578,21916+10]..[578,21916+20])
                                              Ppat_var "new_consts" (lambda/simplif.ml[578,21916+10]..[578,21916+20])
                                            expression (lambda/simplif.ml[578,21916+24]..[578,21916+76])
                                              Pexp_apply
                                              expression (lambda/simplif.ml[578,21916+24]..[578,21916+32])
                                                Pexp_ident "List.map" (lambda/simplif.ml[578,21916+24]..[578,21916+32])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[578,21916+33]..[578,21916+63])
                                                    Pexp_fun
                                                    Nolabel
                                                    None
                                                    pattern (lambda/simplif.ml[578,21916+38]..[578,21916+44])
                                                      Ppat_tuple
                                                      [
                                                        pattern (lambda/simplif.ml[578,21916+39]..[578,21916+40])
                                                          Ppat_var "n" (lambda/simplif.ml[578,21916+39]..[578,21916+40])
                                                        pattern (lambda/simplif.ml[578,21916+42]..[578,21916+43])
                                                          Ppat_var "e" (lambda/simplif.ml[578,21916+42]..[578,21916+43])
                                                      ]
                                                    expression (lambda/simplif.ml[578,21916+48]..[578,21916+62])
                                                      Pexp_tuple
                                                      [
                                                        expression (lambda/simplif.ml[578,21916+49]..[578,21916+50])
                                                          Pexp_ident "n" (lambda/simplif.ml[578,21916+49]..[578,21916+50])
                                                        expression (lambda/simplif.ml[578,21916+52]..[578,21916+61])
                                                          Pexp_apply
                                                          expression (lambda/simplif.ml[578,21916+52]..[578,21916+59])
                                                            Pexp_ident "simplif" (lambda/simplif.ml[578,21916+52]..[578,21916+59])
                                                          [
                                                            <arg>
                                                            Nolabel
                                                              expression (lambda/simplif.ml[578,21916+60]..[578,21916+61])
                                                                Pexp_ident "e" (lambda/simplif.ml[578,21916+60]..[578,21916+61])
                                                          ]
                                                      ]
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[578,21916+64]..[578,21916+76])
                                                    Pexp_field
                                                    expression (lambda/simplif.ml[578,21916+64]..[578,21916+66])
                                                      Pexp_ident "sw" (lambda/simplif.ml[578,21916+64]..[578,21916+66])
                                                    "sw_consts" (lambda/simplif.ml[578,21916+67]..[578,21916+76])
                                              ]
                                          <def>
                                            pattern (lambda/simplif.ml[579,21993+10]..[579,21993+20])
                                              Ppat_var "new_blocks" (lambda/simplif.ml[579,21993+10]..[579,21993+20])
                                            expression (lambda/simplif.ml[579,21993+24]..[579,21993+76])
                                              Pexp_apply
                                              expression (lambda/simplif.ml[579,21993+24]..[579,21993+32])
                                                Pexp_ident "List.map" (lambda/simplif.ml[579,21993+24]..[579,21993+32])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[579,21993+33]..[579,21993+63])
                                                    Pexp_fun
                                                    Nolabel
                                                    None
                                                    pattern (lambda/simplif.ml[579,21993+38]..[579,21993+44])
                                                      Ppat_tuple
                                                      [
                                                        pattern (lambda/simplif.ml[579,21993+39]..[579,21993+40])
                                                          Ppat_var "n" (lambda/simplif.ml[579,21993+39]..[579,21993+40])
                                                        pattern (lambda/simplif.ml[579,21993+42]..[579,21993+43])
                                                          Ppat_var "e" (lambda/simplif.ml[579,21993+42]..[579,21993+43])
                                                      ]
                                                    expression (lambda/simplif.ml[579,21993+48]..[579,21993+62])
                                                      Pexp_tuple
                                                      [
                                                        expression (lambda/simplif.ml[579,21993+49]..[579,21993+50])
                                                          Pexp_ident "n" (lambda/simplif.ml[579,21993+49]..[579,21993+50])
                                                        expression (lambda/simplif.ml[579,21993+52]..[579,21993+61])
                                                          Pexp_apply
                                                          expression (lambda/simplif.ml[579,21993+52]..[579,21993+59])
                                                            Pexp_ident "simplif" (lambda/simplif.ml[579,21993+52]..[579,21993+59])
                                                          [
                                                            <arg>
                                                            Nolabel
                                                              expression (lambda/simplif.ml[579,21993+60]..[579,21993+61])
                                                                Pexp_ident "e" (lambda/simplif.ml[579,21993+60]..[579,21993+61])
                                                          ]
                                                      ]
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[579,21993+64]..[579,21993+76])
                                                    Pexp_field
                                                    expression (lambda/simplif.ml[579,21993+64]..[579,21993+66])
                                                      Pexp_ident "sw" (lambda/simplif.ml[579,21993+64]..[579,21993+66])
                                                    "sw_blocks" (lambda/simplif.ml[579,21993+67]..[579,21993+76])
                                              ]
                                          <def>
                                            pattern (lambda/simplif.ml[580,22070+10]..[580,22070+18])
                                              Ppat_var "new_fail" (lambda/simplif.ml[580,22070+10]..[580,22070+18])
                                            expression (lambda/simplif.ml[580,22070+21]..[580,22070+56])
                                              Pexp_apply
                                              expression (lambda/simplif.ml[580,22070+21]..[580,22070+31])
                                                Pexp_ident "Option.map" (lambda/simplif.ml[580,22070+21]..[580,22070+31])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[580,22070+32]..[580,22070+39])
                                                    Pexp_ident "simplif" (lambda/simplif.ml[580,22070+32]..[580,22070+39])
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[580,22070+40]..[580,22070+56])
                                                    Pexp_field
                                                    expression (lambda/simplif.ml[580,22070+40]..[580,22070+42])
                                                      Pexp_ident "sw" (lambda/simplif.ml[580,22070+40]..[580,22070+42])
                                                    "sw_failaction" (lambda/simplif.ml[580,22070+43]..[580,22070+56])
                                              ]
                                        ]
                                        expression (lambda/simplif.ml[581,22130+6]..[585,22272+13])
                                          Pexp_construct "Lswitch" (lambda/simplif.ml[581,22130+6]..[581,22130+13])
                                          Some
                                            expression (lambda/simplif.ml[582,22144+8]..[585,22272+13])
                                              Pexp_tuple
                                              [
                                                expression (lambda/simplif.ml[582,22144+9]..[582,22144+14])
                                                  Pexp_ident "new_l" (lambda/simplif.ml[582,22144+9]..[582,22144+14])
                                                expression (lambda/simplif.ml[583,22160+9]..[584,22227+43])
                                                  Pexp_record
                                                  [
                                                    "sw_consts" (lambda/simplif.ml[583,22160+18]..[583,22160+27])
                                                      expression (lambda/simplif.ml[583,22160+30]..[583,22160+40])
                                                        Pexp_ident "new_consts" (lambda/simplif.ml[583,22160+30]..[583,22160+40])
                                                    "sw_blocks" (lambda/simplif.ml[583,22160+43]..[583,22160+52])
                                                      expression (lambda/simplif.ml[583,22160+55]..[583,22160+65])
                                                        Pexp_ident "new_blocks" (lambda/simplif.ml[583,22160+55]..[583,22160+65])
                                                    "sw_failaction" (lambda/simplif.ml[584,22227+18]..[584,22227+31])
                                                      expression (lambda/simplif.ml[584,22227+34]..[584,22227+42])
                                                        Pexp_ident "new_fail" (lambda/simplif.ml[584,22227+34]..[584,22227+42])
                                                  ]
                                                  Some
                                                    expression (lambda/simplif.ml[583,22160+10]..[583,22160+12])
                                                      Pexp_ident "sw" (lambda/simplif.ml[583,22160+10]..[583,22160+12])
                                                expression (lambda/simplif.ml[585,22272+9]..[585,22272+12])
                                                  Pexp_ident "loc" (lambda/simplif.ml[585,22272+9]..[585,22272+12])
                                              ]
                                    <case>
                                      pattern (lambda/simplif.ml[586,22286+4]..[586,22286+30])
                                        Ppat_construct "Lstringswitch" (lambda/simplif.ml[586,22286+4]..[586,22286+17])
                                        Some
                                          []
                                          pattern (lambda/simplif.ml[586,22286+18]..[586,22286+30])
                                            Ppat_tuple
                                            [
                                              pattern (lambda/simplif.ml[586,22286+19]..[586,22286+20])
                                                Ppat_var "l" (lambda/simplif.ml[586,22286+19]..[586,22286+20])
                                              pattern (lambda/simplif.ml[586,22286+21]..[586,22286+23])
                                                Ppat_var "sw" (lambda/simplif.ml[586,22286+21]..[586,22286+23])
                                              pattern (lambda/simplif.ml[586,22286+24]..[586,22286+25])
                                                Ppat_var "d" (lambda/simplif.ml[586,22286+24]..[586,22286+25])
                                              pattern (lambda/simplif.ml[586,22286+26]..[586,22286+29])
                                                Ppat_var "loc" (lambda/simplif.ml[586,22286+26]..[586,22286+29])
                                            ]
                                      expression (lambda/simplif.ml[587,22320+6]..[589,22399+34])
                                        Pexp_construct "Lstringswitch" (lambda/simplif.ml[587,22320+6]..[587,22320+19])
                                        Some
                                          expression (lambda/simplif.ml[588,22340+8]..[589,22399+34])
                                            Pexp_tuple
                                            [
                                              expression (lambda/simplif.ml[588,22340+9]..[588,22340+18])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[588,22340+9]..[588,22340+16])
                                                  Pexp_ident "simplif" (lambda/simplif.ml[588,22340+9]..[588,22340+16])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[588,22340+17]..[588,22340+18])
                                                      Pexp_ident "l" (lambda/simplif.ml[588,22340+17]..[588,22340+18])
                                                ]
                                              expression (lambda/simplif.ml[588,22340+19]..[588,22340+57])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[588,22340+19]..[588,22340+27])
                                                  Pexp_ident "List.map" (lambda/simplif.ml[588,22340+19]..[588,22340+27])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[588,22340+28]..[588,22340+54])
                                                      Pexp_fun
                                                      Nolabel
                                                      None
                                                      pattern (lambda/simplif.ml[588,22340+33]..[588,22340+38])
                                                        Ppat_tuple
                                                        [
                                                          pattern (lambda/simplif.ml[588,22340+34]..[588,22340+35])
                                                            Ppat_var "s" (lambda/simplif.ml[588,22340+34]..[588,22340+35])
                                                          pattern (lambda/simplif.ml[588,22340+36]..[588,22340+37])
                                                            Ppat_var "l" (lambda/simplif.ml[588,22340+36]..[588,22340+37])
                                                        ]
                                                      expression (lambda/simplif.ml[588,22340+42]..[588,22340+53])
                                                        Pexp_tuple
                                                        [
                                                          expression (lambda/simplif.ml[588,22340+42]..[588,22340+43])
                                                            Pexp_ident "s" (lambda/simplif.ml[588,22340+42]..[588,22340+43])
                                                          expression (lambda/simplif.ml[588,22340+44]..[588,22340+53])
                                                            Pexp_apply
                                                            expression (lambda/simplif.ml[588,22340+44]..[588,22340+51])
                                                              Pexp_ident "simplif" (lambda/simplif.ml[588,22340+44]..[588,22340+51])
                                                            [
                                                              <arg>
                                                              Nolabel
                                                                expression (lambda/simplif.ml[588,22340+52]..[588,22340+53])
                                                                  Pexp_ident "l" (lambda/simplif.ml[588,22340+52]..[588,22340+53])
                                                            ]
                                                        ]
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[588,22340+55]..[588,22340+57])
                                                      Pexp_ident "sw" (lambda/simplif.ml[588,22340+55]..[588,22340+57])
                                                ]
                                              expression (lambda/simplif.ml[589,22399+9]..[589,22399+29])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[589,22399+9]..[589,22399+19])
                                                  Pexp_ident "Option.map" (lambda/simplif.ml[589,22399+9]..[589,22399+19])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[589,22399+20]..[589,22399+27])
                                                      Pexp_ident "simplif" (lambda/simplif.ml[589,22399+20]..[589,22399+27])
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[589,22399+28]..[589,22399+29])
                                                      Pexp_ident "d" (lambda/simplif.ml[589,22399+28]..[589,22399+29])
                                                ]
                                              expression (lambda/simplif.ml[589,22399+30]..[589,22399+33])
                                                Pexp_ident "loc" (lambda/simplif.ml[589,22399+30]..[589,22399+33])
                                            ]
                                    <case>
                                      pattern (lambda/simplif.ml[590,22434+4]..[590,22434+23])
                                        Ppat_construct "Lstaticraise" (lambda/simplif.ml[590,22434+4]..[590,22434+16])
                                        Some
                                          []
                                          pattern (lambda/simplif.ml[590,22434+17]..[590,22434+23])
                                            Ppat_tuple
                                            [
                                              pattern (lambda/simplif.ml[590,22434+18]..[590,22434+19])
                                                Ppat_var "i" (lambda/simplif.ml[590,22434+18]..[590,22434+19])
                                              pattern (lambda/simplif.ml[590,22434+20]..[590,22434+22])
                                                Ppat_var "ls" (lambda/simplif.ml[590,22434+20]..[590,22434+22])
                                            ]
                                      expression (lambda/simplif.ml[591,22461+6]..[591,22461+43])
                                        Pexp_construct "Lstaticraise" (lambda/simplif.ml[591,22461+6]..[591,22461+18])
                                        Some
                                          expression (lambda/simplif.ml[591,22461+19]..[591,22461+43])
                                            Pexp_tuple
                                            [
                                              expression (lambda/simplif.ml[591,22461+20]..[591,22461+21])
                                                Pexp_ident "i" (lambda/simplif.ml[591,22461+20]..[591,22461+21])
                                              expression (lambda/simplif.ml[591,22461+23]..[591,22461+42])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[591,22461+23]..[591,22461+31])
                                                  Pexp_ident "List.map" (lambda/simplif.ml[591,22461+23]..[591,22461+31])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[591,22461+32]..[591,22461+39])
                                                      Pexp_ident "simplif" (lambda/simplif.ml[591,22461+32]..[591,22461+39])
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[591,22461+40]..[591,22461+42])
                                                      Pexp_ident "ls" (lambda/simplif.ml[591,22461+40]..[591,22461+42])
                                                ]
                                            ]
                                    <case>
                                      pattern (lambda/simplif.ml[592,22505+4]..[592,22505+34])
                                        Ppat_construct "Lstaticcatch" (lambda/simplif.ml[592,22505+4]..[592,22505+16])
                                        Some
                                          []
                                          pattern (lambda/simplif.ml[592,22505+16]..[592,22505+34])
                                            Ppat_tuple
                                            [
                                              pattern (lambda/simplif.ml[592,22505+17]..[592,22505+19])
                                                Ppat_var "l1" (lambda/simplif.ml[592,22505+17]..[592,22505+19])
                                              pattern (lambda/simplif.ml[592,22505+21]..[592,22505+29])
                                                Ppat_tuple
                                                [
                                                  pattern (lambda/simplif.ml[592,22505+22]..[592,22505+23])
                                                    Ppat_var "i" (lambda/simplif.ml[592,22505+22]..[592,22505+23])
                                                  pattern (lambda/simplif.ml[592,22505+24]..[592,22505+28])
                                                    Ppat_var "args" (lambda/simplif.ml[592,22505+24]..[592,22505+28])
                                                ]
                                              pattern (lambda/simplif.ml[592,22505+31]..[592,22505+33])
                                                Ppat_var "l2" (lambda/simplif.ml[592,22505+31]..[592,22505+33])
                                            ]
                                      expression (lambda/simplif.ml[593,22543+6]..[593,22543+53])
                                        Pexp_construct "Lstaticcatch" (lambda/simplif.ml[593,22543+6]..[593,22543+18])
                                        Some
                                          expression (lambda/simplif.ml[593,22543+19]..[593,22543+53])
                                            Pexp_tuple
                                            [
                                              expression (lambda/simplif.ml[593,22543+20]..[593,22543+30])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[593,22543+20]..[593,22543+27])
                                                  Pexp_ident "simplif" (lambda/simplif.ml[593,22543+20]..[593,22543+27])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[593,22543+28]..[593,22543+30])
                                                      Pexp_ident "l1" (lambda/simplif.ml[593,22543+28]..[593,22543+30])
                                                ]
                                              expression (lambda/simplif.ml[593,22543+32]..[593,22543+40])
                                                Pexp_tuple
                                                [
                                                  expression (lambda/simplif.ml[593,22543+33]..[593,22543+34])
                                                    Pexp_ident "i" (lambda/simplif.ml[593,22543+33]..[593,22543+34])
                                                  expression (lambda/simplif.ml[593,22543+35]..[593,22543+39])
                                                    Pexp_ident "args" (lambda/simplif.ml[593,22543+35]..[593,22543+39])
                                                ]
                                              expression (lambda/simplif.ml[593,22543+42]..[593,22543+52])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[593,22543+42]..[593,22543+49])
                                                  Pexp_ident "simplif" (lambda/simplif.ml[593,22543+42]..[593,22543+49])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[593,22543+50]..[593,22543+52])
                                                      Pexp_ident "l2" (lambda/simplif.ml[593,22543+50]..[593,22543+52])
                                                ]
                                            ]
                                    <case>
                                      pattern (lambda/simplif.ml[594,22597+4]..[594,22597+23])
                                        Ppat_construct "Ltrywith" (lambda/simplif.ml[594,22597+4]..[594,22597+12])
                                        Some
                                          []
                                          pattern (lambda/simplif.ml[594,22597+12]..[594,22597+23])
                                            Ppat_tuple
                                            [
                                              pattern (lambda/simplif.ml[594,22597+13]..[594,22597+15])
                                                Ppat_var "l1" (lambda/simplif.ml[594,22597+13]..[594,22597+15])
                                              pattern (lambda/simplif.ml[594,22597+17]..[594,22597+18])
                                                Ppat_var "v" (lambda/simplif.ml[594,22597+17]..[594,22597+18])
                                              pattern (lambda/simplif.ml[594,22597+20]..[594,22597+22])
                                                Ppat_var "l2" (lambda/simplif.ml[594,22597+20]..[594,22597+22])
                                            ]
                                      expression (lambda/simplif.ml[594,22597+27]..[594,22597+62])
                                        Pexp_construct "Ltrywith" (lambda/simplif.ml[594,22597+27]..[594,22597+35])
                                        Some
                                          expression (lambda/simplif.ml[594,22597+35]..[594,22597+62])
                                            Pexp_tuple
                                            [
                                              expression (lambda/simplif.ml[594,22597+36]..[594,22597+46])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[594,22597+36]..[594,22597+43])
                                                  Pexp_ident "simplif" (lambda/simplif.ml[594,22597+36]..[594,22597+43])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[594,22597+44]..[594,22597+46])
                                                      Pexp_ident "l1" (lambda/simplif.ml[594,22597+44]..[594,22597+46])
                                                ]
                                              expression (lambda/simplif.ml[594,22597+48]..[594,22597+49])
                                                Pexp_ident "v" (lambda/simplif.ml[594,22597+48]..[594,22597+49])
                                              expression (lambda/simplif.ml[594,22597+51]..[594,22597+61])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[594,22597+51]..[594,22597+58])
                                                  Pexp_ident "simplif" (lambda/simplif.ml[594,22597+51]..[594,22597+58])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[594,22597+59]..[594,22597+61])
                                                      Pexp_ident "l2" (lambda/simplif.ml[594,22597+59]..[594,22597+61])
                                                ]
                                            ]
                                    <case>
                                      pattern (lambda/simplif.ml[595,22660+4]..[595,22660+27])
                                        Ppat_construct "Lifthenelse" (lambda/simplif.ml[595,22660+4]..[595,22660+15])
                                        Some
                                          []
                                          pattern (lambda/simplif.ml[595,22660+15]..[595,22660+27])
                                            Ppat_tuple
                                            [
                                              pattern (lambda/simplif.ml[595,22660+16]..[595,22660+18])
                                                Ppat_var "l1" (lambda/simplif.ml[595,22660+16]..[595,22660+18])
                                              pattern (lambda/simplif.ml[595,22660+20]..[595,22660+22])
                                                Ppat_var "l2" (lambda/simplif.ml[595,22660+20]..[595,22660+22])
                                              pattern (lambda/simplif.ml[595,22660+24]..[595,22660+26])
                                                Ppat_var "l3" (lambda/simplif.ml[595,22660+24]..[595,22660+26])
                                            ]
                                      expression (lambda/simplif.ml[595,22660+31]..[595,22660+78])
                                        Pexp_construct "Lifthenelse" (lambda/simplif.ml[595,22660+31]..[595,22660+42])
                                        Some
                                          expression (lambda/simplif.ml[595,22660+42]..[595,22660+78])
                                            Pexp_tuple
                                            [
                                              expression (lambda/simplif.ml[595,22660+43]..[595,22660+53])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[595,22660+43]..[595,22660+50])
                                                  Pexp_ident "simplif" (lambda/simplif.ml[595,22660+43]..[595,22660+50])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[595,22660+51]..[595,22660+53])
                                                      Pexp_ident "l1" (lambda/simplif.ml[595,22660+51]..[595,22660+53])
                                                ]
                                              expression (lambda/simplif.ml[595,22660+55]..[595,22660+65])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[595,22660+55]..[595,22660+62])
                                                  Pexp_ident "simplif" (lambda/simplif.ml[595,22660+55]..[595,22660+62])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[595,22660+63]..[595,22660+65])
                                                      Pexp_ident "l2" (lambda/simplif.ml[595,22660+63]..[595,22660+65])
                                                ]
                                              expression (lambda/simplif.ml[595,22660+67]..[595,22660+77])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[595,22660+67]..[595,22660+74])
                                                  Pexp_ident "simplif" (lambda/simplif.ml[595,22660+67]..[595,22660+74])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[595,22660+75]..[595,22660+77])
                                                      Pexp_ident "l3" (lambda/simplif.ml[595,22660+75]..[595,22660+77])
                                                ]
                                            ]
                                    <case>
                                      pattern (lambda/simplif.ml[596,22739+4]..[596,22739+33])
                                        Ppat_construct "Lsequence" (lambda/simplif.ml[596,22739+4]..[596,22739+13])
                                        Some
                                          []
                                          pattern (lambda/simplif.ml[596,22739+13]..[596,22739+33])
                                            Ppat_tuple
                                            [
                                              pattern (lambda/simplif.ml[596,22739+14]..[596,22739+28])
                                                Ppat_construct "Lifused" (lambda/simplif.ml[596,22739+14]..[596,22739+21])
                                                Some
                                                  []
                                                  pattern (lambda/simplif.ml[596,22739+21]..[596,22739+28])
                                                    Ppat_tuple
                                                    [
                                                      pattern (lambda/simplif.ml[596,22739+22]..[596,22739+23])
                                                        Ppat_var "v" (lambda/simplif.ml[596,22739+22]..[596,22739+23])
                                                      pattern (lambda/simplif.ml[596,22739+25]..[596,22739+27])
                                                        Ppat_var "l1" (lambda/simplif.ml[596,22739+25]..[596,22739+27])
                                                    ]
                                              pattern (lambda/simplif.ml[596,22739+30]..[596,22739+32])
                                                Ppat_var "l2" (lambda/simplif.ml[596,22739+30]..[596,22739+32])
                                            ]
                                      expression (lambda/simplif.ml[597,22776+6]..[599,22846+21])
                                        Pexp_ifthenelse
                                        expression (lambda/simplif.ml[597,22776+9]..[597,22776+24])
                                          Pexp_apply
                                          expression (lambda/simplif.ml[597,22776+21]..[597,22776+22])
                                            Pexp_ident ">" (lambda/simplif.ml[597,22776+21]..[597,22776+22])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[597,22776+9]..[597,22776+20])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[597,22776+9]..[597,22776+18])
                                                  Pexp_ident "count_var" (lambda/simplif.ml[597,22776+9]..[597,22776+18])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[597,22776+19]..[597,22776+20])
                                                      Pexp_ident "v" (lambda/simplif.ml[597,22776+19]..[597,22776+20])
                                                ]
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[597,22776+23]..[597,22776+24])
                                                Pexp_constant PConst_int (0,None)
                                          ]
                                        expression (lambda/simplif.ml[598,22801+11]..[598,22801+44])
                                          Pexp_construct "Lsequence" (lambda/simplif.ml[598,22801+11]..[598,22801+20])
                                          Some
                                            expression (lambda/simplif.ml[598,22801+20]..[598,22801+44])
                                              Pexp_tuple
                                              [
                                                expression (lambda/simplif.ml[598,22801+21]..[598,22801+31])
                                                  Pexp_apply
                                                  expression (lambda/simplif.ml[598,22801+21]..[598,22801+28])
                                                    Pexp_ident "simplif" (lambda/simplif.ml[598,22801+21]..[598,22801+28])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (lambda/simplif.ml[598,22801+29]..[598,22801+31])
                                                        Pexp_ident "l1" (lambda/simplif.ml[598,22801+29]..[598,22801+31])
                                                  ]
                                                expression (lambda/simplif.ml[598,22801+33]..[598,22801+43])
                                                  Pexp_apply
                                                  expression (lambda/simplif.ml[598,22801+33]..[598,22801+40])
                                                    Pexp_ident "simplif" (lambda/simplif.ml[598,22801+33]..[598,22801+40])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (lambda/simplif.ml[598,22801+41]..[598,22801+43])
                                                        Pexp_ident "l2" (lambda/simplif.ml[598,22801+41]..[598,22801+43])
                                                  ]
                                              ]
                                        Some
                                          expression (lambda/simplif.ml[599,22846+11]..[599,22846+21])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[599,22846+11]..[599,22846+18])
                                              Pexp_ident "simplif" (lambda/simplif.ml[599,22846+11]..[599,22846+18])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[599,22846+19]..[599,22846+21])
                                                  Pexp_ident "l2" (lambda/simplif.ml[599,22846+19]..[599,22846+21])
                                            ]
                                    <case>
                                      pattern (lambda/simplif.ml[600,22868+4]..[600,22868+21])
                                        Ppat_construct "Lsequence" (lambda/simplif.ml[600,22868+4]..[600,22868+13])
                                        Some
                                          []
                                          pattern (lambda/simplif.ml[600,22868+13]..[600,22868+21])
                                            Ppat_tuple
                                            [
                                              pattern (lambda/simplif.ml[600,22868+14]..[600,22868+16])
                                                Ppat_var "l1" (lambda/simplif.ml[600,22868+14]..[600,22868+16])
                                              pattern (lambda/simplif.ml[600,22868+18]..[600,22868+20])
                                                Ppat_var "l2" (lambda/simplif.ml[600,22868+18]..[600,22868+20])
                                            ]
                                      expression (lambda/simplif.ml[600,22868+25]..[600,22868+58])
                                        Pexp_construct "Lsequence" (lambda/simplif.ml[600,22868+25]..[600,22868+34])
                                        Some
                                          expression (lambda/simplif.ml[600,22868+34]..[600,22868+58])
                                            Pexp_tuple
                                            [
                                              expression (lambda/simplif.ml[600,22868+35]..[600,22868+45])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[600,22868+35]..[600,22868+42])
                                                  Pexp_ident "simplif" (lambda/simplif.ml[600,22868+35]..[600,22868+42])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[600,22868+43]..[600,22868+45])
                                                      Pexp_ident "l1" (lambda/simplif.ml[600,22868+43]..[600,22868+45])
                                                ]
                                              expression (lambda/simplif.ml[600,22868+47]..[600,22868+57])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[600,22868+47]..[600,22868+54])
                                                  Pexp_ident "simplif" (lambda/simplif.ml[600,22868+47]..[600,22868+54])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[600,22868+55]..[600,22868+57])
                                                      Pexp_ident "l2" (lambda/simplif.ml[600,22868+55]..[600,22868+57])
                                                ]
                                            ]
                                    <case>
                                      pattern (lambda/simplif.ml[601,22927+4]..[601,22927+18])
                                        Ppat_construct "Lwhile" (lambda/simplif.ml[601,22927+4]..[601,22927+10])
                                        Some
                                          []
                                          pattern (lambda/simplif.ml[601,22927+10]..[601,22927+18])
                                            Ppat_tuple
                                            [
                                              pattern (lambda/simplif.ml[601,22927+11]..[601,22927+13])
                                                Ppat_var "l1" (lambda/simplif.ml[601,22927+11]..[601,22927+13])
                                              pattern (lambda/simplif.ml[601,22927+15]..[601,22927+17])
                                                Ppat_var "l2" (lambda/simplif.ml[601,22927+15]..[601,22927+17])
                                            ]
                                      expression (lambda/simplif.ml[601,22927+22]..[601,22927+52])
                                        Pexp_construct "Lwhile" (lambda/simplif.ml[601,22927+22]..[601,22927+28])
                                        Some
                                          expression (lambda/simplif.ml[601,22927+28]..[601,22927+52])
                                            Pexp_tuple
                                            [
                                              expression (lambda/simplif.ml[601,22927+29]..[601,22927+39])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[601,22927+29]..[601,22927+36])
                                                  Pexp_ident "simplif" (lambda/simplif.ml[601,22927+29]..[601,22927+36])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[601,22927+37]..[601,22927+39])
                                                      Pexp_ident "l1" (lambda/simplif.ml[601,22927+37]..[601,22927+39])
                                                ]
                                              expression (lambda/simplif.ml[601,22927+41]..[601,22927+51])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[601,22927+41]..[601,22927+48])
                                                  Pexp_ident "simplif" (lambda/simplif.ml[601,22927+41]..[601,22927+48])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[601,22927+49]..[601,22927+51])
                                                      Pexp_ident "l2" (lambda/simplif.ml[601,22927+49]..[601,22927+51])
                                                ]
                                            ]
                                    <case>
                                      pattern (lambda/simplif.ml[602,22980+4]..[602,22980+28])
                                        Ppat_construct "Lfor" (lambda/simplif.ml[602,22980+4]..[602,22980+8])
                                        Some
                                          []
                                          pattern (lambda/simplif.ml[602,22980+8]..[602,22980+28])
                                            Ppat_tuple
                                            [
                                              pattern (lambda/simplif.ml[602,22980+9]..[602,22980+10])
                                                Ppat_var "v" (lambda/simplif.ml[602,22980+9]..[602,22980+10])
                                              pattern (lambda/simplif.ml[602,22980+12]..[602,22980+14])
                                                Ppat_var "l1" (lambda/simplif.ml[602,22980+12]..[602,22980+14])
                                              pattern (lambda/simplif.ml[602,22980+16]..[602,22980+18])
                                                Ppat_var "l2" (lambda/simplif.ml[602,22980+16]..[602,22980+18])
                                              pattern (lambda/simplif.ml[602,22980+20]..[602,22980+23])
                                                Ppat_var "dir" (lambda/simplif.ml[602,22980+20]..[602,22980+23])
                                              pattern (lambda/simplif.ml[602,22980+25]..[602,22980+27])
                                                Ppat_var "l3" (lambda/simplif.ml[602,22980+25]..[602,22980+27])
                                            ]
                                      expression (lambda/simplif.ml[603,23012+6]..[603,23012+54])
                                        Pexp_construct "Lfor" (lambda/simplif.ml[603,23012+6]..[603,23012+10])
                                        Some
                                          expression (lambda/simplif.ml[603,23012+10]..[603,23012+54])
                                            Pexp_tuple
                                            [
                                              expression (lambda/simplif.ml[603,23012+11]..[603,23012+12])
                                                Pexp_ident "v" (lambda/simplif.ml[603,23012+11]..[603,23012+12])
                                              expression (lambda/simplif.ml[603,23012+14]..[603,23012+24])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[603,23012+14]..[603,23012+21])
                                                  Pexp_ident "simplif" (lambda/simplif.ml[603,23012+14]..[603,23012+21])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[603,23012+22]..[603,23012+24])
                                                      Pexp_ident "l1" (lambda/simplif.ml[603,23012+22]..[603,23012+24])
                                                ]
                                              expression (lambda/simplif.ml[603,23012+26]..[603,23012+36])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[603,23012+26]..[603,23012+33])
                                                  Pexp_ident "simplif" (lambda/simplif.ml[603,23012+26]..[603,23012+33])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[603,23012+34]..[603,23012+36])
                                                      Pexp_ident "l2" (lambda/simplif.ml[603,23012+34]..[603,23012+36])
                                                ]
                                              expression (lambda/simplif.ml[603,23012+38]..[603,23012+41])
                                                Pexp_ident "dir" (lambda/simplif.ml[603,23012+38]..[603,23012+41])
                                              expression (lambda/simplif.ml[603,23012+43]..[603,23012+53])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[603,23012+43]..[603,23012+50])
                                                  Pexp_ident "simplif" (lambda/simplif.ml[603,23012+43]..[603,23012+50])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[603,23012+51]..[603,23012+53])
                                                      Pexp_ident "l3" (lambda/simplif.ml[603,23012+51]..[603,23012+53])
                                                ]
                                            ]
                                    <case>
                                      pattern (lambda/simplif.ml[604,23067+4]..[604,23067+17])
                                        Ppat_construct "Lassign" (lambda/simplif.ml[604,23067+4]..[604,23067+11])
                                        Some
                                          []
                                          pattern (lambda/simplif.ml[604,23067+11]..[604,23067+17])
                                            Ppat_tuple
                                            [
                                              pattern (lambda/simplif.ml[604,23067+12]..[604,23067+13])
                                                Ppat_var "v" (lambda/simplif.ml[604,23067+12]..[604,23067+13])
                                              pattern (lambda/simplif.ml[604,23067+15]..[604,23067+16])
                                                Ppat_var "l" (lambda/simplif.ml[604,23067+15]..[604,23067+16])
                                            ]
                                      expression (lambda/simplif.ml[604,23067+21]..[604,23067+42])
                                        Pexp_construct "Lassign" (lambda/simplif.ml[604,23067+21]..[604,23067+28])
                                        Some
                                          expression (lambda/simplif.ml[604,23067+28]..[604,23067+42])
                                            Pexp_tuple
                                            [
                                              expression (lambda/simplif.ml[604,23067+29]..[604,23067+30])
                                                Pexp_ident "v" (lambda/simplif.ml[604,23067+29]..[604,23067+30])
                                              expression (lambda/simplif.ml[604,23067+32]..[604,23067+41])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[604,23067+32]..[604,23067+39])
                                                  Pexp_ident "simplif" (lambda/simplif.ml[604,23067+32]..[604,23067+39])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[604,23067+40]..[604,23067+41])
                                                      Pexp_ident "l" (lambda/simplif.ml[604,23067+40]..[604,23067+41])
                                                ]
                                            ]
                                    <case>
                                      pattern (lambda/simplif.ml[605,23110+4]..[605,23110+27])
                                        Ppat_construct "Lsend" (lambda/simplif.ml[605,23110+4]..[605,23110+9])
                                        Some
                                          []
                                          pattern (lambda/simplif.ml[605,23110+9]..[605,23110+27])
                                            Ppat_tuple
                                            [
                                              pattern (lambda/simplif.ml[605,23110+10]..[605,23110+11])
                                                Ppat_var "k" (lambda/simplif.ml[605,23110+10]..[605,23110+11])
                                              pattern (lambda/simplif.ml[605,23110+13]..[605,23110+14])
                                                Ppat_var "m" (lambda/simplif.ml[605,23110+13]..[605,23110+14])
                                              pattern (lambda/simplif.ml[605,23110+16]..[605,23110+17])
                                                Ppat_var "o" (lambda/simplif.ml[605,23110+16]..[605,23110+17])
                                              pattern (lambda/simplif.ml[605,23110+19]..[605,23110+21])
                                                Ppat_var "ll" (lambda/simplif.ml[605,23110+19]..[605,23110+21])
                                              pattern (lambda/simplif.ml[605,23110+23]..[605,23110+26])
                                                Ppat_var "loc" (lambda/simplif.ml[605,23110+23]..[605,23110+26])
                                            ]
                                      expression (lambda/simplif.ml[606,23141+6]..[606,23141+62])
                                        Pexp_construct "Lsend" (lambda/simplif.ml[606,23141+6]..[606,23141+11])
                                        Some
                                          expression (lambda/simplif.ml[606,23141+11]..[606,23141+62])
                                            Pexp_tuple
                                            [
                                              expression (lambda/simplif.ml[606,23141+12]..[606,23141+13])
                                                Pexp_ident "k" (lambda/simplif.ml[606,23141+12]..[606,23141+13])
                                              expression (lambda/simplif.ml[606,23141+15]..[606,23141+24])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[606,23141+15]..[606,23141+22])
                                                  Pexp_ident "simplif" (lambda/simplif.ml[606,23141+15]..[606,23141+22])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[606,23141+23]..[606,23141+24])
                                                      Pexp_ident "m" (lambda/simplif.ml[606,23141+23]..[606,23141+24])
                                                ]
                                              expression (lambda/simplif.ml[606,23141+26]..[606,23141+35])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[606,23141+26]..[606,23141+33])
                                                  Pexp_ident "simplif" (lambda/simplif.ml[606,23141+26]..[606,23141+33])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[606,23141+34]..[606,23141+35])
                                                      Pexp_ident "o" (lambda/simplif.ml[606,23141+34]..[606,23141+35])
                                                ]
                                              expression (lambda/simplif.ml[606,23141+37]..[606,23141+56])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[606,23141+37]..[606,23141+45])
                                                  Pexp_ident "List.map" (lambda/simplif.ml[606,23141+37]..[606,23141+45])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[606,23141+46]..[606,23141+53])
                                                      Pexp_ident "simplif" (lambda/simplif.ml[606,23141+46]..[606,23141+53])
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[606,23141+54]..[606,23141+56])
                                                      Pexp_ident "ll" (lambda/simplif.ml[606,23141+54]..[606,23141+56])
                                                ]
                                              expression (lambda/simplif.ml[606,23141+58]..[606,23141+61])
                                                Pexp_ident "loc" (lambda/simplif.ml[606,23141+58]..[606,23141+61])
                                            ]
                                    <case>
                                      pattern (lambda/simplif.ml[607,23204+4]..[607,23204+17])
                                        Ppat_construct "Levent" (lambda/simplif.ml[607,23204+4]..[607,23204+10])
                                        Some
                                          []
                                          pattern (lambda/simplif.ml[607,23204+10]..[607,23204+17])
                                            Ppat_tuple
                                            [
                                              pattern (lambda/simplif.ml[607,23204+11]..[607,23204+12])
                                                Ppat_var "l" (lambda/simplif.ml[607,23204+11]..[607,23204+12])
                                              pattern (lambda/simplif.ml[607,23204+14]..[607,23204+16])
                                                Ppat_var "ev" (lambda/simplif.ml[607,23204+14]..[607,23204+16])
                                            ]
                                      expression (lambda/simplif.ml[607,23204+21]..[607,23204+42])
                                        Pexp_construct "Levent" (lambda/simplif.ml[607,23204+21]..[607,23204+27])
                                        Some
                                          expression (lambda/simplif.ml[607,23204+27]..[607,23204+42])
                                            Pexp_tuple
                                            [
                                              expression (lambda/simplif.ml[607,23204+28]..[607,23204+37])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[607,23204+28]..[607,23204+35])
                                                  Pexp_ident "simplif" (lambda/simplif.ml[607,23204+28]..[607,23204+35])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[607,23204+36]..[607,23204+37])
                                                      Pexp_ident "l" (lambda/simplif.ml[607,23204+36]..[607,23204+37])
                                                ]
                                              expression (lambda/simplif.ml[607,23204+39]..[607,23204+41])
                                                Pexp_ident "ev" (lambda/simplif.ml[607,23204+39]..[607,23204+41])
                                            ]
                                    <case>
                                      pattern (lambda/simplif.ml[608,23247+4]..[608,23247+17])
                                        Ppat_construct "Lifused" (lambda/simplif.ml[608,23247+4]..[608,23247+11])
                                        Some
                                          []
                                          pattern (lambda/simplif.ml[608,23247+11]..[608,23247+17])
                                            Ppat_tuple
                                            [
                                              pattern (lambda/simplif.ml[608,23247+12]..[608,23247+13])
                                                Ppat_var "v" (lambda/simplif.ml[608,23247+12]..[608,23247+13])
                                              pattern (lambda/simplif.ml[608,23247+15]..[608,23247+16])
                                                Ppat_var "l" (lambda/simplif.ml[608,23247+15]..[608,23247+16])
                                            ]
                                      expression (lambda/simplif.ml[609,23268+6]..[609,23268+56])
                                        Pexp_ifthenelse
                                        expression (lambda/simplif.ml[609,23268+9]..[609,23268+24])
                                          Pexp_apply
                                          expression (lambda/simplif.ml[609,23268+21]..[609,23268+22])
                                            Pexp_ident ">" (lambda/simplif.ml[609,23268+21]..[609,23268+22])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[609,23268+9]..[609,23268+20])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[609,23268+9]..[609,23268+18])
                                                  Pexp_ident "count_var" (lambda/simplif.ml[609,23268+9]..[609,23268+18])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[609,23268+19]..[609,23268+20])
                                                      Pexp_ident "v" (lambda/simplif.ml[609,23268+19]..[609,23268+20])
                                                ]
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[609,23268+23]..[609,23268+24])
                                                Pexp_constant PConst_int (0,None)
                                          ]
                                        expression (lambda/simplif.ml[609,23268+30]..[609,23268+39])
                                          Pexp_apply
                                          expression (lambda/simplif.ml[609,23268+30]..[609,23268+37])
                                            Pexp_ident "simplif" (lambda/simplif.ml[609,23268+30]..[609,23268+37])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[609,23268+38]..[609,23268+39])
                                                Pexp_ident "l" (lambda/simplif.ml[609,23268+38]..[609,23268+39])
                                          ]
                                        Some
                                          expression (lambda/simplif.ml[609,23268+45]..[609,23268+56])
                                            Pexp_ident "lambda_unit" (lambda/simplif.ml[609,23268+45]..[609,23268+56])
                                  ]
                            ]
                            expression (lambda/simplif.ml[611,23330+2]..[611,23330+13])
                              Pexp_apply
                              expression (lambda/simplif.ml[611,23330+2]..[611,23330+9])
                                Pexp_ident "simplif" (lambda/simplif.ml[611,23330+2]..[611,23330+9])
                              [
                                <arg>
                                Nolabel
                                  expression (lambda/simplif.ml[611,23330+10]..[611,23330+13])
                                    Pexp_ident "lam" (lambda/simplif.ml[611,23330+10]..[611,23330+13])
                              ]
    ]
  structure_item (lambda/simplif.ml[615,23387+0]..[703,26623+37])
    Pstr_value Rec
    [
      <def>
        pattern (lambda/simplif.ml[615,23387+8]..[615,23387+23])
          Ppat_var "emit_tail_infos" (lambda/simplif.ml[615,23387+8]..[615,23387+23])
        expression (lambda/simplif.ml[615,23387+24]..[699,26460+33]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lambda/simplif.ml[615,23387+24]..[615,23387+31])
            Ppat_var "is_tail" (lambda/simplif.ml[615,23387+24]..[615,23387+31])
          expression (lambda/simplif.ml[615,23387+32]..[699,26460+33]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (lambda/simplif.ml[615,23387+32]..[615,23387+38])
              Ppat_var "lambda" (lambda/simplif.ml[615,23387+32]..[615,23387+38])
            expression (lambda/simplif.ml[616,23428+2]..[699,26460+33])
              Pexp_match
              expression (lambda/simplif.ml[616,23428+8]..[616,23428+14])
                Pexp_ident "lambda" (lambda/simplif.ml[616,23428+8]..[616,23428+14])
              [
                <case>
                  pattern (lambda/simplif.ml[617,23448+4]..[617,23448+10])
                    Ppat_construct "Lvar" (lambda/simplif.ml[617,23448+4]..[617,23448+8])
                    Some
                      []
                      pattern (lambda/simplif.ml[617,23448+9]..[617,23448+10])
                        Ppat_any
                  expression (lambda/simplif.ml[617,23448+14]..[617,23448+16])
                    Pexp_construct "()" (lambda/simplif.ml[617,23448+14]..[617,23448+16])
                    None
                <case>
                  pattern (lambda/simplif.ml[618,23465+4]..[618,23465+13])
                    Ppat_construct "Lmutvar" (lambda/simplif.ml[618,23465+4]..[618,23465+11])
                    Some
                      []
                      pattern (lambda/simplif.ml[618,23465+12]..[618,23465+13])
                        Ppat_any
                  expression (lambda/simplif.ml[618,23465+17]..[618,23465+19])
                    Pexp_construct "()" (lambda/simplif.ml[618,23465+17]..[618,23465+19])
                    None
                <case>
                  pattern (lambda/simplif.ml[619,23485+4]..[619,23485+12])
                    Ppat_construct "Lconst" (lambda/simplif.ml[619,23485+4]..[619,23485+10])
                    Some
                      []
                      pattern (lambda/simplif.ml[619,23485+11]..[619,23485+12])
                        Ppat_any
                  expression (lambda/simplif.ml[619,23485+16]..[619,23485+18])
                    Pexp_construct "()" (lambda/simplif.ml[619,23485+16]..[619,23485+18])
                    None
                <case>
                  pattern (lambda/simplif.ml[620,23504+4]..[620,23504+13])
                    Ppat_construct "Lapply" (lambda/simplif.ml[620,23504+4]..[620,23504+10])
                    Some
                      []
                      pattern (lambda/simplif.ml[620,23504+11]..[620,23504+13])
                        Ppat_var "ap" (lambda/simplif.ml[620,23504+11]..[620,23504+13])
                  expression (lambda/simplif.ml[621,23521+6]..[639,24308+43])
                    Pexp_sequence
                    expression (lambda/simplif.ml[621,23521+6]..[637,24257+9])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (lambda/simplif.ml[629,23885+12]..[629,23885+22])
                            Ppat_var "maybe_warn" (lambda/simplif.ml[629,23885+12]..[629,23885+22])
                          expression (lambda/simplif.ml[629,23885+23]..[632,24032+63]) ghost
                            Pexp_fun
                            Labelled "is_tail"
                            None
                            pattern (lambda/simplif.ml[629,23885+24]..[629,23885+31])
                              Ppat_var "is_tail" (lambda/simplif.ml[629,23885+24]..[629,23885+31])
                            expression (lambda/simplif.ml[629,23885+32]..[632,24032+63]) ghost
                              Pexp_fun
                              Labelled "expect_tail"
                              None
                              pattern (lambda/simplif.ml[629,23885+33]..[629,23885+44])
                                Ppat_var "expect_tail" (lambda/simplif.ml[629,23885+33]..[629,23885+44])
                              expression (lambda/simplif.ml[630,23932+10]..[632,24032+63])
                                Pexp_ifthenelse
                                expression (lambda/simplif.ml[630,23932+13]..[630,23932+35])
                                  Pexp_apply
                                  expression (lambda/simplif.ml[630,23932+21]..[630,23932+23])
                                    Pexp_ident "<>" (lambda/simplif.ml[630,23932+21]..[630,23932+23])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[630,23932+13]..[630,23932+20])
                                        Pexp_ident "is_tail" (lambda/simplif.ml[630,23932+13]..[630,23932+20])
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[630,23932+24]..[630,23932+35])
                                        Pexp_ident "expect_tail" (lambda/simplif.ml[630,23932+24]..[630,23932+35])
                                  ]
                                expression (lambda/simplif.ml[631,23973+12]..[632,24032+63])
                                  Pexp_apply
                                  expression (lambda/simplif.ml[631,23973+12]..[631,23973+34])
                                    Pexp_ident "Location.prerr_warning" (lambda/simplif.ml[631,23973+12]..[631,23973+34])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[631,23973+35]..[631,23973+58])
                                        Pexp_apply
                                        expression (lambda/simplif.ml[631,23973+36]..[631,23973+47])
                                          Pexp_ident "to_location" (lambda/simplif.ml[631,23973+36]..[631,23973+47])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lambda/simplif.ml[631,23973+48]..[631,23973+57])
                                              Pexp_field
                                              expression (lambda/simplif.ml[631,23973+48]..[631,23973+50])
                                                Pexp_ident "ap" (lambda/simplif.ml[631,23973+48]..[631,23973+50])
                                              "ap_loc" (lambda/simplif.ml[631,23973+51]..[631,23973+57])
                                        ]
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[632,24032+14]..[632,24032+63])
                                        Pexp_construct "Warnings.Wrong_tailcall_expectation" (lambda/simplif.ml[632,24032+15]..[632,24032+50])
                                        Some
                                          expression (lambda/simplif.ml[632,24032+51]..[632,24032+62])
                                            Pexp_ident "expect_tail" (lambda/simplif.ml[632,24032+51]..[632,24032+62])
                                  ]
                                None
                      ]
                      expression (lambda/simplif.ml[633,24099+8]..[636,24212+44])
                        Pexp_match
                        expression (lambda/simplif.ml[633,24099+14]..[633,24099+28])
                          Pexp_field
                          expression (lambda/simplif.ml[633,24099+14]..[633,24099+16])
                            Pexp_ident "ap" (lambda/simplif.ml[633,24099+14]..[633,24099+16])
                          "ap_tailcall" (lambda/simplif.ml[633,24099+17]..[633,24099+28])
                        [
                          <case>
                            pattern (lambda/simplif.ml[634,24133+10]..[634,24133+26])
                              Ppat_construct "Default_tailcall" (lambda/simplif.ml[634,24133+10]..[634,24133+26])
                              None
                            expression (lambda/simplif.ml[634,24133+30]..[634,24133+32])
                              Pexp_construct "()" (lambda/simplif.ml[634,24133+30]..[634,24133+32])
                              None
                          <case>
                            pattern (lambda/simplif.ml[635,24166+10]..[635,24166+42])
                              Ppat_construct "Tailcall_expectation" (lambda/simplif.ml[635,24166+10]..[635,24166+30])
                              Some
                                []
                                pattern (lambda/simplif.ml[635,24166+31]..[635,24166+42])
                                  Ppat_var "expect_tail" (lambda/simplif.ml[635,24166+31]..[635,24166+42])
                            expression (lambda/simplif.ml[636,24212+12]..[636,24212+44])
                              Pexp_apply
                              expression (lambda/simplif.ml[636,24212+12]..[636,24212+22])
                                Pexp_ident "maybe_warn" (lambda/simplif.ml[636,24212+12]..[636,24212+22])
                              [
                                <arg>
                                Labelled "is_tail"
                                  expression (lambda/simplif.ml[636,24212+24]..[636,24212+31])
                                    Pexp_ident "is_tail" (lambda/simplif.ml[636,24212+24]..[636,24212+31])
                                <arg>
                                Labelled "expect_tail"
                                  expression (lambda/simplif.ml[636,24212+33]..[636,24212+44])
                                    Pexp_ident "expect_tail" (lambda/simplif.ml[636,24212+33]..[636,24212+44])
                              ]
                        ]
                    expression (lambda/simplif.ml[638,24268+6]..[639,24308+43])
                      Pexp_sequence
                      expression (lambda/simplif.ml[638,24268+6]..[638,24268+38])
                        Pexp_apply
                        expression (lambda/simplif.ml[638,24268+6]..[638,24268+21])
                          Pexp_ident "emit_tail_infos" (lambda/simplif.ml[638,24268+6]..[638,24268+21])
                        [
                          <arg>
                          Nolabel
                            expression (lambda/simplif.ml[638,24268+22]..[638,24268+27])
                              Pexp_construct "false" (lambda/simplif.ml[638,24268+22]..[638,24268+27])
                              None
                          <arg>
                          Nolabel
                            expression (lambda/simplif.ml[638,24268+28]..[638,24268+38])
                              Pexp_field
                              expression (lambda/simplif.ml[638,24268+28]..[638,24268+30])
                                Pexp_ident "ap" (lambda/simplif.ml[638,24268+28]..[638,24268+30])
                              "ap_func" (lambda/simplif.ml[638,24268+31]..[638,24268+38])
                        ]
                      expression (lambda/simplif.ml[639,24308+6]..[639,24308+43])
                        Pexp_apply
                        expression (lambda/simplif.ml[639,24308+6]..[639,24308+26])
                          Pexp_ident "list_emit_tail_infos" (lambda/simplif.ml[639,24308+6]..[639,24308+26])
                        [
                          <arg>
                          Nolabel
                            expression (lambda/simplif.ml[639,24308+27]..[639,24308+32])
                              Pexp_construct "false" (lambda/simplif.ml[639,24308+27]..[639,24308+32])
                              None
                          <arg>
                          Nolabel
                            expression (lambda/simplif.ml[639,24308+33]..[639,24308+43])
                              Pexp_field
                              expression (lambda/simplif.ml[639,24308+33]..[639,24308+35])
                                Pexp_ident "ap" (lambda/simplif.ml[639,24308+33]..[639,24308+35])
                              "ap_args" (lambda/simplif.ml[639,24308+36]..[639,24308+43])
                        ]
                <case>
                  pattern (lambda/simplif.ml[640,24352+4]..[640,24352+26])
                    Ppat_construct "Lfunction" (lambda/simplif.ml[640,24352+4]..[640,24352+13])
                    Some
                      []
                      pattern (lambda/simplif.ml[640,24352+14]..[640,24352+26])
                        Ppat_record Closed
                        [
                          "body" (lambda/simplif.ml[640,24352+15]..[640,24352+19])
                            pattern (lambda/simplif.ml[640,24352+22]..[640,24352+25])
                              Ppat_var "lam" (lambda/simplif.ml[640,24352+22]..[640,24352+25])
                        ]
                  expression (lambda/simplif.ml[641,24382+6]..[641,24382+30])
                    Pexp_apply
                    expression (lambda/simplif.ml[641,24382+6]..[641,24382+21])
                      Pexp_ident "emit_tail_infos" (lambda/simplif.ml[641,24382+6]..[641,24382+21])
                    [
                      <arg>
                      Nolabel
                        expression (lambda/simplif.ml[641,24382+22]..[641,24382+26])
                          Pexp_construct "true" (lambda/simplif.ml[641,24382+22]..[641,24382+26])
                          None
                      <arg>
                      Nolabel
                        expression (lambda/simplif.ml[641,24382+27]..[641,24382+30])
                          Pexp_ident "lam" (lambda/simplif.ml[641,24382+27]..[641,24382+30])
                    ]
                <case>
                  pattern (lambda/simplif.ml[642,24413+4]..[643,24444+30])
                    Ppat_or
                    pattern (lambda/simplif.ml[642,24413+4]..[642,24413+30])
                      Ppat_construct "Llet" (lambda/simplif.ml[642,24413+4]..[642,24413+8])
                      Some
                        []
                        pattern (lambda/simplif.ml[642,24413+9]..[642,24413+30])
                          Ppat_tuple
                          [
                            pattern (lambda/simplif.ml[642,24413+10]..[642,24413+11])
                              Ppat_any
                            pattern (lambda/simplif.ml[642,24413+13]..[642,24413+15])
                              Ppat_var "_k" (lambda/simplif.ml[642,24413+13]..[642,24413+15])
                            pattern (lambda/simplif.ml[642,24413+17]..[642,24413+18])
                              Ppat_any
                            pattern (lambda/simplif.ml[642,24413+20]..[642,24413+23])
                              Ppat_var "lam" (lambda/simplif.ml[642,24413+20]..[642,24413+23])
                            pattern (lambda/simplif.ml[642,24413+25]..[642,24413+29])
                              Ppat_var "body" (lambda/simplif.ml[642,24413+25]..[642,24413+29])
                          ]
                    pattern (lambda/simplif.ml[643,24444+4]..[643,24444+30])
                      Ppat_construct "Lmutlet" (lambda/simplif.ml[643,24444+4]..[643,24444+11])
                      Some
                        []
                        pattern (lambda/simplif.ml[643,24444+12]..[643,24444+30])
                          Ppat_tuple
                          [
                            pattern (lambda/simplif.ml[643,24444+13]..[643,24444+15])
                              Ppat_var "_k" (lambda/simplif.ml[643,24444+13]..[643,24444+15])
                            pattern (lambda/simplif.ml[643,24444+17]..[643,24444+18])
                              Ppat_any
                            pattern (lambda/simplif.ml[643,24444+20]..[643,24444+23])
                              Ppat_var "lam" (lambda/simplif.ml[643,24444+20]..[643,24444+23])
                            pattern (lambda/simplif.ml[643,24444+25]..[643,24444+29])
                              Ppat_var "body" (lambda/simplif.ml[643,24444+25]..[643,24444+29])
                          ]
                  expression (lambda/simplif.ml[644,24478+6]..[645,24511+34])
                    Pexp_sequence
                    expression (lambda/simplif.ml[644,24478+6]..[644,24478+31])
                      Pexp_apply
                      expression (lambda/simplif.ml[644,24478+6]..[644,24478+21])
                        Pexp_ident "emit_tail_infos" (lambda/simplif.ml[644,24478+6]..[644,24478+21])
                      [
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[644,24478+22]..[644,24478+27])
                            Pexp_construct "false" (lambda/simplif.ml[644,24478+22]..[644,24478+27])
                            None
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[644,24478+28]..[644,24478+31])
                            Pexp_ident "lam" (lambda/simplif.ml[644,24478+28]..[644,24478+31])
                      ]
                    expression (lambda/simplif.ml[645,24511+6]..[645,24511+34])
                      Pexp_apply
                      expression (lambda/simplif.ml[645,24511+6]..[645,24511+21])
                        Pexp_ident "emit_tail_infos" (lambda/simplif.ml[645,24511+6]..[645,24511+21])
                      [
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[645,24511+22]..[645,24511+29])
                            Pexp_ident "is_tail" (lambda/simplif.ml[645,24511+22]..[645,24511+29])
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[645,24511+30]..[645,24511+34])
                            Pexp_ident "body" (lambda/simplif.ml[645,24511+30]..[645,24511+34])
                      ]
                <case>
                  pattern (lambda/simplif.ml[646,24546+4]..[646,24546+28])
                    Ppat_construct "Lletrec" (lambda/simplif.ml[646,24546+4]..[646,24546+11])
                    Some
                      []
                      pattern (lambda/simplif.ml[646,24546+12]..[646,24546+28])
                        Ppat_tuple
                        [
                          pattern (lambda/simplif.ml[646,24546+13]..[646,24546+21])
                            Ppat_var "bindings" (lambda/simplif.ml[646,24546+13]..[646,24546+21])
                          pattern (lambda/simplif.ml[646,24546+23]..[646,24546+27])
                            Ppat_var "body" (lambda/simplif.ml[646,24546+23]..[646,24546+27])
                        ]
                  expression (lambda/simplif.ml[647,24578+6]..[648,24648+34])
                    Pexp_sequence
                    expression (lambda/simplif.ml[647,24578+6]..[647,24578+68])
                      Pexp_apply
                      expression (lambda/simplif.ml[647,24578+6]..[647,24578+15])
                        Pexp_ident "List.iter" (lambda/simplif.ml[647,24578+6]..[647,24578+15])
                      [
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[647,24578+16]..[647,24578+59])
                            Pexp_fun
                            Nolabel
                            None
                            pattern (lambda/simplif.ml[647,24578+21]..[647,24578+29])
                              Ppat_tuple
                              [
                                pattern (lambda/simplif.ml[647,24578+22]..[647,24578+23])
                                  Ppat_any
                                pattern (lambda/simplif.ml[647,24578+25]..[647,24578+28])
                                  Ppat_var "lam" (lambda/simplif.ml[647,24578+25]..[647,24578+28])
                              ]
                            expression (lambda/simplif.ml[647,24578+33]..[647,24578+58])
                              Pexp_apply
                              expression (lambda/simplif.ml[647,24578+33]..[647,24578+48])
                                Pexp_ident "emit_tail_infos" (lambda/simplif.ml[647,24578+33]..[647,24578+48])
                              [
                                <arg>
                                Nolabel
                                  expression (lambda/simplif.ml[647,24578+49]..[647,24578+54])
                                    Pexp_construct "false" (lambda/simplif.ml[647,24578+49]..[647,24578+54])
                                    None
                                <arg>
                                Nolabel
                                  expression (lambda/simplif.ml[647,24578+55]..[647,24578+58])
                                    Pexp_ident "lam" (lambda/simplif.ml[647,24578+55]..[647,24578+58])
                              ]
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[647,24578+60]..[647,24578+68])
                            Pexp_ident "bindings" (lambda/simplif.ml[647,24578+60]..[647,24578+68])
                      ]
                    expression (lambda/simplif.ml[648,24648+6]..[648,24648+34])
                      Pexp_apply
                      expression (lambda/simplif.ml[648,24648+6]..[648,24648+21])
                        Pexp_ident "emit_tail_infos" (lambda/simplif.ml[648,24648+6]..[648,24648+21])
                      [
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[648,24648+22]..[648,24648+29])
                            Pexp_ident "is_tail" (lambda/simplif.ml[648,24648+22]..[648,24648+29])
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[648,24648+30]..[648,24648+34])
                            Pexp_ident "body" (lambda/simplif.ml[648,24648+30]..[648,24648+34])
                      ]
                <case>
                  pattern (lambda/simplif.ml[649,24683+4]..[649,24683+59])
                    Ppat_construct "Lprim" (lambda/simplif.ml[649,24683+4]..[649,24683+9])
                    Some
                      []
                      pattern (lambda/simplif.ml[649,24683+10]..[649,24683+59])
                        Ppat_tuple
                        [
                          pattern (lambda/simplif.ml[649,24683+11]..[649,24683+48])
                            Ppat_or
                            pattern (lambda/simplif.ml[649,24683+12]..[649,24683+28])
                              Ppat_construct "Pbytes_to_string" (lambda/simplif.ml[649,24683+12]..[649,24683+28])
                              None
                            pattern (lambda/simplif.ml[649,24683+31]..[649,24683+47])
                              Ppat_construct "Pbytes_of_string" (lambda/simplif.ml[649,24683+31]..[649,24683+47])
                              None
                          pattern (lambda/simplif.ml[649,24683+50]..[649,24683+55])
                            Ppat_construct "::" (lambda/simplif.ml[649,24683+51]..[649,24683+55]) ghost
                            Some
                              []
                              pattern (lambda/simplif.ml[649,24683+51]..[649,24683+55]) ghost
                                Ppat_tuple
                                [
                                  pattern (lambda/simplif.ml[649,24683+51]..[649,24683+54])
                                    Ppat_var "arg" (lambda/simplif.ml[649,24683+51]..[649,24683+54])
                                  pattern (lambda/simplif.ml[649,24683+54]..[649,24683+55]) ghost
                                    Ppat_construct "[]" (lambda/simplif.ml[649,24683+54]..[649,24683+55]) ghost
                                    None
                                ]
                          pattern (lambda/simplif.ml[649,24683+57]..[649,24683+58])
                            Ppat_any
                        ]
                  expression (lambda/simplif.ml[650,24746+6]..[650,24746+33])
                    Pexp_apply
                    expression (lambda/simplif.ml[650,24746+6]..[650,24746+21])
                      Pexp_ident "emit_tail_infos" (lambda/simplif.ml[650,24746+6]..[650,24746+21])
                    [
                      <arg>
                      Nolabel
                        expression (lambda/simplif.ml[650,24746+22]..[650,24746+29])
                          Pexp_ident "is_tail" (lambda/simplif.ml[650,24746+22]..[650,24746+29])
                      <arg>
                      Nolabel
                        expression (lambda/simplif.ml[650,24746+30]..[650,24746+33])
                          Pexp_ident "arg" (lambda/simplif.ml[650,24746+30]..[650,24746+33])
                    ]
                <case>
                  pattern (lambda/simplif.ml[651,24780+4]..[652,24818+36])
                    Ppat_or
                    pattern (lambda/simplif.ml[651,24780+4]..[651,24780+37])
                      Ppat_construct "Lprim" (lambda/simplif.ml[651,24780+4]..[651,24780+9])
                      Some
                        []
                        pattern (lambda/simplif.ml[651,24780+10]..[651,24780+37])
                          Ppat_tuple
                          [
                            pattern (lambda/simplif.ml[651,24780+11]..[651,24780+19])
                              Ppat_construct "Psequand" (lambda/simplif.ml[651,24780+11]..[651,24780+19])
                              None
                            pattern (lambda/simplif.ml[651,24780+21]..[651,24780+33])
                              Ppat_construct "::" (lambda/simplif.ml[651,24780+22]..[651,24780+33]) ghost
                              Some
                                []
                                pattern (lambda/simplif.ml[651,24780+22]..[651,24780+33]) ghost
                                  Ppat_tuple
                                  [
                                    pattern (lambda/simplif.ml[651,24780+22]..[651,24780+26])
                                      Ppat_var "arg1" (lambda/simplif.ml[651,24780+22]..[651,24780+26])
                                    pattern (lambda/simplif.ml[651,24780+28]..[651,24780+33]) ghost
                                      Ppat_construct "::" (lambda/simplif.ml[651,24780+28]..[651,24780+33]) ghost
                                      Some
                                        []
                                        pattern (lambda/simplif.ml[651,24780+28]..[651,24780+33]) ghost
                                          Ppat_tuple
                                          [
                                            pattern (lambda/simplif.ml[651,24780+28]..[651,24780+32])
                                              Ppat_var "arg2" (lambda/simplif.ml[651,24780+28]..[651,24780+32])
                                            pattern (lambda/simplif.ml[651,24780+32]..[651,24780+33]) ghost
                                              Ppat_construct "[]" (lambda/simplif.ml[651,24780+32]..[651,24780+33]) ghost
                                              None
                                          ]
                                  ]
                            pattern (lambda/simplif.ml[651,24780+35]..[651,24780+36])
                              Ppat_any
                          ]
                    pattern (lambda/simplif.ml[652,24818+4]..[652,24818+36])
                      Ppat_construct "Lprim" (lambda/simplif.ml[652,24818+4]..[652,24818+9])
                      Some
                        []
                        pattern (lambda/simplif.ml[652,24818+10]..[652,24818+36])
                          Ppat_tuple
                          [
                            pattern (lambda/simplif.ml[652,24818+11]..[652,24818+18])
                              Ppat_construct "Psequor" (lambda/simplif.ml[652,24818+11]..[652,24818+18])
                              None
                            pattern (lambda/simplif.ml[652,24818+20]..[652,24818+32])
                              Ppat_construct "::" (lambda/simplif.ml[652,24818+21]..[652,24818+32]) ghost
                              Some
                                []
                                pattern (lambda/simplif.ml[652,24818+21]..[652,24818+32]) ghost
                                  Ppat_tuple
                                  [
                                    pattern (lambda/simplif.ml[652,24818+21]..[652,24818+25])
                                      Ppat_var "arg1" (lambda/simplif.ml[652,24818+21]..[652,24818+25])
                                    pattern (lambda/simplif.ml[652,24818+27]..[652,24818+32]) ghost
                                      Ppat_construct "::" (lambda/simplif.ml[652,24818+27]..[652,24818+32]) ghost
                                      Some
                                        []
                                        pattern (lambda/simplif.ml[652,24818+27]..[652,24818+32]) ghost
                                          Ppat_tuple
                                          [
                                            pattern (lambda/simplif.ml[652,24818+27]..[652,24818+31])
                                              Ppat_var "arg2" (lambda/simplif.ml[652,24818+27]..[652,24818+31])
                                            pattern (lambda/simplif.ml[652,24818+31]..[652,24818+32]) ghost
                                              Ppat_construct "[]" (lambda/simplif.ml[652,24818+31]..[652,24818+32]) ghost
                                              None
                                          ]
                                  ]
                            pattern (lambda/simplif.ml[652,24818+34]..[652,24818+35])
                              Ppat_any
                          ]
                  expression (lambda/simplif.ml[653,24858+6]..[654,24892+34])
                    Pexp_sequence
                    expression (lambda/simplif.ml[653,24858+6]..[653,24858+32])
                      Pexp_apply
                      expression (lambda/simplif.ml[653,24858+6]..[653,24858+21])
                        Pexp_ident "emit_tail_infos" (lambda/simplif.ml[653,24858+6]..[653,24858+21])
                      [
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[653,24858+22]..[653,24858+27])
                            Pexp_construct "false" (lambda/simplif.ml[653,24858+22]..[653,24858+27])
                            None
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[653,24858+28]..[653,24858+32])
                            Pexp_ident "arg1" (lambda/simplif.ml[653,24858+28]..[653,24858+32])
                      ]
                    expression (lambda/simplif.ml[654,24892+6]..[654,24892+34])
                      Pexp_apply
                      expression (lambda/simplif.ml[654,24892+6]..[654,24892+21])
                        Pexp_ident "emit_tail_infos" (lambda/simplif.ml[654,24892+6]..[654,24892+21])
                      [
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[654,24892+22]..[654,24892+29])
                            Pexp_ident "is_tail" (lambda/simplif.ml[654,24892+22]..[654,24892+29])
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[654,24892+30]..[654,24892+34])
                            Pexp_ident "arg2" (lambda/simplif.ml[654,24892+30]..[654,24892+34])
                      ]
                <case>
                  pattern (lambda/simplif.ml[655,24927+4]..[655,24927+19])
                    Ppat_construct "Lprim" (lambda/simplif.ml[655,24927+4]..[655,24927+9])
                    Some
                      []
                      pattern (lambda/simplif.ml[655,24927+10]..[655,24927+19])
                        Ppat_tuple
                        [
                          pattern (lambda/simplif.ml[655,24927+11]..[655,24927+12])
                            Ppat_any
                          pattern (lambda/simplif.ml[655,24927+14]..[655,24927+15])
                            Ppat_var "l" (lambda/simplif.ml[655,24927+14]..[655,24927+15])
                          pattern (lambda/simplif.ml[655,24927+17]..[655,24927+18])
                            Ppat_any
                        ]
                  expression (lambda/simplif.ml[656,24950+6]..[656,24950+34])
                    Pexp_apply
                    expression (lambda/simplif.ml[656,24950+6]..[656,24950+26])
                      Pexp_ident "list_emit_tail_infos" (lambda/simplif.ml[656,24950+6]..[656,24950+26])
                    [
                      <arg>
                      Nolabel
                        expression (lambda/simplif.ml[656,24950+27]..[656,24950+32])
                          Pexp_construct "false" (lambda/simplif.ml[656,24950+27]..[656,24950+32])
                          None
                      <arg>
                      Nolabel
                        expression (lambda/simplif.ml[656,24950+33]..[656,24950+34])
                          Pexp_ident "l" (lambda/simplif.ml[656,24950+33]..[656,24950+34])
                    ]
                <case>
                  pattern (lambda/simplif.ml[657,24985+4]..[657,24985+27])
                    Ppat_construct "Lswitch" (lambda/simplif.ml[657,24985+4]..[657,24985+11])
                    Some
                      []
                      pattern (lambda/simplif.ml[657,24985+12]..[657,24985+27])
                        Ppat_tuple
                        [
                          pattern (lambda/simplif.ml[657,24985+13]..[657,24985+16])
                            Ppat_var "lam" (lambda/simplif.ml[657,24985+13]..[657,24985+16])
                          pattern (lambda/simplif.ml[657,24985+18]..[657,24985+20])
                            Ppat_var "sw" (lambda/simplif.ml[657,24985+18]..[657,24985+20])
                          pattern (lambda/simplif.ml[657,24985+22]..[657,24985+26])
                            Ppat_var "_loc" (lambda/simplif.ml[657,24985+22]..[657,24985+26])
                        ]
                  expression (lambda/simplif.ml[658,25016+6]..[661,25163+61])
                    Pexp_sequence
                    expression (lambda/simplif.ml[658,25016+6]..[658,25016+31])
                      Pexp_apply
                      expression (lambda/simplif.ml[658,25016+6]..[658,25016+21])
                        Pexp_ident "emit_tail_infos" (lambda/simplif.ml[658,25016+6]..[658,25016+21])
                      [
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[658,25016+22]..[658,25016+27])
                            Pexp_construct "false" (lambda/simplif.ml[658,25016+22]..[658,25016+27])
                            None
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[658,25016+28]..[658,25016+31])
                            Pexp_ident "lam" (lambda/simplif.ml[658,25016+28]..[658,25016+31])
                      ]
                    expression (lambda/simplif.ml[659,25049+6]..[661,25163+61])
                      Pexp_sequence
                      expression (lambda/simplif.ml[659,25049+6]..[659,25049+55])
                        Pexp_apply
                        expression (lambda/simplif.ml[659,25049+6]..[659,25049+30])
                          Pexp_ident "list_emit_tail_infos_fun" (lambda/simplif.ml[659,25049+6]..[659,25049+30])
                        [
                          <arg>
                          Nolabel
                            expression (lambda/simplif.ml[659,25049+31]..[659,25049+34])
                              Pexp_ident "snd" (lambda/simplif.ml[659,25049+31]..[659,25049+34])
                          <arg>
                          Nolabel
                            expression (lambda/simplif.ml[659,25049+35]..[659,25049+42])
                              Pexp_ident "is_tail" (lambda/simplif.ml[659,25049+35]..[659,25049+42])
                          <arg>
                          Nolabel
                            expression (lambda/simplif.ml[659,25049+43]..[659,25049+55])
                              Pexp_field
                              expression (lambda/simplif.ml[659,25049+43]..[659,25049+45])
                                Pexp_ident "sw" (lambda/simplif.ml[659,25049+43]..[659,25049+45])
                              "sw_consts" (lambda/simplif.ml[659,25049+46]..[659,25049+55])
                        ]
                      expression (lambda/simplif.ml[660,25106+6]..[661,25163+61])
                        Pexp_sequence
                        expression (lambda/simplif.ml[660,25106+6]..[660,25106+55])
                          Pexp_apply
                          expression (lambda/simplif.ml[660,25106+6]..[660,25106+30])
                            Pexp_ident "list_emit_tail_infos_fun" (lambda/simplif.ml[660,25106+6]..[660,25106+30])
                          [
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[660,25106+31]..[660,25106+34])
                                Pexp_ident "snd" (lambda/simplif.ml[660,25106+31]..[660,25106+34])
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[660,25106+35]..[660,25106+42])
                                Pexp_ident "is_tail" (lambda/simplif.ml[660,25106+35]..[660,25106+42])
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[660,25106+43]..[660,25106+55])
                                Pexp_field
                                expression (lambda/simplif.ml[660,25106+43]..[660,25106+45])
                                  Pexp_ident "sw" (lambda/simplif.ml[660,25106+43]..[660,25106+45])
                                "sw_blocks" (lambda/simplif.ml[660,25106+46]..[660,25106+55])
                          ]
                        expression (lambda/simplif.ml[661,25163+6]..[661,25163+61])
                          Pexp_apply
                          expression (lambda/simplif.ml[661,25163+6]..[661,25163+17])
                            Pexp_ident "Option.iter" (lambda/simplif.ml[661,25163+6]..[661,25163+17])
                          [
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[661,25163+19]..[661,25163+44])
                                Pexp_apply
                                expression (lambda/simplif.ml[661,25163+20]..[661,25163+35])
                                  Pexp_ident "emit_tail_infos" (lambda/simplif.ml[661,25163+20]..[661,25163+35])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[661,25163+36]..[661,25163+43])
                                      Pexp_ident "is_tail" (lambda/simplif.ml[661,25163+36]..[661,25163+43])
                                ]
                            <arg>
                            Nolabel
                              expression (lambda/simplif.ml[661,25163+45]..[661,25163+61])
                                Pexp_field
                                expression (lambda/simplif.ml[661,25163+45]..[661,25163+47])
                                  Pexp_ident "sw" (lambda/simplif.ml[661,25163+45]..[661,25163+47])
                                "sw_failaction" (lambda/simplif.ml[661,25163+48]..[661,25163+61])
                          ]
                <case>
                  pattern (lambda/simplif.ml[662,25225+4]..[662,25225+33])
                    Ppat_construct "Lstringswitch" (lambda/simplif.ml[662,25225+4]..[662,25225+17])
                    Some
                      []
                      pattern (lambda/simplif.ml[662,25225+18]..[662,25225+33])
                        Ppat_tuple
                        [
                          pattern (lambda/simplif.ml[662,25225+19]..[662,25225+22])
                            Ppat_var "lam" (lambda/simplif.ml[662,25225+19]..[662,25225+22])
                          pattern (lambda/simplif.ml[662,25225+24]..[662,25225+26])
                            Ppat_var "sw" (lambda/simplif.ml[662,25225+24]..[662,25225+26])
                          pattern (lambda/simplif.ml[662,25225+28]..[662,25225+29])
                            Ppat_var "d" (lambda/simplif.ml[662,25225+28]..[662,25225+29])
                          pattern (lambda/simplif.ml[662,25225+31]..[662,25225+32])
                            Ppat_any
                        ]
                  expression (lambda/simplif.ml[663,25262+6]..[667,25378+45])
                    Pexp_sequence
                    expression (lambda/simplif.ml[663,25262+6]..[663,25262+31])
                      Pexp_apply
                      expression (lambda/simplif.ml[663,25262+6]..[663,25262+21])
                        Pexp_ident "emit_tail_infos" (lambda/simplif.ml[663,25262+6]..[663,25262+21])
                      [
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[663,25262+22]..[663,25262+27])
                            Pexp_construct "false" (lambda/simplif.ml[663,25262+22]..[663,25262+27])
                            None
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[663,25262+28]..[663,25262+31])
                            Pexp_ident "lam" (lambda/simplif.ml[663,25262+28]..[663,25262+31])
                      ]
                    expression (lambda/simplif.ml[664,25295+6]..[667,25378+45])
                      Pexp_sequence
                      expression (lambda/simplif.ml[664,25295+6]..[666,25365+10])
                        Pexp_apply
                        expression (lambda/simplif.ml[664,25295+6]..[664,25295+15])
                          Pexp_ident "List.iter" (lambda/simplif.ml[664,25295+6]..[664,25295+15])
                        [
                          <arg>
                          Nolabel
                            expression (lambda/simplif.ml[665,25311+8]..[665,25311+53])
                              Pexp_fun
                              Nolabel
                              None
                              pattern (lambda/simplif.ml[665,25311+13]..[665,25311+20])
                                Ppat_tuple
                                [
                                  pattern (lambda/simplif.ml[665,25311+14]..[665,25311+15])
                                    Ppat_any
                                  pattern (lambda/simplif.ml[665,25311+16]..[665,25311+19])
                                    Ppat_var "lam" (lambda/simplif.ml[665,25311+16]..[665,25311+19])
                                ]
                              expression (lambda/simplif.ml[665,25311+25]..[665,25311+52])
                                Pexp_apply
                                expression (lambda/simplif.ml[665,25311+25]..[665,25311+40])
                                  Pexp_ident "emit_tail_infos" (lambda/simplif.ml[665,25311+25]..[665,25311+40])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[665,25311+41]..[665,25311+48])
                                      Pexp_ident "is_tail" (lambda/simplif.ml[665,25311+41]..[665,25311+48])
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[665,25311+49]..[665,25311+52])
                                      Pexp_ident "lam" (lambda/simplif.ml[665,25311+49]..[665,25311+52])
                                ]
                          <arg>
                          Nolabel
                            expression (lambda/simplif.ml[666,25365+8]..[666,25365+10])
                              Pexp_ident "sw" (lambda/simplif.ml[666,25365+8]..[666,25365+10])
                        ]
                      expression (lambda/simplif.ml[667,25378+6]..[667,25378+45])
                        Pexp_apply
                        expression (lambda/simplif.ml[667,25378+6]..[667,25378+17])
                          Pexp_ident "Option.iter" (lambda/simplif.ml[667,25378+6]..[667,25378+17])
                        [
                          <arg>
                          Nolabel
                            expression (lambda/simplif.ml[667,25378+18]..[667,25378+43])
                              Pexp_apply
                              expression (lambda/simplif.ml[667,25378+19]..[667,25378+34])
                                Pexp_ident "emit_tail_infos" (lambda/simplif.ml[667,25378+19]..[667,25378+34])
                              [
                                <arg>
                                Nolabel
                                  expression (lambda/simplif.ml[667,25378+35]..[667,25378+42])
                                    Pexp_ident "is_tail" (lambda/simplif.ml[667,25378+35]..[667,25378+42])
                              ]
                          <arg>
                          Nolabel
                            expression (lambda/simplif.ml[667,25378+44]..[667,25378+45])
                              Pexp_ident "d" (lambda/simplif.ml[667,25378+44]..[667,25378+45])
                        ]
                <case>
                  pattern (lambda/simplif.ml[668,25424+4]..[668,25424+23])
                    Ppat_construct "Lstaticraise" (lambda/simplif.ml[668,25424+4]..[668,25424+16])
                    Some
                      []
                      pattern (lambda/simplif.ml[668,25424+17]..[668,25424+23])
                        Ppat_tuple
                        [
                          pattern (lambda/simplif.ml[668,25424+18]..[668,25424+19])
                            Ppat_any
                          pattern (lambda/simplif.ml[668,25424+21]..[668,25424+22])
                            Ppat_var "l" (lambda/simplif.ml[668,25424+21]..[668,25424+22])
                        ]
                  expression (lambda/simplif.ml[669,25451+6]..[669,25451+34])
                    Pexp_apply
                    expression (lambda/simplif.ml[669,25451+6]..[669,25451+26])
                      Pexp_ident "list_emit_tail_infos" (lambda/simplif.ml[669,25451+6]..[669,25451+26])
                    [
                      <arg>
                      Nolabel
                        expression (lambda/simplif.ml[669,25451+27]..[669,25451+32])
                          Pexp_construct "false" (lambda/simplif.ml[669,25451+27]..[669,25451+32])
                          None
                      <arg>
                      Nolabel
                        expression (lambda/simplif.ml[669,25451+33]..[669,25451+34])
                          Pexp_ident "l" (lambda/simplif.ml[669,25451+33]..[669,25451+34])
                    ]
                <case>
                  pattern (lambda/simplif.ml[670,25486+4]..[670,25486+35])
                    Ppat_construct "Lstaticcatch" (lambda/simplif.ml[670,25486+4]..[670,25486+16])
                    Some
                      []
                      pattern (lambda/simplif.ml[670,25486+17]..[670,25486+35])
                        Ppat_tuple
                        [
                          pattern (lambda/simplif.ml[670,25486+18]..[670,25486+22])
                            Ppat_var "body" (lambda/simplif.ml[670,25486+18]..[670,25486+22])
                          pattern (lambda/simplif.ml[670,25486+24]..[670,25486+25])
                            Ppat_any
                          pattern (lambda/simplif.ml[670,25486+27]..[670,25486+34])
                            Ppat_var "handler" (lambda/simplif.ml[670,25486+27]..[670,25486+34])
                        ]
                  expression (lambda/simplif.ml[671,25525+6]..[672,25561+37])
                    Pexp_sequence
                    expression (lambda/simplif.ml[671,25525+6]..[671,25525+34])
                      Pexp_apply
                      expression (lambda/simplif.ml[671,25525+6]..[671,25525+21])
                        Pexp_ident "emit_tail_infos" (lambda/simplif.ml[671,25525+6]..[671,25525+21])
                      [
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[671,25525+22]..[671,25525+29])
                            Pexp_ident "is_tail" (lambda/simplif.ml[671,25525+22]..[671,25525+29])
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[671,25525+30]..[671,25525+34])
                            Pexp_ident "body" (lambda/simplif.ml[671,25525+30]..[671,25525+34])
                      ]
                    expression (lambda/simplif.ml[672,25561+6]..[672,25561+37])
                      Pexp_apply
                      expression (lambda/simplif.ml[672,25561+6]..[672,25561+21])
                        Pexp_ident "emit_tail_infos" (lambda/simplif.ml[672,25561+6]..[672,25561+21])
                      [
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[672,25561+22]..[672,25561+29])
                            Pexp_ident "is_tail" (lambda/simplif.ml[672,25561+22]..[672,25561+29])
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[672,25561+30]..[672,25561+37])
                            Pexp_ident "handler" (lambda/simplif.ml[672,25561+30]..[672,25561+37])
                      ]
                <case>
                  pattern (lambda/simplif.ml[673,25599+4]..[673,25599+31])
                    Ppat_construct "Ltrywith" (lambda/simplif.ml[673,25599+4]..[673,25599+12])
                    Some
                      []
                      pattern (lambda/simplif.ml[673,25599+13]..[673,25599+31])
                        Ppat_tuple
                        [
                          pattern (lambda/simplif.ml[673,25599+14]..[673,25599+18])
                            Ppat_var "body" (lambda/simplif.ml[673,25599+14]..[673,25599+18])
                          pattern (lambda/simplif.ml[673,25599+20]..[673,25599+21])
                            Ppat_any
                          pattern (lambda/simplif.ml[673,25599+23]..[673,25599+30])
                            Ppat_var "handler" (lambda/simplif.ml[673,25599+23]..[673,25599+30])
                        ]
                  expression (lambda/simplif.ml[674,25634+6]..[675,25668+37])
                    Pexp_sequence
                    expression (lambda/simplif.ml[674,25634+6]..[674,25634+32])
                      Pexp_apply
                      expression (lambda/simplif.ml[674,25634+6]..[674,25634+21])
                        Pexp_ident "emit_tail_infos" (lambda/simplif.ml[674,25634+6]..[674,25634+21])
                      [
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[674,25634+22]..[674,25634+27])
                            Pexp_construct "false" (lambda/simplif.ml[674,25634+22]..[674,25634+27])
                            None
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[674,25634+28]..[674,25634+32])
                            Pexp_ident "body" (lambda/simplif.ml[674,25634+28]..[674,25634+32])
                      ]
                    expression (lambda/simplif.ml[675,25668+6]..[675,25668+37])
                      Pexp_apply
                      expression (lambda/simplif.ml[675,25668+6]..[675,25668+21])
                        Pexp_ident "emit_tail_infos" (lambda/simplif.ml[675,25668+6]..[675,25668+21])
                      [
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[675,25668+22]..[675,25668+29])
                            Pexp_ident "is_tail" (lambda/simplif.ml[675,25668+22]..[675,25668+29])
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[675,25668+30]..[675,25668+37])
                            Pexp_ident "handler" (lambda/simplif.ml[675,25668+30]..[675,25668+37])
                      ]
                <case>
                  pattern (lambda/simplif.ml[676,25706+4]..[676,25706+34])
                    Ppat_construct "Lifthenelse" (lambda/simplif.ml[676,25706+4]..[676,25706+15])
                    Some
                      []
                      pattern (lambda/simplif.ml[676,25706+16]..[676,25706+34])
                        Ppat_tuple
                        [
                          pattern (lambda/simplif.ml[676,25706+17]..[676,25706+21])
                            Ppat_var "cond" (lambda/simplif.ml[676,25706+17]..[676,25706+21])
                          pattern (lambda/simplif.ml[676,25706+23]..[676,25706+27])
                            Ppat_var "ifso" (lambda/simplif.ml[676,25706+23]..[676,25706+27])
                          pattern (lambda/simplif.ml[676,25706+29]..[676,25706+33])
                            Ppat_var "ifno" (lambda/simplif.ml[676,25706+29]..[676,25706+33])
                        ]
                  expression (lambda/simplif.ml[677,25744+6]..[679,25814+34])
                    Pexp_sequence
                    expression (lambda/simplif.ml[677,25744+6]..[677,25744+32])
                      Pexp_apply
                      expression (lambda/simplif.ml[677,25744+6]..[677,25744+21])
                        Pexp_ident "emit_tail_infos" (lambda/simplif.ml[677,25744+6]..[677,25744+21])
                      [
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[677,25744+22]..[677,25744+27])
                            Pexp_construct "false" (lambda/simplif.ml[677,25744+22]..[677,25744+27])
                            None
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[677,25744+28]..[677,25744+32])
                            Pexp_ident "cond" (lambda/simplif.ml[677,25744+28]..[677,25744+32])
                      ]
                    expression (lambda/simplif.ml[678,25778+6]..[679,25814+34])
                      Pexp_sequence
                      expression (lambda/simplif.ml[678,25778+6]..[678,25778+34])
                        Pexp_apply
                        expression (lambda/simplif.ml[678,25778+6]..[678,25778+21])
                          Pexp_ident "emit_tail_infos" (lambda/simplif.ml[678,25778+6]..[678,25778+21])
                        [
                          <arg>
                          Nolabel
                            expression (lambda/simplif.ml[678,25778+22]..[678,25778+29])
                              Pexp_ident "is_tail" (lambda/simplif.ml[678,25778+22]..[678,25778+29])
                          <arg>
                          Nolabel
                            expression (lambda/simplif.ml[678,25778+30]..[678,25778+34])
                              Pexp_ident "ifso" (lambda/simplif.ml[678,25778+30]..[678,25778+34])
                        ]
                      expression (lambda/simplif.ml[679,25814+6]..[679,25814+34])
                        Pexp_apply
                        expression (lambda/simplif.ml[679,25814+6]..[679,25814+21])
                          Pexp_ident "emit_tail_infos" (lambda/simplif.ml[679,25814+6]..[679,25814+21])
                        [
                          <arg>
                          Nolabel
                            expression (lambda/simplif.ml[679,25814+22]..[679,25814+29])
                              Pexp_ident "is_tail" (lambda/simplif.ml[679,25814+22]..[679,25814+29])
                          <arg>
                          Nolabel
                            expression (lambda/simplif.ml[679,25814+30]..[679,25814+34])
                              Pexp_ident "ifno" (lambda/simplif.ml[679,25814+30]..[679,25814+34])
                        ]
                <case>
                  pattern (lambda/simplif.ml[680,25849+4]..[680,25849+26])
                    Ppat_construct "Lsequence" (lambda/simplif.ml[680,25849+4]..[680,25849+13])
                    Some
                      []
                      pattern (lambda/simplif.ml[680,25849+14]..[680,25849+26])
                        Ppat_tuple
                        [
                          pattern (lambda/simplif.ml[680,25849+15]..[680,25849+19])
                            Ppat_var "lam1" (lambda/simplif.ml[680,25849+15]..[680,25849+19])
                          pattern (lambda/simplif.ml[680,25849+21]..[680,25849+25])
                            Ppat_var "lam2" (lambda/simplif.ml[680,25849+21]..[680,25849+25])
                        ]
                  expression (lambda/simplif.ml[681,25879+6]..[682,25913+34])
                    Pexp_sequence
                    expression (lambda/simplif.ml[681,25879+6]..[681,25879+32])
                      Pexp_apply
                      expression (lambda/simplif.ml[681,25879+6]..[681,25879+21])
                        Pexp_ident "emit_tail_infos" (lambda/simplif.ml[681,25879+6]..[681,25879+21])
                      [
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[681,25879+22]..[681,25879+27])
                            Pexp_construct "false" (lambda/simplif.ml[681,25879+22]..[681,25879+27])
                            None
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[681,25879+28]..[681,25879+32])
                            Pexp_ident "lam1" (lambda/simplif.ml[681,25879+28]..[681,25879+32])
                      ]
                    expression (lambda/simplif.ml[682,25913+6]..[682,25913+34])
                      Pexp_apply
                      expression (lambda/simplif.ml[682,25913+6]..[682,25913+21])
                        Pexp_ident "emit_tail_infos" (lambda/simplif.ml[682,25913+6]..[682,25913+21])
                      [
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[682,25913+22]..[682,25913+29])
                            Pexp_ident "is_tail" (lambda/simplif.ml[682,25913+22]..[682,25913+29])
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[682,25913+30]..[682,25913+34])
                            Pexp_ident "lam2" (lambda/simplif.ml[682,25913+30]..[682,25913+34])
                      ]
                <case>
                  pattern (lambda/simplif.ml[683,25948+4]..[683,25948+23])
                    Ppat_construct "Lwhile" (lambda/simplif.ml[683,25948+4]..[683,25948+10])
                    Some
                      []
                      pattern (lambda/simplif.ml[683,25948+11]..[683,25948+23])
                        Ppat_tuple
                        [
                          pattern (lambda/simplif.ml[683,25948+12]..[683,25948+16])
                            Ppat_var "cond" (lambda/simplif.ml[683,25948+12]..[683,25948+16])
                          pattern (lambda/simplif.ml[683,25948+18]..[683,25948+22])
                            Ppat_var "body" (lambda/simplif.ml[683,25948+18]..[683,25948+22])
                        ]
                  expression (lambda/simplif.ml[684,25975+6]..[685,26009+32])
                    Pexp_sequence
                    expression (lambda/simplif.ml[684,25975+6]..[684,25975+32])
                      Pexp_apply
                      expression (lambda/simplif.ml[684,25975+6]..[684,25975+21])
                        Pexp_ident "emit_tail_infos" (lambda/simplif.ml[684,25975+6]..[684,25975+21])
                      [
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[684,25975+22]..[684,25975+27])
                            Pexp_construct "false" (lambda/simplif.ml[684,25975+22]..[684,25975+27])
                            None
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[684,25975+28]..[684,25975+32])
                            Pexp_ident "cond" (lambda/simplif.ml[684,25975+28]..[684,25975+32])
                      ]
                    expression (lambda/simplif.ml[685,26009+6]..[685,26009+32])
                      Pexp_apply
                      expression (lambda/simplif.ml[685,26009+6]..[685,26009+21])
                        Pexp_ident "emit_tail_infos" (lambda/simplif.ml[685,26009+6]..[685,26009+21])
                      [
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[685,26009+22]..[685,26009+27])
                            Pexp_construct "false" (lambda/simplif.ml[685,26009+22]..[685,26009+27])
                            None
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[685,26009+28]..[685,26009+32])
                            Pexp_ident "body" (lambda/simplif.ml[685,26009+28]..[685,26009+32])
                      ]
                <case>
                  pattern (lambda/simplif.ml[686,26042+4]..[686,26042+32])
                    Ppat_construct "Lfor" (lambda/simplif.ml[686,26042+4]..[686,26042+8])
                    Some
                      []
                      pattern (lambda/simplif.ml[686,26042+9]..[686,26042+32])
                        Ppat_tuple
                        [
                          pattern (lambda/simplif.ml[686,26042+10]..[686,26042+11])
                            Ppat_any
                          pattern (lambda/simplif.ml[686,26042+13]..[686,26042+16])
                            Ppat_var "low" (lambda/simplif.ml[686,26042+13]..[686,26042+16])
                          pattern (lambda/simplif.ml[686,26042+18]..[686,26042+22])
                            Ppat_var "high" (lambda/simplif.ml[686,26042+18]..[686,26042+22])
                          pattern (lambda/simplif.ml[686,26042+24]..[686,26042+25])
                            Ppat_any
                          pattern (lambda/simplif.ml[686,26042+27]..[686,26042+31])
                            Ppat_var "body" (lambda/simplif.ml[686,26042+27]..[686,26042+31])
                        ]
                  expression (lambda/simplif.ml[687,26078+6]..[689,26145+32])
                    Pexp_sequence
                    expression (lambda/simplif.ml[687,26078+6]..[687,26078+31])
                      Pexp_apply
                      expression (lambda/simplif.ml[687,26078+6]..[687,26078+21])
                        Pexp_ident "emit_tail_infos" (lambda/simplif.ml[687,26078+6]..[687,26078+21])
                      [
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[687,26078+22]..[687,26078+27])
                            Pexp_construct "false" (lambda/simplif.ml[687,26078+22]..[687,26078+27])
                            None
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[687,26078+28]..[687,26078+31])
                            Pexp_ident "low" (lambda/simplif.ml[687,26078+28]..[687,26078+31])
                      ]
                    expression (lambda/simplif.ml[688,26111+6]..[689,26145+32])
                      Pexp_sequence
                      expression (lambda/simplif.ml[688,26111+6]..[688,26111+32])
                        Pexp_apply
                        expression (lambda/simplif.ml[688,26111+6]..[688,26111+21])
                          Pexp_ident "emit_tail_infos" (lambda/simplif.ml[688,26111+6]..[688,26111+21])
                        [
                          <arg>
                          Nolabel
                            expression (lambda/simplif.ml[688,26111+22]..[688,26111+27])
                              Pexp_construct "false" (lambda/simplif.ml[688,26111+22]..[688,26111+27])
                              None
                          <arg>
                          Nolabel
                            expression (lambda/simplif.ml[688,26111+28]..[688,26111+32])
                              Pexp_ident "high" (lambda/simplif.ml[688,26111+28]..[688,26111+32])
                        ]
                      expression (lambda/simplif.ml[689,26145+6]..[689,26145+32])
                        Pexp_apply
                        expression (lambda/simplif.ml[689,26145+6]..[689,26145+21])
                          Pexp_ident "emit_tail_infos" (lambda/simplif.ml[689,26145+6]..[689,26145+21])
                        [
                          <arg>
                          Nolabel
                            expression (lambda/simplif.ml[689,26145+22]..[689,26145+27])
                              Pexp_construct "false" (lambda/simplif.ml[689,26145+22]..[689,26145+27])
                              None
                          <arg>
                          Nolabel
                            expression (lambda/simplif.ml[689,26145+28]..[689,26145+32])
                              Pexp_ident "body" (lambda/simplif.ml[689,26145+28]..[689,26145+32])
                        ]
                <case>
                  pattern (lambda/simplif.ml[690,26178+4]..[690,26178+20])
                    Ppat_construct "Lassign" (lambda/simplif.ml[690,26178+4]..[690,26178+11])
                    Some
                      []
                      pattern (lambda/simplif.ml[690,26178+12]..[690,26178+20])
                        Ppat_tuple
                        [
                          pattern (lambda/simplif.ml[690,26178+13]..[690,26178+14])
                            Ppat_any
                          pattern (lambda/simplif.ml[690,26178+16]..[690,26178+19])
                            Ppat_var "lam" (lambda/simplif.ml[690,26178+16]..[690,26178+19])
                        ]
                  expression (lambda/simplif.ml[691,26202+6]..[691,26202+31])
                    Pexp_apply
                    expression (lambda/simplif.ml[691,26202+6]..[691,26202+21])
                      Pexp_ident "emit_tail_infos" (lambda/simplif.ml[691,26202+6]..[691,26202+21])
                    [
                      <arg>
                      Nolabel
                        expression (lambda/simplif.ml[691,26202+22]..[691,26202+27])
                          Pexp_construct "false" (lambda/simplif.ml[691,26202+22]..[691,26202+27])
                          None
                      <arg>
                      Nolabel
                        expression (lambda/simplif.ml[691,26202+28]..[691,26202+31])
                          Pexp_ident "lam" (lambda/simplif.ml[691,26202+28]..[691,26202+31])
                    ]
                <case>
                  pattern (lambda/simplif.ml[692,26234+4]..[692,26234+36])
                    Ppat_construct "Lsend" (lambda/simplif.ml[692,26234+4]..[692,26234+9])
                    Some
                      []
                      pattern (lambda/simplif.ml[692,26234+10]..[692,26234+36])
                        Ppat_tuple
                        [
                          pattern (lambda/simplif.ml[692,26234+11]..[692,26234+12])
                            Ppat_any
                          pattern (lambda/simplif.ml[692,26234+14]..[692,26234+18])
                            Ppat_var "meth" (lambda/simplif.ml[692,26234+14]..[692,26234+18])
                          pattern (lambda/simplif.ml[692,26234+20]..[692,26234+23])
                            Ppat_var "obj" (lambda/simplif.ml[692,26234+20]..[692,26234+23])
                          pattern (lambda/simplif.ml[692,26234+25]..[692,26234+29])
                            Ppat_var "args" (lambda/simplif.ml[692,26234+25]..[692,26234+29])
                          pattern (lambda/simplif.ml[692,26234+31]..[692,26234+35])
                            Ppat_var "_loc" (lambda/simplif.ml[692,26234+31]..[692,26234+35])
                        ]
                  expression (lambda/simplif.ml[693,26274+6]..[695,26341+37])
                    Pexp_sequence
                    expression (lambda/simplif.ml[693,26274+6]..[693,26274+32])
                      Pexp_apply
                      expression (lambda/simplif.ml[693,26274+6]..[693,26274+21])
                        Pexp_ident "emit_tail_infos" (lambda/simplif.ml[693,26274+6]..[693,26274+21])
                      [
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[693,26274+22]..[693,26274+27])
                            Pexp_construct "false" (lambda/simplif.ml[693,26274+22]..[693,26274+27])
                            None
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[693,26274+28]..[693,26274+32])
                            Pexp_ident "meth" (lambda/simplif.ml[693,26274+28]..[693,26274+32])
                      ]
                    expression (lambda/simplif.ml[694,26308+6]..[695,26341+37])
                      Pexp_sequence
                      expression (lambda/simplif.ml[694,26308+6]..[694,26308+31])
                        Pexp_apply
                        expression (lambda/simplif.ml[694,26308+6]..[694,26308+21])
                          Pexp_ident "emit_tail_infos" (lambda/simplif.ml[694,26308+6]..[694,26308+21])
                        [
                          <arg>
                          Nolabel
                            expression (lambda/simplif.ml[694,26308+22]..[694,26308+27])
                              Pexp_construct "false" (lambda/simplif.ml[694,26308+22]..[694,26308+27])
                              None
                          <arg>
                          Nolabel
                            expression (lambda/simplif.ml[694,26308+28]..[694,26308+31])
                              Pexp_ident "obj" (lambda/simplif.ml[694,26308+28]..[694,26308+31])
                        ]
                      expression (lambda/simplif.ml[695,26341+6]..[695,26341+37])
                        Pexp_apply
                        expression (lambda/simplif.ml[695,26341+6]..[695,26341+26])
                          Pexp_ident "list_emit_tail_infos" (lambda/simplif.ml[695,26341+6]..[695,26341+26])
                        [
                          <arg>
                          Nolabel
                            expression (lambda/simplif.ml[695,26341+27]..[695,26341+32])
                              Pexp_construct "false" (lambda/simplif.ml[695,26341+27]..[695,26341+32])
                              None
                          <arg>
                          Nolabel
                            expression (lambda/simplif.ml[695,26341+33]..[695,26341+37])
                              Pexp_ident "args" (lambda/simplif.ml[695,26341+33]..[695,26341+37])
                        ]
                <case>
                  pattern (lambda/simplif.ml[696,26379+4]..[696,26379+19])
                    Ppat_construct "Levent" (lambda/simplif.ml[696,26379+4]..[696,26379+10])
                    Some
                      []
                      pattern (lambda/simplif.ml[696,26379+11]..[696,26379+19])
                        Ppat_tuple
                        [
                          pattern (lambda/simplif.ml[696,26379+12]..[696,26379+15])
                            Ppat_var "lam" (lambda/simplif.ml[696,26379+12]..[696,26379+15])
                          pattern (lambda/simplif.ml[696,26379+17]..[696,26379+18])
                            Ppat_any
                        ]
                  expression (lambda/simplif.ml[697,26402+6]..[697,26402+33])
                    Pexp_apply
                    expression (lambda/simplif.ml[697,26402+6]..[697,26402+21])
                      Pexp_ident "emit_tail_infos" (lambda/simplif.ml[697,26402+6]..[697,26402+21])
                    [
                      <arg>
                      Nolabel
                        expression (lambda/simplif.ml[697,26402+22]..[697,26402+29])
                          Pexp_ident "is_tail" (lambda/simplif.ml[697,26402+22]..[697,26402+29])
                      <arg>
                      Nolabel
                        expression (lambda/simplif.ml[697,26402+30]..[697,26402+33])
                          Pexp_ident "lam" (lambda/simplif.ml[697,26402+30]..[697,26402+33])
                    ]
                <case>
                  pattern (lambda/simplif.ml[698,26436+4]..[698,26436+20])
                    Ppat_construct "Lifused" (lambda/simplif.ml[698,26436+4]..[698,26436+11])
                    Some
                      []
                      pattern (lambda/simplif.ml[698,26436+12]..[698,26436+20])
                        Ppat_tuple
                        [
                          pattern (lambda/simplif.ml[698,26436+13]..[698,26436+14])
                            Ppat_any
                          pattern (lambda/simplif.ml[698,26436+16]..[698,26436+19])
                            Ppat_var "lam" (lambda/simplif.ml[698,26436+16]..[698,26436+19])
                        ]
                  expression (lambda/simplif.ml[699,26460+6]..[699,26460+33])
                    Pexp_apply
                    expression (lambda/simplif.ml[699,26460+6]..[699,26460+21])
                      Pexp_ident "emit_tail_infos" (lambda/simplif.ml[699,26460+6]..[699,26460+21])
                    [
                      <arg>
                      Nolabel
                        expression (lambda/simplif.ml[699,26460+22]..[699,26460+29])
                          Pexp_ident "is_tail" (lambda/simplif.ml[699,26460+22]..[699,26460+29])
                      <arg>
                      Nolabel
                        expression (lambda/simplif.ml[699,26460+30]..[699,26460+33])
                          Pexp_ident "lam" (lambda/simplif.ml[699,26460+30]..[699,26460+33])
                    ]
              ]
      <def>
        pattern (lambda/simplif.ml[700,26494+4]..[700,26494+28])
          Ppat_var "list_emit_tail_infos_fun" (lambda/simplif.ml[700,26494+4]..[700,26494+28])
        expression (lambda/simplif.ml[700,26494+29]..[701,26535+52]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lambda/simplif.ml[700,26494+29]..[700,26494+30])
            Ppat_var "f" (lambda/simplif.ml[700,26494+29]..[700,26494+30])
          expression (lambda/simplif.ml[700,26494+31]..[701,26535+52]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (lambda/simplif.ml[700,26494+31]..[700,26494+38])
              Ppat_var "is_tail" (lambda/simplif.ml[700,26494+31]..[700,26494+38])
            expression (lambda/simplif.ml[701,26535+2]..[701,26535+52])
              Pexp_apply
              expression (lambda/simplif.ml[701,26535+2]..[701,26535+11])
                Pexp_ident "List.iter" (lambda/simplif.ml[701,26535+2]..[701,26535+11])
              [
                <arg>
                Nolabel
                  expression (lambda/simplif.ml[701,26535+12]..[701,26535+52])
                    Pexp_fun
                    Nolabel
                    None
                    pattern (lambda/simplif.ml[701,26535+17]..[701,26535+18])
                      Ppat_var "x" (lambda/simplif.ml[701,26535+17]..[701,26535+18])
                    expression (lambda/simplif.ml[701,26535+22]..[701,26535+51])
                      Pexp_apply
                      expression (lambda/simplif.ml[701,26535+22]..[701,26535+37])
                        Pexp_ident "emit_tail_infos" (lambda/simplif.ml[701,26535+22]..[701,26535+37])
                      [
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[701,26535+38]..[701,26535+45])
                            Pexp_ident "is_tail" (lambda/simplif.ml[701,26535+38]..[701,26535+45])
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[701,26535+46]..[701,26535+51])
                            Pexp_apply
                            expression (lambda/simplif.ml[701,26535+47]..[701,26535+48])
                              Pexp_ident "f" (lambda/simplif.ml[701,26535+47]..[701,26535+48])
                            [
                              <arg>
                              Nolabel
                                expression (lambda/simplif.ml[701,26535+49]..[701,26535+50])
                                  Pexp_ident "x" (lambda/simplif.ml[701,26535+49]..[701,26535+50])
                            ]
                      ]
              ]
      <def>
        pattern (lambda/simplif.ml[702,26588+4]..[702,26588+24])
          Ppat_var "list_emit_tail_infos" (lambda/simplif.ml[702,26588+4]..[702,26588+24])
        expression (lambda/simplif.ml[702,26588+25]..[703,26623+37]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lambda/simplif.ml[702,26588+25]..[702,26588+32])
            Ppat_var "is_tail" (lambda/simplif.ml[702,26588+25]..[702,26588+32])
          expression (lambda/simplif.ml[703,26623+2]..[703,26623+37])
            Pexp_apply
            expression (lambda/simplif.ml[703,26623+2]..[703,26623+11])
              Pexp_ident "List.iter" (lambda/simplif.ml[703,26623+2]..[703,26623+11])
            [
              <arg>
              Nolabel
                expression (lambda/simplif.ml[703,26623+12]..[703,26623+37])
                  Pexp_apply
                  expression (lambda/simplif.ml[703,26623+13]..[703,26623+28])
                    Pexp_ident "emit_tail_infos" (lambda/simplif.ml[703,26623+13]..[703,26623+28])
                  [
                    <arg>
                    Nolabel
                      expression (lambda/simplif.ml[703,26623+29]..[703,26623+36])
                        Pexp_ident "is_tail" (lambda/simplif.ml[703,26623+29]..[703,26623+36])
                  ]
            ]
    ]
  structure_item (lambda/simplif.ml[713,27090+0]..[761,29117+64])
    Pstr_value Nonrec
    [
      <def>
        pattern (lambda/simplif.ml[713,27090+4]..[713,27090+25])
          Ppat_var "split_default_wrapper" (lambda/simplif.ml[713,27090+4]..[713,27090+25])
        expression (lambda/simplif.ml[713,27090+26]..[761,29117+64]) ghost
          Pexp_fun
          Labelled "id"
          None
          pattern (lambda/simplif.ml[713,27090+30]..[713,27090+36])
            Ppat_var "fun_id" (lambda/simplif.ml[713,27090+30]..[713,27090+36])
          expression (lambda/simplif.ml[713,27090+37]..[761,29117+64]) ghost
            Pexp_fun
            Labelled "kind"
            None
            pattern (lambda/simplif.ml[713,27090+38]..[713,27090+42])
              Ppat_var "kind" (lambda/simplif.ml[713,27090+38]..[713,27090+42])
            expression (lambda/simplif.ml[713,27090+43]..[761,29117+64]) ghost
              Pexp_fun
              Labelled "params"
              None
              pattern (lambda/simplif.ml[713,27090+44]..[713,27090+50])
                Ppat_var "params" (lambda/simplif.ml[713,27090+44]..[713,27090+50])
              expression (lambda/simplif.ml[713,27090+51]..[761,29117+64]) ghost
                Pexp_fun
                Labelled "return"
                None
                pattern (lambda/simplif.ml[713,27090+52]..[713,27090+58])
                  Ppat_var "return" (lambda/simplif.ml[713,27090+52]..[713,27090+58])
                expression (lambda/simplif.ml[713,27090+59]..[761,29117+64]) ghost
                  Pexp_fun
                  Labelled "body"
                  None
                  pattern (lambda/simplif.ml[713,27090+60]..[713,27090+64])
                    Ppat_var "body" (lambda/simplif.ml[713,27090+60]..[713,27090+64])
                  expression (lambda/simplif.ml[713,27090+65]..[761,29117+64]) ghost
                    Pexp_fun
                    Labelled "attr"
                    None
                    pattern (lambda/simplif.ml[713,27090+66]..[713,27090+70])
                      Ppat_var "attr" (lambda/simplif.ml[713,27090+66]..[713,27090+70])
                    expression (lambda/simplif.ml[713,27090+71]..[761,29117+64]) ghost
                      Pexp_fun
                      Labelled "loc"
                      None
                      pattern (lambda/simplif.ml[713,27090+72]..[713,27090+75])
                        Ppat_var "loc" (lambda/simplif.ml[713,27090+72]..[713,27090+75])
                      expression (lambda/simplif.ml[714,27168+2]..[761,29117+64])
                        Pexp_let Rec
                        [
                          <def>
                            pattern (lambda/simplif.ml[714,27168+10]..[714,27168+13])
                              Ppat_var "aux" (lambda/simplif.ml[714,27168+10]..[714,27168+13])
                            expression (lambda/simplif.ml[714,27168+14]..[754,28895+45]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (lambda/simplif.ml[714,27168+14]..[714,27168+17])
                                Ppat_var "map" (lambda/simplif.ml[714,27168+14]..[714,27168+17])
                              expression (lambda/simplif.ml[714,27168+20]..[754,28895+45])
                                Pexp_function
                                [
                                  <case>
                                    pattern (lambda/simplif.ml[715,27197+6]..[715,27197+74])
                                      Ppat_construct "Llet" (lambda/simplif.ml[715,27197+6]..[715,27197+10])
                                      Some
                                        []
                                        pattern (lambda/simplif.ml[715,27197+10]..[715,27197+74])
                                          Ppat_tuple
                                          [
                                            pattern (lambda/simplif.ml[715,27197+11]..[715,27197+17])
                                              Ppat_construct "Strict" (lambda/simplif.ml[715,27197+11]..[715,27197+17])
                                              None
                                            pattern (lambda/simplif.ml[715,27197+19]..[715,27197+20])
                                              Ppat_var "k" (lambda/simplif.ml[715,27197+19]..[715,27197+20])
                                            pattern (lambda/simplif.ml[715,27197+22]..[715,27197+24])
                                              Ppat_var "id" (lambda/simplif.ml[715,27197+22]..[715,27197+24])
                                            pattern (lambda/simplif.ml[715,27197+26]..[715,27197+67])
                                              Ppat_alias "def" (lambda/simplif.ml[715,27197+63]..[715,27197+66])
                                              pattern (lambda/simplif.ml[715,27197+27]..[715,27197+59])
                                                Ppat_construct "Lifthenelse" (lambda/simplif.ml[715,27197+27]..[715,27197+38])
                                                Some
                                                  []
                                                  pattern (lambda/simplif.ml[715,27197+38]..[715,27197+59])
                                                    Ppat_tuple
                                                    [
                                                      pattern (lambda/simplif.ml[715,27197+39]..[715,27197+52])
                                                        Ppat_construct "Lvar" (lambda/simplif.ml[715,27197+39]..[715,27197+43])
                                                        Some
                                                          []
                                                          pattern (lambda/simplif.ml[715,27197+44]..[715,27197+52])
                                                            Ppat_var "optparam" (lambda/simplif.ml[715,27197+44]..[715,27197+52])
                                                      pattern (lambda/simplif.ml[715,27197+54]..[715,27197+55])
                                                        Ppat_any
                                                      pattern (lambda/simplif.ml[715,27197+57]..[715,27197+58])
                                                        Ppat_any
                                                    ]
                                            pattern (lambda/simplif.ml[715,27197+69]..[715,27197+73])
                                              Ppat_var "rest" (lambda/simplif.ml[715,27197+69]..[715,27197+73])
                                          ]
                                    <when>
                                      expression (lambda/simplif.ml[716,27277+8]..[717,27349+46])
                                        Pexp_apply
                                        expression (lambda/simplif.ml[716,27277+38]..[716,27277+40])
                                          Pexp_ident "&&" (lambda/simplif.ml[716,27277+38]..[716,27277+40])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lambda/simplif.ml[716,27277+8]..[716,27277+37])
                                              Pexp_apply
                                              expression (lambda/simplif.ml[716,27277+28]..[716,27277+29])
                                                Pexp_ident "=" (lambda/simplif.ml[716,27277+28]..[716,27277+29])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[716,27277+8]..[716,27277+27])
                                                    Pexp_apply
                                                    expression (lambda/simplif.ml[716,27277+8]..[716,27277+18])
                                                      Pexp_ident "Ident.name" (lambda/simplif.ml[716,27277+8]..[716,27277+18])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (lambda/simplif.ml[716,27277+19]..[716,27277+27])
                                                          Pexp_ident "optparam" (lambda/simplif.ml[716,27277+19]..[716,27277+27])
                                                    ]
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[716,27277+30]..[716,27277+37])
                                                    Pexp_constant PConst_string("*opt*",(lambda/simplif.ml[716,27277+31]..[716,27277+36]),None)
                                              ]
                                          <arg>
                                          Nolabel
                                            expression (lambda/simplif.ml[716,27277+41]..[717,27349+46])
                                              Pexp_apply
                                              expression (lambda/simplif.ml[717,27349+10]..[717,27349+12])
                                                Pexp_ident "&&" (lambda/simplif.ml[717,27349+10]..[717,27349+12])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[716,27277+41]..[716,27277+71])
                                                    Pexp_apply
                                                    expression (lambda/simplif.ml[716,27277+41]..[716,27277+55])
                                                      Pexp_ident "List.mem_assoc" (lambda/simplif.ml[716,27277+41]..[716,27277+55])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (lambda/simplif.ml[716,27277+56]..[716,27277+64])
                                                          Pexp_ident "optparam" (lambda/simplif.ml[716,27277+56]..[716,27277+64])
                                                      <arg>
                                                      Nolabel
                                                        expression (lambda/simplif.ml[716,27277+65]..[716,27277+71])
                                                          Pexp_ident "params" (lambda/simplif.ml[716,27277+65]..[716,27277+71])
                                                    ]
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[717,27349+13]..[717,27349+46])
                                                    Pexp_apply
                                                    expression (lambda/simplif.ml[717,27349+13]..[717,27349+16])
                                                      Pexp_ident "not" (lambda/simplif.ml[717,27349+13]..[717,27349+16])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (lambda/simplif.ml[717,27349+17]..[717,27349+46])
                                                          Pexp_apply
                                                          expression (lambda/simplif.ml[717,27349+18]..[717,27349+32])
                                                            Pexp_ident "List.mem_assoc" (lambda/simplif.ml[717,27349+18]..[717,27349+32])
                                                          [
                                                            <arg>
                                                            Nolabel
                                                              expression (lambda/simplif.ml[717,27349+33]..[717,27349+41])
                                                                Pexp_ident "optparam" (lambda/simplif.ml[717,27349+33]..[717,27349+41])
                                                            <arg>
                                                            Nolabel
                                                              expression (lambda/simplif.ml[717,27349+42]..[717,27349+45])
                                                                Pexp_ident "map" (lambda/simplif.ml[717,27349+42]..[717,27349+45])
                                                          ]
                                                    ]
                                              ]
                                        ]
                                    expression (lambda/simplif.ml[719,27405+8]..[720,27475+53])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (lambda/simplif.ml[719,27405+12]..[719,27405+31])
                                            Ppat_tuple
                                            [
                                              pattern (lambda/simplif.ml[719,27405+12]..[719,27405+24])
                                                Ppat_var "wrapper_body" (lambda/simplif.ml[719,27405+12]..[719,27405+24])
                                              pattern (lambda/simplif.ml[719,27405+26]..[719,27405+31])
                                                Ppat_var "inner" (lambda/simplif.ml[719,27405+26]..[719,27405+31])
                                            ]
                                          expression (lambda/simplif.ml[719,27405+34]..[719,27405+66])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[719,27405+34]..[719,27405+37])
                                              Pexp_ident "aux" (lambda/simplif.ml[719,27405+34]..[719,27405+37])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[719,27405+38]..[719,27405+61])
                                                  Pexp_construct "::" (lambda/simplif.ml[719,27405+54]..[719,27405+56])
                                                  Some
                                                    expression (lambda/simplif.ml[719,27405+39]..[719,27405+60]) ghost
                                                      Pexp_tuple
                                                      [
                                                        expression (lambda/simplif.ml[719,27405+39]..[719,27405+53])
                                                          Pexp_tuple
                                                          [
                                                            expression (lambda/simplif.ml[719,27405+40]..[719,27405+48])
                                                              Pexp_ident "optparam" (lambda/simplif.ml[719,27405+40]..[719,27405+48])
                                                            expression (lambda/simplif.ml[719,27405+50]..[719,27405+52])
                                                              Pexp_ident "id" (lambda/simplif.ml[719,27405+50]..[719,27405+52])
                                                          ]
                                                        expression (lambda/simplif.ml[719,27405+57]..[719,27405+60])
                                                          Pexp_ident "map" (lambda/simplif.ml[719,27405+57]..[719,27405+60])
                                                      ]
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[719,27405+62]..[719,27405+66])
                                                  Pexp_ident "rest" (lambda/simplif.ml[719,27405+62]..[719,27405+66])
                                            ]
                                      ]
                                      expression (lambda/simplif.ml[720,27475+8]..[720,27475+53])
                                        Pexp_tuple
                                        [
                                          expression (lambda/simplif.ml[720,27475+8]..[720,27475+46])
                                            Pexp_construct "Llet" (lambda/simplif.ml[720,27475+8]..[720,27475+12])
                                            Some
                                              expression (lambda/simplif.ml[720,27475+12]..[720,27475+46])
                                                Pexp_tuple
                                                [
                                                  expression (lambda/simplif.ml[720,27475+13]..[720,27475+19])
                                                    Pexp_construct "Strict" (lambda/simplif.ml[720,27475+13]..[720,27475+19])
                                                    None
                                                  expression (lambda/simplif.ml[720,27475+21]..[720,27475+22])
                                                    Pexp_ident "k" (lambda/simplif.ml[720,27475+21]..[720,27475+22])
                                                  expression (lambda/simplif.ml[720,27475+24]..[720,27475+26])
                                                    Pexp_ident "id" (lambda/simplif.ml[720,27475+24]..[720,27475+26])
                                                  expression (lambda/simplif.ml[720,27475+28]..[720,27475+31])
                                                    Pexp_ident "def" (lambda/simplif.ml[720,27475+28]..[720,27475+31])
                                                  expression (lambda/simplif.ml[720,27475+33]..[720,27475+45])
                                                    Pexp_ident "wrapper_body" (lambda/simplif.ml[720,27475+33]..[720,27475+45])
                                                ]
                                          expression (lambda/simplif.ml[720,27475+48]..[720,27475+53])
                                            Pexp_ident "inner" (lambda/simplif.ml[720,27475+48]..[720,27475+53])
                                        ]
                                  <case>
                                    pattern (lambda/simplif.ml[721,27529+6]..[721,27529+7])
                                      Ppat_any
                                    <when>
                                      expression (lambda/simplif.ml[721,27529+13]..[721,27529+21])
                                        Pexp_apply
                                        expression (lambda/simplif.ml[721,27529+17]..[721,27529+18])
                                          Pexp_ident "=" (lambda/simplif.ml[721,27529+17]..[721,27529+18])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lambda/simplif.ml[721,27529+13]..[721,27529+16])
                                              Pexp_ident "map" (lambda/simplif.ml[721,27529+13]..[721,27529+16])
                                          <arg>
                                          Nolabel
                                            expression (lambda/simplif.ml[721,27529+19]..[721,27529+21])
                                              Pexp_construct "[]" (lambda/simplif.ml[721,27529+19]..[721,27529+21])
                                              None
                                        ]
                                    expression (lambda/simplif.ml[721,27529+25]..[721,27529+35])
                                      Pexp_apply
                                      expression (lambda/simplif.ml[721,27529+25]..[721,27529+30])
                                        Pexp_ident "raise" (lambda/simplif.ml[721,27529+25]..[721,27529+30])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lambda/simplif.ml[721,27529+31]..[721,27529+35])
                                            Pexp_construct "Exit" (lambda/simplif.ml[721,27529+31]..[721,27529+35])
                                            None
                                      ]
                                  <case>
                                    pattern (lambda/simplif.ml[722,27565+6]..[722,27565+10])
                                      Ppat_var "body" (lambda/simplif.ml[722,27565+6]..[722,27565+10])
                                    expression (lambda/simplif.ml[725,27730+8]..[754,28895+45])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (lambda/simplif.ml[725,27730+12]..[725,27730+14])
                                            Ppat_var "fv" (lambda/simplif.ml[725,27730+12]..[725,27730+14])
                                          expression (lambda/simplif.ml[725,27730+17]..[725,27730+43])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[725,27730+17]..[725,27730+38])
                                              Pexp_ident "Lambda.free_variables" (lambda/simplif.ml[725,27730+17]..[725,27730+38])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[725,27730+39]..[725,27730+43])
                                                  Pexp_ident "body" (lambda/simplif.ml[725,27730+39]..[725,27730+43])
                                            ]
                                      ]
                                      expression (lambda/simplif.ml[726,27777+8]..[754,28895+45])
                                        Pexp_sequence
                                        expression (lambda/simplif.ml[726,27777+8]..[726,27777+77])
                                          Pexp_apply
                                          expression (lambda/simplif.ml[726,27777+8]..[726,27777+17])
                                            Pexp_ident "List.iter" (lambda/simplif.ml[726,27777+8]..[726,27777+17])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[726,27777+18]..[726,27777+73])
                                                Pexp_fun
                                                Nolabel
                                                None
                                                pattern (lambda/simplif.ml[726,27777+23]..[726,27777+30])
                                                  Ppat_tuple
                                                  [
                                                    pattern (lambda/simplif.ml[726,27777+24]..[726,27777+26])
                                                      Ppat_var "id" (lambda/simplif.ml[726,27777+24]..[726,27777+26])
                                                    pattern (lambda/simplif.ml[726,27777+28]..[726,27777+29])
                                                      Ppat_any
                                                  ]
                                                expression (lambda/simplif.ml[726,27777+34]..[726,27777+72])
                                                  Pexp_ifthenelse
                                                  expression (lambda/simplif.ml[726,27777+37]..[726,27777+56])
                                                    Pexp_apply
                                                    expression (lambda/simplif.ml[726,27777+37]..[726,27777+50])
                                                      Pexp_ident "Ident.Set.mem" (lambda/simplif.ml[726,27777+37]..[726,27777+50])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (lambda/simplif.ml[726,27777+51]..[726,27777+53])
                                                          Pexp_ident "id" (lambda/simplif.ml[726,27777+51]..[726,27777+53])
                                                      <arg>
                                                      Nolabel
                                                        expression (lambda/simplif.ml[726,27777+54]..[726,27777+56])
                                                          Pexp_ident "fv" (lambda/simplif.ml[726,27777+54]..[726,27777+56])
                                                    ]
                                                  expression (lambda/simplif.ml[726,27777+62]..[726,27777+72])
                                                    Pexp_apply
                                                    expression (lambda/simplif.ml[726,27777+62]..[726,27777+67])
                                                      Pexp_ident "raise" (lambda/simplif.ml[726,27777+62]..[726,27777+67])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (lambda/simplif.ml[726,27777+68]..[726,27777+72])
                                                          Pexp_construct "Exit" (lambda/simplif.ml[726,27777+68]..[726,27777+72])
                                                          None
                                                    ]
                                                  None
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[726,27777+74]..[726,27777+77])
                                                Pexp_ident "map" (lambda/simplif.ml[726,27777+74]..[726,27777+77])
                                          ]
                                        expression (lambda/simplif.ml[728,27857+8]..[754,28895+45])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (lambda/simplif.ml[728,27857+12]..[728,27857+20])
                                                Ppat_var "inner_id" (lambda/simplif.ml[728,27857+12]..[728,27857+20])
                                              expression (lambda/simplif.ml[728,27857+23]..[728,27857+72])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[728,27857+23]..[728,27857+41])
                                                  Pexp_ident "Ident.create_local" (lambda/simplif.ml[728,27857+23]..[728,27857+41])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[728,27857+42]..[728,27857+72])
                                                      Pexp_apply
                                                      expression (lambda/simplif.ml[728,27857+61]..[728,27857+62])
                                                        Pexp_ident "^" (lambda/simplif.ml[728,27857+61]..[728,27857+62])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (lambda/simplif.ml[728,27857+43]..[728,27857+60])
                                                            Pexp_apply
                                                            expression (lambda/simplif.ml[728,27857+43]..[728,27857+53])
                                                              Pexp_ident "Ident.name" (lambda/simplif.ml[728,27857+43]..[728,27857+53])
                                                            [
                                                              <arg>
                                                              Nolabel
                                                                expression (lambda/simplif.ml[728,27857+54]..[728,27857+60])
                                                                  Pexp_ident "fun_id" (lambda/simplif.ml[728,27857+54]..[728,27857+60])
                                                            ]
                                                        <arg>
                                                        Nolabel
                                                          expression (lambda/simplif.ml[728,27857+63]..[728,27857+71])
                                                            Pexp_constant PConst_string("_inner",(lambda/simplif.ml[728,27857+64]..[728,27857+70]),None)
                                                      ]
                                                ]
                                          ]
                                          expression (lambda/simplif.ml[729,27933+8]..[754,28895+45])
                                            Pexp_let Nonrec
                                            [
                                              <def>
                                                pattern (lambda/simplif.ml[729,27933+12]..[729,27933+21])
                                                  Ppat_var "map_param" (lambda/simplif.ml[729,27933+12]..[729,27933+21])
                                                expression (lambda/simplif.ml[729,27933+22]..[729,27933+66]) ghost
                                                  Pexp_fun
                                                  Nolabel
                                                  None
                                                  pattern (lambda/simplif.ml[729,27933+22]..[729,27933+23])
                                                    Ppat_var "p" (lambda/simplif.ml[729,27933+22]..[729,27933+23])
                                                  expression (lambda/simplif.ml[729,27933+26]..[729,27933+66])
                                                    Pexp_try
                                                    expression (lambda/simplif.ml[729,27933+30]..[729,27933+46])
                                                      Pexp_apply
                                                      expression (lambda/simplif.ml[729,27933+30]..[729,27933+40])
                                                        Pexp_ident "List.assoc" (lambda/simplif.ml[729,27933+30]..[729,27933+40])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (lambda/simplif.ml[729,27933+41]..[729,27933+42])
                                                            Pexp_ident "p" (lambda/simplif.ml[729,27933+41]..[729,27933+42])
                                                        <arg>
                                                        Nolabel
                                                          expression (lambda/simplif.ml[729,27933+43]..[729,27933+46])
                                                            Pexp_ident "map" (lambda/simplif.ml[729,27933+43]..[729,27933+46])
                                                      ]
                                                    [
                                                      <case>
                                                        pattern (lambda/simplif.ml[729,27933+52]..[729,27933+61])
                                                          Ppat_construct "Not_found" (lambda/simplif.ml[729,27933+52]..[729,27933+61])
                                                          None
                                                        expression (lambda/simplif.ml[729,27933+65]..[729,27933+66])
                                                          Pexp_ident "p" (lambda/simplif.ml[729,27933+65]..[729,27933+66])
                                                    ]
                                            ]
                                            expression (lambda/simplif.ml[730,28003+8]..[754,28895+45])
                                              Pexp_let Nonrec
                                              [
                                                <def>
                                                  pattern (lambda/simplif.ml[730,28003+12]..[730,28003+16])
                                                    Ppat_var "args" (lambda/simplif.ml[730,28003+12]..[730,28003+16])
                                                  expression (lambda/simplif.ml[730,28003+19]..[730,28003+69])
                                                    Pexp_apply
                                                    expression (lambda/simplif.ml[730,28003+19]..[730,28003+27])
                                                      Pexp_ident "List.map" (lambda/simplif.ml[730,28003+19]..[730,28003+27])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (lambda/simplif.ml[730,28003+28]..[730,28003+62])
                                                          Pexp_fun
                                                          Nolabel
                                                          None
                                                          pattern (lambda/simplif.ml[730,28003+33]..[730,28003+39])
                                                            Ppat_tuple
                                                            [
                                                              pattern (lambda/simplif.ml[730,28003+34]..[730,28003+35])
                                                                Ppat_var "p" (lambda/simplif.ml[730,28003+34]..[730,28003+35])
                                                              pattern (lambda/simplif.ml[730,28003+37]..[730,28003+38])
                                                                Ppat_any
                                                            ]
                                                          expression (lambda/simplif.ml[730,28003+43]..[730,28003+61])
                                                            Pexp_construct "Lvar" (lambda/simplif.ml[730,28003+43]..[730,28003+47])
                                                            Some
                                                              expression (lambda/simplif.ml[730,28003+48]..[730,28003+61])
                                                                Pexp_apply
                                                                expression (lambda/simplif.ml[730,28003+49]..[730,28003+58])
                                                                  Pexp_ident "map_param" (lambda/simplif.ml[730,28003+49]..[730,28003+58])
                                                                [
                                                                  <arg>
                                                                  Nolabel
                                                                    expression (lambda/simplif.ml[730,28003+59]..[730,28003+60])
                                                                      Pexp_ident "p" (lambda/simplif.ml[730,28003+59]..[730,28003+60])
                                                                ]
                                                      <arg>
                                                      Nolabel
                                                        expression (lambda/simplif.ml[730,28003+63]..[730,28003+69])
                                                          Pexp_ident "params" (lambda/simplif.ml[730,28003+63]..[730,28003+69])
                                                    ]
                                              ]
                                              expression (lambda/simplif.ml[731,28076+8]..[754,28895+45])
                                                Pexp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (lambda/simplif.ml[731,28076+12]..[731,28076+24])
                                                      Ppat_var "wrapper_body" (lambda/simplif.ml[731,28076+12]..[731,28076+24])
                                                    expression (lambda/simplif.ml[732,28103+10]..[739,28355+11])
                                                      Pexp_construct "Lapply" (lambda/simplif.ml[732,28103+10]..[732,28103+16])
                                                      Some
                                                        expression (lambda/simplif.ml[732,28103+17]..[739,28355+11])
                                                          Pexp_record
                                                          [
                                                            "ap_func" (lambda/simplif.ml[733,28122+12]..[733,28122+19])
                                                              expression (lambda/simplif.ml[733,28122+22]..[733,28122+35])
                                                                Pexp_construct "Lvar" (lambda/simplif.ml[733,28122+22]..[733,28122+26])
                                                                Some
                                                                  expression (lambda/simplif.ml[733,28122+27]..[733,28122+35])
                                                                    Pexp_ident "inner_id" (lambda/simplif.ml[733,28122+27]..[733,28122+35])
                                                            "ap_args" (lambda/simplif.ml[734,28159+12]..[734,28159+19])
                                                              expression (lambda/simplif.ml[734,28159+22]..[734,28159+26])
                                                                Pexp_ident "args" (lambda/simplif.ml[734,28159+22]..[734,28159+26])
                                                            "ap_loc" (lambda/simplif.ml[735,28187+12]..[735,28187+18])
                                                              expression (lambda/simplif.ml[735,28187+21]..[735,28187+32])
                                                                Pexp_construct "Loc_unknown" (lambda/simplif.ml[735,28187+21]..[735,28187+32])
                                                                None
                                                            "ap_tailcall" (lambda/simplif.ml[736,28221+12]..[736,28221+23])
                                                              expression (lambda/simplif.ml[736,28221+26]..[736,28221+42])
                                                                Pexp_construct "Default_tailcall" (lambda/simplif.ml[736,28221+26]..[736,28221+42])
                                                                None
                                                            "ap_inlined" (lambda/simplif.ml[737,28265+12]..[737,28265+22])
                                                              expression (lambda/simplif.ml[737,28265+25]..[737,28265+39])
                                                                Pexp_construct "Default_inline" (lambda/simplif.ml[737,28265+25]..[737,28265+39])
                                                                None
                                                            "ap_specialised" (lambda/simplif.ml[738,28306+12]..[738,28306+26])
                                                              expression (lambda/simplif.ml[738,28306+29]..[738,28306+47])
                                                                Pexp_construct "Default_specialise" (lambda/simplif.ml[738,28306+29]..[738,28306+47])
                                                                None
                                                          ]
                                                          None
                                                ]
                                                expression (lambda/simplif.ml[741,28378+8]..[754,28895+45])
                                                  Pexp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (lambda/simplif.ml[741,28378+12]..[741,28378+24])
                                                        Ppat_var "inner_params" (lambda/simplif.ml[741,28378+12]..[741,28378+24])
                                                      expression (lambda/simplif.ml[741,28378+27]..[741,28378+67])
                                                        Pexp_apply
                                                        expression (lambda/simplif.ml[741,28378+27]..[741,28378+35])
                                                          Pexp_ident "List.map" (lambda/simplif.ml[741,28378+27]..[741,28378+35])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (lambda/simplif.ml[741,28378+36]..[741,28378+45])
                                                              Pexp_ident "map_param" (lambda/simplif.ml[741,28378+36]..[741,28378+45])
                                                          <arg>
                                                          Nolabel
                                                            expression (lambda/simplif.ml[741,28378+46]..[741,28378+67])
                                                              Pexp_apply
                                                              expression (lambda/simplif.ml[741,28378+47]..[741,28378+55])
                                                                Pexp_ident "List.map" (lambda/simplif.ml[741,28378+47]..[741,28378+55])
                                                              [
                                                                <arg>
                                                                Nolabel
                                                                  expression (lambda/simplif.ml[741,28378+56]..[741,28378+59])
                                                                    Pexp_ident "fst" (lambda/simplif.ml[741,28378+56]..[741,28378+59])
                                                                <arg>
                                                                Nolabel
                                                                  expression (lambda/simplif.ml[741,28378+60]..[741,28378+66])
                                                                    Pexp_ident "params" (lambda/simplif.ml[741,28378+60]..[741,28378+66])
                                                              ]
                                                        ]
                                                  ]
                                                  expression (lambda/simplif.ml[742,28449+8]..[754,28895+45])
                                                    Pexp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (lambda/simplif.ml[742,28449+12]..[742,28449+19])
                                                          Ppat_var "new_ids" (lambda/simplif.ml[742,28449+12]..[742,28449+19])
                                                        expression (lambda/simplif.ml[742,28449+22]..[742,28449+56])
                                                          Pexp_apply
                                                          expression (lambda/simplif.ml[742,28449+22]..[742,28449+30])
                                                            Pexp_ident "List.map" (lambda/simplif.ml[742,28449+22]..[742,28449+30])
                                                          [
                                                            <arg>
                                                            Nolabel
                                                              expression (lambda/simplif.ml[742,28449+31]..[742,28449+43])
                                                                Pexp_ident "Ident.rename" (lambda/simplif.ml[742,28449+31]..[742,28449+43])
                                                            <arg>
                                                            Nolabel
                                                              expression (lambda/simplif.ml[742,28449+44]..[742,28449+56])
                                                                Pexp_ident "inner_params" (lambda/simplif.ml[742,28449+44]..[742,28449+56])
                                                          ]
                                                    ]
                                                    expression (lambda/simplif.ml[743,28509+8]..[754,28895+45])
                                                      Pexp_let Nonrec
                                                      [
                                                        <def>
                                                          pattern (lambda/simplif.ml[743,28509+12]..[743,28509+17])
                                                            Ppat_var "subst" (lambda/simplif.ml[743,28509+12]..[743,28509+17])
                                                          expression (lambda/simplif.ml[744,28529+10]..[746,28613+48])
                                                            Pexp_apply
                                                            expression (lambda/simplif.ml[744,28529+10]..[744,28529+25])
                                                              Pexp_ident "List.fold_left2" (lambda/simplif.ml[744,28529+10]..[744,28529+25])
                                                            [
                                                              <arg>
                                                              Nolabel
                                                                expression (lambda/simplif.ml[744,28529+26]..[746,28613+11])
                                                                  Pexp_fun
                                                                  Nolabel
                                                                  None
                                                                  pattern (lambda/simplif.ml[744,28529+31]..[744,28529+32])
                                                                    Ppat_var "s" (lambda/simplif.ml[744,28529+31]..[744,28529+32])
                                                                  expression (lambda/simplif.ml[744,28529+33]..[745,28575+37]) ghost
                                                                    Pexp_fun
                                                                    Nolabel
                                                                    None
                                                                    pattern (lambda/simplif.ml[744,28529+33]..[744,28529+35])
                                                                      Ppat_var "id" (lambda/simplif.ml[744,28529+33]..[744,28529+35])
                                                                    expression (lambda/simplif.ml[744,28529+36]..[745,28575+37]) ghost
                                                                      Pexp_fun
                                                                      Nolabel
                                                                      None
                                                                      pattern (lambda/simplif.ml[744,28529+36]..[744,28529+42])
Ppat_var "new_id" (lambda/simplif.ml[744,28529+36]..[744,28529+42])
                                                                      expression (lambda/simplif.ml[745,28575+12]..[745,28575+37])
Pexp_apply
expression (lambda/simplif.ml[745,28575+12]..[745,28575+25])
  Pexp_ident "Ident.Map.add" (lambda/simplif.ml[745,28575+12]..[745,28575+25])
[
  <arg>
  Nolabel
    expression (lambda/simplif.ml[745,28575+26]..[745,28575+28])
      Pexp_ident "id" (lambda/simplif.ml[745,28575+26]..[745,28575+28])
  <arg>
  Nolabel
    expression (lambda/simplif.ml[745,28575+29]..[745,28575+35])
      Pexp_ident "new_id" (lambda/simplif.ml[745,28575+29]..[745,28575+35])
  <arg>
  Nolabel
    expression (lambda/simplif.ml[745,28575+36]..[745,28575+37])
      Pexp_ident "s" (lambda/simplif.ml[745,28575+36]..[745,28575+37])
]
                                                              <arg>
                                                              Nolabel
                                                                expression (lambda/simplif.ml[746,28613+12]..[746,28613+27])
                                                                  Pexp_ident "Ident.Map.empty" (lambda/simplif.ml[746,28613+12]..[746,28613+27])
                                                              <arg>
                                                              Nolabel
                                                                expression (lambda/simplif.ml[746,28613+28]..[746,28613+40])
                                                                  Pexp_ident "inner_params" (lambda/simplif.ml[746,28613+28]..[746,28613+40])
                                                              <arg>
                                                              Nolabel
                                                                expression (lambda/simplif.ml[746,28613+41]..[746,28613+48])
                                                                  Pexp_ident "new_ids" (lambda/simplif.ml[746,28613+41]..[746,28613+48])
                                                            ]
                                                      ]
                                                      expression (lambda/simplif.ml[748,28673+8]..[754,28895+45])
                                                        Pexp_let Nonrec
                                                        [
                                                          <def>
                                                            pattern (lambda/simplif.ml[748,28673+12]..[748,28673+16])
                                                              Ppat_var "body" (lambda/simplif.ml[748,28673+12]..[748,28673+16])
                                                            expression (lambda/simplif.ml[748,28673+19]..[748,28673+43])
                                                              Pexp_apply
                                                              expression (lambda/simplif.ml[748,28673+19]..[748,28673+32])
                                                                Pexp_ident "Lambda.rename" (lambda/simplif.ml[748,28673+19]..[748,28673+32])
                                                              [
                                                                <arg>
                                                                Nolabel
                                                                  expression (lambda/simplif.ml[748,28673+33]..[748,28673+38])
                                                                    Pexp_ident "subst" (lambda/simplif.ml[748,28673+33]..[748,28673+38])
                                                                <arg>
                                                                Nolabel
                                                                  expression (lambda/simplif.ml[748,28673+39]..[748,28673+43])
                                                                    Pexp_ident "body" (lambda/simplif.ml[748,28673+39]..[748,28673+43])
                                                              ]
                                                        ]
                                                        expression (lambda/simplif.ml[749,28720+8]..[754,28895+45])
                                                          Pexp_let Nonrec
                                                          [
                                                            <def>
                                                              pattern (lambda/simplif.ml[749,28720+12]..[749,28720+21])
                                                                Ppat_var "inner_fun" (lambda/simplif.ml[749,28720+12]..[749,28720+21])
                                                              expression (lambda/simplif.ml[750,28744+10]..[752,28845+38])
                                                                Pexp_construct "Lfunction" (lambda/simplif.ml[750,28744+10]..[750,28744+19])
                                                                Some
                                                                  expression (lambda/simplif.ml[750,28744+20]..[752,28845+38])
                                                                    Pexp_record
                                                                    [
                                                                      "kind" (lambda/simplif.ml[750,28744+22]..[750,28744+26])
expression (lambda/simplif.ml[750,28744+29]..[750,28744+36])
  Pexp_construct "Curried" (lambda/simplif.ml[750,28744+29]..[750,28744+36])
  None
                                                                      "params" (lambda/simplif.ml[751,28782+12]..[751,28782+18])
expression (lambda/simplif.ml[751,28782+21]..[751,28782+61])
  Pexp_apply
  expression (lambda/simplif.ml[751,28782+21]..[751,28782+29])
    Pexp_ident "List.map" (lambda/simplif.ml[751,28782+21]..[751,28782+29])
  [
    <arg>
    Nolabel
      expression (lambda/simplif.ml[751,28782+30]..[751,28782+53])
        Pexp_fun
        Nolabel
        None
        pattern (lambda/simplif.ml[751,28782+35]..[751,28782+37])
          Ppat_var "id" (lambda/simplif.ml[751,28782+35]..[751,28782+37])
        expression (lambda/simplif.ml[751,28782+41]..[751,28782+52])
          Pexp_tuple
          [
            expression (lambda/simplif.ml[751,28782+41]..[751,28782+43])
              Pexp_ident "id" (lambda/simplif.ml[751,28782+41]..[751,28782+43])
            expression (lambda/simplif.ml[751,28782+45]..[751,28782+52])
              Pexp_construct "Pgenval" (lambda/simplif.ml[751,28782+45]..[751,28782+52])
              None
          ]
    <arg>
    Nolabel
      expression (lambda/simplif.ml[751,28782+54]..[751,28782+61])
        Pexp_ident "new_ids" (lambda/simplif.ml[751,28782+54]..[751,28782+61])
  ]
                                                                      "return" (lambda/simplif.ml[752,28845+12]..[752,28845+18]) ghost
expression (lambda/simplif.ml[752,28845+12]..[752,28845+18])
  Pexp_ident "return" (lambda/simplif.ml[752,28845+12]..[752,28845+18])
                                                                      "body" (lambda/simplif.ml[752,28845+20]..[752,28845+24]) ghost
expression (lambda/simplif.ml[752,28845+20]..[752,28845+24])
  Pexp_ident "body" (lambda/simplif.ml[752,28845+20]..[752,28845+24])
                                                                      "attr" (lambda/simplif.ml[752,28845+26]..[752,28845+30]) ghost
expression (lambda/simplif.ml[752,28845+26]..[752,28845+30])
  Pexp_ident "attr" (lambda/simplif.ml[752,28845+26]..[752,28845+30])
                                                                      "loc" (lambda/simplif.ml[752,28845+32]..[752,28845+35]) ghost
expression (lambda/simplif.ml[752,28845+32]..[752,28845+35])
  Pexp_ident "loc" (lambda/simplif.ml[752,28845+32]..[752,28845+35])
                                                                    ]
                                                                    None
                                                          ]
                                                          expression (lambda/simplif.ml[754,28895+8]..[754,28895+45])
                                                            Pexp_tuple
                                                            [
                                                              expression (lambda/simplif.ml[754,28895+9]..[754,28895+21])
                                                                Pexp_ident "wrapper_body" (lambda/simplif.ml[754,28895+9]..[754,28895+21])
                                                              expression (lambda/simplif.ml[754,28895+23]..[754,28895+44])
                                                                Pexp_tuple
                                                                [
                                                                  expression (lambda/simplif.ml[754,28895+24]..[754,28895+32])
                                                                    Pexp_ident "inner_id" (lambda/simplif.ml[754,28895+24]..[754,28895+32])
                                                                  expression (lambda/simplif.ml[754,28895+34]..[754,28895+43])
                                                                    Pexp_ident "inner_fun" (lambda/simplif.ml[754,28895+34]..[754,28895+43])
                                                                ]
                                                            ]
                                ]
                        ]
                        expression (lambda/simplif.ml[756,28946+2]..[761,29117+64])
                          Pexp_try
                          expression (lambda/simplif.ml[757,28952+4]..[759,29030+71])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lambda/simplif.ml[757,28952+8]..[757,28952+19])
                                  Ppat_tuple
                                  [
                                    pattern (lambda/simplif.ml[757,28952+8]..[757,28952+12])
                                      Ppat_var "body" (lambda/simplif.ml[757,28952+8]..[757,28952+12])
                                    pattern (lambda/simplif.ml[757,28952+14]..[757,28952+19])
                                      Ppat_var "inner" (lambda/simplif.ml[757,28952+14]..[757,28952+19])
                                  ]
                                expression (lambda/simplif.ml[757,28952+22]..[757,28952+33])
                                  Pexp_apply
                                  expression (lambda/simplif.ml[757,28952+22]..[757,28952+25])
                                    Pexp_ident "aux" (lambda/simplif.ml[757,28952+22]..[757,28952+25])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[757,28952+26]..[757,28952+28])
                                        Pexp_construct "[]" (lambda/simplif.ml[757,28952+26]..[757,28952+28])
                                        None
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[757,28952+29]..[757,28952+33])
                                        Pexp_ident "body" (lambda/simplif.ml[757,28952+29]..[757,28952+33])
                                  ]
                            ]
                            expression (lambda/simplif.ml[758,28989+4]..[759,29030+71])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lambda/simplif.ml[758,28989+8]..[758,28989+12])
                                    Ppat_var "attr" (lambda/simplif.ml[758,28989+8]..[758,28989+12])
                                  expression (lambda/simplif.ml[758,28989+15]..[758,28989+37])
                                    Pexp_ident "default_stub_attribute" (lambda/simplif.ml[758,28989+15]..[758,28989+37])
                              ]
                              expression (lambda/simplif.ml[759,29030+4]..[759,29030+71])
                                Pexp_construct "::" (lambda/simplif.ml[759,29030+5]..[759,29030+71]) ghost
                                Some
                                  expression (lambda/simplif.ml[759,29030+5]..[759,29030+71]) ghost
                                    Pexp_tuple
                                    [
                                      expression (lambda/simplif.ml[759,29030+5]..[759,29030+63])
                                        Pexp_tuple
                                        [
                                          expression (lambda/simplif.ml[759,29030+6]..[759,29030+12])
                                            Pexp_ident "fun_id" (lambda/simplif.ml[759,29030+6]..[759,29030+12])
                                          expression (lambda/simplif.ml[759,29030+14]..[759,29030+62])
                                            Pexp_construct "Lfunction" (lambda/simplif.ml[759,29030+14]..[759,29030+23])
                                            Some
                                              expression (lambda/simplif.ml[759,29030+23]..[759,29030+62])
                                                Pexp_record
                                                [
                                                  "kind" (lambda/simplif.ml[759,29030+24]..[759,29030+28]) ghost
                                                    expression (lambda/simplif.ml[759,29030+24]..[759,29030+28])
                                                      Pexp_ident "kind" (lambda/simplif.ml[759,29030+24]..[759,29030+28])
                                                  "params" (lambda/simplif.ml[759,29030+30]..[759,29030+36]) ghost
                                                    expression (lambda/simplif.ml[759,29030+30]..[759,29030+36])
                                                      Pexp_ident "params" (lambda/simplif.ml[759,29030+30]..[759,29030+36])
                                                  "return" (lambda/simplif.ml[759,29030+38]..[759,29030+44]) ghost
                                                    expression (lambda/simplif.ml[759,29030+38]..[759,29030+44])
                                                      Pexp_ident "return" (lambda/simplif.ml[759,29030+38]..[759,29030+44])
                                                  "body" (lambda/simplif.ml[759,29030+46]..[759,29030+50]) ghost
                                                    expression (lambda/simplif.ml[759,29030+46]..[759,29030+50])
                                                      Pexp_ident "body" (lambda/simplif.ml[759,29030+46]..[759,29030+50])
                                                  "attr" (lambda/simplif.ml[759,29030+52]..[759,29030+56]) ghost
                                                    expression (lambda/simplif.ml[759,29030+52]..[759,29030+56])
                                                      Pexp_ident "attr" (lambda/simplif.ml[759,29030+52]..[759,29030+56])
                                                  "loc" (lambda/simplif.ml[759,29030+58]..[759,29030+61]) ghost
                                                    expression (lambda/simplif.ml[759,29030+58]..[759,29030+61])
                                                      Pexp_ident "loc" (lambda/simplif.ml[759,29030+58]..[759,29030+61])
                                                ]
                                                None
                                        ]
                                      expression (lambda/simplif.ml[759,29030+65]..[759,29030+71]) ghost
                                        Pexp_construct "::" (lambda/simplif.ml[759,29030+65]..[759,29030+71]) ghost
                                        Some
                                          expression (lambda/simplif.ml[759,29030+65]..[759,29030+71]) ghost
                                            Pexp_tuple
                                            [
                                              expression (lambda/simplif.ml[759,29030+65]..[759,29030+70])
                                                Pexp_ident "inner" (lambda/simplif.ml[759,29030+65]..[759,29030+70])
                                              expression (lambda/simplif.ml[759,29030+70]..[759,29030+71]) ghost
                                                Pexp_construct "[]" (lambda/simplif.ml[759,29030+70]..[759,29030+71]) ghost
                                                None
                                            ]
                                    ]
                          [
                            <case>
                              pattern (lambda/simplif.ml[760,29102+7]..[760,29102+11])
                                Ppat_construct "Exit" (lambda/simplif.ml[760,29102+7]..[760,29102+11])
                                None
                              expression (lambda/simplif.ml[761,29117+4]..[761,29117+64])
                                Pexp_construct "::" (lambda/simplif.ml[761,29117+5]..[761,29117+64]) ghost
                                Some
                                  expression (lambda/simplif.ml[761,29117+5]..[761,29117+64]) ghost
                                    Pexp_tuple
                                    [
                                      expression (lambda/simplif.ml[761,29117+5]..[761,29117+63])
                                        Pexp_tuple
                                        [
                                          expression (lambda/simplif.ml[761,29117+6]..[761,29117+12])
                                            Pexp_ident "fun_id" (lambda/simplif.ml[761,29117+6]..[761,29117+12])
                                          expression (lambda/simplif.ml[761,29117+14]..[761,29117+62])
                                            Pexp_construct "Lfunction" (lambda/simplif.ml[761,29117+14]..[761,29117+23])
                                            Some
                                              expression (lambda/simplif.ml[761,29117+23]..[761,29117+62])
                                                Pexp_record
                                                [
                                                  "kind" (lambda/simplif.ml[761,29117+24]..[761,29117+28]) ghost
                                                    expression (lambda/simplif.ml[761,29117+24]..[761,29117+28])
                                                      Pexp_ident "kind" (lambda/simplif.ml[761,29117+24]..[761,29117+28])
                                                  "params" (lambda/simplif.ml[761,29117+30]..[761,29117+36]) ghost
                                                    expression (lambda/simplif.ml[761,29117+30]..[761,29117+36])
                                                      Pexp_ident "params" (lambda/simplif.ml[761,29117+30]..[761,29117+36])
                                                  "return" (lambda/simplif.ml[761,29117+38]..[761,29117+44]) ghost
                                                    expression (lambda/simplif.ml[761,29117+38]..[761,29117+44])
                                                      Pexp_ident "return" (lambda/simplif.ml[761,29117+38]..[761,29117+44])
                                                  "body" (lambda/simplif.ml[761,29117+46]..[761,29117+50]) ghost
                                                    expression (lambda/simplif.ml[761,29117+46]..[761,29117+50])
                                                      Pexp_ident "body" (lambda/simplif.ml[761,29117+46]..[761,29117+50])
                                                  "attr" (lambda/simplif.ml[761,29117+52]..[761,29117+56]) ghost
                                                    expression (lambda/simplif.ml[761,29117+52]..[761,29117+56])
                                                      Pexp_ident "attr" (lambda/simplif.ml[761,29117+52]..[761,29117+56])
                                                  "loc" (lambda/simplif.ml[761,29117+58]..[761,29117+61]) ghost
                                                    expression (lambda/simplif.ml[761,29117+58]..[761,29117+61])
                                                      Pexp_ident "loc" (lambda/simplif.ml[761,29117+58]..[761,29117+61])
                                                ]
                                                None
                                        ]
                                      expression (lambda/simplif.ml[761,29117+63]..[761,29117+64]) ghost
                                        Pexp_construct "[]" (lambda/simplif.ml[761,29117+63]..[761,29117+64]) ghost
                                        None
                                    ]
                          ]
    ]
  structure_item (lambda/simplif.ml[771,29478+0]..[775,29549+3])
    Pstr_type Rec
    [
      type_declaration "slot" (lambda/simplif.ml[771,29478+5]..[771,29478+9]) (lambda/simplif.ml[771,29478+0]..[775,29549+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (lambda/simplif.ml[773,29494+4]..[773,29494+20])
                Immutable
                "func" (lambda/simplif.ml[773,29494+4]..[773,29494+8])                core_type (lambda/simplif.ml[773,29494+10]..[773,29494+19])
                  Ptyp_constr "lfunction" (lambda/simplif.ml[773,29494+10]..[773,29494+19])
                  []
              (lambda/simplif.ml[774,29515+4]..[774,29515+33])
                Mutable
                "scope" (lambda/simplif.ml[774,29515+12]..[774,29515+17])                core_type (lambda/simplif.ml[774,29515+19]..[774,29515+32])
                  Ptyp_constr "option" (lambda/simplif.ml[774,29515+26]..[774,29515+32])
                  [
                    core_type (lambda/simplif.ml[774,29515+19]..[774,29515+25])
                      Ptyp_constr "lambda" (lambda/simplif.ml[774,29515+19]..[774,29515+25])
                      []
                  ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (lambda/simplif.ml[777,29554+0]..[781,29659+6])
    Pstr_module
    "LamTbl" (lambda/simplif.ml[777,29554+7]..[777,29554+13])
      module_expr (lambda/simplif.ml[777,29554+16]..[781,29659+6])
        Pmod_apply
        module_expr (lambda/simplif.ml[777,29554+16]..[777,29554+28])
          Pmod_ident "Hashtbl.Make" (lambda/simplif.ml[777,29554+16]..[777,29554+28])
        module_expr (lambda/simplif.ml[777,29554+29]..[781,29659+5])
          Pmod_structure
          [
            structure_item (lambda/simplif.ml[778,29590+4]..[778,29590+19])
              Pstr_type Rec
              [
                type_declaration "t" (lambda/simplif.ml[778,29590+9]..[778,29590+10]) (lambda/simplif.ml[778,29590+4]..[778,29590+19])
                  ptype_params =
                    []
                  ptype_cstrs =
                    []
                  ptype_kind =
                    Ptype_abstract
                  ptype_private = Public
                  ptype_manifest =
                    Some
                      core_type (lambda/simplif.ml[778,29590+13]..[778,29590+19])
                        Ptyp_constr "lambda" (lambda/simplif.ml[778,29590+13]..[778,29590+19])
                        []
              ]
            structure_item (lambda/simplif.ml[779,29610+4]..[779,29610+20])
              Pstr_value Nonrec
              [
                <def>
                  pattern (lambda/simplif.ml[779,29610+8]..[779,29610+13])
                    Ppat_var "equal" (lambda/simplif.ml[779,29610+8]..[779,29610+13])
                  expression (lambda/simplif.ml[779,29610+16]..[779,29610+20])
                    Pexp_ident "==" (lambda/simplif.ml[779,29610+16]..[779,29610+20])
              ]
            structure_item (lambda/simplif.ml[780,29631+4]..[780,29631+27])
              Pstr_value Nonrec
              [
                <def>
                  pattern (lambda/simplif.ml[780,29631+8]..[780,29631+12])
                    Ppat_var "hash" (lambda/simplif.ml[780,29631+8]..[780,29631+12])
                  expression (lambda/simplif.ml[780,29631+15]..[780,29631+27])
                    Pexp_ident "Hashtbl.hash" (lambda/simplif.ml[780,29631+15]..[780,29631+27])
              ]
          ]
  structure_item (lambda/simplif.ml[783,29667+0]..[887,33329+15])
    Pstr_value Nonrec
    [
      <def>
        pattern (lambda/simplif.ml[783,29667+4]..[783,29667+28])
          Ppat_var "simplify_local_functions" (lambda/simplif.ml[783,29667+4]..[783,29667+28])
        expression (lambda/simplif.ml[783,29667+29]..[887,33329+15]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lambda/simplif.ml[783,29667+29]..[783,29667+32])
            Ppat_var "lam" (lambda/simplif.ml[783,29667+29]..[783,29667+32])
          expression (lambda/simplif.ml[784,29702+2]..[887,33329+15])
            Pexp_let Nonrec
            [
              <def>
                pattern (lambda/simplif.ml[784,29702+6]..[784,29702+11])
                  Ppat_var "slots" (lambda/simplif.ml[784,29702+6]..[784,29702+11])
                expression (lambda/simplif.ml[784,29702+14]..[784,29702+31])
                  Pexp_apply
                  expression (lambda/simplif.ml[784,29702+14]..[784,29702+28])
                    Pexp_ident "Hashtbl.create" (lambda/simplif.ml[784,29702+14]..[784,29702+28])
                  [
                    <arg>
                    Nolabel
                      expression (lambda/simplif.ml[784,29702+29]..[784,29702+31])
                        Pexp_constant PConst_int (16,None)
                  ]
            ]
            expression (lambda/simplif.ml[785,29737+2]..[887,33329+15])
              Pexp_let Nonrec
              [
                <def>
                  pattern (lambda/simplif.ml[785,29737+6]..[785,29737+15])
                    Ppat_var "static_id" (lambda/simplif.ml[785,29737+6]..[785,29737+15])
                  expression (lambda/simplif.ml[785,29737+18]..[785,29737+35])
                    Pexp_apply
                    expression (lambda/simplif.ml[785,29737+18]..[785,29737+32])
                      Pexp_ident "Hashtbl.create" (lambda/simplif.ml[785,29737+18]..[785,29737+32])
                    [
                      <arg>
                      Nolabel
                        expression (lambda/simplif.ml[785,29737+33]..[785,29737+35])
                          Pexp_constant PConst_int (16,None)
                    ]
              ]
              expression (lambda/simplif.ml[786,29807+2]..[887,33329+15])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (lambda/simplif.ml[786,29807+6]..[786,29807+12])
                      Ppat_var "static" (lambda/simplif.ml[786,29807+6]..[786,29807+12])
                    expression (lambda/simplif.ml[786,29807+15]..[786,29807+31])
                      Pexp_apply
                      expression (lambda/simplif.ml[786,29807+15]..[786,29807+28])
                        Pexp_ident "LamTbl.create" (lambda/simplif.ml[786,29807+15]..[786,29807+28])
                      [
                        <arg>
                        Nolabel
                          expression (lambda/simplif.ml[786,29807+29]..[786,29807+31])
                            Pexp_constant PConst_int (16,None)
                      ]
                ]
                expression (lambda/simplif.ml[790,30037+2]..[887,33329+15])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (lambda/simplif.ml[790,30037+6]..[790,30037+19])
                        Ppat_var "current_scope" (lambda/simplif.ml[790,30037+6]..[790,30037+19])
                      expression (lambda/simplif.ml[790,30037+22]..[790,30037+29])
                        Pexp_apply
                        expression (lambda/simplif.ml[790,30037+22]..[790,30037+25])
                          Pexp_ident "ref" (lambda/simplif.ml[790,30037+22]..[790,30037+25])
                        [
                          <arg>
                          Nolabel
                            expression (lambda/simplif.ml[790,30037+26]..[790,30037+29])
                              Pexp_ident "lam" (lambda/simplif.ml[790,30037+26]..[790,30037+29])
                        ]
                  ]
                  expression (lambda/simplif.ml[791,30070+2]..[887,33329+15])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (lambda/simplif.ml[791,30070+6]..[791,30070+18])
                          Ppat_var "check_static" (lambda/simplif.ml[791,30070+6]..[791,30070+18])
                        expression (lambda/simplif.ml[791,30070+19]..[795,30223+73]) ghost
                          Pexp_fun
                          Nolabel
                          None
                          pattern (lambda/simplif.ml[791,30070+19]..[791,30070+21])
                            Ppat_var "lf" (lambda/simplif.ml[791,30070+19]..[791,30070+21])
                          expression (lambda/simplif.ml[792,30094+4]..[795,30223+73])
                            Pexp_ifthenelse
                            expression (lambda/simplif.ml[792,30094+7]..[792,30094+35])
                              Pexp_apply
                              expression (lambda/simplif.ml[792,30094+21]..[792,30094+22])
                                Pexp_ident "=" (lambda/simplif.ml[792,30094+21]..[792,30094+22])
                              [
                                <arg>
                                Nolabel
                                  expression (lambda/simplif.ml[792,30094+7]..[792,30094+20])
                                    Pexp_field
                                    expression (lambda/simplif.ml[792,30094+7]..[792,30094+14])
                                      Pexp_field
                                      expression (lambda/simplif.ml[792,30094+7]..[792,30094+9])
                                        Pexp_ident "lf" (lambda/simplif.ml[792,30094+7]..[792,30094+9])
                                      "attr" (lambda/simplif.ml[792,30094+10]..[792,30094+14])
                                    "local" (lambda/simplif.ml[792,30094+15]..[792,30094+20])
                                <arg>
                                Nolabel
                                  expression (lambda/simplif.ml[792,30094+23]..[792,30094+35])
                                    Pexp_construct "Always_local" (lambda/simplif.ml[792,30094+23]..[792,30094+35])
                                    None
                              ]
                            expression (lambda/simplif.ml[793,30135+6]..[795,30223+73])
                              Pexp_apply
                              expression (lambda/simplif.ml[793,30135+6]..[793,30135+28])
                                Pexp_ident "Location.prerr_warning" (lambda/simplif.ml[793,30135+6]..[793,30135+28])
                              [
                                <arg>
                                Nolabel
                                  expression (lambda/simplif.ml[793,30135+29]..[793,30135+49])
                                    Pexp_apply
                                    expression (lambda/simplif.ml[793,30135+30]..[793,30135+41])
                                      Pexp_ident "to_location" (lambda/simplif.ml[793,30135+30]..[793,30135+41])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lambda/simplif.ml[793,30135+42]..[793,30135+48])
                                          Pexp_field
                                          expression (lambda/simplif.ml[793,30135+42]..[793,30135+44])
                                            Pexp_ident "lf" (lambda/simplif.ml[793,30135+42]..[793,30135+44])
                                          "loc" (lambda/simplif.ml[793,30135+45]..[793,30135+48])
                                    ]
                                <arg>
                                Nolabel
                                  expression (lambda/simplif.ml[794,30185+8]..[795,30223+73])
                                    Pexp_construct "Warnings.Inlining_impossible" (lambda/simplif.ml[794,30185+9]..[794,30185+37])
                                    Some
                                      expression (lambda/simplif.ml[795,30223+11]..[795,30223+72])
                                        Pexp_constant PConst_string("This function cannot be compiled into a static continuation",(lambda/simplif.ml[795,30223+12]..[795,30223+71]),None)
                              ]
                            None
                    ]
                    expression (lambda/simplif.ml[797,30302+2]..[887,33329+15])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (lambda/simplif.ml[797,30302+6]..[797,30302+13])
                            Ppat_var "enabled" (lambda/simplif.ml[797,30302+6]..[797,30302+13])
                          expression (lambda/simplif.ml[797,30302+16]..[804,30570+14])
                            Pexp_function
                            [
                              <case>
                                pattern (lambda/simplif.ml[798,30327+6]..[799,30359+74])
                                  Ppat_or
                                  pattern (lambda/simplif.ml[798,30327+6]..[798,30327+31])
                                    Ppat_record Open
                                    [
                                      "local" (lambda/simplif.ml[798,30327+7]..[798,30327+12])
                                        pattern (lambda/simplif.ml[798,30327+15]..[798,30327+27])
                                          Ppat_construct "Always_local" (lambda/simplif.ml[798,30327+15]..[798,30327+27])
                                          None
                                    ]
                                  pattern (lambda/simplif.ml[799,30359+6]..[799,30359+74])
                                    Ppat_record Open
                                    [
                                      "local" (lambda/simplif.ml[799,30359+7]..[799,30359+12])
                                        pattern (lambda/simplif.ml[799,30359+15]..[799,30359+28])
                                          Ppat_construct "Default_local" (lambda/simplif.ml[799,30359+15]..[799,30359+28])
                                          None
                                      "inline" (lambda/simplif.ml[799,30359+30]..[799,30359+36])
                                        pattern (lambda/simplif.ml[799,30359+39]..[799,30359+70])
                                          Ppat_or
                                          pattern (lambda/simplif.ml[799,30359+40]..[799,30359+52])
                                            Ppat_construct "Never_inline" (lambda/simplif.ml[799,30359+40]..[799,30359+52])
                                            None
                                          pattern (lambda/simplif.ml[799,30359+55]..[799,30359+69])
                                            Ppat_construct "Default_inline" (lambda/simplif.ml[799,30359+55]..[799,30359+69])
                                            None
                                    ]
                                expression (lambda/simplif.ml[800,30434+9]..[800,30434+13])
                                  Pexp_construct "true" (lambda/simplif.ml[800,30434+9]..[800,30434+13])
                                  None
                              <case>
                                pattern (lambda/simplif.ml[801,30448+6]..[803,30539+30])
                                  Ppat_or
                                  pattern (lambda/simplif.ml[801,30448+6]..[802,30478+60])
                                    Ppat_record Open
                                    [
                                      "local" (lambda/simplif.ml[801,30448+7]..[801,30448+12])
                                        pattern (lambda/simplif.ml[801,30448+15]..[801,30448+28])
                                          Ppat_construct "Default_local" (lambda/simplif.ml[801,30448+15]..[801,30448+28])
                                          None
                                      "inline" (lambda/simplif.ml[802,30478+7]..[802,30478+13])
                                        pattern (lambda/simplif.ml[802,30478+16]..[802,30478+56])
                                          Ppat_or
                                          pattern (lambda/simplif.ml[802,30478+17]..[802,30478+41])
                                            Ppat_or
                                            pattern (lambda/simplif.ml[802,30478+17]..[802,30478+30])
                                              Ppat_construct "Always_inline" (lambda/simplif.ml[802,30478+17]..[802,30478+30])
                                              None
                                            pattern (lambda/simplif.ml[802,30478+33]..[802,30478+41])
                                              Ppat_construct "Unroll" (lambda/simplif.ml[802,30478+33]..[802,30478+39])
                                              Some
                                                []
                                                pattern (lambda/simplif.ml[802,30478+40]..[802,30478+41])
                                                  Ppat_any
                                          pattern (lambda/simplif.ml[802,30478+44]..[802,30478+55])
                                            Ppat_construct "Hint_inline" (lambda/simplif.ml[802,30478+44]..[802,30478+55])
                                            None
                                    ]
                                  pattern (lambda/simplif.ml[803,30539+6]..[803,30539+30])
                                    Ppat_record Open
                                    [
                                      "local" (lambda/simplif.ml[803,30539+7]..[803,30539+12])
                                        pattern (lambda/simplif.ml[803,30539+15]..[803,30539+26])
                                          Ppat_construct "Never_local" (lambda/simplif.ml[803,30539+15]..[803,30539+26])
                                          None
                                    ]
                                expression (lambda/simplif.ml[804,30570+9]..[804,30570+14])
                                  Pexp_construct "false" (lambda/simplif.ml[804,30570+9]..[804,30570+14])
                                  None
                            ]
                      ]
                      expression (lambda/simplif.ml[806,30590+2]..[887,33329+15])
                        Pexp_let Rec
                        [
                          <def>
                            pattern (lambda/simplif.ml[806,30590+10]..[806,30590+14])
                              Ppat_var "tail" (lambda/simplif.ml[806,30590+10]..[806,30590+14])
                            expression (lambda/simplif.ml[806,30590+17]..[851,32267+47])
                              Pexp_function
                              [
                                <case>
                                  pattern (lambda/simplif.ml[807,30616+6]..[807,30616+48])
                                    Ppat_construct "Llet" (lambda/simplif.ml[807,30616+6]..[807,30616+10])
                                    Some
                                      []
                                      pattern (lambda/simplif.ml[807,30616+11]..[807,30616+48])
                                        Ppat_tuple
                                        [
                                          pattern (lambda/simplif.ml[807,30616+12]..[807,30616+16])
                                            Ppat_var "_str" (lambda/simplif.ml[807,30616+12]..[807,30616+16])
                                          pattern (lambda/simplif.ml[807,30616+18]..[807,30616+23])
                                            Ppat_var "_kind" (lambda/simplif.ml[807,30616+18]..[807,30616+23])
                                          pattern (lambda/simplif.ml[807,30616+25]..[807,30616+27])
                                            Ppat_var "id" (lambda/simplif.ml[807,30616+25]..[807,30616+27])
                                          pattern (lambda/simplif.ml[807,30616+29]..[807,30616+41])
                                            Ppat_construct "Lfunction" (lambda/simplif.ml[807,30616+29]..[807,30616+38])
                                            Some
                                              []
                                              pattern (lambda/simplif.ml[807,30616+39]..[807,30616+41])
                                                Ppat_var "lf" (lambda/simplif.ml[807,30616+39]..[807,30616+41])
                                          pattern (lambda/simplif.ml[807,30616+43]..[807,30616+47])
                                            Ppat_var "cont" (lambda/simplif.ml[807,30616+43]..[807,30616+47])
                                        ]
                                  <when>
                                    expression (lambda/simplif.ml[807,30616+54]..[807,30616+69])
                                      Pexp_apply
                                      expression (lambda/simplif.ml[807,30616+54]..[807,30616+61])
                                        Pexp_ident "enabled" (lambda/simplif.ml[807,30616+54]..[807,30616+61])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lambda/simplif.ml[807,30616+62]..[807,30616+69])
                                            Pexp_field
                                            expression (lambda/simplif.ml[807,30616+62]..[807,30616+64])
                                              Pexp_ident "lf" (lambda/simplif.ml[807,30616+62]..[807,30616+64])
                                            "attr" (lambda/simplif.ml[807,30616+65]..[807,30616+69])
                                      ]
                                  expression (lambda/simplif.ml[808,30689+8]..[828,31450+11])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lambda/simplif.ml[808,30689+12]..[808,30689+13])
                                          Ppat_var "r" (lambda/simplif.ml[808,30689+12]..[808,30689+13])
                                        expression (lambda/simplif.ml[808,30689+16]..[808,30689+41])
                                          Pexp_record
                                          [
                                            "func" (lambda/simplif.ml[808,30689+17]..[808,30689+21])
                                              expression (lambda/simplif.ml[808,30689+24]..[808,30689+26])
                                                Pexp_ident "lf" (lambda/simplif.ml[808,30689+24]..[808,30689+26])
                                            "scope" (lambda/simplif.ml[808,30689+28]..[808,30689+33])
                                              expression (lambda/simplif.ml[808,30689+36]..[808,30689+40])
                                                Pexp_construct "None" (lambda/simplif.ml[808,30689+36]..[808,30689+40])
                                                None
                                          ]
                                          None
                                    ]
                                    expression (lambda/simplif.ml[809,30734+8]..[828,31450+11])
                                      Pexp_sequence
                                      expression (lambda/simplif.ml[809,30734+8]..[809,30734+30])
                                        Pexp_apply
                                        expression (lambda/simplif.ml[809,30734+8]..[809,30734+19])
                                          Pexp_ident "Hashtbl.add" (lambda/simplif.ml[809,30734+8]..[809,30734+19])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lambda/simplif.ml[809,30734+20]..[809,30734+25])
                                              Pexp_ident "slots" (lambda/simplif.ml[809,30734+20]..[809,30734+25])
                                          <arg>
                                          Nolabel
                                            expression (lambda/simplif.ml[809,30734+26]..[809,30734+28])
                                              Pexp_ident "id" (lambda/simplif.ml[809,30734+26]..[809,30734+28])
                                          <arg>
                                          Nolabel
                                            expression (lambda/simplif.ml[809,30734+29]..[809,30734+30])
                                              Pexp_ident "r" (lambda/simplif.ml[809,30734+29]..[809,30734+30])
                                        ]
                                      expression (lambda/simplif.ml[810,30766+8]..[828,31450+11])
                                        Pexp_sequence
                                        expression (lambda/simplif.ml[810,30766+8]..[810,30766+17])
                                          Pexp_apply
                                          expression (lambda/simplif.ml[810,30766+8]..[810,30766+12])
                                            Pexp_ident "tail" (lambda/simplif.ml[810,30766+8]..[810,30766+12])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lambda/simplif.ml[810,30766+13]..[810,30766+17])
                                                Pexp_ident "cont" (lambda/simplif.ml[810,30766+13]..[810,30766+17])
                                          ]
                                        expression (lambda/simplif.ml[811,30785+8]..[828,31450+11])
                                          Pexp_match
                                          expression (lambda/simplif.ml[811,30785+20]..[811,30785+45])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[811,30785+20]..[811,30785+36])
                                              Pexp_ident "Hashtbl.find_opt" (lambda/simplif.ml[811,30785+20]..[811,30785+36])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[811,30785+37]..[811,30785+42])
                                                  Pexp_ident "slots" (lambda/simplif.ml[811,30785+37]..[811,30785+42])
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[811,30785+43]..[811,30785+45])
                                                  Pexp_ident "id" (lambda/simplif.ml[811,30785+43]..[811,30785+45])
                                            ]
                                          [
                                            <case>
                                              pattern (lambda/simplif.ml[812,30836+10]..[812,30836+38])
                                                Ppat_construct "Some" (lambda/simplif.ml[812,30836+10]..[812,30836+14])
                                                Some
                                                  []
                                                  pattern (lambda/simplif.ml[812,30836+15]..[812,30836+38])
                                                    Ppat_record Open
                                                    [
                                                      "scope" (lambda/simplif.ml[812,30836+16]..[812,30836+21])
                                                        pattern (lambda/simplif.ml[812,30836+24]..[812,30836+34])
                                                          Ppat_construct "Some" (lambda/simplif.ml[812,30836+24]..[812,30836+28])
                                                          Some
                                                            []
                                                            pattern (lambda/simplif.ml[812,30836+29]..[812,30836+34])
                                                              Ppat_var "scope" (lambda/simplif.ml[812,30836+29]..[812,30836+34])
                                                    ]
                                              expression (lambda/simplif.ml[813,30878+12]..[823,31275+37])
                                                Pexp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (lambda/simplif.ml[813,30878+16]..[813,30878+18])
                                                      Ppat_var "st" (lambda/simplif.ml[813,30878+16]..[813,30878+18])
                                                    expression (lambda/simplif.ml[813,30878+21]..[813,30878+40])
                                                      Pexp_apply
                                                      expression (lambda/simplif.ml[813,30878+21]..[813,30878+37])
                                                        Pexp_ident "next_raise_count" (lambda/simplif.ml[813,30878+21]..[813,30878+37])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (lambda/simplif.ml[813,30878+38]..[813,30878+40])
                                                            Pexp_construct "()" (lambda/simplif.ml[813,30878+38]..[813,30878+40])
                                                            None
                                                      ]
                                                ]
                                                expression (lambda/simplif.ml[814,30922+12]..[823,31275+37])
                                                  Pexp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (lambda/simplif.ml[814,30922+16]..[814,30922+18])
                                                        Ppat_var "sc" (lambda/simplif.ml[814,30922+16]..[814,30922+18])
                                                      expression (lambda/simplif.ml[816,31002+14]..[817,31053+24])
                                                        Pexp_ifthenelse
                                                        expression (lambda/simplif.ml[816,31002+17]..[816,31002+40])
                                                          Pexp_apply
                                                          expression (lambda/simplif.ml[816,31002+23]..[816,31002+25])
                                                            Pexp_ident "==" (lambda/simplif.ml[816,31002+23]..[816,31002+25])
                                                          [
                                                            <arg>
                                                            Nolabel
                                                              expression (lambda/simplif.ml[816,31002+17]..[816,31002+22])
                                                                Pexp_ident "scope" (lambda/simplif.ml[816,31002+17]..[816,31002+22])
                                                            <arg>
                                                            Nolabel
                                                              expression (lambda/simplif.ml[816,31002+26]..[816,31002+40])
                                                                Pexp_apply
                                                                expression (lambda/simplif.ml[816,31002+26]..[816,31002+27])
                                                                  Pexp_ident "!" (lambda/simplif.ml[816,31002+26]..[816,31002+27])
                                                                [
                                                                  <arg>
                                                                  Nolabel
                                                                    expression (lambda/simplif.ml[816,31002+27]..[816,31002+40])
                                                                      Pexp_ident "current_scope" (lambda/simplif.ml[816,31002+27]..[816,31002+40])
                                                                ]
                                                          ]
                                                        expression (lambda/simplif.ml[816,31002+46]..[816,31002+50])
                                                          Pexp_ident "cont" (lambda/simplif.ml[816,31002+46]..[816,31002+50])
                                                        Some
                                                          expression (lambda/simplif.ml[817,31053+19]..[817,31053+24])
                                                            Pexp_ident "scope" (lambda/simplif.ml[817,31053+19]..[817,31053+24])
                                                  ]
                                                  expression (lambda/simplif.ml[819,31093+12]..[823,31275+37])
                                                    Pexp_sequence
                                                    expression (lambda/simplif.ml[819,31093+12]..[819,31093+39])
                                                      Pexp_apply
                                                      expression (lambda/simplif.ml[819,31093+12]..[819,31093+23])
                                                        Pexp_ident "Hashtbl.add" (lambda/simplif.ml[819,31093+12]..[819,31093+23])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (lambda/simplif.ml[819,31093+24]..[819,31093+33])
                                                            Pexp_ident "static_id" (lambda/simplif.ml[819,31093+24]..[819,31093+33])
                                                        <arg>
                                                        Nolabel
                                                          expression (lambda/simplif.ml[819,31093+34]..[819,31093+36])
                                                            Pexp_ident "id" (lambda/simplif.ml[819,31093+34]..[819,31093+36])
                                                        <arg>
                                                        Nolabel
                                                          expression (lambda/simplif.ml[819,31093+37]..[819,31093+39])
                                                            Pexp_ident "st" (lambda/simplif.ml[819,31093+37]..[819,31093+39])
                                                      ]
                                                    expression (lambda/simplif.ml[820,31134+12]..[823,31275+37])
                                                      Pexp_sequence
                                                      expression (lambda/simplif.ml[820,31134+12]..[820,31134+41])
                                                        Pexp_apply
                                                        expression (lambda/simplif.ml[820,31134+12]..[820,31134+22])
                                                          Pexp_ident "LamTbl.add" (lambda/simplif.ml[820,31134+12]..[820,31134+22])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (lambda/simplif.ml[820,31134+23]..[820,31134+29])
                                                              Pexp_ident "static" (lambda/simplif.ml[820,31134+23]..[820,31134+29])
                                                          <arg>
                                                          Nolabel
                                                            expression (lambda/simplif.ml[820,31134+30]..[820,31134+32])
                                                              Pexp_ident "sc" (lambda/simplif.ml[820,31134+30]..[820,31134+32])
                                                          <arg>
                                                          Nolabel
                                                            expression (lambda/simplif.ml[820,31134+33]..[820,31134+41])
                                                              Pexp_tuple
                                                              [
                                                                expression (lambda/simplif.ml[820,31134+34]..[820,31134+36])
                                                                  Pexp_ident "st" (lambda/simplif.ml[820,31134+34]..[820,31134+36])
                                                                expression (lambda/simplif.ml[820,31134+38]..[820,31134+40])
                                                                  Pexp_ident "lf" (lambda/simplif.ml[820,31134+38]..[820,31134+40])
                                                              ]
                                                        ]
                                                      expression (lambda/simplif.ml[823,31275+12]..[823,31275+37])
                                                        Pexp_apply
                                                        expression (lambda/simplif.ml[823,31275+12]..[823,31275+22])
                                                          Pexp_ident "with_scope" (lambda/simplif.ml[823,31275+12]..[823,31275+22])
                                                        [
                                                          <arg>
                                                          Labelled "scope"
                                                            expression (lambda/simplif.ml[823,31275+24]..[823,31275+29])
                                                              Pexp_ident "scope" (lambda/simplif.ml[823,31275+24]..[823,31275+29])
                                                          <arg>
                                                          Nolabel
                                                            expression (lambda/simplif.ml[823,31275+30]..[823,31275+37])
                                                              Pexp_field
                                                              expression (lambda/simplif.ml[823,31275+30]..[823,31275+32])
                                                                Pexp_ident "lf" (lambda/simplif.ml[823,31275+30]..[823,31275+32])
                                                              "body" (lambda/simplif.ml[823,31275+33]..[823,31275+37])
                                                        ]
                                            <case>
                                              pattern (lambda/simplif.ml[824,31313+10]..[824,31313+11])
                                                Ppat_any
                                              expression (lambda/simplif.ml[825,31328+12]..[827,31421+28])
                                                Pexp_sequence
                                                expression (lambda/simplif.ml[825,31328+12]..[825,31328+27])
                                                  Pexp_apply
                                                  expression (lambda/simplif.ml[825,31328+12]..[825,31328+24])
                                                    Pexp_ident "check_static" (lambda/simplif.ml[825,31328+12]..[825,31328+24])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (lambda/simplif.ml[825,31328+25]..[825,31328+27])
                                                        Pexp_ident "lf" (lambda/simplif.ml[825,31328+25]..[825,31328+27])
                                                  ]
                                                expression (lambda/simplif.ml[827,31421+12]..[827,31421+28])
                                                  Pexp_apply
                                                  expression (lambda/simplif.ml[827,31421+12]..[827,31421+20])
                                                    Pexp_ident "non_tail" (lambda/simplif.ml[827,31421+12]..[827,31421+20])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (lambda/simplif.ml[827,31421+21]..[827,31421+28])
                                                        Pexp_field
                                                        expression (lambda/simplif.ml[827,31421+21]..[827,31421+23])
                                                          Pexp_ident "lf" (lambda/simplif.ml[827,31421+21]..[827,31421+23])
                                                        "body" (lambda/simplif.ml[827,31421+24]..[827,31421+28])
                                                  ]
                                          ]
                                <case>
                                  pattern (lambda/simplif.ml[829,31462+6]..[829,31462+44])
                                    Ppat_construct "Lapply" (lambda/simplif.ml[829,31462+6]..[829,31462+12])
                                    Some
                                      []
                                      pattern (lambda/simplif.ml[829,31462+13]..[829,31462+44])
                                        Ppat_record Open
                                        [
                                          "ap_func" (lambda/simplif.ml[829,31462+14]..[829,31462+21])
                                            pattern (lambda/simplif.ml[829,31462+24]..[829,31462+31])
                                              Ppat_construct "Lvar" (lambda/simplif.ml[829,31462+24]..[829,31462+28])
                                              Some
                                                []
                                                pattern (lambda/simplif.ml[829,31462+29]..[829,31462+31])
                                                  Ppat_var "id" (lambda/simplif.ml[829,31462+29]..[829,31462+31])
                                          "ap_args" (lambda/simplif.ml[829,31462+33]..[829,31462+40]) ghost
                                            pattern (lambda/simplif.ml[829,31462+33]..[829,31462+40])
                                              Ppat_var "ap_args" (lambda/simplif.ml[829,31462+33]..[829,31462+40])
                                        ]
                                  expression (lambda/simplif.ml[830,31510+8]..[844,32068+34])
                                    Pexp_sequence
                                    expression (lambda/simplif.ml[830,31510+8]..[843,32055+11])
                                      Pexp_match
                                      expression (lambda/simplif.ml[830,31510+20]..[830,31510+45])
                                        Pexp_apply
                                        expression (lambda/simplif.ml[830,31510+20]..[830,31510+36])
                                          Pexp_ident "Hashtbl.find_opt" (lambda/simplif.ml[830,31510+20]..[830,31510+36])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lambda/simplif.ml[830,31510+37]..[830,31510+42])
                                              Pexp_ident "slots" (lambda/simplif.ml[830,31510+37]..[830,31510+42])
                                          <arg>
                                          Nolabel
                                            expression (lambda/simplif.ml[830,31510+43]..[830,31510+45])
                                              Pexp_ident "id" (lambda/simplif.ml[830,31510+43]..[830,31510+45])
                                        ]
                                      [
                                        <case>
                                          pattern (lambda/simplif.ml[831,31561+10]..[831,31561+24])
                                            Ppat_construct "Some" (lambda/simplif.ml[831,31561+10]..[831,31561+14])
                                            Some
                                              []
                                              pattern (lambda/simplif.ml[831,31561+15]..[831,31561+24])
                                                Ppat_record Open
                                                [
                                                  "func" (lambda/simplif.ml[831,31561+16]..[831,31561+20]) ghost
                                                    pattern (lambda/simplif.ml[831,31561+16]..[831,31561+20])
                                                      Ppat_var "func" (lambda/simplif.ml[831,31561+16]..[831,31561+20])
                                                ]
                                          <when>
                                            expression (lambda/simplif.ml[832,31586+15]..[832,31586+52])
                                              Pexp_apply
                                              expression (lambda/simplif.ml[832,31586+46]..[832,31586+47])
                                                Pexp_ident "=" (lambda/simplif.ml[832,31586+46]..[832,31586+47])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[832,31586+15]..[832,31586+45])
                                                    Pexp_apply
                                                    expression (lambda/simplif.ml[832,31586+15]..[832,31586+32])
                                                      Pexp_ident "exact_application" (lambda/simplif.ml[832,31586+15]..[832,31586+32])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (lambda/simplif.ml[832,31586+33]..[832,31586+37])
                                                          Pexp_ident "func" (lambda/simplif.ml[832,31586+33]..[832,31586+37])
                                                      <arg>
                                                      Nolabel
                                                        expression (lambda/simplif.ml[832,31586+38]..[832,31586+45])
                                                          Pexp_ident "ap_args" (lambda/simplif.ml[832,31586+38]..[832,31586+45])
                                                    ]
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[832,31586+48]..[832,31586+52])
                                                    Pexp_construct "None" (lambda/simplif.ml[832,31586+48]..[832,31586+52])
                                                    None
                                              ]
                                          expression (lambda/simplif.ml[834,31672+12]..[834,31672+35])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[834,31672+12]..[834,31672+26])
                                              Pexp_ident "Hashtbl.remove" (lambda/simplif.ml[834,31672+12]..[834,31672+26])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[834,31672+27]..[834,31672+32])
                                                  Pexp_ident "slots" (lambda/simplif.ml[834,31672+27]..[834,31672+32])
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[834,31672+33]..[834,31672+35])
                                                  Pexp_ident "id" (lambda/simplif.ml[834,31672+33]..[834,31672+35])
                                            ]
                                        <case>
                                          pattern (lambda/simplif.ml[835,31708+10]..[835,31708+38])
                                            Ppat_construct "Some" (lambda/simplif.ml[835,31708+10]..[835,31708+14])
                                            Some
                                              []
                                              pattern (lambda/simplif.ml[835,31708+15]..[835,31708+38])
                                                Ppat_record Open
                                                [
                                                  "scope" (lambda/simplif.ml[835,31708+16]..[835,31708+21])
                                                    pattern (lambda/simplif.ml[835,31708+24]..[835,31708+34])
                                                      Ppat_construct "Some" (lambda/simplif.ml[835,31708+24]..[835,31708+28])
                                                      Some
                                                        []
                                                        pattern (lambda/simplif.ml[835,31708+29]..[835,31708+34])
                                                          Ppat_var "scope" (lambda/simplif.ml[835,31708+29]..[835,31708+34])
                                                ]
                                          <when>
                                            expression (lambda/simplif.ml[835,31708+44]..[835,31708+67])
                                              Pexp_apply
                                              expression (lambda/simplif.ml[835,31708+50]..[835,31708+52])
                                                Pexp_ident "!=" (lambda/simplif.ml[835,31708+50]..[835,31708+52])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[835,31708+44]..[835,31708+49])
                                                    Pexp_ident "scope" (lambda/simplif.ml[835,31708+44]..[835,31708+49])
                                                <arg>
                                                Nolabel
                                                  expression (lambda/simplif.ml[835,31708+53]..[835,31708+67])
                                                    Pexp_apply
                                                    expression (lambda/simplif.ml[835,31708+53]..[835,31708+54])
                                                      Pexp_ident "!" (lambda/simplif.ml[835,31708+53]..[835,31708+54])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (lambda/simplif.ml[835,31708+54]..[835,31708+67])
                                                          Pexp_ident "current_scope" (lambda/simplif.ml[835,31708+54]..[835,31708+67])
                                                    ]
                                              ]
                                          expression (lambda/simplif.ml[837,31820+12]..[837,31820+35])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[837,31820+12]..[837,31820+26])
                                              Pexp_ident "Hashtbl.remove" (lambda/simplif.ml[837,31820+12]..[837,31820+26])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[837,31820+27]..[837,31820+32])
                                                  Pexp_ident "slots" (lambda/simplif.ml[837,31820+27]..[837,31820+32])
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[837,31820+33]..[837,31820+35])
                                                  Pexp_ident "id" (lambda/simplif.ml[837,31820+33]..[837,31820+35])
                                            ]
                                        <case>
                                          pattern (lambda/simplif.ml[838,31856+10]..[838,31856+42])
                                            Ppat_construct "Some" (lambda/simplif.ml[838,31856+10]..[838,31856+14])
                                            Some
                                              []
                                              pattern (lambda/simplif.ml[838,31856+15]..[838,31856+42])
                                                Ppat_alias "slot" (lambda/simplif.ml[838,31856+37]..[838,31856+41])
                                                pattern (lambda/simplif.ml[838,31856+16]..[838,31856+33])
                                                  Ppat_record Open
                                                  [
                                                    "scope" (lambda/simplif.ml[838,31856+17]..[838,31856+22])
                                                      pattern (lambda/simplif.ml[838,31856+25]..[838,31856+29])
                                                        Ppat_construct "None" (lambda/simplif.ml[838,31856+25]..[838,31856+29])
                                                        None
                                                  ]
                                          expression (lambda/simplif.ml[840,31979+12]..[840,31979+45])
                                            Pexp_setfield
                                            expression (lambda/simplif.ml[840,31979+12]..[840,31979+16])
                                              Pexp_ident "slot" (lambda/simplif.ml[840,31979+12]..[840,31979+16])
                                            "scope" (lambda/simplif.ml[840,31979+17]..[840,31979+22])
                                            expression (lambda/simplif.ml[840,31979+26]..[840,31979+45])
                                              Pexp_construct "Some" (lambda/simplif.ml[840,31979+26]..[840,31979+30])
                                              Some
                                                expression (lambda/simplif.ml[840,31979+31]..[840,31979+45])
                                                  Pexp_apply
                                                  expression (lambda/simplif.ml[840,31979+31]..[840,31979+32])
                                                    Pexp_ident "!" (lambda/simplif.ml[840,31979+31]..[840,31979+32])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (lambda/simplif.ml[840,31979+32]..[840,31979+45])
                                                        Pexp_ident "current_scope" (lambda/simplif.ml[840,31979+32]..[840,31979+45])
                                                  ]
                                        <case>
                                          pattern (lambda/simplif.ml[841,32025+10]..[841,32025+11])
                                            Ppat_any
                                          expression (lambda/simplif.ml[842,32040+12]..[842,32040+14])
                                            Pexp_construct "()" (lambda/simplif.ml[842,32040+12]..[842,32040+14])
                                            None
                                      ]
                                    expression (lambda/simplif.ml[844,32068+8]..[844,32068+34])
                                      Pexp_apply
                                      expression (lambda/simplif.ml[844,32068+8]..[844,32068+17])
                                        Pexp_ident "List.iter" (lambda/simplif.ml[844,32068+8]..[844,32068+17])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lambda/simplif.ml[844,32068+18]..[844,32068+26])
                                            Pexp_ident "non_tail" (lambda/simplif.ml[844,32068+18]..[844,32068+26])
                                        <arg>
                                        Nolabel
                                          expression (lambda/simplif.ml[844,32068+27]..[844,32068+34])
                                            Pexp_ident "ap_args" (lambda/simplif.ml[844,32068+27]..[844,32068+34])
                                      ]
                                <case>
                                  pattern (lambda/simplif.ml[845,32103+6]..[845,32103+13])
                                    Ppat_construct "Lvar" (lambda/simplif.ml[845,32103+6]..[845,32103+10])
                                    Some
                                      []
                                      pattern (lambda/simplif.ml[845,32103+11]..[845,32103+13])
                                        Ppat_var "id" (lambda/simplif.ml[845,32103+11]..[845,32103+13])
                                  expression (lambda/simplif.ml[846,32120+8]..[846,32120+31])
                                    Pexp_apply
                                    expression (lambda/simplif.ml[846,32120+8]..[846,32120+22])
                                      Pexp_ident "Hashtbl.remove" (lambda/simplif.ml[846,32120+8]..[846,32120+22])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lambda/simplif.ml[846,32120+23]..[846,32120+28])
                                          Pexp_ident "slots" (lambda/simplif.ml[846,32120+23]..[846,32120+28])
                                      <arg>
                                      Nolabel
                                        expression (lambda/simplif.ml[846,32120+29]..[846,32120+31])
                                          Pexp_ident "id" (lambda/simplif.ml[846,32120+29]..[846,32120+31])
                                    ]
                                <case>
                                  pattern (lambda/simplif.ml[847,32152+6]..[847,32152+25])
                                    Ppat_alias "lam" (lambda/simplif.ml[847,32152+22]..[847,32152+25])
                                    pattern (lambda/simplif.ml[847,32152+6]..[847,32152+18])
                                      Ppat_construct "Lfunction" (lambda/simplif.ml[847,32152+6]..[847,32152+15])
                                      Some
                                        []
                                        pattern (lambda/simplif.ml[847,32152+16]..[847,32152+18])
                                          Ppat_var "lf" (lambda/simplif.ml[847,32152+16]..[847,32152+18])
                                  expression (lambda/simplif.ml[848,32181+8]..[849,32206+47])
                                    Pexp_sequence
                                    expression (lambda/simplif.ml[848,32181+8]..[848,32181+23])
                                      Pexp_apply
                                      expression (lambda/simplif.ml[848,32181+8]..[848,32181+20])
                                        Pexp_ident "check_static" (lambda/simplif.ml[848,32181+8]..[848,32181+20])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lambda/simplif.ml[848,32181+21]..[848,32181+23])
                                            Pexp_ident "lf" (lambda/simplif.ml[848,32181+21]..[848,32181+23])
                                      ]
                                    expression (lambda/simplif.ml[849,32206+8]..[849,32206+47])
                                      Pexp_apply
                                      expression (lambda/simplif.ml[849,32206+8]..[849,32206+27])
                                        Pexp_ident "Lambda.shallow_iter" (lambda/simplif.ml[849,32206+8]..[849,32206+27])
                                      [
                                        <arg>
                                        Labelled "tail"
                                          expression (lambda/simplif.ml[849,32206+29]..[849,32206+33])
                                            Pexp_ident "tail" (lambda/simplif.ml[849,32206+29]..[849,32206+33])
                                        <arg>
                                        Labelled "non_tail"
                                          expression (lambda/simplif.ml[849,32206+35]..[849,32206+43])
                                            Pexp_ident "non_tail" (lambda/simplif.ml[849,32206+35]..[849,32206+43])
                                        <arg>
                                        Nolabel
                                          expression (lambda/simplif.ml[849,32206+44]..[849,32206+47])
                                            Pexp_ident "lam" (lambda/simplif.ml[849,32206+44]..[849,32206+47])
                                      ]
                                <case>
                                  pattern (lambda/simplif.ml[850,32254+6]..[850,32254+9])
                                    Ppat_var "lam" (lambda/simplif.ml[850,32254+6]..[850,32254+9])
                                  expression (lambda/simplif.ml[851,32267+8]..[851,32267+47])
                                    Pexp_apply
                                    expression (lambda/simplif.ml[851,32267+8]..[851,32267+27])
                                      Pexp_ident "Lambda.shallow_iter" (lambda/simplif.ml[851,32267+8]..[851,32267+27])
                                    [
                                      <arg>
                                      Labelled "tail"
                                        expression (lambda/simplif.ml[851,32267+29]..[851,32267+33])
                                          Pexp_ident "tail" (lambda/simplif.ml[851,32267+29]..[851,32267+33])
                                      <arg>
                                      Labelled "non_tail"
                                        expression (lambda/simplif.ml[851,32267+35]..[851,32267+43])
                                          Pexp_ident "non_tail" (lambda/simplif.ml[851,32267+35]..[851,32267+43])
                                      <arg>
                                      Nolabel
                                        expression (lambda/simplif.ml[851,32267+44]..[851,32267+47])
                                          Pexp_ident "lam" (lambda/simplif.ml[851,32267+44]..[851,32267+47])
                                    ]
                              ]
                          <def>
                            pattern (lambda/simplif.ml[852,32315+6]..[852,32315+14])
                              Ppat_var "non_tail" (lambda/simplif.ml[852,32315+6]..[852,32315+14])
                            expression (lambda/simplif.ml[852,32315+15]..[853,32336+29]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (lambda/simplif.ml[852,32315+15]..[852,32315+18])
                                Ppat_var "lam" (lambda/simplif.ml[852,32315+15]..[852,32315+18])
                              expression (lambda/simplif.ml[853,32336+4]..[853,32336+29])
                                Pexp_apply
                                expression (lambda/simplif.ml[853,32336+4]..[853,32336+14])
                                  Pexp_ident "with_scope" (lambda/simplif.ml[853,32336+4]..[853,32336+14])
                                [
                                  <arg>
                                  Labelled "scope"
                                    expression (lambda/simplif.ml[853,32336+22]..[853,32336+25])
                                      Pexp_ident "lam" (lambda/simplif.ml[853,32336+22]..[853,32336+25])
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[853,32336+26]..[853,32336+29])
                                      Pexp_ident "lam" (lambda/simplif.ml[853,32336+26]..[853,32336+29])
                                ]
                          <def>
                            pattern (lambda/simplif.ml[854,32366+6]..[854,32366+16])
                              Ppat_var "with_scope" (lambda/simplif.ml[854,32366+6]..[854,32366+16])
                            expression (lambda/simplif.ml[854,32366+17]..[858,32476+30]) ghost
                              Pexp_fun
                              Labelled "scope"
                              None
                              pattern (lambda/simplif.ml[854,32366+18]..[854,32366+23])
                                Ppat_var "scope" (lambda/simplif.ml[854,32366+18]..[854,32366+23])
                              expression (lambda/simplif.ml[854,32366+24]..[858,32476+30]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (lambda/simplif.ml[854,32366+24]..[854,32366+27])
                                  Ppat_var "lam" (lambda/simplif.ml[854,32366+24]..[854,32366+27])
                                expression (lambda/simplif.ml[855,32396+4]..[858,32476+30])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lambda/simplif.ml[855,32396+8]..[855,32396+17])
                                        Ppat_var "old_scope" (lambda/simplif.ml[855,32396+8]..[855,32396+17])
                                      expression (lambda/simplif.ml[855,32396+20]..[855,32396+34])
                                        Pexp_apply
                                        expression (lambda/simplif.ml[855,32396+20]..[855,32396+21])
                                          Pexp_ident "!" (lambda/simplif.ml[855,32396+20]..[855,32396+21])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lambda/simplif.ml[855,32396+21]..[855,32396+34])
                                              Pexp_ident "current_scope" (lambda/simplif.ml[855,32396+21]..[855,32396+34])
                                        ]
                                  ]
                                  expression (lambda/simplif.ml[856,32434+4]..[858,32476+30])
                                    Pexp_sequence
                                    expression (lambda/simplif.ml[856,32434+4]..[856,32434+26])
                                      Pexp_apply
                                      expression (lambda/simplif.ml[856,32434+18]..[856,32434+20])
                                        Pexp_ident ":=" (lambda/simplif.ml[856,32434+18]..[856,32434+20])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lambda/simplif.ml[856,32434+4]..[856,32434+17])
                                            Pexp_ident "current_scope" (lambda/simplif.ml[856,32434+4]..[856,32434+17])
                                        <arg>
                                        Nolabel
                                          expression (lambda/simplif.ml[856,32434+21]..[856,32434+26])
                                            Pexp_ident "scope" (lambda/simplif.ml[856,32434+21]..[856,32434+26])
                                      ]
                                    expression (lambda/simplif.ml[857,32462+4]..[858,32476+30])
                                      Pexp_sequence
                                      expression (lambda/simplif.ml[857,32462+4]..[857,32462+12])
                                        Pexp_apply
                                        expression (lambda/simplif.ml[857,32462+4]..[857,32462+8])
                                          Pexp_ident "tail" (lambda/simplif.ml[857,32462+4]..[857,32462+8])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lambda/simplif.ml[857,32462+9]..[857,32462+12])
                                              Pexp_ident "lam" (lambda/simplif.ml[857,32462+9]..[857,32462+12])
                                        ]
                                      expression (lambda/simplif.ml[858,32476+4]..[858,32476+30])
                                        Pexp_apply
                                        expression (lambda/simplif.ml[858,32476+18]..[858,32476+20])
                                          Pexp_ident ":=" (lambda/simplif.ml[858,32476+18]..[858,32476+20])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lambda/simplif.ml[858,32476+4]..[858,32476+17])
                                              Pexp_ident "current_scope" (lambda/simplif.ml[858,32476+4]..[858,32476+17])
                                          <arg>
                                          Nolabel
                                            expression (lambda/simplif.ml[858,32476+21]..[858,32476+30])
                                              Pexp_ident "old_scope" (lambda/simplif.ml[858,32476+21]..[858,32476+30])
                                        ]
                        ]
                        expression (lambda/simplif.ml[860,32512+2]..[887,33329+15])
                          Pexp_sequence
                          expression (lambda/simplif.ml[860,32512+2]..[860,32512+10])
                            Pexp_apply
                            expression (lambda/simplif.ml[860,32512+2]..[860,32512+6])
                              Pexp_ident "tail" (lambda/simplif.ml[860,32512+2]..[860,32512+6])
                            [
                              <arg>
                              Nolabel
                                expression (lambda/simplif.ml[860,32512+7]..[860,32512+10])
                                  Pexp_ident "lam" (lambda/simplif.ml[860,32512+7]..[860,32512+10])
                            ]
                          expression (lambda/simplif.ml[861,32524+2]..[887,33329+15])
                            Pexp_let Rec
                            [
                              <def>
                                pattern (lambda/simplif.ml[861,32524+10]..[861,32524+17])
                                  Ppat_var "rewrite" (lambda/simplif.ml[861,32524+10]..[861,32524+17])
                                expression (lambda/simplif.ml[861,32524+18]..[882,33264+9]) ghost
                                  Pexp_fun
                                  Nolabel
                                  None
                                  pattern (lambda/simplif.ml[861,32524+18]..[861,32524+22])
                                    Ppat_var "lam0" (lambda/simplif.ml[861,32524+18]..[861,32524+22])
                                  expression (lambda/simplif.ml[862,32549+4]..[882,33264+9])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lambda/simplif.ml[862,32549+8]..[862,32549+11])
                                          Ppat_var "lam" (lambda/simplif.ml[862,32549+8]..[862,32549+11])
                                        expression (lambda/simplif.ml[863,32563+6]..[875,33063+40])
                                          Pexp_match
                                          expression (lambda/simplif.ml[863,32563+12]..[863,32563+16])
                                            Pexp_ident "lam0" (lambda/simplif.ml[863,32563+12]..[863,32563+16])
                                          [
                                            <case>
                                              pattern (lambda/simplif.ml[864,32585+8]..[864,32585+32])
                                                Ppat_construct "Llet" (lambda/simplif.ml[864,32585+8]..[864,32585+12])
                                                Some
                                                  []
                                                  pattern (lambda/simplif.ml[864,32585+13]..[864,32585+32])
                                                    Ppat_tuple
                                                    [
                                                      pattern (lambda/simplif.ml[864,32585+14]..[864,32585+15])
                                                        Ppat_any
                                                      pattern (lambda/simplif.ml[864,32585+17]..[864,32585+18])
                                                        Ppat_any
                                                      pattern (lambda/simplif.ml[864,32585+20]..[864,32585+22])
                                                        Ppat_var "id" (lambda/simplif.ml[864,32585+20]..[864,32585+22])
                                                      pattern (lambda/simplif.ml[864,32585+24]..[864,32585+25])
                                                        Ppat_any
                                                      pattern (lambda/simplif.ml[864,32585+27]..[864,32585+31])
                                                        Ppat_var "cont" (lambda/simplif.ml[864,32585+27]..[864,32585+31])
                                                    ]
                                              <when>
                                                expression (lambda/simplif.ml[864,32585+38]..[864,32585+62])
                                                  Pexp_apply
                                                  expression (lambda/simplif.ml[864,32585+38]..[864,32585+49])
                                                    Pexp_ident "Hashtbl.mem" (lambda/simplif.ml[864,32585+38]..[864,32585+49])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (lambda/simplif.ml[864,32585+50]..[864,32585+59])
                                                        Pexp_ident "static_id" (lambda/simplif.ml[864,32585+50]..[864,32585+59])
                                                    <arg>
                                                    Nolabel
                                                      expression (lambda/simplif.ml[864,32585+60]..[864,32585+62])
                                                        Pexp_ident "id" (lambda/simplif.ml[864,32585+60]..[864,32585+62])
                                                  ]
                                              expression (lambda/simplif.ml[865,32651+10]..[865,32651+22])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[865,32651+10]..[865,32651+17])
                                                  Pexp_ident "rewrite" (lambda/simplif.ml[865,32651+10]..[865,32651+17])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[865,32651+18]..[865,32651+22])
                                                      Pexp_ident "cont" (lambda/simplif.ml[865,32651+18]..[865,32651+22])
                                                ]
                                            <case>
                                              pattern (lambda/simplif.ml[866,32674+8]..[866,32674+46])
                                                Ppat_construct "Lapply" (lambda/simplif.ml[866,32674+8]..[866,32674+14])
                                                Some
                                                  []
                                                  pattern (lambda/simplif.ml[866,32674+15]..[866,32674+46])
                                                    Ppat_record Open
                                                    [
                                                      "ap_func" (lambda/simplif.ml[866,32674+16]..[866,32674+23])
                                                        pattern (lambda/simplif.ml[866,32674+26]..[866,32674+33])
                                                          Ppat_construct "Lvar" (lambda/simplif.ml[866,32674+26]..[866,32674+30])
                                                          Some
                                                            []
                                                            pattern (lambda/simplif.ml[866,32674+31]..[866,32674+33])
                                                              Ppat_var "id" (lambda/simplif.ml[866,32674+31]..[866,32674+33])
                                                      "ap_args" (lambda/simplif.ml[866,32674+35]..[866,32674+42]) ghost
                                                        pattern (lambda/simplif.ml[866,32674+35]..[866,32674+42])
                                                          Ppat_var "ap_args" (lambda/simplif.ml[866,32674+35]..[866,32674+42])
                                                    ]
                                              <when>
                                                expression (lambda/simplif.ml[866,32674+52]..[866,32674+76])
                                                  Pexp_apply
                                                  expression (lambda/simplif.ml[866,32674+52]..[866,32674+63])
                                                    Pexp_ident "Hashtbl.mem" (lambda/simplif.ml[866,32674+52]..[866,32674+63])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (lambda/simplif.ml[866,32674+64]..[866,32674+73])
                                                        Pexp_ident "static_id" (lambda/simplif.ml[866,32674+64]..[866,32674+73])
                                                    <arg>
                                                    Nolabel
                                                      expression (lambda/simplif.ml[866,32674+74]..[866,32674+76])
                                                        Pexp_ident "id" (lambda/simplif.ml[866,32674+74]..[866,32674+76])
                                                  ]
                                              expression (lambda/simplif.ml[867,32754+9]..[873,33035+12])
                                                Pexp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (lambda/simplif.ml[867,32754+13]..[867,32754+15])
                                                      Ppat_var "st" (lambda/simplif.ml[867,32754+13]..[867,32754+15])
                                                    expression (lambda/simplif.ml[867,32754+18]..[867,32754+43])
                                                      Pexp_apply
                                                      expression (lambda/simplif.ml[867,32754+18]..[867,32754+30])
                                                        Pexp_ident "Hashtbl.find" (lambda/simplif.ml[867,32754+18]..[867,32754+30])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (lambda/simplif.ml[867,32754+31]..[867,32754+40])
                                                            Pexp_ident "static_id" (lambda/simplif.ml[867,32754+31]..[867,32754+40])
                                                        <arg>
                                                        Nolabel
                                                          expression (lambda/simplif.ml[867,32754+41]..[867,32754+43])
                                                            Pexp_ident "id" (lambda/simplif.ml[867,32754+41]..[867,32754+43])
                                                      ]
                                                ]
                                                expression (lambda/simplif.ml[868,32801+9]..[873,33035+12])
                                                  Pexp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (lambda/simplif.ml[868,32801+13]..[868,32801+17])
                                                        Ppat_var "slot" (lambda/simplif.ml[868,32801+13]..[868,32801+17])
                                                      expression (lambda/simplif.ml[868,32801+20]..[868,32801+41])
                                                        Pexp_apply
                                                        expression (lambda/simplif.ml[868,32801+20]..[868,32801+32])
                                                          Pexp_ident "Hashtbl.find" (lambda/simplif.ml[868,32801+20]..[868,32801+32])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (lambda/simplif.ml[868,32801+33]..[868,32801+38])
                                                              Pexp_ident "slots" (lambda/simplif.ml[868,32801+33]..[868,32801+38])
                                                          <arg>
                                                          Nolabel
                                                            expression (lambda/simplif.ml[868,32801+39]..[868,32801+41])
                                                              Pexp_ident "id" (lambda/simplif.ml[868,32801+39]..[868,32801+41])
                                                        ]
                                                  ]
                                                  expression (lambda/simplif.ml[869,32846+9]..[873,33035+12])
                                                    Pexp_match
                                                    expression (lambda/simplif.ml[869,32846+21]..[869,32846+56])
                                                      Pexp_apply
                                                      expression (lambda/simplif.ml[869,32846+21]..[869,32846+38])
                                                        Pexp_ident "exact_application" (lambda/simplif.ml[869,32846+21]..[869,32846+38])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (lambda/simplif.ml[869,32846+39]..[869,32846+48])
                                                            Pexp_field
                                                            expression (lambda/simplif.ml[869,32846+39]..[869,32846+43])
                                                              Pexp_ident "slot" (lambda/simplif.ml[869,32846+39]..[869,32846+43])
                                                            "func" (lambda/simplif.ml[869,32846+44]..[869,32846+48])
                                                        <arg>
                                                        Nolabel
                                                          expression (lambda/simplif.ml[869,32846+49]..[869,32846+56])
                                                            Pexp_ident "ap_args" (lambda/simplif.ml[869,32846+49]..[869,32846+56])
                                                      ]
                                                    [
                                                      <case>
                                                        pattern (lambda/simplif.ml[870,32908+13]..[870,32908+17])
                                                          Ppat_construct "None" (lambda/simplif.ml[870,32908+13]..[870,32908+17])
                                                          None
                                                        expression (lambda/simplif.ml[870,32908+21]..[870,32908+33])
                                                          Pexp_assert
                                                          expression (lambda/simplif.ml[870,32908+28]..[870,32908+33])
                                                            Pexp_construct "false" (lambda/simplif.ml[870,32908+28]..[870,32908+33])
                                                            None
                                                      <case>
                                                        pattern (lambda/simplif.ml[871,32942+13]..[871,32942+28])
                                                          Ppat_construct "Some" (lambda/simplif.ml[871,32942+13]..[871,32942+17])
                                                          Some
                                                            []
                                                            pattern (lambda/simplif.ml[871,32942+18]..[871,32942+28])
                                                              Ppat_var "exact_args" (lambda/simplif.ml[871,32942+18]..[871,32942+28])
                                                        expression (lambda/simplif.ml[872,32974+14]..[872,32974+60])
                                                          Pexp_construct "Lstaticraise" (lambda/simplif.ml[872,32974+14]..[872,32974+26])
                                                          Some
                                                            expression (lambda/simplif.ml[872,32974+27]..[872,32974+60])
                                                              Pexp_tuple
                                                              [
                                                                expression (lambda/simplif.ml[872,32974+28]..[872,32974+30])
                                                                  Pexp_ident "st" (lambda/simplif.ml[872,32974+28]..[872,32974+30])
                                                                expression (lambda/simplif.ml[872,32974+32]..[872,32974+59])
                                                                  Pexp_apply
                                                                  expression (lambda/simplif.ml[872,32974+32]..[872,32974+40])
                                                                    Pexp_ident "List.map" (lambda/simplif.ml[872,32974+32]..[872,32974+40])
                                                                  [
                                                                    <arg>
                                                                    Nolabel
                                                                      expression (lambda/simplif.ml[872,32974+41]..[872,32974+48])
Pexp_ident "rewrite" (lambda/simplif.ml[872,32974+41]..[872,32974+48])
                                                                    <arg>
                                                                    Nolabel
                                                                      expression (lambda/simplif.ml[872,32974+49]..[872,32974+59])
Pexp_ident "exact_args" (lambda/simplif.ml[872,32974+49]..[872,32974+59])
                                                                  ]
                                                              ]
                                                    ]
                                            <case>
                                              pattern (lambda/simplif.ml[874,33048+8]..[874,33048+11])
                                                Ppat_var "lam" (lambda/simplif.ml[874,33048+8]..[874,33048+11])
                                              expression (lambda/simplif.ml[875,33063+10]..[875,33063+40])
                                                Pexp_apply
                                                expression (lambda/simplif.ml[875,33063+10]..[875,33063+28])
                                                  Pexp_ident "Lambda.shallow_map" (lambda/simplif.ml[875,33063+10]..[875,33063+28])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[875,33063+29]..[875,33063+36])
                                                      Pexp_ident "rewrite" (lambda/simplif.ml[875,33063+29]..[875,33063+36])
                                                  <arg>
                                                  Nolabel
                                                    expression (lambda/simplif.ml[875,33063+37]..[875,33063+40])
                                                      Pexp_ident "lam" (lambda/simplif.ml[875,33063+37]..[875,33063+40])
                                                ]
                                          ]
                                    ]
                                    expression (lambda/simplif.ml[877,33111+4]..[882,33264+9])
                                      Pexp_apply
                                      expression (lambda/simplif.ml[877,33111+4]..[877,33111+19])
                                        Pexp_ident "List.fold_right" (lambda/simplif.ml[877,33111+4]..[877,33111+19])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lambda/simplif.ml[878,33131+6]..[880,33220+7])
                                            Pexp_fun
                                            Nolabel
                                            None
                                            pattern (lambda/simplif.ml[878,33131+11]..[878,33131+19])
                                              Ppat_tuple
                                              [
                                                pattern (lambda/simplif.ml[878,33131+12]..[878,33131+14])
                                                  Ppat_var "st" (lambda/simplif.ml[878,33131+12]..[878,33131+14])
                                                pattern (lambda/simplif.ml[878,33131+16]..[878,33131+18])
                                                  Ppat_var "lf" (lambda/simplif.ml[878,33131+16]..[878,33131+18])
                                              ]
                                            expression (lambda/simplif.ml[878,33131+20]..[879,33158+61]) ghost
                                              Pexp_fun
                                              Nolabel
                                              None
                                              pattern (lambda/simplif.ml[878,33131+20]..[878,33131+23])
                                                Ppat_var "lam" (lambda/simplif.ml[878,33131+20]..[878,33131+23])
                                              expression (lambda/simplif.ml[879,33158+9]..[879,33158+61])
                                                Pexp_construct "Lstaticcatch" (lambda/simplif.ml[879,33158+9]..[879,33158+21])
                                                Some
                                                  expression (lambda/simplif.ml[879,33158+22]..[879,33158+61])
                                                    Pexp_tuple
                                                    [
                                                      expression (lambda/simplif.ml[879,33158+23]..[879,33158+26])
                                                        Pexp_ident "lam" (lambda/simplif.ml[879,33158+23]..[879,33158+26])
                                                      expression (lambda/simplif.ml[879,33158+28]..[879,33158+43])
                                                        Pexp_tuple
                                                        [
                                                          expression (lambda/simplif.ml[879,33158+29]..[879,33158+31])
                                                            Pexp_ident "st" (lambda/simplif.ml[879,33158+29]..[879,33158+31])
                                                          expression (lambda/simplif.ml[879,33158+33]..[879,33158+42])
                                                            Pexp_field
                                                            expression (lambda/simplif.ml[879,33158+33]..[879,33158+35])
                                                              Pexp_ident "lf" (lambda/simplif.ml[879,33158+33]..[879,33158+35])
                                                            "params" (lambda/simplif.ml[879,33158+36]..[879,33158+42])
                                                        ]
                                                      expression (lambda/simplif.ml[879,33158+45]..[879,33158+60])
                                                        Pexp_apply
                                                        expression (lambda/simplif.ml[879,33158+45]..[879,33158+52])
                                                          Pexp_ident "rewrite" (lambda/simplif.ml[879,33158+45]..[879,33158+52])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (lambda/simplif.ml[879,33158+53]..[879,33158+60])
                                                              Pexp_field
                                                              expression (lambda/simplif.ml[879,33158+53]..[879,33158+55])
                                                                Pexp_ident "lf" (lambda/simplif.ml[879,33158+53]..[879,33158+55])
                                                              "body" (lambda/simplif.ml[879,33158+56]..[879,33158+60])
                                                        ]
                                                    ]
                                        <arg>
                                        Nolabel
                                          expression (lambda/simplif.ml[881,33228+6]..[881,33228+35])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[881,33228+7]..[881,33228+22])
                                              Pexp_ident "LamTbl.find_all" (lambda/simplif.ml[881,33228+7]..[881,33228+22])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[881,33228+23]..[881,33228+29])
                                                  Pexp_ident "static" (lambda/simplif.ml[881,33228+23]..[881,33228+29])
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[881,33228+30]..[881,33228+34])
                                                  Pexp_ident "lam0" (lambda/simplif.ml[881,33228+30]..[881,33228+34])
                                            ]
                                        <arg>
                                        Nolabel
                                          expression (lambda/simplif.ml[882,33264+6]..[882,33264+9])
                                            Pexp_ident "lam" (lambda/simplif.ml[882,33264+6]..[882,33264+9])
                                      ]
                            ]
                            expression (lambda/simplif.ml[884,33279+2]..[887,33329+15])
                              Pexp_ifthenelse
                              expression (lambda/simplif.ml[884,33279+5]..[884,33279+29])
                                Pexp_apply
                                expression (lambda/simplif.ml[884,33279+26]..[884,33279+27])
                                  Pexp_ident "=" (lambda/simplif.ml[884,33279+26]..[884,33279+27])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[884,33279+5]..[884,33279+25])
                                      Pexp_apply
                                      expression (lambda/simplif.ml[884,33279+5]..[884,33279+18])
                                        Pexp_ident "LamTbl.length" (lambda/simplif.ml[884,33279+5]..[884,33279+18])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lambda/simplif.ml[884,33279+19]..[884,33279+25])
                                            Pexp_ident "static" (lambda/simplif.ml[884,33279+19]..[884,33279+25])
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (lambda/simplif.ml[884,33279+28]..[884,33279+29])
                                      Pexp_constant PConst_int (0,None)
                                ]
                              expression (lambda/simplif.ml[885,33314+4]..[885,33314+7])
                                Pexp_ident "lam" (lambda/simplif.ml[885,33314+4]..[885,33314+7])
                              Some
                                expression (lambda/simplif.ml[887,33329+4]..[887,33329+15])
                                  Pexp_apply
                                  expression (lambda/simplif.ml[887,33329+4]..[887,33329+11])
                                    Pexp_ident "rewrite" (lambda/simplif.ml[887,33329+4]..[887,33329+11])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lambda/simplif.ml[887,33329+12]..[887,33329+15])
                                        Pexp_ident "lam" (lambda/simplif.ml[887,33329+12]..[887,33329+15])
                                  ]
    ]
  structure_item (lambda/simplif.ml[892,33435+0]..[904,33771+5])
    Pstr_value Nonrec
    [
      <def>
        pattern (lambda/simplif.ml[892,33435+4]..[892,33435+19])
          Ppat_var "simplify_lambda" (lambda/simplif.ml[892,33435+4]..[892,33435+19])
        expression (lambda/simplif.ml[892,33435+20]..[904,33771+5]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lambda/simplif.ml[892,33435+20]..[892,33435+23])
            Ppat_var "lam" (lambda/simplif.ml[892,33435+20]..[892,33435+23])
          expression (lambda/simplif.ml[893,33461+2]..[904,33771+5])
            Pexp_let Nonrec
            [
              <def>
                pattern (lambda/simplif.ml[893,33461+6]..[893,33461+9])
                  Ppat_var "lam" (lambda/simplif.ml[893,33461+6]..[893,33461+9])
                expression (lambda/simplif.ml[894,33473+4]..[899,33616+20])
                  Pexp_apply
                  expression (lambda/simplif.ml[899,33616+4]..[899,33616+6])
                    Pexp_ident "|>" (lambda/simplif.ml[899,33616+4]..[899,33616+6])
                  [
                    <arg>
                    Nolabel
                      expression (lambda/simplif.ml[894,33473+4]..[898,33594+21])
                        Pexp_apply
                        expression (lambda/simplif.ml[898,33594+4]..[898,33594+6])
                          Pexp_ident "|>" (lambda/simplif.ml[898,33594+4]..[898,33594+6])
                        [
                          <arg>
                          Nolabel
                            expression (lambda/simplif.ml[894,33473+4]..[897,33585+8])
                              Pexp_apply
                              expression (lambda/simplif.ml[895,33481+4]..[895,33481+6])
                                Pexp_ident "|>" (lambda/simplif.ml[895,33481+4]..[895,33481+6])
                              [
                                <arg>
                                Nolabel
                                  expression (lambda/simplif.ml[894,33473+4]..[894,33473+7])
                                    Pexp_ident "lam" (lambda/simplif.ml[894,33473+4]..[894,33473+7])
                                <arg>
                                Nolabel
                                  expression (lambda/simplif.ml[895,33481+7]..[897,33585+8])
                                    Pexp_ifthenelse
                                    expression (lambda/simplif.ml[895,33481+11]..[895,33481+53])
                                      Pexp_apply
                                      expression (lambda/simplif.ml[895,33481+32]..[895,33481+34])
                                        Pexp_ident "||" (lambda/simplif.ml[895,33481+32]..[895,33481+34])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lambda/simplif.ml[895,33481+11]..[895,33481+31])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[895,33481+11]..[895,33481+12])
                                              Pexp_ident "!" (lambda/simplif.ml[895,33481+11]..[895,33481+12])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[895,33481+12]..[895,33481+31])
                                                  Pexp_ident "Clflags.native_code" (lambda/simplif.ml[895,33481+12]..[895,33481+31])
                                            ]
                                        <arg>
                                        Nolabel
                                          expression (lambda/simplif.ml[895,33481+35]..[895,33481+53])
                                            Pexp_apply
                                            expression (lambda/simplif.ml[895,33481+35]..[895,33481+38])
                                              Pexp_ident "not" (lambda/simplif.ml[895,33481+35]..[895,33481+38])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lambda/simplif.ml[895,33481+39]..[895,33481+53])
                                                  Pexp_apply
                                                  expression (lambda/simplif.ml[895,33481+39]..[895,33481+40])
                                                    Pexp_ident "!" (lambda/simplif.ml[895,33481+39]..[895,33481+40])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (lambda/simplif.ml[895,33481+40]..[895,33481+53])
                                                        Pexp_ident "Clflags.debug" (lambda/simplif.ml[895,33481+40]..[895,33481+53])
                                                  ]
                                            ]
                                      ]
                                    expression (lambda/simplif.ml[896,33535+13]..[896,33535+37])
                                      Pexp_ident "simplify_local_functions" (lambda/simplif.ml[896,33535+13]..[896,33535+37])
                                    Some
                                      expression (lambda/simplif.ml[896,33535+43]..[896,33535+49])
                                        Pexp_ident "Fun.id" (lambda/simplif.ml[896,33535+43]..[896,33535+49])
                              ]
                          <arg>
                          Nolabel
                            expression (lambda/simplif.ml[898,33594+7]..[898,33594+21])
                              Pexp_ident "simplify_exits" (lambda/simplif.ml[898,33594+7]..[898,33594+21])
                        ]
                    <arg>
                    Nolabel
                      expression (lambda/simplif.ml[899,33616+7]..[899,33616+20])
                        Pexp_ident "simplify_lets" (lambda/simplif.ml[899,33616+7]..[899,33616+20])
                  ]
            ]
            expression (lambda/simplif.ml[901,33642+2]..[904,33771+5])
              Pexp_sequence
              expression (lambda/simplif.ml[901,33642+2]..[903,33738+31])
                Pexp_ifthenelse
                expression (lambda/simplif.ml[901,33642+5]..[902,33668+69])
                  Pexp_apply
                  expression (lambda/simplif.ml[902,33668+5]..[902,33668+7])
                    Pexp_ident "||" (lambda/simplif.ml[902,33668+5]..[902,33668+7])
                  [
                    <arg>
                    Nolabel
                      expression (lambda/simplif.ml[901,33642+5]..[901,33642+25])
                        Pexp_apply
                        expression (lambda/simplif.ml[901,33642+5]..[901,33642+6])
                          Pexp_ident "!" (lambda/simplif.ml[901,33642+5]..[901,33642+6])
                        [
                          <arg>
                          Nolabel
                            expression (lambda/simplif.ml[901,33642+6]..[901,33642+25])
                              Pexp_ident "Clflags.annotations" (lambda/simplif.ml[901,33642+6]..[901,33642+25])
                        ]
                    <arg>
                    Nolabel
                      expression (lambda/simplif.ml[902,33668+8]..[902,33668+69])
                        Pexp_apply
                        expression (lambda/simplif.ml[902,33668+8]..[902,33668+26])
                          Pexp_ident "Warnings.is_active" (lambda/simplif.ml[902,33668+8]..[902,33668+26])
                        [
                          <arg>
                          Nolabel
                            expression (lambda/simplif.ml[902,33668+27]..[902,33668+69])
                              Pexp_construct "Warnings.Wrong_tailcall_expectation" (lambda/simplif.ml[902,33668+28]..[902,33668+63])
                              Some
                                expression (lambda/simplif.ml[902,33668+64]..[902,33668+68])
                                  Pexp_construct "true" (lambda/simplif.ml[902,33668+64]..[902,33668+68])
                                  None
                        ]
                  ]
                expression (lambda/simplif.ml[903,33738+7]..[903,33738+31])
                  Pexp_apply
                  expression (lambda/simplif.ml[903,33738+7]..[903,33738+22])
                    Pexp_ident "emit_tail_infos" (lambda/simplif.ml[903,33738+7]..[903,33738+22])
                  [
                    <arg>
                    Nolabel
                      expression (lambda/simplif.ml[903,33738+23]..[903,33738+27])
                        Pexp_construct "true" (lambda/simplif.ml[903,33738+23]..[903,33738+27])
                        None
                    <arg>
                    Nolabel
                      expression (lambda/simplif.ml[903,33738+28]..[903,33738+31])
                        Pexp_ident "lam" (lambda/simplif.ml[903,33738+28]..[903,33738+31])
                  ]
                None
              expression (lambda/simplif.ml[904,33771+2]..[904,33771+5])
                Pexp_ident "lam" (lambda/simplif.ml[904,33771+2]..[904,33771+5])
    ]
]

