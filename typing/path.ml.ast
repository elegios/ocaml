[
  structure_item (typing/path.ml[16,1079+0]..[19,1133+19])
    Pstr_type Rec
    [
      type_declaration "t" (typing/path.ml[16,1079+5]..[16,1079+6]) (typing/path.ml[16,1079+0]..[19,1133+19])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (typing/path.ml[17,1088+4]..[17,1088+21])
                "Pident" (typing/path.ml[17,1088+4]..[17,1088+10])
                [
                  core_type (typing/path.ml[17,1088+14]..[17,1088+21])
                    Ptyp_constr "Ident.t" (typing/path.ml[17,1088+14]..[17,1088+21])
                    []
                ]
                None
              (typing/path.ml[18,1110+2]..[18,1110+22])
                "Pdot" (typing/path.ml[18,1110+4]..[18,1110+8])
                [
                  core_type (typing/path.ml[18,1110+12]..[18,1110+13])
                    Ptyp_constr "t" (typing/path.ml[18,1110+12]..[18,1110+13])
                    []
                  core_type (typing/path.ml[18,1110+16]..[18,1110+22])
                    Ptyp_constr "string" (typing/path.ml[18,1110+16]..[18,1110+22])
                    []
                ]
                None
              (typing/path.ml[19,1133+2]..[19,1133+19])
                "Papply" (typing/path.ml[19,1133+4]..[19,1133+10])
                [
                  core_type (typing/path.ml[19,1133+14]..[19,1133+15])
                    Ptyp_constr "t" (typing/path.ml[19,1133+14]..[19,1133+15])
                    []
                  core_type (typing/path.ml[19,1133+18]..[19,1133+19])
                    Ptyp_constr "t" (typing/path.ml[19,1133+18]..[19,1133+19])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (typing/path.ml[21,1154+0]..[28,1408+19])
    Pstr_value Rec
    [
      <def>
        pattern (typing/path.ml[21,1154+8]..[21,1154+12])
          Ppat_var "same" (typing/path.ml[21,1154+8]..[21,1154+12])
        expression (typing/path.ml[21,1154+13]..[28,1408+19]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (typing/path.ml[21,1154+13]..[21,1154+15])
            Ppat_var "p1" (typing/path.ml[21,1154+13]..[21,1154+15])
          expression (typing/path.ml[21,1154+16]..[28,1408+19]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (typing/path.ml[21,1154+16]..[21,1154+18])
              Ppat_var "p2" (typing/path.ml[21,1154+16]..[21,1154+18])
            expression (typing/path.ml[22,1175+2]..[28,1408+19])
              Pexp_apply
              expression (typing/path.ml[23,1186+2]..[23,1186+4])
                Pexp_ident "||" (typing/path.ml[23,1186+2]..[23,1186+4])
              [
                <arg>
                Nolabel
                  expression (typing/path.ml[22,1175+2]..[22,1175+10])
                    Pexp_apply
                    expression (typing/path.ml[22,1175+5]..[22,1175+7])
                      Pexp_ident "==" (typing/path.ml[22,1175+5]..[22,1175+7])
                    [
                      <arg>
                      Nolabel
                        expression (typing/path.ml[22,1175+2]..[22,1175+4])
                          Pexp_ident "p1" (typing/path.ml[22,1175+2]..[22,1175+4])
                      <arg>
                      Nolabel
                        expression (typing/path.ml[22,1175+8]..[22,1175+10])
                          Pexp_ident "p2" (typing/path.ml[22,1175+8]..[22,1175+10])
                    ]
                <arg>
                Nolabel
                  expression (typing/path.ml[23,1186+5]..[28,1408+19])
                    Pexp_match
                    expression (typing/path.ml[23,1186+11]..[23,1186+19])
                      Pexp_tuple
                      [
                        expression (typing/path.ml[23,1186+12]..[23,1186+14])
                          Pexp_ident "p1" (typing/path.ml[23,1186+12]..[23,1186+14])
                        expression (typing/path.ml[23,1186+16]..[23,1186+18])
                          Pexp_ident "p2" (typing/path.ml[23,1186+16]..[23,1186+18])
                      ]
                    [
                      <case>
                        pattern (typing/path.ml[24,1211+4]..[24,1211+28])
                          Ppat_tuple
                          [
                            pattern (typing/path.ml[24,1211+5]..[24,1211+15])
                              Ppat_construct "Pident" (typing/path.ml[24,1211+5]..[24,1211+11])
                              Some
                                []
                                pattern (typing/path.ml[24,1211+12]..[24,1211+15])
                                  Ppat_var "id1" (typing/path.ml[24,1211+12]..[24,1211+15])
                            pattern (typing/path.ml[24,1211+17]..[24,1211+27])
                              Ppat_construct "Pident" (typing/path.ml[24,1211+17]..[24,1211+23])
                              Some
                                []
                                pattern (typing/path.ml[24,1211+24]..[24,1211+27])
                                  Ppat_var "id2" (typing/path.ml[24,1211+24]..[24,1211+27])
                          ]
                        expression (typing/path.ml[24,1211+32]..[24,1211+50])
                          Pexp_apply
                          expression (typing/path.ml[24,1211+32]..[24,1211+42])
                            Pexp_ident "Ident.same" (typing/path.ml[24,1211+32]..[24,1211+42])
                          [
                            <arg>
                            Nolabel
                              expression (typing/path.ml[24,1211+43]..[24,1211+46])
                                Pexp_ident "id1" (typing/path.ml[24,1211+43]..[24,1211+46])
                            <arg>
                            Nolabel
                              expression (typing/path.ml[24,1211+47]..[24,1211+50])
                                Pexp_ident "id2" (typing/path.ml[24,1211+47]..[24,1211+50])
                          ]
                      <case>
                        pattern (typing/path.ml[25,1262+4]..[25,1262+32])
                          Ppat_tuple
                          [
                            pattern (typing/path.ml[25,1262+5]..[25,1262+17])
                              Ppat_construct "Pdot" (typing/path.ml[25,1262+5]..[25,1262+9])
                              Some
                                []
                                pattern (typing/path.ml[25,1262+9]..[25,1262+17])
                                  Ppat_tuple
                                  [
                                    pattern (typing/path.ml[25,1262+10]..[25,1262+12])
                                      Ppat_var "p1" (typing/path.ml[25,1262+10]..[25,1262+12])
                                    pattern (typing/path.ml[25,1262+14]..[25,1262+16])
                                      Ppat_var "s1" (typing/path.ml[25,1262+14]..[25,1262+16])
                                  ]
                            pattern (typing/path.ml[25,1262+19]..[25,1262+31])
                              Ppat_construct "Pdot" (typing/path.ml[25,1262+19]..[25,1262+23])
                              Some
                                []
                                pattern (typing/path.ml[25,1262+23]..[25,1262+31])
                                  Ppat_tuple
                                  [
                                    pattern (typing/path.ml[25,1262+24]..[25,1262+26])
                                      Ppat_var "p2" (typing/path.ml[25,1262+24]..[25,1262+26])
                                    pattern (typing/path.ml[25,1262+28]..[25,1262+30])
                                      Ppat_var "s2" (typing/path.ml[25,1262+28]..[25,1262+30])
                                  ]
                          ]
                        expression (typing/path.ml[25,1262+36]..[25,1262+57])
                          Pexp_apply
                          expression (typing/path.ml[25,1262+44]..[25,1262+46])
                            Pexp_ident "&&" (typing/path.ml[25,1262+44]..[25,1262+46])
                          [
                            <arg>
                            Nolabel
                              expression (typing/path.ml[25,1262+36]..[25,1262+43])
                                Pexp_apply
                                expression (typing/path.ml[25,1262+39]..[25,1262+40])
                                  Pexp_ident "=" (typing/path.ml[25,1262+39]..[25,1262+40])
                                [
                                  <arg>
                                  Nolabel
                                    expression (typing/path.ml[25,1262+36]..[25,1262+38])
                                      Pexp_ident "s1" (typing/path.ml[25,1262+36]..[25,1262+38])
                                  <arg>
                                  Nolabel
                                    expression (typing/path.ml[25,1262+41]..[25,1262+43])
                                      Pexp_ident "s2" (typing/path.ml[25,1262+41]..[25,1262+43])
                                ]
                            <arg>
                            Nolabel
                              expression (typing/path.ml[25,1262+47]..[25,1262+57])
                                Pexp_apply
                                expression (typing/path.ml[25,1262+47]..[25,1262+51])
                                  Pexp_ident "same" (typing/path.ml[25,1262+47]..[25,1262+51])
                                [
                                  <arg>
                                  Nolabel
                                    expression (typing/path.ml[25,1262+52]..[25,1262+54])
                                      Pexp_ident "p1" (typing/path.ml[25,1262+52]..[25,1262+54])
                                  <arg>
                                  Nolabel
                                    expression (typing/path.ml[25,1262+55]..[25,1262+57])
                                      Pexp_ident "p2" (typing/path.ml[25,1262+55]..[25,1262+57])
                                ]
                          ]
                      <case>
                        pattern (typing/path.ml[26,1320+4]..[26,1320+44])
                          Ppat_tuple
                          [
                            pattern (typing/path.ml[26,1320+5]..[26,1320+23])
                              Ppat_construct "Papply" (typing/path.ml[26,1320+5]..[26,1320+11])
                              Some
                                []
                                pattern (typing/path.ml[26,1320+11]..[26,1320+23])
                                  Ppat_tuple
                                  [
                                    pattern (typing/path.ml[26,1320+12]..[26,1320+16])
                                      Ppat_var "fun1" (typing/path.ml[26,1320+12]..[26,1320+16])
                                    pattern (typing/path.ml[26,1320+18]..[26,1320+22])
                                      Ppat_var "arg1" (typing/path.ml[26,1320+18]..[26,1320+22])
                                  ]
                            pattern (typing/path.ml[26,1320+25]..[26,1320+43])
                              Ppat_construct "Papply" (typing/path.ml[26,1320+25]..[26,1320+31])
                              Some
                                []
                                pattern (typing/path.ml[26,1320+31]..[26,1320+43])
                                  Ppat_tuple
                                  [
                                    pattern (typing/path.ml[26,1320+32]..[26,1320+36])
                                      Ppat_var "fun2" (typing/path.ml[26,1320+32]..[26,1320+36])
                                    pattern (typing/path.ml[26,1320+38]..[26,1320+42])
                                      Ppat_var "arg2" (typing/path.ml[26,1320+38]..[26,1320+42])
                                  ]
                          ]
                        expression (typing/path.ml[27,1368+7]..[27,1368+39])
                          Pexp_apply
                          expression (typing/path.ml[27,1368+22]..[27,1368+24])
                            Pexp_ident "&&" (typing/path.ml[27,1368+22]..[27,1368+24])
                          [
                            <arg>
                            Nolabel
                              expression (typing/path.ml[27,1368+7]..[27,1368+21])
                                Pexp_apply
                                expression (typing/path.ml[27,1368+7]..[27,1368+11])
                                  Pexp_ident "same" (typing/path.ml[27,1368+7]..[27,1368+11])
                                [
                                  <arg>
                                  Nolabel
                                    expression (typing/path.ml[27,1368+12]..[27,1368+16])
                                      Pexp_ident "fun1" (typing/path.ml[27,1368+12]..[27,1368+16])
                                  <arg>
                                  Nolabel
                                    expression (typing/path.ml[27,1368+17]..[27,1368+21])
                                      Pexp_ident "fun2" (typing/path.ml[27,1368+17]..[27,1368+21])
                                ]
                            <arg>
                            Nolabel
                              expression (typing/path.ml[27,1368+25]..[27,1368+39])
                                Pexp_apply
                                expression (typing/path.ml[27,1368+25]..[27,1368+29])
                                  Pexp_ident "same" (typing/path.ml[27,1368+25]..[27,1368+29])
                                [
                                  <arg>
                                  Nolabel
                                    expression (typing/path.ml[27,1368+30]..[27,1368+34])
                                      Pexp_ident "arg1" (typing/path.ml[27,1368+30]..[27,1368+34])
                                  <arg>
                                  Nolabel
                                    expression (typing/path.ml[27,1368+35]..[27,1368+39])
                                      Pexp_ident "arg2" (typing/path.ml[27,1368+35]..[27,1368+39])
                                ]
                          ]
                      <case>
                        pattern (typing/path.ml[28,1408+4]..[28,1408+10])
                          Ppat_tuple
                          [
                            pattern (typing/path.ml[28,1408+5]..[28,1408+6])
                              Ppat_any
                            pattern (typing/path.ml[28,1408+8]..[28,1408+9])
                              Ppat_any
                          ]
                        expression (typing/path.ml[28,1408+14]..[28,1408+19])
                          Pexp_construct "false" (typing/path.ml[28,1408+14]..[28,1408+19])
                          None
                    ]
              ]
    ]
  structure_item (typing/path.ml[30,1429+0]..[41,1853+51])
    Pstr_value Rec
    [
      <def>
        pattern (typing/path.ml[30,1429+8]..[30,1429+15])
          Ppat_var "compare" (typing/path.ml[30,1429+8]..[30,1429+15])
        expression (typing/path.ml[30,1429+16]..[41,1853+51]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (typing/path.ml[30,1429+16]..[30,1429+18])
            Ppat_var "p1" (typing/path.ml[30,1429+16]..[30,1429+18])
          expression (typing/path.ml[30,1429+19]..[41,1853+51]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (typing/path.ml[30,1429+19]..[30,1429+21])
              Ppat_var "p2" (typing/path.ml[30,1429+19]..[30,1429+21])
            expression (typing/path.ml[31,1453+2]..[41,1853+51])
              Pexp_ifthenelse
              expression (typing/path.ml[31,1453+5]..[31,1453+13])
                Pexp_apply
                expression (typing/path.ml[31,1453+8]..[31,1453+10])
                  Pexp_ident "==" (typing/path.ml[31,1453+8]..[31,1453+10])
                [
                  <arg>
                  Nolabel
                    expression (typing/path.ml[31,1453+5]..[31,1453+7])
                      Pexp_ident "p1" (typing/path.ml[31,1453+5]..[31,1453+7])
                  <arg>
                  Nolabel
                    expression (typing/path.ml[31,1453+11]..[31,1453+13])
                      Pexp_ident "p2" (typing/path.ml[31,1453+11]..[31,1453+13])
                ]
              expression (typing/path.ml[31,1453+19]..[31,1453+20])
                Pexp_constant PConst_int (0,None)
              Some
                expression (typing/path.ml[32,1474+7]..[41,1853+51])
                  Pexp_match
                  expression (typing/path.ml[32,1474+13]..[32,1474+21])
                    Pexp_tuple
                    [
                      expression (typing/path.ml[32,1474+14]..[32,1474+16])
                        Pexp_ident "p1" (typing/path.ml[32,1474+14]..[32,1474+16])
                      expression (typing/path.ml[32,1474+18]..[32,1474+20])
                        Pexp_ident "p2" (typing/path.ml[32,1474+18]..[32,1474+20])
                    ]
                  [
                    <case>
                      pattern (typing/path.ml[33,1501+4]..[33,1501+28])
                        Ppat_tuple
                        [
                          pattern (typing/path.ml[33,1501+5]..[33,1501+15])
                            Ppat_construct "Pident" (typing/path.ml[33,1501+5]..[33,1501+11])
                            Some
                              []
                              pattern (typing/path.ml[33,1501+12]..[33,1501+15])
                                Ppat_var "id1" (typing/path.ml[33,1501+12]..[33,1501+15])
                          pattern (typing/path.ml[33,1501+17]..[33,1501+27])
                            Ppat_construct "Pident" (typing/path.ml[33,1501+17]..[33,1501+23])
                            Some
                              []
                              pattern (typing/path.ml[33,1501+24]..[33,1501+27])
                                Ppat_var "id2" (typing/path.ml[33,1501+24]..[33,1501+27])
                        ]
                      expression (typing/path.ml[33,1501+32]..[33,1501+53])
                        Pexp_apply
                        expression (typing/path.ml[33,1501+32]..[33,1501+45])
                          Pexp_ident "Ident.compare" (typing/path.ml[33,1501+32]..[33,1501+45])
                        [
                          <arg>
                          Nolabel
                            expression (typing/path.ml[33,1501+46]..[33,1501+49])
                              Pexp_ident "id1" (typing/path.ml[33,1501+46]..[33,1501+49])
                          <arg>
                          Nolabel
                            expression (typing/path.ml[33,1501+50]..[33,1501+53])
                              Pexp_ident "id2" (typing/path.ml[33,1501+50]..[33,1501+53])
                        ]
                    <case>
                      pattern (typing/path.ml[34,1555+4]..[34,1555+32])
                        Ppat_tuple
                        [
                          pattern (typing/path.ml[34,1555+5]..[34,1555+17])
                            Ppat_construct "Pdot" (typing/path.ml[34,1555+5]..[34,1555+9])
                            Some
                              []
                              pattern (typing/path.ml[34,1555+9]..[34,1555+17])
                                Ppat_tuple
                                [
                                  pattern (typing/path.ml[34,1555+10]..[34,1555+12])
                                    Ppat_var "p1" (typing/path.ml[34,1555+10]..[34,1555+12])
                                  pattern (typing/path.ml[34,1555+14]..[34,1555+16])
                                    Ppat_var "s1" (typing/path.ml[34,1555+14]..[34,1555+16])
                                ]
                          pattern (typing/path.ml[34,1555+19]..[34,1555+31])
                            Ppat_construct "Pdot" (typing/path.ml[34,1555+19]..[34,1555+23])
                            Some
                              []
                              pattern (typing/path.ml[34,1555+23]..[34,1555+31])
                                Ppat_tuple
                                [
                                  pattern (typing/path.ml[34,1555+24]..[34,1555+26])
                                    Ppat_var "p2" (typing/path.ml[34,1555+24]..[34,1555+26])
                                  pattern (typing/path.ml[34,1555+28]..[34,1555+30])
                                    Ppat_var "s2" (typing/path.ml[34,1555+28]..[34,1555+30])
                                ]
                        ]
                      expression (typing/path.ml[35,1591+6]..[36,1622+48])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (typing/path.ml[35,1591+10]..[35,1591+11])
                              Ppat_var "h" (typing/path.ml[35,1591+10]..[35,1591+11])
                            expression (typing/path.ml[35,1591+14]..[35,1591+27])
                              Pexp_apply
                              expression (typing/path.ml[35,1591+14]..[35,1591+21])
                                Pexp_ident "compare" (typing/path.ml[35,1591+14]..[35,1591+21])
                              [
                                <arg>
                                Nolabel
                                  expression (typing/path.ml[35,1591+22]..[35,1591+24])
                                    Pexp_ident "p1" (typing/path.ml[35,1591+22]..[35,1591+24])
                                <arg>
                                Nolabel
                                  expression (typing/path.ml[35,1591+25]..[35,1591+27])
                                    Pexp_ident "p2" (typing/path.ml[35,1591+25]..[35,1591+27])
                              ]
                        ]
                        expression (typing/path.ml[36,1622+6]..[36,1622+48])
                          Pexp_ifthenelse
                          expression (typing/path.ml[36,1622+9]..[36,1622+15])
                            Pexp_apply
                            expression (typing/path.ml[36,1622+11]..[36,1622+13])
                              Pexp_ident "<>" (typing/path.ml[36,1622+11]..[36,1622+13])
                            [
                              <arg>
                              Nolabel
                                expression (typing/path.ml[36,1622+9]..[36,1622+10])
                                  Pexp_ident "h" (typing/path.ml[36,1622+9]..[36,1622+10])
                              <arg>
                              Nolabel
                                expression (typing/path.ml[36,1622+14]..[36,1622+15])
                                  Pexp_constant PConst_int (0,None)
                            ]
                          expression (typing/path.ml[36,1622+21]..[36,1622+22])
                            Pexp_ident "h" (typing/path.ml[36,1622+21]..[36,1622+22])
                          Some
                            expression (typing/path.ml[36,1622+28]..[36,1622+48])
                              Pexp_apply
                              expression (typing/path.ml[36,1622+28]..[36,1622+42])
                                Pexp_ident "String.compare" (typing/path.ml[36,1622+28]..[36,1622+42])
                              [
                                <arg>
                                Nolabel
                                  expression (typing/path.ml[36,1622+43]..[36,1622+45])
                                    Pexp_ident "s1" (typing/path.ml[36,1622+43]..[36,1622+45])
                                <arg>
                                Nolabel
                                  expression (typing/path.ml[36,1622+46]..[36,1622+48])
                                    Pexp_ident "s2" (typing/path.ml[36,1622+46]..[36,1622+48])
                              ]
                    <case>
                      pattern (typing/path.ml[37,1671+4]..[37,1671+44])
                        Ppat_tuple
                        [
                          pattern (typing/path.ml[37,1671+5]..[37,1671+23])
                            Ppat_construct "Papply" (typing/path.ml[37,1671+5]..[37,1671+11])
                            Some
                              []
                              pattern (typing/path.ml[37,1671+11]..[37,1671+23])
                                Ppat_tuple
                                [
                                  pattern (typing/path.ml[37,1671+12]..[37,1671+16])
                                    Ppat_var "fun1" (typing/path.ml[37,1671+12]..[37,1671+16])
                                  pattern (typing/path.ml[37,1671+18]..[37,1671+22])
                                    Ppat_var "arg1" (typing/path.ml[37,1671+18]..[37,1671+22])
                                ]
                          pattern (typing/path.ml[37,1671+25]..[37,1671+43])
                            Ppat_construct "Papply" (typing/path.ml[37,1671+25]..[37,1671+31])
                            Some
                              []
                              pattern (typing/path.ml[37,1671+31]..[37,1671+43])
                                Ppat_tuple
                                [
                                  pattern (typing/path.ml[37,1671+32]..[37,1671+36])
                                    Ppat_var "fun2" (typing/path.ml[37,1671+32]..[37,1671+36])
                                  pattern (typing/path.ml[37,1671+38]..[37,1671+42])
                                    Ppat_var "arg2" (typing/path.ml[37,1671+38]..[37,1671+42])
                                ]
                        ]
                      expression (typing/path.ml[38,1719+6]..[39,1754+45])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (typing/path.ml[38,1719+10]..[38,1719+11])
                              Ppat_var "h" (typing/path.ml[38,1719+10]..[38,1719+11])
                            expression (typing/path.ml[38,1719+14]..[38,1719+31])
                              Pexp_apply
                              expression (typing/path.ml[38,1719+14]..[38,1719+21])
                                Pexp_ident "compare" (typing/path.ml[38,1719+14]..[38,1719+21])
                              [
                                <arg>
                                Nolabel
                                  expression (typing/path.ml[38,1719+22]..[38,1719+26])
                                    Pexp_ident "fun1" (typing/path.ml[38,1719+22]..[38,1719+26])
                                <arg>
                                Nolabel
                                  expression (typing/path.ml[38,1719+27]..[38,1719+31])
                                    Pexp_ident "fun2" (typing/path.ml[38,1719+27]..[38,1719+31])
                              ]
                        ]
                        expression (typing/path.ml[39,1754+6]..[39,1754+45])
                          Pexp_ifthenelse
                          expression (typing/path.ml[39,1754+9]..[39,1754+15])
                            Pexp_apply
                            expression (typing/path.ml[39,1754+11]..[39,1754+13])
                              Pexp_ident "<>" (typing/path.ml[39,1754+11]..[39,1754+13])
                            [
                              <arg>
                              Nolabel
                                expression (typing/path.ml[39,1754+9]..[39,1754+10])
                                  Pexp_ident "h" (typing/path.ml[39,1754+9]..[39,1754+10])
                              <arg>
                              Nolabel
                                expression (typing/path.ml[39,1754+14]..[39,1754+15])
                                  Pexp_constant PConst_int (0,None)
                            ]
                          expression (typing/path.ml[39,1754+21]..[39,1754+22])
                            Pexp_ident "h" (typing/path.ml[39,1754+21]..[39,1754+22])
                          Some
                            expression (typing/path.ml[39,1754+28]..[39,1754+45])
                              Pexp_apply
                              expression (typing/path.ml[39,1754+28]..[39,1754+35])
                                Pexp_ident "compare" (typing/path.ml[39,1754+28]..[39,1754+35])
                              [
                                <arg>
                                Nolabel
                                  expression (typing/path.ml[39,1754+36]..[39,1754+40])
                                    Pexp_ident "arg1" (typing/path.ml[39,1754+36]..[39,1754+40])
                                <arg>
                                Nolabel
                                  expression (typing/path.ml[39,1754+41]..[39,1754+45])
                                    Pexp_ident "arg2" (typing/path.ml[39,1754+41]..[39,1754+45])
                              ]
                    <case>
                      pattern (typing/path.ml[40,1800+4]..[40,1800+46])
                        Ppat_tuple
                        [
                          pattern (typing/path.ml[40,1800+5]..[40,1800+24])
                            Ppat_or
                            pattern (typing/path.ml[40,1800+6]..[40,1800+14])
                              Ppat_construct "Pident" (typing/path.ml[40,1800+6]..[40,1800+12])
                              Some
                                []
                                pattern (typing/path.ml[40,1800+13]..[40,1800+14])
                                  Ppat_any
                            pattern (typing/path.ml[40,1800+17]..[40,1800+23])
                              Ppat_construct "Pdot" (typing/path.ml[40,1800+17]..[40,1800+21])
                              Some
                                []
                                pattern (typing/path.ml[40,1800+22]..[40,1800+23])
                                  Ppat_any
                          pattern (typing/path.ml[40,1800+26]..[40,1800+45])
                            Ppat_or
                            pattern (typing/path.ml[40,1800+27]..[40,1800+33])
                              Ppat_construct "Pdot" (typing/path.ml[40,1800+27]..[40,1800+31])
                              Some
                                []
                                pattern (typing/path.ml[40,1800+32]..[40,1800+33])
                                  Ppat_any
                            pattern (typing/path.ml[40,1800+36]..[40,1800+44])
                              Ppat_construct "Papply" (typing/path.ml[40,1800+36]..[40,1800+42])
                              Some
                                []
                                pattern (typing/path.ml[40,1800+43]..[40,1800+44])
                                  Ppat_any
                        ]
                      expression (typing/path.ml[40,1800+50]..[40,1800+52])
                        Pexp_constant PConst_int (-1,None)
                    <case>
                      pattern (typing/path.ml[41,1853+4]..[41,1853+46])
                        Ppat_tuple
                        [
                          pattern (typing/path.ml[41,1853+5]..[41,1853+24])
                            Ppat_or
                            pattern (typing/path.ml[41,1853+6]..[41,1853+12])
                              Ppat_construct "Pdot" (typing/path.ml[41,1853+6]..[41,1853+10])
                              Some
                                []
                                pattern (typing/path.ml[41,1853+11]..[41,1853+12])
                                  Ppat_any
                            pattern (typing/path.ml[41,1853+15]..[41,1853+23])
                              Ppat_construct "Papply" (typing/path.ml[41,1853+15]..[41,1853+21])
                              Some
                                []
                                pattern (typing/path.ml[41,1853+22]..[41,1853+23])
                                  Ppat_any
                          pattern (typing/path.ml[41,1853+26]..[41,1853+45])
                            Ppat_or
                            pattern (typing/path.ml[41,1853+27]..[41,1853+35])
                              Ppat_construct "Pident" (typing/path.ml[41,1853+27]..[41,1853+33])
                              Some
                                []
                                pattern (typing/path.ml[41,1853+34]..[41,1853+35])
                                  Ppat_any
                            pattern (typing/path.ml[41,1853+38]..[41,1853+44])
                              Ppat_construct "Pdot" (typing/path.ml[41,1853+38]..[41,1853+42])
                              Some
                                []
                                pattern (typing/path.ml[41,1853+43]..[41,1853+44])
                                  Ppat_any
                        ]
                      expression (typing/path.ml[41,1853+50]..[41,1853+51])
                        Pexp_constant PConst_int (1,None)
                  ]
    ]
  structure_item (typing/path.ml[43,1906+0]..[49,2130+28])
    Pstr_value Rec
    [
      <def>
        pattern (typing/path.ml[43,1906+8]..[43,1906+21])
          Ppat_var "find_free_opt" (typing/path.ml[43,1906+8]..[43,1906+21])
        expression (typing/path.ml[43,1906+22]..[49,2130+28]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (typing/path.ml[43,1906+22]..[43,1906+25])
            Ppat_var "ids" (typing/path.ml[43,1906+22]..[43,1906+25])
          expression (typing/path.ml[43,1906+28]..[49,2130+28])
            Pexp_function
            [
              <case>
                pattern (typing/path.ml[44,1943+4]..[44,1943+13])
                  Ppat_construct "Pident" (typing/path.ml[44,1943+4]..[44,1943+10])
                  Some
                    []
                    pattern (typing/path.ml[44,1943+11]..[44,1943+13])
                      Ppat_var "id" (typing/path.ml[44,1943+11]..[44,1943+13])
                expression (typing/path.ml[44,1943+17]..[44,1943+50])
                  Pexp_apply
                  expression (typing/path.ml[44,1943+17]..[44,1943+30])
                    Pexp_ident "List.find_opt" (typing/path.ml[44,1943+17]..[44,1943+30])
                  [
                    <arg>
                    Nolabel
                      expression (typing/path.ml[44,1943+31]..[44,1943+46])
                        Pexp_apply
                        expression (typing/path.ml[44,1943+32]..[44,1943+42])
                          Pexp_ident "Ident.same" (typing/path.ml[44,1943+32]..[44,1943+42])
                        [
                          <arg>
                          Nolabel
                            expression (typing/path.ml[44,1943+43]..[44,1943+45])
                              Pexp_ident "id" (typing/path.ml[44,1943+43]..[44,1943+45])
                        ]
                    <arg>
                    Nolabel
                      expression (typing/path.ml[44,1943+47]..[44,1943+50])
                        Pexp_ident "ids" (typing/path.ml[44,1943+47]..[44,1943+50])
                  ]
              <case>
                pattern (typing/path.ml[45,1994+4]..[45,1994+15])
                  Ppat_construct "Pdot" (typing/path.ml[45,1994+4]..[45,1994+8])
                  Some
                    []
                    pattern (typing/path.ml[45,1994+8]..[45,1994+15])
                      Ppat_tuple
                      [
                        pattern (typing/path.ml[45,1994+9]..[45,1994+10])
                          Ppat_var "p" (typing/path.ml[45,1994+9]..[45,1994+10])
                        pattern (typing/path.ml[45,1994+12]..[45,1994+14])
                          Ppat_var "_s" (typing/path.ml[45,1994+12]..[45,1994+14])
                      ]
                expression (typing/path.ml[45,1994+19]..[45,1994+38])
                  Pexp_apply
                  expression (typing/path.ml[45,1994+19]..[45,1994+32])
                    Pexp_ident "find_free_opt" (typing/path.ml[45,1994+19]..[45,1994+32])
                  [
                    <arg>
                    Nolabel
                      expression (typing/path.ml[45,1994+33]..[45,1994+36])
                        Pexp_ident "ids" (typing/path.ml[45,1994+33]..[45,1994+36])
                    <arg>
                    Nolabel
                      expression (typing/path.ml[45,1994+37]..[45,1994+38])
                        Pexp_ident "p" (typing/path.ml[45,1994+37]..[45,1994+38])
                  ]
              <case>
                pattern (typing/path.ml[46,2033+4]..[46,2033+18])
                  Ppat_construct "Papply" (typing/path.ml[46,2033+4]..[46,2033+10])
                  Some
                    []
                    pattern (typing/path.ml[46,2033+10]..[46,2033+18])
                      Ppat_tuple
                      [
                        pattern (typing/path.ml[46,2033+11]..[46,2033+13])
                          Ppat_var "p1" (typing/path.ml[46,2033+11]..[46,2033+13])
                        pattern (typing/path.ml[46,2033+15]..[46,2033+17])
                          Ppat_var "p2" (typing/path.ml[46,2033+15]..[46,2033+17])
                      ]
                expression (typing/path.ml[47,2055+6]..[49,2130+28])
                  Pexp_match
                  expression (typing/path.ml[47,2055+12]..[47,2055+32])
                    Pexp_apply
                    expression (typing/path.ml[47,2055+12]..[47,2055+25])
                      Pexp_ident "find_free_opt" (typing/path.ml[47,2055+12]..[47,2055+25])
                    [
                      <arg>
                      Nolabel
                        expression (typing/path.ml[47,2055+26]..[47,2055+29])
                          Pexp_ident "ids" (typing/path.ml[47,2055+26]..[47,2055+29])
                      <arg>
                      Nolabel
                        expression (typing/path.ml[47,2055+30]..[47,2055+32])
                          Pexp_ident "p1" (typing/path.ml[47,2055+30]..[47,2055+32])
                    ]
                  [
                    <case>
                      pattern (typing/path.ml[48,2093+8]..[48,2093+12])
                        Ppat_construct "None" (typing/path.ml[48,2093+8]..[48,2093+12])
                        None
                      expression (typing/path.ml[48,2093+16]..[48,2093+36])
                        Pexp_apply
                        expression (typing/path.ml[48,2093+16]..[48,2093+29])
                          Pexp_ident "find_free_opt" (typing/path.ml[48,2093+16]..[48,2093+29])
                        [
                          <arg>
                          Nolabel
                            expression (typing/path.ml[48,2093+30]..[48,2093+33])
                              Pexp_ident "ids" (typing/path.ml[48,2093+30]..[48,2093+33])
                          <arg>
                          Nolabel
                            expression (typing/path.ml[48,2093+34]..[48,2093+36])
                              Pexp_ident "p2" (typing/path.ml[48,2093+34]..[48,2093+36])
                        ]
                    <case>
                      pattern (typing/path.ml[49,2130+8]..[49,2130+21])
                        Ppat_alias "res" (typing/path.ml[49,2130+18]..[49,2130+21])
                        pattern (typing/path.ml[49,2130+8]..[49,2130+14])
                          Ppat_construct "Some" (typing/path.ml[49,2130+8]..[49,2130+12])
                          Some
                            []
                            pattern (typing/path.ml[49,2130+13]..[49,2130+14])
                              Ppat_any
                      expression (typing/path.ml[49,2130+25]..[49,2130+28])
                        Pexp_ident "res" (typing/path.ml[49,2130+25]..[49,2130+28])
                  ]
            ]
    ]
  structure_item (typing/path.ml[51,2160+0]..[54,2235+13])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/path.ml[51,2160+4]..[51,2160+15])
          Ppat_var "exists_free" (typing/path.ml[51,2160+4]..[51,2160+15])
        expression (typing/path.ml[51,2160+16]..[54,2235+13]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (typing/path.ml[51,2160+16]..[51,2160+19])
            Ppat_var "ids" (typing/path.ml[51,2160+16]..[51,2160+19])
          expression (typing/path.ml[51,2160+20]..[54,2235+13]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (typing/path.ml[51,2160+20]..[51,2160+21])
              Ppat_var "p" (typing/path.ml[51,2160+20]..[51,2160+21])
            expression (typing/path.ml[52,2184+2]..[54,2235+13])
              Pexp_match
              expression (typing/path.ml[52,2184+8]..[52,2184+27])
                Pexp_apply
                expression (typing/path.ml[52,2184+8]..[52,2184+21])
                  Pexp_ident "find_free_opt" (typing/path.ml[52,2184+8]..[52,2184+21])
                [
                  <arg>
                  Nolabel
                    expression (typing/path.ml[52,2184+22]..[52,2184+25])
                      Pexp_ident "ids" (typing/path.ml[52,2184+22]..[52,2184+25])
                  <arg>
                  Nolabel
                    expression (typing/path.ml[52,2184+26]..[52,2184+27])
                      Pexp_ident "p" (typing/path.ml[52,2184+26]..[52,2184+27])
                ]
              [
                <case>
                  pattern (typing/path.ml[53,2217+4]..[53,2217+8])
                    Ppat_construct "None" (typing/path.ml[53,2217+4]..[53,2217+8])
                    None
                  expression (typing/path.ml[53,2217+12]..[53,2217+17])
                    Pexp_construct "false" (typing/path.ml[53,2217+12]..[53,2217+17])
                    None
                <case>
                  pattern (typing/path.ml[54,2235+4]..[54,2235+5])
                    Ppat_any
                  expression (typing/path.ml[54,2235+9]..[54,2235+13])
                    Pexp_construct "true" (typing/path.ml[54,2235+9]..[54,2235+13])
                    None
              ]
    ]
  structure_item (typing/path.ml[56,2250+0]..[59,2334+51])
    Pstr_value Rec
    [
      <def>
        pattern (typing/path.ml[56,2250+8]..[56,2250+13])
          Ppat_var "scope" (typing/path.ml[56,2250+8]..[56,2250+13])
        expression (typing/path.ml[56,2250+16]..[59,2334+51])
          Pexp_function
          [
            <case>
              pattern (typing/path.ml[57,2275+4]..[57,2275+13])
                Ppat_construct "Pident" (typing/path.ml[57,2275+4]..[57,2275+10])
                Some
                  []
                  pattern (typing/path.ml[57,2275+11]..[57,2275+13])
                    Ppat_var "id" (typing/path.ml[57,2275+11]..[57,2275+13])
              expression (typing/path.ml[57,2275+17]..[57,2275+31])
                Pexp_apply
                expression (typing/path.ml[57,2275+17]..[57,2275+28])
                  Pexp_ident "Ident.scope" (typing/path.ml[57,2275+17]..[57,2275+28])
                [
                  <arg>
                  Nolabel
                    expression (typing/path.ml[57,2275+29]..[57,2275+31])
                      Pexp_ident "id" (typing/path.ml[57,2275+29]..[57,2275+31])
                ]
            <case>
              pattern (typing/path.ml[58,2307+4]..[58,2307+15])
                Ppat_construct "Pdot" (typing/path.ml[58,2307+4]..[58,2307+8])
                Some
                  []
                  pattern (typing/path.ml[58,2307+8]..[58,2307+15])
                    Ppat_tuple
                    [
                      pattern (typing/path.ml[58,2307+9]..[58,2307+10])
                        Ppat_var "p" (typing/path.ml[58,2307+9]..[58,2307+10])
                      pattern (typing/path.ml[58,2307+12]..[58,2307+14])
                        Ppat_var "_s" (typing/path.ml[58,2307+12]..[58,2307+14])
                    ]
              expression (typing/path.ml[58,2307+19]..[58,2307+26])
                Pexp_apply
                expression (typing/path.ml[58,2307+19]..[58,2307+24])
                  Pexp_ident "scope" (typing/path.ml[58,2307+19]..[58,2307+24])
                [
                  <arg>
                  Nolabel
                    expression (typing/path.ml[58,2307+25]..[58,2307+26])
                      Pexp_ident "p" (typing/path.ml[58,2307+25]..[58,2307+26])
                ]
            <case>
              pattern (typing/path.ml[59,2334+4]..[59,2334+18])
                Ppat_construct "Papply" (typing/path.ml[59,2334+4]..[59,2334+10])
                Some
                  []
                  pattern (typing/path.ml[59,2334+10]..[59,2334+18])
                    Ppat_tuple
                    [
                      pattern (typing/path.ml[59,2334+11]..[59,2334+13])
                        Ppat_var "p1" (typing/path.ml[59,2334+11]..[59,2334+13])
                      pattern (typing/path.ml[59,2334+15]..[59,2334+17])
                        Ppat_var "p2" (typing/path.ml[59,2334+15]..[59,2334+17])
                    ]
              expression (typing/path.ml[59,2334+22]..[59,2334+51])
                Pexp_apply
                expression (typing/path.ml[59,2334+22]..[59,2334+29])
                  Pexp_ident "Int.max" (typing/path.ml[59,2334+22]..[59,2334+29])
                [
                  <arg>
                  Nolabel
                    expression (typing/path.ml[59,2334+30]..[59,2334+40])
                      Pexp_apply
                      expression (typing/path.ml[59,2334+31]..[59,2334+36])
                        Pexp_ident "scope" (typing/path.ml[59,2334+31]..[59,2334+36])
                      [
                        <arg>
                        Nolabel
                          expression (typing/path.ml[59,2334+37]..[59,2334+39])
                            Pexp_ident "p1" (typing/path.ml[59,2334+37]..[59,2334+39])
                      ]
                  <arg>
                  Nolabel
                    expression (typing/path.ml[59,2334+41]..[59,2334+51])
                      Pexp_apply
                      expression (typing/path.ml[59,2334+42]..[59,2334+47])
                        Pexp_ident "scope" (typing/path.ml[59,2334+42]..[59,2334+47])
                      [
                        <arg>
                        Nolabel
                          expression (typing/path.ml[59,2334+48]..[59,2334+50])
                            Pexp_ident "p2" (typing/path.ml[59,2334+48]..[59,2334+50])
                      ]
                ]
          ]
    ]
  structure_item (typing/path.ml[61,2387+0]..[61,2387+20])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/path.ml[61,2387+4]..[61,2387+10])
          Ppat_var "kfalse" (typing/path.ml[61,2387+4]..[61,2387+10])
        expression (typing/path.ml[61,2387+11]..[61,2387+20]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (typing/path.ml[61,2387+11]..[61,2387+12])
            Ppat_any
          expression (typing/path.ml[61,2387+15]..[61,2387+20])
            Pexp_construct "false" (typing/path.ml[61,2387+15]..[61,2387+20])
            None
    ]
  structure_item (typing/path.ml[63,2409+0]..[67,2566+65])
    Pstr_value Rec
    [
      <def>
        pattern (typing/path.ml[63,2409+8]..[63,2409+12])
          Ppat_var "name" (typing/path.ml[63,2409+8]..[63,2409+12])
        expression (typing/path.ml[63,2409+13]..[67,2566+65]) ghost
          Pexp_fun
          Optional "paren"
          Some
            expression (typing/path.ml[63,2409+21]..[63,2409+27])
              Pexp_ident "kfalse" (typing/path.ml[63,2409+21]..[63,2409+27])
          pattern (typing/path.ml[63,2409+15]..[63,2409+20])
            Ppat_var "paren" (typing/path.ml[63,2409+15]..[63,2409+20])
          expression (typing/path.ml[63,2409+31]..[67,2566+65])
            Pexp_function
            [
              <case>
                pattern (typing/path.ml[64,2449+4]..[64,2449+13])
                  Ppat_construct "Pident" (typing/path.ml[64,2449+4]..[64,2449+10])
                  Some
                    []
                    pattern (typing/path.ml[64,2449+11]..[64,2449+13])
                      Ppat_var "id" (typing/path.ml[64,2449+11]..[64,2449+13])
                expression (typing/path.ml[64,2449+17]..[64,2449+30])
                  Pexp_apply
                  expression (typing/path.ml[64,2449+17]..[64,2449+27])
                    Pexp_ident "Ident.name" (typing/path.ml[64,2449+17]..[64,2449+27])
                  [
                    <arg>
                    Nolabel
                      expression (typing/path.ml[64,2449+28]..[64,2449+30])
                        Pexp_ident "id" (typing/path.ml[64,2449+28]..[64,2449+30])
                  ]
              <case>
                pattern (typing/path.ml[65,2480+4]..[65,2480+14])
                  Ppat_construct "Pdot" (typing/path.ml[65,2480+4]..[65,2480+8])
                  Some
                    []
                    pattern (typing/path.ml[65,2480+8]..[65,2480+14])
                      Ppat_tuple
                      [
                        pattern (typing/path.ml[65,2480+9]..[65,2480+10])
                          Ppat_var "p" (typing/path.ml[65,2480+9]..[65,2480+10])
                        pattern (typing/path.ml[65,2480+12]..[65,2480+13])
                          Ppat_var "s" (typing/path.ml[65,2480+12]..[65,2480+13])
                      ]
                expression (typing/path.ml[66,2498+6]..[66,2498+67])
                  Pexp_apply
                  expression (typing/path.ml[66,2498+20]..[66,2498+21])
                    Pexp_ident "^" (typing/path.ml[66,2498+20]..[66,2498+21])
                  [
                    <arg>
                    Nolabel
                      expression (typing/path.ml[66,2498+6]..[66,2498+19])
                        Pexp_apply
                        expression (typing/path.ml[66,2498+6]..[66,2498+10])
                          Pexp_ident "name" (typing/path.ml[66,2498+6]..[66,2498+10])
                        [
                          <arg>
                          Labelled "paren"
                            expression (typing/path.ml[66,2498+12]..[66,2498+17])
                              Pexp_ident "paren" (typing/path.ml[66,2498+12]..[66,2498+17])
                          <arg>
                          Nolabel
                            expression (typing/path.ml[66,2498+18]..[66,2498+19])
                              Pexp_ident "p" (typing/path.ml[66,2498+18]..[66,2498+19])
                        ]
                    <arg>
                    Nolabel
                      expression (typing/path.ml[66,2498+22]..[66,2498+67])
                        Pexp_ifthenelse
                        expression (typing/path.ml[66,2498+25]..[66,2498+32])
                          Pexp_apply
                          expression (typing/path.ml[66,2498+25]..[66,2498+30])
                            Pexp_ident "paren" (typing/path.ml[66,2498+25]..[66,2498+30])
                          [
                            <arg>
                            Nolabel
                              expression (typing/path.ml[66,2498+31]..[66,2498+32])
                                Pexp_ident "s" (typing/path.ml[66,2498+31]..[66,2498+32])
                          ]
                        expression (typing/path.ml[66,2498+38]..[66,2498+54])
                          Pexp_apply
                          expression (typing/path.ml[66,2498+44]..[66,2498+45])
                            Pexp_ident "^" (typing/path.ml[66,2498+44]..[66,2498+45])
                          [
                            <arg>
                            Nolabel
                              expression (typing/path.ml[66,2498+38]..[66,2498+43])
                                Pexp_constant PConst_string(".( ",(typing/path.ml[66,2498+39]..[66,2498+42]),None)
                            <arg>
                            Nolabel
                              expression (typing/path.ml[66,2498+46]..[66,2498+54])
                                Pexp_apply
                                expression (typing/path.ml[66,2498+48]..[66,2498+49])
                                  Pexp_ident "^" (typing/path.ml[66,2498+48]..[66,2498+49])
                                [
                                  <arg>
                                  Nolabel
                                    expression (typing/path.ml[66,2498+46]..[66,2498+47])
                                      Pexp_ident "s" (typing/path.ml[66,2498+46]..[66,2498+47])
                                  <arg>
                                  Nolabel
                                    expression (typing/path.ml[66,2498+50]..[66,2498+54])
                                      Pexp_constant PConst_string(" )",(typing/path.ml[66,2498+51]..[66,2498+53]),None)
                                ]
                          ]
                        Some
                          expression (typing/path.ml[66,2498+60]..[66,2498+67])
                            Pexp_apply
                            expression (typing/path.ml[66,2498+64]..[66,2498+65])
                              Pexp_ident "^" (typing/path.ml[66,2498+64]..[66,2498+65])
                            [
                              <arg>
                              Nolabel
                                expression (typing/path.ml[66,2498+60]..[66,2498+63])
                                  Pexp_constant PConst_string(".",(typing/path.ml[66,2498+61]..[66,2498+62]),None)
                              <arg>
                              Nolabel
                                expression (typing/path.ml[66,2498+66]..[66,2498+67])
                                  Pexp_ident "s" (typing/path.ml[66,2498+66]..[66,2498+67])
                            ]
                  ]
              <case>
                pattern (typing/path.ml[67,2566+4]..[67,2566+18])
                  Ppat_construct "Papply" (typing/path.ml[67,2566+4]..[67,2566+10])
                  Some
                    []
                    pattern (typing/path.ml[67,2566+10]..[67,2566+18])
                      Ppat_tuple
                      [
                        pattern (typing/path.ml[67,2566+11]..[67,2566+13])
                          Ppat_var "p1" (typing/path.ml[67,2566+11]..[67,2566+13])
                        pattern (typing/path.ml[67,2566+15]..[67,2566+17])
                          Ppat_var "p2" (typing/path.ml[67,2566+15]..[67,2566+17])
                      ]
                expression (typing/path.ml[67,2566+22]..[67,2566+65])
                  Pexp_apply
                  expression (typing/path.ml[67,2566+37]..[67,2566+38])
                    Pexp_ident "^" (typing/path.ml[67,2566+37]..[67,2566+38])
                  [
                    <arg>
                    Nolabel
                      expression (typing/path.ml[67,2566+22]..[67,2566+36])
                        Pexp_apply
                        expression (typing/path.ml[67,2566+22]..[67,2566+26])
                          Pexp_ident "name" (typing/path.ml[67,2566+22]..[67,2566+26])
                        [
                          <arg>
                          Labelled "paren"
                            expression (typing/path.ml[67,2566+28]..[67,2566+33])
                              Pexp_ident "paren" (typing/path.ml[67,2566+28]..[67,2566+33])
                          <arg>
                          Nolabel
                            expression (typing/path.ml[67,2566+34]..[67,2566+36])
                              Pexp_ident "p1" (typing/path.ml[67,2566+34]..[67,2566+36])
                        ]
                    <arg>
                    Nolabel
                      expression (typing/path.ml[67,2566+39]..[67,2566+65])
                        Pexp_apply
                        expression (typing/path.ml[67,2566+43]..[67,2566+44])
                          Pexp_ident "^" (typing/path.ml[67,2566+43]..[67,2566+44])
                        [
                          <arg>
                          Nolabel
                            expression (typing/path.ml[67,2566+39]..[67,2566+42])
                              Pexp_constant PConst_string("(",(typing/path.ml[67,2566+40]..[67,2566+41]),None)
                          <arg>
                          Nolabel
                            expression (typing/path.ml[67,2566+45]..[67,2566+65])
                              Pexp_apply
                              expression (typing/path.ml[67,2566+60]..[67,2566+61])
                                Pexp_ident "^" (typing/path.ml[67,2566+60]..[67,2566+61])
                              [
                                <arg>
                                Nolabel
                                  expression (typing/path.ml[67,2566+45]..[67,2566+59])
                                    Pexp_apply
                                    expression (typing/path.ml[67,2566+45]..[67,2566+49])
                                      Pexp_ident "name" (typing/path.ml[67,2566+45]..[67,2566+49])
                                    [
                                      <arg>
                                      Labelled "paren"
                                        expression (typing/path.ml[67,2566+51]..[67,2566+56])
                                          Pexp_ident "paren" (typing/path.ml[67,2566+51]..[67,2566+56])
                                      <arg>
                                      Nolabel
                                        expression (typing/path.ml[67,2566+57]..[67,2566+59])
                                          Pexp_ident "p2" (typing/path.ml[67,2566+57]..[67,2566+59])
                                    ]
                                <arg>
                                Nolabel
                                  expression (typing/path.ml[67,2566+62]..[67,2566+65])
                                    Pexp_constant PConst_string(")",(typing/path.ml[67,2566+63]..[67,2566+64]),None)
                              ]
                        ]
                  ]
            ]
    ]
  structure_item (typing/path.ml[69,2633+0]..[72,2764+67])
    Pstr_value Rec
    [
      <def>
        pattern (typing/path.ml[69,2633+8]..[69,2633+13])
          Ppat_var "print" (typing/path.ml[69,2633+8]..[69,2633+13])
        expression (typing/path.ml[69,2633+14]..[72,2764+67]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (typing/path.ml[69,2633+14]..[69,2633+17])
            Ppat_var "ppf" (typing/path.ml[69,2633+14]..[69,2633+17])
          expression (typing/path.ml[69,2633+20]..[72,2764+67])
            Pexp_function
            [
              <case>
                pattern (typing/path.ml[70,2662+4]..[70,2662+13])
                  Ppat_construct "Pident" (typing/path.ml[70,2662+4]..[70,2662+10])
                  Some
                    []
                    pattern (typing/path.ml[70,2662+11]..[70,2662+13])
                      Ppat_var "id" (typing/path.ml[70,2662+11]..[70,2662+13])
                expression (typing/path.ml[70,2662+17]..[70,2662+46])
                  Pexp_apply
                  expression (typing/path.ml[70,2662+17]..[70,2662+39])
                    Pexp_ident "Ident.print_with_scope" (typing/path.ml[70,2662+17]..[70,2662+39])
                  [
                    <arg>
                    Nolabel
                      expression (typing/path.ml[70,2662+40]..[70,2662+43])
                        Pexp_ident "ppf" (typing/path.ml[70,2662+40]..[70,2662+43])
                    <arg>
                    Nolabel
                      expression (typing/path.ml[70,2662+44]..[70,2662+46])
                        Pexp_ident "id" (typing/path.ml[70,2662+44]..[70,2662+46])
                  ]
              <case>
                pattern (typing/path.ml[71,2709+4]..[71,2709+14])
                  Ppat_construct "Pdot" (typing/path.ml[71,2709+4]..[71,2709+8])
                  Some
                    []
                    pattern (typing/path.ml[71,2709+8]..[71,2709+14])
                      Ppat_tuple
                      [
                        pattern (typing/path.ml[71,2709+9]..[71,2709+10])
                          Ppat_var "p" (typing/path.ml[71,2709+9]..[71,2709+10])
                        pattern (typing/path.ml[71,2709+12]..[71,2709+13])
                          Ppat_var "s" (typing/path.ml[71,2709+12]..[71,2709+13])
                      ]
                expression (typing/path.ml[71,2709+18]..[71,2709+54])
                  Pexp_apply
                  expression (typing/path.ml[71,2709+18]..[71,2709+32])
                    Pexp_ident "Format.fprintf" (typing/path.ml[71,2709+18]..[71,2709+32])
                  [
                    <arg>
                    Nolabel
                      expression (typing/path.ml[71,2709+33]..[71,2709+36])
                        Pexp_ident "ppf" (typing/path.ml[71,2709+33]..[71,2709+36])
                    <arg>
                    Nolabel
                      expression (typing/path.ml[71,2709+37]..[71,2709+44])
                        Pexp_constant PConst_string("%a.%s",(typing/path.ml[71,2709+38]..[71,2709+43]),None)
                    <arg>
                    Nolabel
                      expression (typing/path.ml[71,2709+45]..[71,2709+50])
                        Pexp_ident "print" (typing/path.ml[71,2709+45]..[71,2709+50])
                    <arg>
                    Nolabel
                      expression (typing/path.ml[71,2709+51]..[71,2709+52])
                        Pexp_ident "p" (typing/path.ml[71,2709+51]..[71,2709+52])
                    <arg>
                    Nolabel
                      expression (typing/path.ml[71,2709+53]..[71,2709+54])
                        Pexp_ident "s" (typing/path.ml[71,2709+53]..[71,2709+54])
                  ]
              <case>
                pattern (typing/path.ml[72,2764+4]..[72,2764+18])
                  Ppat_construct "Papply" (typing/path.ml[72,2764+4]..[72,2764+10])
                  Some
                    []
                    pattern (typing/path.ml[72,2764+10]..[72,2764+18])
                      Ppat_tuple
                      [
                        pattern (typing/path.ml[72,2764+11]..[72,2764+13])
                          Ppat_var "p1" (typing/path.ml[72,2764+11]..[72,2764+13])
                        pattern (typing/path.ml[72,2764+15]..[72,2764+17])
                          Ppat_var "p2" (typing/path.ml[72,2764+15]..[72,2764+17])
                      ]
                expression (typing/path.ml[72,2764+22]..[72,2764+67])
                  Pexp_apply
                  expression (typing/path.ml[72,2764+22]..[72,2764+36])
                    Pexp_ident "Format.fprintf" (typing/path.ml[72,2764+22]..[72,2764+36])
                  [
                    <arg>
                    Nolabel
                      expression (typing/path.ml[72,2764+37]..[72,2764+40])
                        Pexp_ident "ppf" (typing/path.ml[72,2764+37]..[72,2764+40])
                    <arg>
                    Nolabel
                      expression (typing/path.ml[72,2764+41]..[72,2764+49])
                        Pexp_constant PConst_string("%a(%a)",(typing/path.ml[72,2764+42]..[72,2764+48]),None)
                    <arg>
                    Nolabel
                      expression (typing/path.ml[72,2764+50]..[72,2764+55])
                        Pexp_ident "print" (typing/path.ml[72,2764+50]..[72,2764+55])
                    <arg>
                    Nolabel
                      expression (typing/path.ml[72,2764+56]..[72,2764+58])
                        Pexp_ident "p1" (typing/path.ml[72,2764+56]..[72,2764+58])
                    <arg>
                    Nolabel
                      expression (typing/path.ml[72,2764+59]..[72,2764+64])
                        Pexp_ident "print" (typing/path.ml[72,2764+59]..[72,2764+64])
                    <arg>
                    Nolabel
                      expression (typing/path.ml[72,2764+65]..[72,2764+67])
                        Pexp_ident "p2" (typing/path.ml[72,2764+65]..[72,2764+67])
                  ]
            ]
    ]
  structure_item (typing/path.ml[74,2833+0]..[77,2903+28])
    Pstr_value Rec
    [
      <def>
        pattern (typing/path.ml[74,2833+8]..[74,2833+12])
          Ppat_var "head" (typing/path.ml[74,2833+8]..[74,2833+12])
        expression (typing/path.ml[74,2833+15]..[77,2903+28])
          Pexp_function
          [
            <case>
              pattern (typing/path.ml[75,2857+4]..[75,2857+13])
                Ppat_construct "Pident" (typing/path.ml[75,2857+4]..[75,2857+10])
                Some
                  []
                  pattern (typing/path.ml[75,2857+11]..[75,2857+13])
                    Ppat_var "id" (typing/path.ml[75,2857+11]..[75,2857+13])
              expression (typing/path.ml[75,2857+17]..[75,2857+19])
                Pexp_ident "id" (typing/path.ml[75,2857+17]..[75,2857+19])
            <case>
              pattern (typing/path.ml[76,2877+4]..[76,2877+15])
                Ppat_construct "Pdot" (typing/path.ml[76,2877+4]..[76,2877+8])
                Some
                  []
                  pattern (typing/path.ml[76,2877+8]..[76,2877+15])
                    Ppat_tuple
                    [
                      pattern (typing/path.ml[76,2877+9]..[76,2877+10])
                        Ppat_var "p" (typing/path.ml[76,2877+9]..[76,2877+10])
                      pattern (typing/path.ml[76,2877+12]..[76,2877+14])
                        Ppat_var "_s" (typing/path.ml[76,2877+12]..[76,2877+14])
                    ]
              expression (typing/path.ml[76,2877+19]..[76,2877+25])
                Pexp_apply
                expression (typing/path.ml[76,2877+19]..[76,2877+23])
                  Pexp_ident "head" (typing/path.ml[76,2877+19]..[76,2877+23])
                [
                  <arg>
                  Nolabel
                    expression (typing/path.ml[76,2877+24]..[76,2877+25])
                      Pexp_ident "p" (typing/path.ml[76,2877+24]..[76,2877+25])
                ]
            <case>
              pattern (typing/path.ml[77,2903+4]..[77,2903+12])
                Ppat_construct "Papply" (typing/path.ml[77,2903+4]..[77,2903+10])
                Some
                  []
                  pattern (typing/path.ml[77,2903+11]..[77,2903+12])
                    Ppat_any
              expression (typing/path.ml[77,2903+16]..[77,2903+28])
                Pexp_assert
                expression (typing/path.ml[77,2903+23]..[77,2903+28])
                  Pexp_construct "false" (typing/path.ml[77,2903+23]..[77,2903+28])
                  None
          ]
    ]
  structure_item (typing/path.ml[79,2933+0]..[85,3094+23])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/path.ml[79,2933+4]..[79,2933+11])
          Ppat_var "flatten" (typing/path.ml[79,2933+4]..[79,2933+11])
        expression (typing/path.ml[80,2947+2]..[85,3094+23])
          Pexp_let Rec
          [
            <def>
              pattern (typing/path.ml[80,2947+10]..[80,2947+17])
                Ppat_var "flatten" (typing/path.ml[80,2947+10]..[80,2947+17])
              expression (typing/path.ml[80,2947+18]..[83,3055+33]) ghost
                Pexp_fun
                Nolabel
                None
                pattern (typing/path.ml[80,2947+18]..[80,2947+21])
                  Ppat_var "acc" (typing/path.ml[80,2947+18]..[80,2947+21])
                expression (typing/path.ml[80,2947+24]..[83,3055+33])
                  Pexp_function
                  [
                    <case>
                      pattern (typing/path.ml[81,2980+6]..[81,2980+15])
                        Ppat_construct "Pident" (typing/path.ml[81,2980+6]..[81,2980+12])
                        Some
                          []
                          pattern (typing/path.ml[81,2980+13]..[81,2980+15])
                            Ppat_var "id" (typing/path.ml[81,2980+13]..[81,2980+15])
                      expression (typing/path.ml[81,2980+19]..[81,2980+32])
                        Pexp_variant "Ok"
                        Some
                          expression (typing/path.ml[81,2980+23]..[81,2980+32])
                            Pexp_tuple
                            [
                              expression (typing/path.ml[81,2980+24]..[81,2980+26])
                                Pexp_ident "id" (typing/path.ml[81,2980+24]..[81,2980+26])
                              expression (typing/path.ml[81,2980+28]..[81,2980+31])
                                Pexp_ident "acc" (typing/path.ml[81,2980+28]..[81,2980+31])
                            ]
                    <case>
                      pattern (typing/path.ml[82,3013+6]..[82,3013+17])
                        Ppat_construct "Pdot" (typing/path.ml[82,3013+6]..[82,3013+10])
                        Some
                          []
                          pattern (typing/path.ml[82,3013+11]..[82,3013+17])
                            Ppat_tuple
                            [
                              pattern (typing/path.ml[82,3013+12]..[82,3013+13])
                                Ppat_var "p" (typing/path.ml[82,3013+12]..[82,3013+13])
                              pattern (typing/path.ml[82,3013+15]..[82,3013+16])
                                Ppat_var "s" (typing/path.ml[82,3013+15]..[82,3013+16])
                            ]
                      expression (typing/path.ml[82,3013+21]..[82,3013+41])
                        Pexp_apply
                        expression (typing/path.ml[82,3013+21]..[82,3013+28])
                          Pexp_ident "flatten" (typing/path.ml[82,3013+21]..[82,3013+28])
                        [
                          <arg>
                          Nolabel
                            expression (typing/path.ml[82,3013+29]..[82,3013+39])
                              Pexp_construct "::" (typing/path.ml[82,3013+32]..[82,3013+34])
                              Some
                                expression (typing/path.ml[82,3013+30]..[82,3013+38]) ghost
                                  Pexp_tuple
                                  [
                                    expression (typing/path.ml[82,3013+30]..[82,3013+31])
                                      Pexp_ident "s" (typing/path.ml[82,3013+30]..[82,3013+31])
                                    expression (typing/path.ml[82,3013+35]..[82,3013+38])
                                      Pexp_ident "acc" (typing/path.ml[82,3013+35]..[82,3013+38])
                                  ]
                          <arg>
                          Nolabel
                            expression (typing/path.ml[82,3013+40]..[82,3013+41])
                              Pexp_ident "p" (typing/path.ml[82,3013+40]..[82,3013+41])
                        ]
                    <case>
                      pattern (typing/path.ml[83,3055+6]..[83,3055+14])
                        Ppat_construct "Papply" (typing/path.ml[83,3055+6]..[83,3055+12])
                        Some
                          []
                          pattern (typing/path.ml[83,3055+13]..[83,3055+14])
                            Ppat_any
                      expression (typing/path.ml[83,3055+18]..[83,3055+33])
                        Pexp_variant "Contains_apply"
                        None
                  ]
          ]
          expression (typing/path.ml[85,3094+2]..[85,3094+23])
            Pexp_fun
            Nolabel
            None
            pattern (typing/path.ml[85,3094+6]..[85,3094+7])
              Ppat_var "t" (typing/path.ml[85,3094+6]..[85,3094+7])
            expression (typing/path.ml[85,3094+11]..[85,3094+23])
              Pexp_apply
              expression (typing/path.ml[85,3094+11]..[85,3094+18])
                Pexp_ident "flatten" (typing/path.ml[85,3094+11]..[85,3094+18])
              [
                <arg>
                Nolabel
                  expression (typing/path.ml[85,3094+19]..[85,3094+21])
                    Pexp_construct "[]" (typing/path.ml[85,3094+19]..[85,3094+21])
                    None
                <arg>
                Nolabel
                  expression (typing/path.ml[85,3094+22]..[85,3094+23])
                    Pexp_ident "t" (typing/path.ml[85,3094+22]..[85,3094+23])
              ]
    ]
  structure_item (typing/path.ml[87,3119+0]..[93,3289+15])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/path.ml[87,3119+4]..[87,3119+9])
          Ppat_var "heads" (typing/path.ml[87,3119+4]..[87,3119+9])
        expression (typing/path.ml[87,3119+10]..[93,3289+15]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (typing/path.ml[87,3119+10]..[87,3119+11])
            Ppat_var "p" (typing/path.ml[87,3119+10]..[87,3119+11])
          expression (typing/path.ml[88,3133+2]..[93,3289+15])
            Pexp_let Rec
            [
              <def>
                pattern (typing/path.ml[88,3133+10]..[88,3133+15])
                  Ppat_var "heads" (typing/path.ml[88,3133+10]..[88,3133+15])
                expression (typing/path.ml[88,3133+16]..[92,3257+31]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (typing/path.ml[88,3133+16]..[88,3133+17])
                    Ppat_var "p" (typing/path.ml[88,3133+16]..[88,3133+17])
                  expression (typing/path.ml[88,3133+18]..[92,3257+31]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (typing/path.ml[88,3133+18]..[88,3133+21])
                      Ppat_var "acc" (typing/path.ml[88,3133+18]..[88,3133+21])
                    expression (typing/path.ml[88,3133+24]..[92,3257+31])
                      Pexp_match
                      expression (typing/path.ml[88,3133+30]..[88,3133+31])
                        Pexp_ident "p" (typing/path.ml[88,3133+30]..[88,3133+31])
                      [
                        <case>
                          pattern (typing/path.ml[89,3170+6]..[89,3170+15])
                            Ppat_construct "Pident" (typing/path.ml[89,3170+6]..[89,3170+12])
                            Some
                              []
                              pattern (typing/path.ml[89,3170+13]..[89,3170+15])
                                Ppat_var "id" (typing/path.ml[89,3170+13]..[89,3170+15])
                          expression (typing/path.ml[89,3170+19]..[89,3170+28])
                            Pexp_construct "::" (typing/path.ml[89,3170+22]..[89,3170+24])
                            Some
                              expression (typing/path.ml[89,3170+19]..[89,3170+28]) ghost
                                Pexp_tuple
                                [
                                  expression (typing/path.ml[89,3170+19]..[89,3170+21])
                                    Pexp_ident "id" (typing/path.ml[89,3170+19]..[89,3170+21])
                                  expression (typing/path.ml[89,3170+25]..[89,3170+28])
                                    Pexp_ident "acc" (typing/path.ml[89,3170+25]..[89,3170+28])
                                ]
                        <case>
                          pattern (typing/path.ml[90,3199+6]..[90,3199+18])
                            Ppat_construct "Pdot" (typing/path.ml[90,3199+6]..[90,3199+10])
                            Some
                              []
                              pattern (typing/path.ml[90,3199+11]..[90,3199+18])
                                Ppat_tuple
                                [
                                  pattern (typing/path.ml[90,3199+12]..[90,3199+13])
                                    Ppat_var "p" (typing/path.ml[90,3199+12]..[90,3199+13])
                                  pattern (typing/path.ml[90,3199+15]..[90,3199+17])
                                    Ppat_var "_s" (typing/path.ml[90,3199+15]..[90,3199+17])
                                ]
                          expression (typing/path.ml[90,3199+22]..[90,3199+33])
                            Pexp_apply
                            expression (typing/path.ml[90,3199+22]..[90,3199+27])
                              Pexp_ident "heads" (typing/path.ml[90,3199+22]..[90,3199+27])
                            [
                              <arg>
                              Nolabel
                                expression (typing/path.ml[90,3199+28]..[90,3199+29])
                                  Pexp_ident "p" (typing/path.ml[90,3199+28]..[90,3199+29])
                              <arg>
                              Nolabel
                                expression (typing/path.ml[90,3199+30]..[90,3199+33])
                                  Pexp_ident "acc" (typing/path.ml[90,3199+30]..[90,3199+33])
                            ]
                        <case>
                          pattern (typing/path.ml[91,3233+6]..[91,3233+20])
                            Ppat_construct "Papply" (typing/path.ml[91,3233+6]..[91,3233+12])
                            Some
                              []
                              pattern (typing/path.ml[91,3233+12]..[91,3233+20])
                                Ppat_tuple
                                [
                                  pattern (typing/path.ml[91,3233+13]..[91,3233+15])
                                    Ppat_var "p1" (typing/path.ml[91,3233+13]..[91,3233+15])
                                  pattern (typing/path.ml[91,3233+17]..[91,3233+19])
                                    Ppat_var "p2" (typing/path.ml[91,3233+17]..[91,3233+19])
                                ]
                          expression (typing/path.ml[92,3257+8]..[92,3257+31])
                            Pexp_apply
                            expression (typing/path.ml[92,3257+8]..[92,3257+13])
                              Pexp_ident "heads" (typing/path.ml[92,3257+8]..[92,3257+13])
                            [
                              <arg>
                              Nolabel
                                expression (typing/path.ml[92,3257+14]..[92,3257+16])
                                  Pexp_ident "p1" (typing/path.ml[92,3257+14]..[92,3257+16])
                              <arg>
                              Nolabel
                                expression (typing/path.ml[92,3257+17]..[92,3257+31])
                                  Pexp_apply
                                  expression (typing/path.ml[92,3257+18]..[92,3257+23])
                                    Pexp_ident "heads" (typing/path.ml[92,3257+18]..[92,3257+23])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (typing/path.ml[92,3257+24]..[92,3257+26])
                                        Pexp_ident "p2" (typing/path.ml[92,3257+24]..[92,3257+26])
                                    <arg>
                                    Nolabel
                                      expression (typing/path.ml[92,3257+27]..[92,3257+30])
                                        Pexp_ident "acc" (typing/path.ml[92,3257+27]..[92,3257+30])
                                  ]
                            ]
                      ]
            ]
            expression (typing/path.ml[93,3289+5]..[93,3289+15])
              Pexp_apply
              expression (typing/path.ml[93,3289+5]..[93,3289+10])
                Pexp_ident "heads" (typing/path.ml[93,3289+5]..[93,3289+10])
              [
                <arg>
                Nolabel
                  expression (typing/path.ml[93,3289+11]..[93,3289+12])
                    Pexp_ident "p" (typing/path.ml[93,3289+11]..[93,3289+12])
                <arg>
                Nolabel
                  expression (typing/path.ml[93,3289+13]..[93,3289+15])
                    Pexp_construct "[]" (typing/path.ml[93,3289+13]..[93,3289+15])
                    None
              ]
    ]
  structure_item (typing/path.ml[95,3306+0]..[98,3381+26])
    Pstr_value Rec
    [
      <def>
        pattern (typing/path.ml[95,3306+8]..[95,3306+12])
          Ppat_var "last" (typing/path.ml[95,3306+8]..[95,3306+12])
        expression (typing/path.ml[95,3306+15]..[98,3381+26])
          Pexp_function
          [
            <case>
              pattern (typing/path.ml[96,3330+4]..[96,3330+13])
                Ppat_construct "Pident" (typing/path.ml[96,3330+4]..[96,3330+10])
                Some
                  []
                  pattern (typing/path.ml[96,3330+11]..[96,3330+13])
                    Ppat_var "id" (typing/path.ml[96,3330+11]..[96,3330+13])
              expression (typing/path.ml[96,3330+17]..[96,3330+30])
                Pexp_apply
                expression (typing/path.ml[96,3330+17]..[96,3330+27])
                  Pexp_ident "Ident.name" (typing/path.ml[96,3330+17]..[96,3330+27])
                [
                  <arg>
                  Nolabel
                    expression (typing/path.ml[96,3330+28]..[96,3330+30])
                      Pexp_ident "id" (typing/path.ml[96,3330+28]..[96,3330+30])
                ]
            <case>
              pattern (typing/path.ml[97,3361+4]..[97,3361+14])
                Ppat_construct "Pdot" (typing/path.ml[97,3361+4]..[97,3361+8])
                Some
                  []
                  pattern (typing/path.ml[97,3361+8]..[97,3361+14])
                    Ppat_tuple
                    [
                      pattern (typing/path.ml[97,3361+9]..[97,3361+10])
                        Ppat_any
                      pattern (typing/path.ml[97,3361+12]..[97,3361+13])
                        Ppat_var "s" (typing/path.ml[97,3361+12]..[97,3361+13])
                    ]
              expression (typing/path.ml[97,3361+18]..[97,3361+19])
                Pexp_ident "s" (typing/path.ml[97,3361+18]..[97,3361+19])
            <case>
              pattern (typing/path.ml[98,3381+4]..[98,3381+16])
                Ppat_construct "Papply" (typing/path.ml[98,3381+4]..[98,3381+10])
                Some
                  []
                  pattern (typing/path.ml[98,3381+10]..[98,3381+16])
                    Ppat_tuple
                    [
                      pattern (typing/path.ml[98,3381+11]..[98,3381+12])
                        Ppat_any
                      pattern (typing/path.ml[98,3381+14]..[98,3381+15])
                        Ppat_var "p" (typing/path.ml[98,3381+14]..[98,3381+15])
                    ]
              expression (typing/path.ml[98,3381+20]..[98,3381+26])
                Pexp_apply
                expression (typing/path.ml[98,3381+20]..[98,3381+24])
                  Pexp_ident "last" (typing/path.ml[98,3381+20]..[98,3381+24])
                [
                  <arg>
                  Nolabel
                    expression (typing/path.ml[98,3381+25]..[98,3381+26])
                      Pexp_ident "p" (typing/path.ml[98,3381+25]..[98,3381+26])
                ]
          ]
    ]
  structure_item (typing/path.ml[100,3409+0]..[104,3487+14])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/path.ml[100,3409+4]..[100,3409+13])
          Ppat_var "is_uident" (typing/path.ml[100,3409+4]..[100,3409+13])
        expression (typing/path.ml[100,3409+14]..[104,3487+14]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (typing/path.ml[100,3409+14]..[100,3409+15])
            Ppat_var "s" (typing/path.ml[100,3409+14]..[100,3409+15])
          expression (typing/path.ml[101,3427+2]..[104,3487+14])
            Pexp_sequence
            expression (typing/path.ml[101,3427+2]..[101,3427+18])
              Pexp_assert
              expression (typing/path.ml[101,3427+9]..[101,3427+18])
                Pexp_apply
                expression (typing/path.ml[101,3427+12]..[101,3427+14])
                  Pexp_ident "<>" (typing/path.ml[101,3427+12]..[101,3427+14])
                [
                  <arg>
                  Nolabel
                    expression (typing/path.ml[101,3427+10]..[101,3427+11])
                      Pexp_ident "s" (typing/path.ml[101,3427+10]..[101,3427+11])
                  <arg>
                  Nolabel
                    expression (typing/path.ml[101,3427+15]..[101,3427+17])
                      Pexp_constant PConst_string("",(typing/path.ml[101,3427+16]..[101,3427+16]),None)
                ]
            expression (typing/path.ml[102,3447+2]..[104,3487+14])
              Pexp_match
              expression (typing/path.ml[102,3447+8]..[102,3447+13])
                Pexp_apply
                expression (typing/path.ml[102,3447+8]..[102,3447+13]) ghost
                  Pexp_ident "String.get" (typing/path.ml[102,3447+8]..[102,3447+13]) ghost
                [
                  <arg>
                  Nolabel
                    expression (typing/path.ml[102,3447+8]..[102,3447+9])
                      Pexp_ident "s" (typing/path.ml[102,3447+8]..[102,3447+9])
                  <arg>
                  Nolabel
                    expression (typing/path.ml[102,3447+11]..[102,3447+12])
                      Pexp_constant PConst_int (0,None)
                ]
              [
                <case>
                  pattern (typing/path.ml[103,3466+4]..[103,3466+12])
                    Ppat_interval PConst_char 41..PConst_char 5a
                  expression (typing/path.ml[103,3466+16]..[103,3466+20])
                    Pexp_construct "true" (typing/path.ml[103,3466+16]..[103,3466+20])
                    None
                <case>
                  pattern (typing/path.ml[104,3487+4]..[104,3487+5])
                    Ppat_any
                  expression (typing/path.ml[104,3487+9]..[104,3487+14])
                    Pexp_construct "false" (typing/path.ml[104,3487+9]..[104,3487+14])
                    None
              ]
    ]
  structure_item (typing/path.ml[106,3503+0]..[110,3580+22])
    Pstr_type Rec
    [
      type_declaration "typath" (typing/path.ml[106,3503+5]..[106,3503+11]) (typing/path.ml[106,3503+0]..[110,3580+22])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (typing/path.ml[107,3517+2]..[107,3517+16])
                "Regular" (typing/path.ml[107,3517+4]..[107,3517+11])
                [
                  core_type (typing/path.ml[107,3517+15]..[107,3517+16])
                    Ptyp_constr "t" (typing/path.ml[107,3517+15]..[107,3517+16])
                    []
                ]
                None
              (typing/path.ml[108,3534+2]..[108,3534+21])
                "Ext" (typing/path.ml[108,3534+4]..[108,3534+7])
                [
                  core_type (typing/path.ml[108,3534+11]..[108,3534+12])
                    Ptyp_constr "t" (typing/path.ml[108,3534+11]..[108,3534+12])
                    []
                  core_type (typing/path.ml[108,3534+15]..[108,3534+21])
                    Ptyp_constr "string" (typing/path.ml[108,3534+15]..[108,3534+21])
                    []
                ]
                None
              (typing/path.ml[109,3556+2]..[109,3556+23])
                "LocalExt" (typing/path.ml[109,3556+4]..[109,3556+12])
                [
                  core_type (typing/path.ml[109,3556+16]..[109,3556+23])
                    Ptyp_constr "Ident.t" (typing/path.ml[109,3556+16]..[109,3556+23])
                    []
                ]
                None
              (typing/path.ml[110,3580+2]..[110,3580+22])
                "Cstr" (typing/path.ml[110,3580+4]..[110,3580+8])
                [
                  core_type (typing/path.ml[110,3580+12]..[110,3580+13])
                    Ptyp_constr "t" (typing/path.ml[110,3580+12]..[110,3580+13])
                    []
                  core_type (typing/path.ml[110,3580+16]..[110,3580+22])
                    Ptyp_constr "string" (typing/path.ml[110,3580+16]..[110,3580+22])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (typing/path.ml[112,3604+0]..[117,3824+18])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/path.ml[112,3604+4]..[112,3604+22])
          Ppat_var "constructor_typath" (typing/path.ml[112,3604+4]..[112,3604+22])
        expression (typing/path.ml[112,3604+25]..[117,3824+18])
          Pexp_function
          [
            <case>
              pattern (typing/path.ml[113,3638+4]..[113,3638+13])
                Ppat_construct "Pident" (typing/path.ml[113,3638+4]..[113,3638+10])
                Some
                  []
                  pattern (typing/path.ml[113,3638+11]..[113,3638+13])
                    Ppat_var "id" (typing/path.ml[113,3638+11]..[113,3638+13])
              <when>
                expression (typing/path.ml[113,3638+19]..[113,3638+44])
                  Pexp_apply
                  expression (typing/path.ml[113,3638+19]..[113,3638+28])
                    Pexp_ident "is_uident" (typing/path.ml[113,3638+19]..[113,3638+28])
                  [
                    <arg>
                    Nolabel
                      expression (typing/path.ml[113,3638+29]..[113,3638+44])
                        Pexp_apply
                        expression (typing/path.ml[113,3638+30]..[113,3638+40])
                          Pexp_ident "Ident.name" (typing/path.ml[113,3638+30]..[113,3638+40])
                        [
                          <arg>
                          Nolabel
                            expression (typing/path.ml[113,3638+41]..[113,3638+43])
                              Pexp_ident "id" (typing/path.ml[113,3638+41]..[113,3638+43])
                        ]
                  ]
              expression (typing/path.ml[113,3638+48]..[113,3638+59])
                Pexp_construct "LocalExt" (typing/path.ml[113,3638+48]..[113,3638+56])
                Some
                  expression (typing/path.ml[113,3638+57]..[113,3638+59])
                    Pexp_ident "id" (typing/path.ml[113,3638+57]..[113,3638+59])
            <case>
              pattern (typing/path.ml[114,3698+4]..[114,3698+20])
                Ppat_construct "Pdot" (typing/path.ml[114,3698+4]..[114,3698+8])
                Some
                  []
                  pattern (typing/path.ml[114,3698+8]..[114,3698+20])
                    Ppat_tuple
                    [
                      pattern (typing/path.ml[114,3698+9]..[114,3698+16])
                        Ppat_var "ty_path" (typing/path.ml[114,3698+9]..[114,3698+16])
                      pattern (typing/path.ml[114,3698+18]..[114,3698+19])
                        Ppat_var "s" (typing/path.ml[114,3698+18]..[114,3698+19])
                    ]
              <when>
                expression (typing/path.ml[114,3698+26]..[114,3698+37])
                  Pexp_apply
                  expression (typing/path.ml[114,3698+26]..[114,3698+35])
                    Pexp_ident "is_uident" (typing/path.ml[114,3698+26]..[114,3698+35])
                  [
                    <arg>
                    Nolabel
                      expression (typing/path.ml[114,3698+36]..[114,3698+37])
                        Pexp_ident "s" (typing/path.ml[114,3698+36]..[114,3698+37])
                  ]
              expression (typing/path.ml[115,3739+6]..[116,3795+28])
                Pexp_ifthenelse
                expression (typing/path.ml[115,3739+9]..[115,3739+33])
                  Pexp_apply
                  expression (typing/path.ml[115,3739+9]..[115,3739+18])
                    Pexp_ident "is_uident" (typing/path.ml[115,3739+9]..[115,3739+18])
                  [
                    <arg>
                    Nolabel
                      expression (typing/path.ml[115,3739+19]..[115,3739+33])
                        Pexp_apply
                        expression (typing/path.ml[115,3739+20]..[115,3739+24])
                          Pexp_ident "last" (typing/path.ml[115,3739+20]..[115,3739+24])
                        [
                          <arg>
                          Nolabel
                            expression (typing/path.ml[115,3739+25]..[115,3739+32])
                              Pexp_ident "ty_path" (typing/path.ml[115,3739+25]..[115,3739+32])
                        ]
                  ]
                expression (typing/path.ml[115,3739+39]..[115,3739+55])
                  Pexp_construct "Ext" (typing/path.ml[115,3739+39]..[115,3739+42])
                  Some
                    expression (typing/path.ml[115,3739+43]..[115,3739+55])
                      Pexp_tuple
                      [
                        expression (typing/path.ml[115,3739+44]..[115,3739+51])
                          Pexp_ident "ty_path" (typing/path.ml[115,3739+44]..[115,3739+51])
                        expression (typing/path.ml[115,3739+53]..[115,3739+54])
                          Pexp_ident "s" (typing/path.ml[115,3739+53]..[115,3739+54])
                      ]
                Some
                  expression (typing/path.ml[116,3795+11]..[116,3795+28])
                    Pexp_construct "Cstr" (typing/path.ml[116,3795+11]..[116,3795+15])
                    Some
                      expression (typing/path.ml[116,3795+16]..[116,3795+28])
                        Pexp_tuple
                        [
                          expression (typing/path.ml[116,3795+17]..[116,3795+24])
                            Pexp_ident "ty_path" (typing/path.ml[116,3795+17]..[116,3795+24])
                          expression (typing/path.ml[116,3795+26]..[116,3795+27])
                            Pexp_ident "s" (typing/path.ml[116,3795+26]..[116,3795+27])
                        ]
            <case>
              pattern (typing/path.ml[117,3824+4]..[117,3824+5])
                Ppat_var "p" (typing/path.ml[117,3824+4]..[117,3824+5])
              expression (typing/path.ml[117,3824+9]..[117,3824+18])
                Pexp_construct "Regular" (typing/path.ml[117,3824+9]..[117,3824+16])
                Some
                  expression (typing/path.ml[117,3824+17]..[117,3824+18])
                    Pexp_ident "p" (typing/path.ml[117,3824+17]..[117,3824+18])
          ]
    ]
  structure_item (typing/path.ml[119,3844+0]..[122,3931+13])
    Pstr_value Nonrec
    [
      <def>
        pattern (typing/path.ml[119,3844+4]..[119,3844+25])
          Ppat_var "is_constructor_typath" (typing/path.ml[119,3844+4]..[119,3844+25])
        expression (typing/path.ml[119,3844+26]..[122,3931+13]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (typing/path.ml[119,3844+26]..[119,3844+27])
            Ppat_var "p" (typing/path.ml[119,3844+26]..[119,3844+27])
          expression (typing/path.ml[120,3874+2]..[122,3931+13])
            Pexp_match
            expression (typing/path.ml[120,3874+8]..[120,3874+28])
              Pexp_apply
              expression (typing/path.ml[120,3874+8]..[120,3874+26])
                Pexp_ident "constructor_typath" (typing/path.ml[120,3874+8]..[120,3874+26])
              [
                <arg>
                Nolabel
                  expression (typing/path.ml[120,3874+27]..[120,3874+28])
                    Pexp_ident "p" (typing/path.ml[120,3874+27]..[120,3874+28])
              ]
            [
              <case>
                pattern (typing/path.ml[121,3908+4]..[121,3908+13])
                  Ppat_construct "Regular" (typing/path.ml[121,3908+4]..[121,3908+11])
                  Some
                    []
                    pattern (typing/path.ml[121,3908+12]..[121,3908+13])
                      Ppat_any
                expression (typing/path.ml[121,3908+17]..[121,3908+22])
                  Pexp_construct "false" (typing/path.ml[121,3908+17]..[121,3908+22])
                  None
              <case>
                pattern (typing/path.ml[122,3931+4]..[122,3931+5])
                  Ppat_any
                expression (typing/path.ml[122,3931+9]..[122,3931+13])
                  Pexp_construct "true" (typing/path.ml[122,3931+9]..[122,3931+13])
                  None
            ]
    ]
  structure_item (typing/path.ml[124,3946+0]..[127,4008+3])
    Pstr_module
    "T" (typing/path.ml[124,3946+7]..[124,3946+8])
      module_expr (typing/path.ml[124,3946+11]..[127,4008+3])
        Pmod_structure
        [
          structure_item (typing/path.ml[125,3964+2]..[125,3964+19])
            Pstr_type Nonrec
            [
              type_declaration "t" (typing/path.ml[125,3964+14]..[125,3964+15]) (typing/path.ml[125,3964+2]..[125,3964+19])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  Some
                    core_type (typing/path.ml[125,3964+18]..[125,3964+19])
                      Ptyp_constr "t" (typing/path.ml[125,3964+18]..[125,3964+19])
                      []
            ]
          structure_item (typing/path.ml[126,3984+2]..[126,3984+23])
            Pstr_value Nonrec
            [
              <def>
                pattern (typing/path.ml[126,3984+6]..[126,3984+13])
                  Ppat_var "compare" (typing/path.ml[126,3984+6]..[126,3984+13])
                expression (typing/path.ml[126,3984+16]..[126,3984+23])
                  Pexp_ident "compare" (typing/path.ml[126,3984+16]..[126,3984+23])
            ]
        ]
  structure_item (typing/path.ml[128,4012+0]..[128,4012+24])
    Pstr_module
    "Set" (typing/path.ml[128,4012+7]..[128,4012+10])
      module_expr (typing/path.ml[128,4012+13]..[128,4012+24])
        Pmod_apply
        module_expr (typing/path.ml[128,4012+13]..[128,4012+21])
          Pmod_ident "Set.Make" (typing/path.ml[128,4012+13]..[128,4012+21])
        module_expr (typing/path.ml[128,4012+22]..[128,4012+23])
          Pmod_ident "T" (typing/path.ml[128,4012+22]..[128,4012+23])
  structure_item (typing/path.ml[129,4037+0]..[129,4037+24])
    Pstr_module
    "Map" (typing/path.ml[129,4037+7]..[129,4037+10])
      module_expr (typing/path.ml[129,4037+13]..[129,4037+24])
        Pmod_apply
        module_expr (typing/path.ml[129,4037+13]..[129,4037+21])
          Pmod_ident "Map.Make" (typing/path.ml[129,4037+13]..[129,4037+21])
        module_expr (typing/path.ml[129,4037+22]..[129,4037+23])
          Pmod_ident "T" (typing/path.ml[129,4037+22]..[129,4037+23])
]

