[
  signature_item (stdlib/fun.mli[16,1079+0]..[18,1107+18])
    Psig_attribute "ocaml.text"
    [
      structure_item (stdlib/fun.mli[16,1079+0]..[18,1107+18])
        Pstr_eval
        expression (stdlib/fun.mli[16,1079+0]..[18,1107+18])
          Pexp_constant PConst_string(" Function manipulation.\n\n    @since 4.08 ",(stdlib/fun.mli[16,1079+0]..[18,1107+18]),None)
    ]
  signature_item (stdlib/fun.mli[20,1127+0]..[20,1127+34])
    Psig_attribute "ocaml.text"
    [
      structure_item (stdlib/fun.mli[20,1127+0]..[20,1127+34])
        Pstr_eval
        expression (stdlib/fun.mli[20,1127+0]..[20,1127+34])
          Pexp_constant PConst_string(" {1:combinators Combinators} ",(stdlib/fun.mli[20,1127+0]..[20,1127+34]),None)
    ]
  signature_item (stdlib/fun.mli[22,1163+0]..[22,1163+36])
    Psig_value
    value_description "id" (stdlib/fun.mli[22,1163+9]..[22,1163+11]) (stdlib/fun.mli[22,1163+0]..[22,1163+36])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/fun.mli[23,1200+0]..[23,1200+74])
            Pstr_eval
            expression (stdlib/fun.mli[23,1200+0]..[23,1200+74])
              Pexp_constant PConst_string(" [id] is the identity function. For any argument [x], [id x] is [x]. ",(stdlib/fun.mli[23,1200+0]..[23,1200+74]),None)
        ]
      core_type (stdlib/fun.mli[22,1163+14]..[22,1163+22])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/fun.mli[22,1163+14]..[22,1163+16])
          Ptyp_var a
        core_type (stdlib/fun.mli[22,1163+20]..[22,1163+22])
          Ptyp_var a
      [
        "%identity"
      ]
  signature_item (stdlib/fun.mli[25,1276+0]..[25,1276+27])
    Psig_value
    value_description "const" (stdlib/fun.mli[25,1276+4]..[25,1276+9]) (stdlib/fun.mli[25,1276+0]..[25,1276+27])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/fun.mli[26,1304+0]..[27,1375+42])
            Pstr_eval
            expression (stdlib/fun.mli[26,1304+0]..[27,1375+42])
              Pexp_constant PConst_string(" [const c] is a function that always returns the value [c]. For any\n    argument [x], [(const c) x] is [c]. ",(stdlib/fun.mli[26,1304+0]..[27,1375+42]),None)
        ]
      core_type (stdlib/fun.mli[25,1276+12]..[25,1276+27])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/fun.mli[25,1276+12]..[25,1276+14])
          Ptyp_var a
        core_type (stdlib/fun.mli[25,1276+19]..[25,1276+26])
          Ptyp_arrow
          Nolabel
          core_type (stdlib/fun.mli[25,1276+19]..[25,1276+20])
            Ptyp_any
          core_type (stdlib/fun.mli[25,1276+24]..[25,1276+26])
            Ptyp_var a
      []
  signature_item (stdlib/fun.mli[29,1419+0]..[29,1419+47])
    Psig_value
    value_description "flip" (stdlib/fun.mli[29,1419+4]..[29,1419+8]) (stdlib/fun.mli[29,1419+0]..[29,1419+47])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/fun.mli[30,1467+0]..[31,1531+69])
            Pstr_eval
            expression (stdlib/fun.mli[30,1467+0]..[31,1531+69])
              Pexp_constant PConst_string(" [flip f] reverses the argument order of the binary function\n    [f]. For any arguments [x] and [y], [(flip f) x y] is [f y x]. ",(stdlib/fun.mli[30,1467+0]..[31,1531+69]),None)
        ]
      core_type (stdlib/fun.mli[29,1419+11]..[29,1419+47])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/fun.mli[29,1419+12]..[29,1419+26])
          Ptyp_arrow
          Nolabel
          core_type (stdlib/fun.mli[29,1419+12]..[29,1419+14])
            Ptyp_var a
          core_type (stdlib/fun.mli[29,1419+18]..[29,1419+26])
            Ptyp_arrow
            Nolabel
            core_type (stdlib/fun.mli[29,1419+18]..[29,1419+20])
              Ptyp_var b
            core_type (stdlib/fun.mli[29,1419+24]..[29,1419+26])
              Ptyp_var c
        core_type (stdlib/fun.mli[29,1419+32]..[29,1419+46])
          Ptyp_arrow
          Nolabel
          core_type (stdlib/fun.mli[29,1419+32]..[29,1419+34])
            Ptyp_var b
          core_type (stdlib/fun.mli[29,1419+38]..[29,1419+46])
            Ptyp_arrow
            Nolabel
            core_type (stdlib/fun.mli[29,1419+38]..[29,1419+40])
              Ptyp_var a
            core_type (stdlib/fun.mli[29,1419+44]..[29,1419+46])
              Ptyp_var c
      []
  signature_item (stdlib/fun.mli[33,1602+0]..[33,1602+41])
    Psig_value
    value_description "negate" (stdlib/fun.mli[33,1602+4]..[33,1602+10]) (stdlib/fun.mli[33,1602+0]..[33,1602+41])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/fun.mli[34,1644+0]..[35,1714+51])
            Pstr_eval
            expression (stdlib/fun.mli[34,1644+0]..[35,1714+51])
              Pexp_constant PConst_string(" [negate p] is the negation of the predicate function [p]. For any\n    argument [x], [(negate p) x] is [not (p x)]. ",(stdlib/fun.mli[34,1644+0]..[35,1714+51]),None)
        ]
      core_type (stdlib/fun.mli[33,1602+13]..[33,1602+41])
        Ptyp_arrow
        Nolabel
        core_type (stdlib/fun.mli[33,1602+14]..[33,1602+24])
          Ptyp_arrow
          Nolabel
          core_type (stdlib/fun.mli[33,1602+14]..[33,1602+16])
            Ptyp_var a
          core_type (stdlib/fun.mli[33,1602+20]..[33,1602+24])
            Ptyp_constr "bool" (stdlib/fun.mli[33,1602+20]..[33,1602+24])
            []
        core_type (stdlib/fun.mli[33,1602+30]..[33,1602+40])
          Ptyp_arrow
          Nolabel
          core_type (stdlib/fun.mli[33,1602+30]..[33,1602+32])
            Ptyp_var a
          core_type (stdlib/fun.mli[33,1602+36]..[33,1602+40])
            Ptyp_constr "bool" (stdlib/fun.mli[33,1602+36]..[33,1602+40])
            []
      []
  signature_item (stdlib/fun.mli[37,1767+0]..[37,1767+39])
    Psig_attribute "ocaml.text"
    [
      structure_item (stdlib/fun.mli[37,1767+0]..[37,1767+39])
        Pstr_eval
        expression (stdlib/fun.mli[37,1767+0]..[37,1767+39])
          Pexp_constant PConst_string(" {1:exception Exception handling} ",(stdlib/fun.mli[37,1767+0]..[37,1767+39]),None)
    ]
  signature_item (stdlib/fun.mli[39,1808+0]..[39,1808+58])
    Psig_value
    value_description "protect" (stdlib/fun.mli[39,1808+4]..[39,1808+11]) (stdlib/fun.mli[39,1808+0]..[39,1808+58])
      attribute "ocaml.doc"
        [
          structure_item (stdlib/fun.mli[40,1867+0]..[56,2731+63])
            Pstr_eval
            expression (stdlib/fun.mli[40,1867+0]..[56,2731+63])
              Pexp_constant PConst_string(" [protect ~finally work] invokes [work ()] and then [finally ()]\n    before [work ()] returns with its value or an exception. In the\n    latter case the exception is re-raised after [finally ()]. If\n    [finally ()] raises an exception, then the exception\n    {!Finally_raised} is raised instead.\n\n    [protect] can be used to enforce local invariants whether [work ()]\n    returns normally or raises an exception. However, it does not\n    protect against unexpected exceptions raised inside [finally ()]\n    such as {!Stdlib.Out_of_memory}, {!Stdlib.Stack_overflow}, or\n    asynchronous exceptions raised by signal handlers\n    (e.g. {!Sys.Break}).\n\n    Note: It is a {e programming error} if other kinds of exceptions\n    are raised by [finally], as any exception raised in [work ()] will\n    be lost in the event of a {!Finally_raised} exception. Therefore,\n    one should make sure to handle those inside the finally. ",(stdlib/fun.mli[40,1867+0]..[56,2731+63]),None)
        ]
      core_type (stdlib/fun.mli[39,1808+14]..[39,1808+58])
        Ptyp_arrow
        Labelled "finally"
        core_type (stdlib/fun.mli[39,1808+23]..[39,1808+35])
          Ptyp_arrow
          Nolabel
          core_type (stdlib/fun.mli[39,1808+23]..[39,1808+27])
            Ptyp_constr "unit" (stdlib/fun.mli[39,1808+23]..[39,1808+27])
            []
          core_type (stdlib/fun.mli[39,1808+31]..[39,1808+35])
            Ptyp_constr "unit" (stdlib/fun.mli[39,1808+31]..[39,1808+35])
            []
        core_type (stdlib/fun.mli[39,1808+40]..[39,1808+58])
          Ptyp_arrow
          Nolabel
          core_type (stdlib/fun.mli[39,1808+41]..[39,1808+51])
            Ptyp_arrow
            Nolabel
            core_type (stdlib/fun.mli[39,1808+41]..[39,1808+45])
              Ptyp_constr "unit" (stdlib/fun.mli[39,1808+41]..[39,1808+45])
              []
            core_type (stdlib/fun.mli[39,1808+49]..[39,1808+51])
              Ptyp_var a
          core_type (stdlib/fun.mli[39,1808+56]..[39,1808+58])
            Ptyp_var a
      []
  signature_item (stdlib/fun.mli[58,2796+0]..[58,2796+31])
    Psig_exception
    type_exception
      ptyext_constructor =
        extension_constructor (stdlib/fun.mli[58,2796+0]..[58,2796+31])
          attribute "ocaml.doc"
            [
              structure_item (stdlib/fun.mli[59,2828+0]..[63,3109+27])
                Pstr_eval
                expression (stdlib/fun.mli[59,2828+0]..[63,3109+27])
                  Pexp_constant PConst_string(" [Finally_raised exn] is raised by [protect ~finally work] when\n    [finally] raises an exception [exn]. This exception denotes either\n    an unexpected exception or a programming error. As a general rule,\n    one should not catch a [Finally_raised] exception except as part of\n    a catch-all handler. ",(stdlib/fun.mli[59,2828+0]..[63,3109+27]),None)
            ]
          pext_name = "Finally_raised"
          pext_kind =
            Pext_decl
              [
                core_type (stdlib/fun.mli[58,2796+28]..[58,2796+31])
                  Ptyp_constr "exn" (stdlib/fun.mli[58,2796+28]..[58,2796+31])
                  []
              ]
              None
]

