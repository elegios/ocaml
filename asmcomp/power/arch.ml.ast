[
  structure_item (asmcomp/power/arch.ml[18,1132+0]..[18,1132+11])
    Pstr_open Fresh
    module_expr (asmcomp/power/arch.ml[18,1132+5]..[18,1132+11])
      Pmod_ident "Format" (asmcomp/power/arch.ml[18,1132+5]..[18,1132+11])
  structure_item (asmcomp/power/arch.ml[20,1145+0]..[24,1234+21])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/power/arch.ml[20,1145+4]..[20,1145+9])
          Ppat_var "ppc64" (asmcomp/power/arch.ml[20,1145+4]..[20,1145+9])
        expression (asmcomp/power/arch.ml[21,1157+2]..[24,1234+21])
          Pexp_match
          expression (asmcomp/power/arch.ml[21,1157+8]..[21,1157+20])
            Pexp_ident "Config.model" (asmcomp/power/arch.ml[21,1157+8]..[21,1157+20])
          [
            <case>
              pattern (asmcomp/power/arch.ml[22,1183+4]..[22,1183+9])
                Ppat_constant PConst_string("ppc",(asmcomp/power/arch.ml[22,1183+5]..[22,1183+8]),None)
              expression (asmcomp/power/arch.ml[22,1183+13]..[22,1183+18])
                Pexp_construct "false" (asmcomp/power/arch.ml[22,1183+13]..[22,1183+18])
                None
            <case>
              pattern (asmcomp/power/arch.ml[23,1202+4]..[23,1202+23])
                Ppat_or
                pattern (asmcomp/power/arch.ml[23,1202+4]..[23,1202+11])
                  Ppat_constant PConst_string("ppc64",(asmcomp/power/arch.ml[23,1202+5]..[23,1202+10]),None)
                pattern (asmcomp/power/arch.ml[23,1202+14]..[23,1202+23])
                  Ppat_constant PConst_string("ppc64le",(asmcomp/power/arch.ml[23,1202+15]..[23,1202+22]),None)
              expression (asmcomp/power/arch.ml[23,1202+27]..[23,1202+31])
                Pexp_construct "true" (asmcomp/power/arch.ml[23,1202+27]..[23,1202+31])
                None
            <case>
              pattern (asmcomp/power/arch.ml[24,1234+4]..[24,1234+5])
                Ppat_any
              expression (asmcomp/power/arch.ml[24,1234+9]..[24,1234+21])
                Pexp_assert
                expression (asmcomp/power/arch.ml[24,1234+16]..[24,1234+21])
                  Pexp_construct "false" (asmcomp/power/arch.ml[24,1234+16]..[24,1234+21])
                  None
          ]
    ]
  structure_item (asmcomp/power/arch.ml[26,1257+0]..[26,1257+36])
    Pstr_type Rec
    [
      type_declaration "abi" (asmcomp/power/arch.ml[26,1257+5]..[26,1257+8]) (asmcomp/power/arch.ml[26,1257+0]..[26,1257+36])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (asmcomp/power/arch.ml[26,1257+11]..[26,1257+16])
                "ELF32" (asmcomp/power/arch.ml[26,1257+11]..[26,1257+16])
                []
                None
              (asmcomp/power/arch.ml[26,1257+17]..[26,1257+26])
                "ELF64v1" (asmcomp/power/arch.ml[26,1257+19]..[26,1257+26])
                []
                None
              (asmcomp/power/arch.ml[26,1257+27]..[26,1257+36])
                "ELF64v2" (asmcomp/power/arch.ml[26,1257+29]..[26,1257+36])
                []
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (asmcomp/power/arch.ml[28,1295+0]..[33,1398+21])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/power/arch.ml[28,1295+4]..[28,1295+7])
          Ppat_var "abi" (asmcomp/power/arch.ml[28,1295+4]..[28,1295+7])
        expression (asmcomp/power/arch.ml[29,1305+2]..[33,1398+21])
          Pexp_match
          expression (asmcomp/power/arch.ml[29,1305+8]..[29,1305+20])
            Pexp_ident "Config.model" (asmcomp/power/arch.ml[29,1305+8]..[29,1305+20])
          [
            <case>
              pattern (asmcomp/power/arch.ml[30,1331+4]..[30,1331+9])
                Ppat_constant PConst_string("ppc",(asmcomp/power/arch.ml[30,1331+5]..[30,1331+8]),None)
              expression (asmcomp/power/arch.ml[30,1331+13]..[30,1331+18])
                Pexp_construct "ELF32" (asmcomp/power/arch.ml[30,1331+13]..[30,1331+18])
                None
            <case>
              pattern (asmcomp/power/arch.ml[31,1350+4]..[31,1350+11])
                Ppat_constant PConst_string("ppc64",(asmcomp/power/arch.ml[31,1350+5]..[31,1350+10]),None)
              expression (asmcomp/power/arch.ml[31,1350+15]..[31,1350+22])
                Pexp_construct "ELF64v1" (asmcomp/power/arch.ml[31,1350+15]..[31,1350+22])
                None
            <case>
              pattern (asmcomp/power/arch.ml[32,1373+4]..[32,1373+13])
                Ppat_constant PConst_string("ppc64le",(asmcomp/power/arch.ml[32,1373+5]..[32,1373+12]),None)
              expression (asmcomp/power/arch.ml[32,1373+17]..[32,1373+24])
                Pexp_construct "ELF64v2" (asmcomp/power/arch.ml[32,1373+17]..[32,1373+24])
                None
            <case>
              pattern (asmcomp/power/arch.ml[33,1398+4]..[33,1398+5])
                Ppat_any
              expression (asmcomp/power/arch.ml[33,1398+9]..[33,1398+21])
                Pexp_assert
                expression (asmcomp/power/arch.ml[33,1398+16]..[33,1398+21])
                  Pexp_construct "false" (asmcomp/power/arch.ml[33,1398+16]..[33,1398+21])
                  None
          ]
    ]
  structure_item (asmcomp/power/arch.ml[35,1421+0]..[35,1421+20])
    Pstr_type Rec
    [
      type_declaration "cmm_label" (asmcomp/power/arch.ml[35,1421+5]..[35,1421+14]) (asmcomp/power/arch.ml[35,1421+0]..[35,1421+20])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (asmcomp/power/arch.ml[35,1421+17]..[35,1421+20])
              Ptyp_constr "int" (asmcomp/power/arch.ml[35,1421+17]..[35,1421+20])
              []
    ]
  structure_item (asmcomp/power/arch.ml[40,1531+0]..[40,1531+22])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/power/arch.ml[40,1531+4]..[40,1531+11])
          Ppat_var "big_toc" (asmcomp/power/arch.ml[40,1531+4]..[40,1531+11])
        expression (asmcomp/power/arch.ml[40,1531+14]..[40,1531+22])
          Pexp_apply
          expression (asmcomp/power/arch.ml[40,1531+14]..[40,1531+17])
            Pexp_ident "ref" (asmcomp/power/arch.ml[40,1531+14]..[40,1531+17])
          [
            <arg>
            Nolabel
              expression (asmcomp/power/arch.ml[40,1531+18]..[40,1531+22])
                Pexp_construct "true" (asmcomp/power/arch.ml[40,1531+18]..[40,1531+22])
                None
          ]
    ]
  structure_item (asmcomp/power/arch.ml[42,1555+0]..[47,1784+1])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/power/arch.ml[42,1555+4]..[42,1555+24])
          Ppat_var "command_line_options" (asmcomp/power/arch.ml[42,1555+4]..[42,1555+24])
        expression (asmcomp/power/arch.ml[42,1555+27]..[47,1784+1])
          Pexp_construct "::" (asmcomp/power/arch.ml[43,1584+2]..[47,1784+1]) ghost
          Some
            expression (asmcomp/power/arch.ml[43,1584+2]..[47,1784+1]) ghost
              Pexp_tuple
              [
                expression (asmcomp/power/arch.ml[43,1584+2]..[44,1618+72])
                  Pexp_tuple
                  [
                    expression (asmcomp/power/arch.ml[43,1584+2]..[43,1584+15])
                      Pexp_constant PConst_string("-flarge-toc",(asmcomp/power/arch.ml[43,1584+3]..[43,1584+14]),None)
                    expression (asmcomp/power/arch.ml[43,1584+17]..[43,1584+32])
                      Pexp_construct "Arg.Set" (asmcomp/power/arch.ml[43,1584+17]..[43,1584+24])
                      Some
                        expression (asmcomp/power/arch.ml[43,1584+25]..[43,1584+32])
                          Pexp_ident "big_toc" (asmcomp/power/arch.ml[43,1584+25]..[43,1584+32])
                    expression (asmcomp/power/arch.ml[44,1618+5]..[44,1618+72])
                      Pexp_constant PConst_string(" Support TOC (table of contents) greater than 64 kbytes (default)",(asmcomp/power/arch.ml[44,1618+6]..[44,1618+71]),None)
                  ]
                expression (asmcomp/power/arch.ml[45,1692+2]..[47,1784+1]) ghost
                  Pexp_construct "::" (asmcomp/power/arch.ml[45,1692+2]..[47,1784+1]) ghost
                  Some
                    expression (asmcomp/power/arch.ml[45,1692+2]..[47,1784+1]) ghost
                      Pexp_tuple
                      [
                        expression (asmcomp/power/arch.ml[45,1692+2]..[46,1728+55])
                          Pexp_tuple
                          [
                            expression (asmcomp/power/arch.ml[45,1692+2]..[45,1692+15])
                              Pexp_constant PConst_string("-fsmall-toc",(asmcomp/power/arch.ml[45,1692+3]..[45,1692+14]),None)
                            expression (asmcomp/power/arch.ml[45,1692+17]..[45,1692+34])
                              Pexp_construct "Arg.Clear" (asmcomp/power/arch.ml[45,1692+17]..[45,1692+26])
                              Some
                                expression (asmcomp/power/arch.ml[45,1692+27]..[45,1692+34])
                                  Pexp_ident "big_toc" (asmcomp/power/arch.ml[45,1692+27]..[45,1692+34])
                            expression (asmcomp/power/arch.ml[46,1728+5]..[46,1728+55])
                              Pexp_constant PConst_string(" TOC (table of contents) is limited to 64 kbytes",(asmcomp/power/arch.ml[46,1728+6]..[46,1728+54]),None)
                          ]
                        expression (asmcomp/power/arch.ml[47,1784+0]..[47,1784+1]) ghost
                          Pexp_construct "[]" (asmcomp/power/arch.ml[47,1784+0]..[47,1784+1]) ghost
                          None
                      ]
              ]
    ]
  structure_item (asmcomp/power/arch.ml[51,1814+0]..[56,2104+52])
    Pstr_type Rec
    [
      type_declaration "specific_operation" (asmcomp/power/arch.ml[51,1814+5]..[51,1814+23]) (asmcomp/power/arch.ml[51,1814+0]..[56,2104+52])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (asmcomp/power/arch.ml[52,1840+4]..[52,1840+13])
                "Imultaddf" (asmcomp/power/arch.ml[52,1840+4]..[52,1840+13])
                []
                None
              (asmcomp/power/arch.ml[53,1903+2]..[53,1903+13])
                "Imultsubf" (asmcomp/power/arch.ml[53,1903+4]..[53,1903+13])
                []
                None
              (asmcomp/power/arch.ml[54,1971+2]..[55,2047+56])
                "Ialloc_far" (asmcomp/power/arch.ml[54,1971+4]..[54,1971+14])
                [
                  (asmcomp/power/arch.ml[55,2047+8]..[55,2047+20])
                    Immutable
                    "bytes" (asmcomp/power/arch.ml[55,2047+8]..[55,2047+13])                    core_type (asmcomp/power/arch.ml[55,2047+16]..[55,2047+19])
                      Ptyp_constr "int" (asmcomp/power/arch.ml[55,2047+16]..[55,2047+19])
                      []
                  (asmcomp/power/arch.ml[55,2047+21]..[55,2047+54])
                    Immutable
                    "dbginfo" (asmcomp/power/arch.ml[55,2047+21]..[55,2047+28])                    core_type (asmcomp/power/arch.ml[55,2047+31]..[55,2047+54])
                      Ptyp_constr "Debuginfo.alloc_dbginfo" (asmcomp/power/arch.ml[55,2047+31]..[55,2047+54])
                      []
                ]
                None
              (asmcomp/power/arch.ml[56,2104+2]..[56,2104+52])
                "Ipoll_far" (asmcomp/power/arch.ml[56,2104+4]..[56,2104+13])
                [
                  (asmcomp/power/arch.ml[56,2104+19]..[56,2104+50])
                    Immutable
                    "return_label" (asmcomp/power/arch.ml[56,2104+19]..[56,2104+31])                    core_type (asmcomp/power/arch.ml[56,2104+34]..[56,2104+50])
                      Ptyp_constr "option" (asmcomp/power/arch.ml[56,2104+44]..[56,2104+50])
                      [
                        core_type (asmcomp/power/arch.ml[56,2104+34]..[56,2104+43])
                          Ptyp_constr "cmm_label" (asmcomp/power/arch.ml[56,2104+34]..[56,2104+43])
                          []
                      ]
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (asmcomp/power/arch.ml[60,2182+0]..[63,2324+13])
    Pstr_type Rec
    [
      type_declaration "addressing_mode" (asmcomp/power/arch.ml[60,2182+5]..[60,2182+20]) (asmcomp/power/arch.ml[60,2182+0]..[63,2324+13])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (asmcomp/power/arch.ml[61,2205+4]..[61,2205+26])
                "Ibased" (asmcomp/power/arch.ml[61,2205+4]..[61,2205+10])
                [
                  core_type (asmcomp/power/arch.ml[61,2205+14]..[61,2205+20])
                    Ptyp_constr "string" (asmcomp/power/arch.ml[61,2205+14]..[61,2205+20])
                    []
                  core_type (asmcomp/power/arch.ml[61,2205+23]..[61,2205+26])
                    Ptyp_constr "int" (asmcomp/power/arch.ml[61,2205+23]..[61,2205+26])
                    []
                ]
                None
              (asmcomp/power/arch.ml[62,2266+2]..[62,2266+19])
                "Iindexed" (asmcomp/power/arch.ml[62,2266+4]..[62,2266+12])
                [
                  core_type (asmcomp/power/arch.ml[62,2266+16]..[62,2266+19])
                    Ptyp_constr "int" (asmcomp/power/arch.ml[62,2266+16]..[62,2266+19])
                    []
                ]
                None
              (asmcomp/power/arch.ml[63,2324+2]..[63,2324+13])
                "Iindexed2" (asmcomp/power/arch.ml[63,2324+4]..[63,2324+13])
                []
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (asmcomp/power/arch.ml[67,2406+0]..[72,2510+21])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/power/arch.ml[67,2406+4]..[67,2406+14])
          Ppat_var "big_endian" (asmcomp/power/arch.ml[67,2406+4]..[67,2406+14])
        expression (asmcomp/power/arch.ml[68,2423+2]..[72,2510+21])
          Pexp_match
          expression (asmcomp/power/arch.ml[68,2423+8]..[68,2423+20])
            Pexp_ident "Config.model" (asmcomp/power/arch.ml[68,2423+8]..[68,2423+20])
          [
            <case>
              pattern (asmcomp/power/arch.ml[69,2449+4]..[69,2449+9])
                Ppat_constant PConst_string("ppc",(asmcomp/power/arch.ml[69,2449+5]..[69,2449+8]),None)
              expression (asmcomp/power/arch.ml[69,2449+13]..[69,2449+17])
                Pexp_construct "true" (asmcomp/power/arch.ml[69,2449+13]..[69,2449+17])
                None
            <case>
              pattern (asmcomp/power/arch.ml[70,2467+4]..[70,2467+11])
                Ppat_constant PConst_string("ppc64",(asmcomp/power/arch.ml[70,2467+5]..[70,2467+10]),None)
              expression (asmcomp/power/arch.ml[70,2467+15]..[70,2467+19])
                Pexp_construct "true" (asmcomp/power/arch.ml[70,2467+15]..[70,2467+19])
                None
            <case>
              pattern (asmcomp/power/arch.ml[71,2487+4]..[71,2487+13])
                Ppat_constant PConst_string("ppc64le",(asmcomp/power/arch.ml[71,2487+5]..[71,2487+12]),None)
              expression (asmcomp/power/arch.ml[71,2487+17]..[71,2487+22])
                Pexp_construct "false" (asmcomp/power/arch.ml[71,2487+17]..[71,2487+22])
                None
            <case>
              pattern (asmcomp/power/arch.ml[72,2510+4]..[72,2510+5])
                Ppat_any
              expression (asmcomp/power/arch.ml[72,2510+9]..[72,2510+21])
                Pexp_assert
                expression (asmcomp/power/arch.ml[72,2510+16]..[72,2510+21])
                  Pexp_construct "false" (asmcomp/power/arch.ml[72,2510+16]..[72,2510+21])
                  None
          ]
    ]
  structure_item (asmcomp/power/arch.ml[74,2533+0]..[74,2533+38])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/power/arch.ml[74,2533+4]..[74,2533+13])
          Ppat_var "size_addr" (asmcomp/power/arch.ml[74,2533+4]..[74,2533+13])
        expression (asmcomp/power/arch.ml[74,2533+16]..[74,2533+38])
          Pexp_ifthenelse
          expression (asmcomp/power/arch.ml[74,2533+19]..[74,2533+24])
            Pexp_ident "ppc64" (asmcomp/power/arch.ml[74,2533+19]..[74,2533+24])
          expression (asmcomp/power/arch.ml[74,2533+30]..[74,2533+31])
            Pexp_constant PConst_int (8,None)
          Some
            expression (asmcomp/power/arch.ml[74,2533+37]..[74,2533+38])
              Pexp_constant PConst_int (4,None)
    ]
  structure_item (asmcomp/power/arch.ml[75,2572+0]..[75,2572+24])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/power/arch.ml[75,2572+4]..[75,2572+12])
          Ppat_var "size_int" (asmcomp/power/arch.ml[75,2572+4]..[75,2572+12])
        expression (asmcomp/power/arch.ml[75,2572+15]..[75,2572+24])
          Pexp_ident "size_addr" (asmcomp/power/arch.ml[75,2572+15]..[75,2572+24])
    ]
  structure_item (asmcomp/power/arch.ml[76,2597+0]..[76,2597+18])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/power/arch.ml[76,2597+4]..[76,2597+14])
          Ppat_var "size_float" (asmcomp/power/arch.ml[76,2597+4]..[76,2597+14])
        expression (asmcomp/power/arch.ml[76,2597+17]..[76,2597+18])
          Pexp_constant PConst_int (8,None)
    ]
  structure_item (asmcomp/power/arch.ml[78,2617+0]..[78,2617+33])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/power/arch.ml[78,2617+4]..[78,2617+26])
          Ppat_var "allow_unaligned_access" (asmcomp/power/arch.ml[78,2617+4]..[78,2617+26])
        expression (asmcomp/power/arch.ml[78,2617+29]..[78,2617+33])
          Pexp_construct "true" (asmcomp/power/arch.ml[78,2617+29]..[78,2617+33])
          None
    ]
  structure_item (asmcomp/power/arch.ml[82,2680+0]..[82,2680+39])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/power/arch.ml[82,2680+4]..[82,2680+32])
          Ppat_var "division_crashes_on_overflow" (asmcomp/power/arch.ml[82,2680+4]..[82,2680+32])
        expression (asmcomp/power/arch.ml[82,2680+35]..[82,2680+39])
          Pexp_construct "true" (asmcomp/power/arch.ml[82,2680+35]..[82,2680+39])
          None
    ]
  structure_item (asmcomp/power/arch.ml[86,2759+0]..[86,2759+36])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/power/arch.ml[86,2759+4]..[86,2759+23])
          Ppat_var "identity_addressing" (asmcomp/power/arch.ml[86,2759+4]..[86,2759+23])
        expression (asmcomp/power/arch.ml[86,2759+26]..[86,2759+36])
          Pexp_construct "Iindexed" (asmcomp/power/arch.ml[86,2759+26]..[86,2759+34])
          Some
            expression (asmcomp/power/arch.ml[86,2759+35]..[86,2759+36])
              Pexp_constant PConst_int (0,None)
    ]
  structure_item (asmcomp/power/arch.ml[88,2797+0]..[92,2929+29])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/power/arch.ml[88,2797+4]..[88,2797+21])
          Ppat_var "offset_addressing" (asmcomp/power/arch.ml[88,2797+4]..[88,2797+21])
        expression (asmcomp/power/arch.ml[88,2797+22]..[92,2929+29]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (asmcomp/power/arch.ml[88,2797+22]..[88,2797+26])
            Ppat_var "addr" (asmcomp/power/arch.ml[88,2797+22]..[88,2797+26])
          expression (asmcomp/power/arch.ml[88,2797+27]..[92,2929+29]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (asmcomp/power/arch.ml[88,2797+27]..[88,2797+32])
              Ppat_var "delta" (asmcomp/power/arch.ml[88,2797+27]..[88,2797+32])
            expression (asmcomp/power/arch.ml[89,2832+2]..[92,2929+29])
              Pexp_match
              expression (asmcomp/power/arch.ml[89,2832+8]..[89,2832+12])
                Pexp_ident "addr" (asmcomp/power/arch.ml[89,2832+8]..[89,2832+12])
              [
                <case>
                  pattern (asmcomp/power/arch.ml[90,2850+4]..[90,2850+16])
                    Ppat_construct "Ibased" (asmcomp/power/arch.ml[90,2850+4]..[90,2850+10])
                    Some
                      []
                      pattern (asmcomp/power/arch.ml[90,2850+10]..[90,2850+16])
                        Ppat_tuple
                        [
                          pattern (asmcomp/power/arch.ml[90,2850+11]..[90,2850+12])
                            Ppat_var "s" (asmcomp/power/arch.ml[90,2850+11]..[90,2850+12])
                          pattern (asmcomp/power/arch.ml[90,2850+14]..[90,2850+15])
                            Ppat_var "n" (asmcomp/power/arch.ml[90,2850+14]..[90,2850+15])
                        ]
                  expression (asmcomp/power/arch.ml[90,2850+20]..[90,2850+40])
                    Pexp_construct "Ibased" (asmcomp/power/arch.ml[90,2850+20]..[90,2850+26])
                    Some
                      expression (asmcomp/power/arch.ml[90,2850+26]..[90,2850+40])
                        Pexp_tuple
                        [
                          expression (asmcomp/power/arch.ml[90,2850+27]..[90,2850+28])
                            Pexp_ident "s" (asmcomp/power/arch.ml[90,2850+27]..[90,2850+28])
                          expression (asmcomp/power/arch.ml[90,2850+30]..[90,2850+39])
                            Pexp_apply
                            expression (asmcomp/power/arch.ml[90,2850+32]..[90,2850+33])
                              Pexp_ident "+" (asmcomp/power/arch.ml[90,2850+32]..[90,2850+33])
                            [
                              <arg>
                              Nolabel
                                expression (asmcomp/power/arch.ml[90,2850+30]..[90,2850+31])
                                  Pexp_ident "n" (asmcomp/power/arch.ml[90,2850+30]..[90,2850+31])
                              <arg>
                              Nolabel
                                expression (asmcomp/power/arch.ml[90,2850+34]..[90,2850+39])
                                  Pexp_ident "delta" (asmcomp/power/arch.ml[90,2850+34]..[90,2850+39])
                            ]
                        ]
                <case>
                  pattern (asmcomp/power/arch.ml[91,2891+4]..[91,2891+14])
                    Ppat_construct "Iindexed" (asmcomp/power/arch.ml[91,2891+4]..[91,2891+12])
                    Some
                      []
                      pattern (asmcomp/power/arch.ml[91,2891+13]..[91,2891+14])
                        Ppat_var "n" (asmcomp/power/arch.ml[91,2891+13]..[91,2891+14])
                  expression (asmcomp/power/arch.ml[91,2891+18]..[91,2891+37])
                    Pexp_construct "Iindexed" (asmcomp/power/arch.ml[91,2891+18]..[91,2891+26])
                    Some
                      expression (asmcomp/power/arch.ml[91,2891+26]..[91,2891+37])
                        Pexp_apply
                        expression (asmcomp/power/arch.ml[91,2891+29]..[91,2891+30])
                          Pexp_ident "+" (asmcomp/power/arch.ml[91,2891+29]..[91,2891+30])
                        [
                          <arg>
                          Nolabel
                            expression (asmcomp/power/arch.ml[91,2891+27]..[91,2891+28])
                              Pexp_ident "n" (asmcomp/power/arch.ml[91,2891+27]..[91,2891+28])
                          <arg>
                          Nolabel
                            expression (asmcomp/power/arch.ml[91,2891+31]..[91,2891+36])
                              Pexp_ident "delta" (asmcomp/power/arch.ml[91,2891+31]..[91,2891+36])
                        ]
                <case>
                  pattern (asmcomp/power/arch.ml[92,2929+4]..[92,2929+13])
                    Ppat_construct "Iindexed2" (asmcomp/power/arch.ml[92,2929+4]..[92,2929+13])
                    None
                  expression (asmcomp/power/arch.ml[92,2929+17]..[92,2929+29])
                    Pexp_assert
                    expression (asmcomp/power/arch.ml[92,2929+24]..[92,2929+29])
                      Pexp_construct "false" (asmcomp/power/arch.ml[92,2929+24]..[92,2929+29])
                      None
              ]
    ]
  structure_item (asmcomp/power/arch.ml[94,2960+0]..[97,3033+18])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/power/arch.ml[94,2960+4]..[94,2960+23])
          Ppat_var "num_args_addressing" (asmcomp/power/arch.ml[94,2960+4]..[94,2960+23])
        expression (asmcomp/power/arch.ml[94,2960+26]..[97,3033+18])
          Pexp_function
          [
            <case>
              pattern (asmcomp/power/arch.ml[95,2995+4]..[95,2995+12])
                Ppat_construct "Ibased" (asmcomp/power/arch.ml[95,2995+4]..[95,2995+10])
                Some
                  []
                  pattern (asmcomp/power/arch.ml[95,2995+11]..[95,2995+12])
                    Ppat_any
              expression (asmcomp/power/arch.ml[95,2995+16]..[95,2995+17])
                Pexp_constant PConst_int (0,None)
            <case>
              pattern (asmcomp/power/arch.ml[96,3013+4]..[96,3013+14])
                Ppat_construct "Iindexed" (asmcomp/power/arch.ml[96,3013+4]..[96,3013+12])
                Some
                  []
                  pattern (asmcomp/power/arch.ml[96,3013+13]..[96,3013+14])
                    Ppat_any
              expression (asmcomp/power/arch.ml[96,3013+18]..[96,3013+19])
                Pexp_constant PConst_int (1,None)
            <case>
              pattern (asmcomp/power/arch.ml[97,3033+4]..[97,3033+13])
                Ppat_construct "Iindexed2" (asmcomp/power/arch.ml[97,3033+4]..[97,3033+13])
                None
              expression (asmcomp/power/arch.ml[97,3033+17]..[97,3033+18])
                Pexp_constant PConst_int (2,None)
          ]
    ]
  structure_item (asmcomp/power/arch.ml[101,3101+0]..[110,3434+61])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/power/arch.ml[101,3101+4]..[101,3101+20])
          Ppat_var "print_addressing" (asmcomp/power/arch.ml[101,3101+4]..[101,3101+20])
        expression (asmcomp/power/arch.ml[101,3101+21]..[110,3434+61]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (asmcomp/power/arch.ml[101,3101+21]..[101,3101+29])
            Ppat_var "printreg" (asmcomp/power/arch.ml[101,3101+21]..[101,3101+29])
          expression (asmcomp/power/arch.ml[101,3101+30]..[110,3434+61]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (asmcomp/power/arch.ml[101,3101+30]..[101,3101+34])
              Ppat_var "addr" (asmcomp/power/arch.ml[101,3101+30]..[101,3101+34])
            expression (asmcomp/power/arch.ml[101,3101+35]..[110,3434+61]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (asmcomp/power/arch.ml[101,3101+35]..[101,3101+38])
                Ppat_var "ppf" (asmcomp/power/arch.ml[101,3101+35]..[101,3101+38])
              expression (asmcomp/power/arch.ml[101,3101+39]..[110,3434+61]) ghost
                Pexp_fun
                Nolabel
                None
                pattern (asmcomp/power/arch.ml[101,3101+39]..[101,3101+42])
                  Ppat_var "arg" (asmcomp/power/arch.ml[101,3101+39]..[101,3101+42])
                expression (asmcomp/power/arch.ml[102,3146+2]..[110,3434+61])
                  Pexp_match
                  expression (asmcomp/power/arch.ml[102,3146+8]..[102,3146+12])
                    Pexp_ident "addr" (asmcomp/power/arch.ml[102,3146+8]..[102,3146+12])
                  [
                    <case>
                      pattern (asmcomp/power/arch.ml[103,3164+4]..[103,3164+16])
                        Ppat_construct "Ibased" (asmcomp/power/arch.ml[103,3164+4]..[103,3164+10])
                        Some
                          []
                          pattern (asmcomp/power/arch.ml[103,3164+10]..[103,3164+16])
                            Ppat_tuple
                            [
                              pattern (asmcomp/power/arch.ml[103,3164+11]..[103,3164+12])
                                Ppat_var "s" (asmcomp/power/arch.ml[103,3164+11]..[103,3164+12])
                              pattern (asmcomp/power/arch.ml[103,3164+14]..[103,3164+15])
                                Ppat_var "n" (asmcomp/power/arch.ml[103,3164+14]..[103,3164+15])
                            ]
                      expression (asmcomp/power/arch.ml[104,3184+6]..[105,3251+34])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (asmcomp/power/arch.ml[104,3184+10]..[104,3184+13])
                              Ppat_var "idx" (asmcomp/power/arch.ml[104,3184+10]..[104,3184+13])
                            expression (asmcomp/power/arch.ml[104,3184+16]..[104,3184+63])
                              Pexp_ifthenelse
                              expression (asmcomp/power/arch.ml[104,3184+19]..[104,3184+25])
                                Pexp_apply
                                expression (asmcomp/power/arch.ml[104,3184+21]..[104,3184+23])
                                  Pexp_ident "<>" (asmcomp/power/arch.ml[104,3184+21]..[104,3184+23])
                                [
                                  <arg>
                                  Nolabel
                                    expression (asmcomp/power/arch.ml[104,3184+19]..[104,3184+20])
                                      Pexp_ident "n" (asmcomp/power/arch.ml[104,3184+19]..[104,3184+20])
                                  <arg>
                                  Nolabel
                                    expression (asmcomp/power/arch.ml[104,3184+24]..[104,3184+25])
                                      Pexp_constant PConst_int (0,None)
                                ]
                              expression (asmcomp/power/arch.ml[104,3184+31]..[104,3184+55])
                                Pexp_apply
                                expression (asmcomp/power/arch.ml[104,3184+31]..[104,3184+45])
                                  Pexp_ident "Printf.sprintf" (asmcomp/power/arch.ml[104,3184+31]..[104,3184+45])
                                [
                                  <arg>
                                  Nolabel
                                    expression (asmcomp/power/arch.ml[104,3184+46]..[104,3184+53])
                                      Pexp_constant PConst_string(" + %i",(asmcomp/power/arch.ml[104,3184+47]..[104,3184+52]),None)
                                  <arg>
                                  Nolabel
                                    expression (asmcomp/power/arch.ml[104,3184+54]..[104,3184+55])
                                      Pexp_ident "n" (asmcomp/power/arch.ml[104,3184+54]..[104,3184+55])
                                ]
                              Some
                                expression (asmcomp/power/arch.ml[104,3184+61]..[104,3184+63])
                                  Pexp_constant PConst_string("",(asmcomp/power/arch.ml[104,3184+62]..[104,3184+62]),None)
                        ]
                        expression (asmcomp/power/arch.ml[105,3251+6]..[105,3251+34])
                          Pexp_apply
                          expression (asmcomp/power/arch.ml[105,3251+6]..[105,3251+13])
                            Pexp_ident "fprintf" (asmcomp/power/arch.ml[105,3251+6]..[105,3251+13])
                          [
                            <arg>
                            Nolabel
                              expression (asmcomp/power/arch.ml[105,3251+14]..[105,3251+17])
                                Pexp_ident "ppf" (asmcomp/power/arch.ml[105,3251+14]..[105,3251+17])
                            <arg>
                            Nolabel
                              expression (asmcomp/power/arch.ml[105,3251+18]..[105,3251+28])
                                Pexp_constant PConst_string("\"%s\"%s",(asmcomp/power/arch.ml[105,3251+19]..[105,3251+27]),None)
                            <arg>
                            Nolabel
                              expression (asmcomp/power/arch.ml[105,3251+29]..[105,3251+30])
                                Pexp_ident "s" (asmcomp/power/arch.ml[105,3251+29]..[105,3251+30])
                            <arg>
                            Nolabel
                              expression (asmcomp/power/arch.ml[105,3251+31]..[105,3251+34])
                                Pexp_ident "idx" (asmcomp/power/arch.ml[105,3251+31]..[105,3251+34])
                          ]
                    <case>
                      pattern (asmcomp/power/arch.ml[106,3286+4]..[106,3286+14])
                        Ppat_construct "Iindexed" (asmcomp/power/arch.ml[106,3286+4]..[106,3286+12])
                        Some
                          []
                          pattern (asmcomp/power/arch.ml[106,3286+13]..[106,3286+14])
                            Ppat_var "n" (asmcomp/power/arch.ml[106,3286+13]..[106,3286+14])
                      expression (asmcomp/power/arch.ml[107,3304+6]..[108,3371+45])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (asmcomp/power/arch.ml[107,3304+10]..[107,3304+13])
                              Ppat_var "idx" (asmcomp/power/arch.ml[107,3304+10]..[107,3304+13])
                            expression (asmcomp/power/arch.ml[107,3304+16]..[107,3304+63])
                              Pexp_ifthenelse
                              expression (asmcomp/power/arch.ml[107,3304+19]..[107,3304+25])
                                Pexp_apply
                                expression (asmcomp/power/arch.ml[107,3304+21]..[107,3304+23])
                                  Pexp_ident "<>" (asmcomp/power/arch.ml[107,3304+21]..[107,3304+23])
                                [
                                  <arg>
                                  Nolabel
                                    expression (asmcomp/power/arch.ml[107,3304+19]..[107,3304+20])
                                      Pexp_ident "n" (asmcomp/power/arch.ml[107,3304+19]..[107,3304+20])
                                  <arg>
                                  Nolabel
                                    expression (asmcomp/power/arch.ml[107,3304+24]..[107,3304+25])
                                      Pexp_constant PConst_int (0,None)
                                ]
                              expression (asmcomp/power/arch.ml[107,3304+31]..[107,3304+55])
                                Pexp_apply
                                expression (asmcomp/power/arch.ml[107,3304+31]..[107,3304+45])
                                  Pexp_ident "Printf.sprintf" (asmcomp/power/arch.ml[107,3304+31]..[107,3304+45])
                                [
                                  <arg>
                                  Nolabel
                                    expression (asmcomp/power/arch.ml[107,3304+46]..[107,3304+53])
                                      Pexp_constant PConst_string(" + %i",(asmcomp/power/arch.ml[107,3304+47]..[107,3304+52]),None)
                                  <arg>
                                  Nolabel
                                    expression (asmcomp/power/arch.ml[107,3304+54]..[107,3304+55])
                                      Pexp_ident "n" (asmcomp/power/arch.ml[107,3304+54]..[107,3304+55])
                                ]
                              Some
                                expression (asmcomp/power/arch.ml[107,3304+61]..[107,3304+63])
                                  Pexp_constant PConst_string("",(asmcomp/power/arch.ml[107,3304+62]..[107,3304+62]),None)
                        ]
                        expression (asmcomp/power/arch.ml[108,3371+6]..[108,3371+45])
                          Pexp_apply
                          expression (asmcomp/power/arch.ml[108,3371+6]..[108,3371+13])
                            Pexp_ident "fprintf" (asmcomp/power/arch.ml[108,3371+6]..[108,3371+13])
                          [
                            <arg>
                            Nolabel
                              expression (asmcomp/power/arch.ml[108,3371+14]..[108,3371+17])
                                Pexp_ident "ppf" (asmcomp/power/arch.ml[108,3371+14]..[108,3371+17])
                            <arg>
                            Nolabel
                              expression (asmcomp/power/arch.ml[108,3371+18]..[108,3371+24])
                                Pexp_constant PConst_string("%a%s",(asmcomp/power/arch.ml[108,3371+19]..[108,3371+23]),None)
                            <arg>
                            Nolabel
                              expression (asmcomp/power/arch.ml[108,3371+25]..[108,3371+33])
                                Pexp_ident "printreg" (asmcomp/power/arch.ml[108,3371+25]..[108,3371+33])
                            <arg>
                            Nolabel
                              expression (asmcomp/power/arch.ml[108,3371+34]..[108,3371+41])
                                Pexp_apply
                                expression (asmcomp/power/arch.ml[108,3371+34]..[108,3371+41]) ghost
                                  Pexp_ident "Array.get" (asmcomp/power/arch.ml[108,3371+34]..[108,3371+41]) ghost
                                [
                                  <arg>
                                  Nolabel
                                    expression (asmcomp/power/arch.ml[108,3371+34]..[108,3371+37])
                                      Pexp_ident "arg" (asmcomp/power/arch.ml[108,3371+34]..[108,3371+37])
                                  <arg>
                                  Nolabel
                                    expression (asmcomp/power/arch.ml[108,3371+39]..[108,3371+40])
                                      Pexp_constant PConst_int (0,None)
                                ]
                            <arg>
                            Nolabel
                              expression (asmcomp/power/arch.ml[108,3371+42]..[108,3371+45])
                                Pexp_ident "idx" (asmcomp/power/arch.ml[108,3371+42]..[108,3371+45])
                          ]
                    <case>
                      pattern (asmcomp/power/arch.ml[109,3417+4]..[109,3417+13])
                        Ppat_construct "Iindexed2" (asmcomp/power/arch.ml[109,3417+4]..[109,3417+13])
                        None
                      expression (asmcomp/power/arch.ml[110,3434+6]..[110,3434+61])
                        Pexp_apply
                        expression (asmcomp/power/arch.ml[110,3434+6]..[110,3434+13])
                          Pexp_ident "fprintf" (asmcomp/power/arch.ml[110,3434+6]..[110,3434+13])
                        [
                          <arg>
                          Nolabel
                            expression (asmcomp/power/arch.ml[110,3434+14]..[110,3434+17])
                              Pexp_ident "ppf" (asmcomp/power/arch.ml[110,3434+14]..[110,3434+17])
                          <arg>
                          Nolabel
                            expression (asmcomp/power/arch.ml[110,3434+18]..[110,3434+27])
                              Pexp_constant PConst_string("%a + %a",(asmcomp/power/arch.ml[110,3434+19]..[110,3434+26]),None)
                          <arg>
                          Nolabel
                            expression (asmcomp/power/arch.ml[110,3434+28]..[110,3434+36])
                              Pexp_ident "printreg" (asmcomp/power/arch.ml[110,3434+28]..[110,3434+36])
                          <arg>
                          Nolabel
                            expression (asmcomp/power/arch.ml[110,3434+37]..[110,3434+44])
                              Pexp_apply
                              expression (asmcomp/power/arch.ml[110,3434+37]..[110,3434+44]) ghost
                                Pexp_ident "Array.get" (asmcomp/power/arch.ml[110,3434+37]..[110,3434+44]) ghost
                              [
                                <arg>
                                Nolabel
                                  expression (asmcomp/power/arch.ml[110,3434+37]..[110,3434+40])
                                    Pexp_ident "arg" (asmcomp/power/arch.ml[110,3434+37]..[110,3434+40])
                                <arg>
                                Nolabel
                                  expression (asmcomp/power/arch.ml[110,3434+42]..[110,3434+43])
                                    Pexp_constant PConst_int (0,None)
                              ]
                          <arg>
                          Nolabel
                            expression (asmcomp/power/arch.ml[110,3434+45]..[110,3434+53])
                              Pexp_ident "printreg" (asmcomp/power/arch.ml[110,3434+45]..[110,3434+53])
                          <arg>
                          Nolabel
                            expression (asmcomp/power/arch.ml[110,3434+54]..[110,3434+61])
                              Pexp_apply
                              expression (asmcomp/power/arch.ml[110,3434+54]..[110,3434+61]) ghost
                                Pexp_ident "Array.get" (asmcomp/power/arch.ml[110,3434+54]..[110,3434+61]) ghost
                              [
                                <arg>
                                Nolabel
                                  expression (asmcomp/power/arch.ml[110,3434+54]..[110,3434+57])
                                    Pexp_ident "arg" (asmcomp/power/arch.ml[110,3434+54]..[110,3434+57])
                                <arg>
                                Nolabel
                                  expression (asmcomp/power/arch.ml[110,3434+59]..[110,3434+60])
                                    Pexp_constant PConst_int (1,None)
                              ]
                        ]
                  ]
    ]
  structure_item (asmcomp/power/arch.ml[112,3497+0]..[123,3875+28])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/power/arch.ml[112,3497+4]..[112,3497+28])
          Ppat_var "print_specific_operation" (asmcomp/power/arch.ml[112,3497+4]..[112,3497+28])
        expression (asmcomp/power/arch.ml[112,3497+29]..[123,3875+28]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (asmcomp/power/arch.ml[112,3497+29]..[112,3497+37])
            Ppat_var "printreg" (asmcomp/power/arch.ml[112,3497+29]..[112,3497+37])
          expression (asmcomp/power/arch.ml[112,3497+38]..[123,3875+28]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (asmcomp/power/arch.ml[112,3497+38]..[112,3497+40])
              Ppat_var "op" (asmcomp/power/arch.ml[112,3497+38]..[112,3497+40])
            expression (asmcomp/power/arch.ml[112,3497+41]..[123,3875+28]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (asmcomp/power/arch.ml[112,3497+41]..[112,3497+44])
                Ppat_var "ppf" (asmcomp/power/arch.ml[112,3497+41]..[112,3497+44])
              expression (asmcomp/power/arch.ml[112,3497+45]..[123,3875+28]) ghost
                Pexp_fun
                Nolabel
                None
                pattern (asmcomp/power/arch.ml[112,3497+45]..[112,3497+48])
                  Ppat_var "arg" (asmcomp/power/arch.ml[112,3497+45]..[112,3497+48])
                expression (asmcomp/power/arch.ml[113,3548+2]..[123,3875+28])
                  Pexp_match
                  expression (asmcomp/power/arch.ml[113,3548+8]..[113,3548+10])
                    Pexp_ident "op" (asmcomp/power/arch.ml[113,3548+8]..[113,3548+10])
                  [
                    <case>
                      pattern (asmcomp/power/arch.ml[114,3564+4]..[114,3564+13])
                        Ppat_construct "Imultaddf" (asmcomp/power/arch.ml[114,3564+4]..[114,3564+13])
                        None
                      expression (asmcomp/power/arch.ml[115,3581+6]..[116,3616+58])
                        Pexp_apply
                        expression (asmcomp/power/arch.ml[115,3581+6]..[115,3581+13])
                          Pexp_ident "fprintf" (asmcomp/power/arch.ml[115,3581+6]..[115,3581+13])
                        [
                          <arg>
                          Nolabel
                            expression (asmcomp/power/arch.ml[115,3581+14]..[115,3581+17])
                              Pexp_ident "ppf" (asmcomp/power/arch.ml[115,3581+14]..[115,3581+17])
                          <arg>
                          Nolabel
                            expression (asmcomp/power/arch.ml[115,3581+18]..[115,3581+34])
                              Pexp_constant PConst_string("%a *f %a +f %a",(asmcomp/power/arch.ml[115,3581+19]..[115,3581+33]),None)
                          <arg>
                          Nolabel
                            expression (asmcomp/power/arch.ml[116,3616+8]..[116,3616+16])
                              Pexp_ident "printreg" (asmcomp/power/arch.ml[116,3616+8]..[116,3616+16])
                          <arg>
                          Nolabel
                            expression (asmcomp/power/arch.ml[116,3616+17]..[116,3616+24])
                              Pexp_apply
                              expression (asmcomp/power/arch.ml[116,3616+17]..[116,3616+24]) ghost
                                Pexp_ident "Array.get" (asmcomp/power/arch.ml[116,3616+17]..[116,3616+24]) ghost
                              [
                                <arg>
                                Nolabel
                                  expression (asmcomp/power/arch.ml[116,3616+17]..[116,3616+20])
                                    Pexp_ident "arg" (asmcomp/power/arch.ml[116,3616+17]..[116,3616+20])
                                <arg>
                                Nolabel
                                  expression (asmcomp/power/arch.ml[116,3616+22]..[116,3616+23])
                                    Pexp_constant PConst_int (0,None)
                              ]
                          <arg>
                          Nolabel
                            expression (asmcomp/power/arch.ml[116,3616+25]..[116,3616+33])
                              Pexp_ident "printreg" (asmcomp/power/arch.ml[116,3616+25]..[116,3616+33])
                          <arg>
                          Nolabel
                            expression (asmcomp/power/arch.ml[116,3616+34]..[116,3616+41])
                              Pexp_apply
                              expression (asmcomp/power/arch.ml[116,3616+34]..[116,3616+41]) ghost
                                Pexp_ident "Array.get" (asmcomp/power/arch.ml[116,3616+34]..[116,3616+41]) ghost
                              [
                                <arg>
                                Nolabel
                                  expression (asmcomp/power/arch.ml[116,3616+34]..[116,3616+37])
                                    Pexp_ident "arg" (asmcomp/power/arch.ml[116,3616+34]..[116,3616+37])
                                <arg>
                                Nolabel
                                  expression (asmcomp/power/arch.ml[116,3616+39]..[116,3616+40])
                                    Pexp_constant PConst_int (1,None)
                              ]
                          <arg>
                          Nolabel
                            expression (asmcomp/power/arch.ml[116,3616+42]..[116,3616+50])
                              Pexp_ident "printreg" (asmcomp/power/arch.ml[116,3616+42]..[116,3616+50])
                          <arg>
                          Nolabel
                            expression (asmcomp/power/arch.ml[116,3616+51]..[116,3616+58])
                              Pexp_apply
                              expression (asmcomp/power/arch.ml[116,3616+51]..[116,3616+58]) ghost
                                Pexp_ident "Array.get" (asmcomp/power/arch.ml[116,3616+51]..[116,3616+58]) ghost
                              [
                                <arg>
                                Nolabel
                                  expression (asmcomp/power/arch.ml[116,3616+51]..[116,3616+54])
                                    Pexp_ident "arg" (asmcomp/power/arch.ml[116,3616+51]..[116,3616+54])
                                <arg>
                                Nolabel
                                  expression (asmcomp/power/arch.ml[116,3616+56]..[116,3616+57])
                                    Pexp_constant PConst_int (2,None)
                              ]
                        ]
                    <case>
                      pattern (asmcomp/power/arch.ml[117,3675+4]..[117,3675+13])
                        Ppat_construct "Imultsubf" (asmcomp/power/arch.ml[117,3675+4]..[117,3675+13])
                        None
                      expression (asmcomp/power/arch.ml[118,3692+6]..[119,3727+58])
                        Pexp_apply
                        expression (asmcomp/power/arch.ml[118,3692+6]..[118,3692+13])
                          Pexp_ident "fprintf" (asmcomp/power/arch.ml[118,3692+6]..[118,3692+13])
                        [
                          <arg>
                          Nolabel
                            expression (asmcomp/power/arch.ml[118,3692+14]..[118,3692+17])
                              Pexp_ident "ppf" (asmcomp/power/arch.ml[118,3692+14]..[118,3692+17])
                          <arg>
                          Nolabel
                            expression (asmcomp/power/arch.ml[118,3692+18]..[118,3692+34])
                              Pexp_constant PConst_string("%a *f %a -f %a",(asmcomp/power/arch.ml[118,3692+19]..[118,3692+33]),None)
                          <arg>
                          Nolabel
                            expression (asmcomp/power/arch.ml[119,3727+8]..[119,3727+16])
                              Pexp_ident "printreg" (asmcomp/power/arch.ml[119,3727+8]..[119,3727+16])
                          <arg>
                          Nolabel
                            expression (asmcomp/power/arch.ml[119,3727+17]..[119,3727+24])
                              Pexp_apply
                              expression (asmcomp/power/arch.ml[119,3727+17]..[119,3727+24]) ghost
                                Pexp_ident "Array.get" (asmcomp/power/arch.ml[119,3727+17]..[119,3727+24]) ghost
                              [
                                <arg>
                                Nolabel
                                  expression (asmcomp/power/arch.ml[119,3727+17]..[119,3727+20])
                                    Pexp_ident "arg" (asmcomp/power/arch.ml[119,3727+17]..[119,3727+20])
                                <arg>
                                Nolabel
                                  expression (asmcomp/power/arch.ml[119,3727+22]..[119,3727+23])
                                    Pexp_constant PConst_int (0,None)
                              ]
                          <arg>
                          Nolabel
                            expression (asmcomp/power/arch.ml[119,3727+25]..[119,3727+33])
                              Pexp_ident "printreg" (asmcomp/power/arch.ml[119,3727+25]..[119,3727+33])
                          <arg>
                          Nolabel
                            expression (asmcomp/power/arch.ml[119,3727+34]..[119,3727+41])
                              Pexp_apply
                              expression (asmcomp/power/arch.ml[119,3727+34]..[119,3727+41]) ghost
                                Pexp_ident "Array.get" (asmcomp/power/arch.ml[119,3727+34]..[119,3727+41]) ghost
                              [
                                <arg>
                                Nolabel
                                  expression (asmcomp/power/arch.ml[119,3727+34]..[119,3727+37])
                                    Pexp_ident "arg" (asmcomp/power/arch.ml[119,3727+34]..[119,3727+37])
                                <arg>
                                Nolabel
                                  expression (asmcomp/power/arch.ml[119,3727+39]..[119,3727+40])
                                    Pexp_constant PConst_int (1,None)
                              ]
                          <arg>
                          Nolabel
                            expression (asmcomp/power/arch.ml[119,3727+42]..[119,3727+50])
                              Pexp_ident "printreg" (asmcomp/power/arch.ml[119,3727+42]..[119,3727+50])
                          <arg>
                          Nolabel
                            expression (asmcomp/power/arch.ml[119,3727+51]..[119,3727+58])
                              Pexp_apply
                              expression (asmcomp/power/arch.ml[119,3727+51]..[119,3727+58]) ghost
                                Pexp_ident "Array.get" (asmcomp/power/arch.ml[119,3727+51]..[119,3727+58]) ghost
                              [
                                <arg>
                                Nolabel
                                  expression (asmcomp/power/arch.ml[119,3727+51]..[119,3727+54])
                                    Pexp_ident "arg" (asmcomp/power/arch.ml[119,3727+51]..[119,3727+54])
                                <arg>
                                Nolabel
                                  expression (asmcomp/power/arch.ml[119,3727+56]..[119,3727+57])
                                    Pexp_constant PConst_int (2,None)
                              ]
                        ]
                    <case>
                      pattern (asmcomp/power/arch.ml[120,3786+4]..[120,3786+27])
                        Ppat_construct "Ialloc_far" (asmcomp/power/arch.ml[120,3786+4]..[120,3786+14])
                        Some
                          []
                          pattern (asmcomp/power/arch.ml[120,3786+15]..[120,3786+27])
                            Ppat_record Open
                            [
                              "bytes" (asmcomp/power/arch.ml[120,3786+17]..[120,3786+22]) ghost
                                pattern (asmcomp/power/arch.ml[120,3786+17]..[120,3786+22])
                                  Ppat_var "bytes" (asmcomp/power/arch.ml[120,3786+17]..[120,3786+22])
                            ]
                      expression (asmcomp/power/arch.ml[121,3817+6]..[121,3817+38])
                        Pexp_apply
                        expression (asmcomp/power/arch.ml[121,3817+6]..[121,3817+13])
                          Pexp_ident "fprintf" (asmcomp/power/arch.ml[121,3817+6]..[121,3817+13])
                        [
                          <arg>
                          Nolabel
                            expression (asmcomp/power/arch.ml[121,3817+14]..[121,3817+17])
                              Pexp_ident "ppf" (asmcomp/power/arch.ml[121,3817+14]..[121,3817+17])
                          <arg>
                          Nolabel
                            expression (asmcomp/power/arch.ml[121,3817+18]..[121,3817+32])
                              Pexp_constant PConst_string("alloc_far %d",(asmcomp/power/arch.ml[121,3817+19]..[121,3817+31]),None)
                          <arg>
                          Nolabel
                            expression (asmcomp/power/arch.ml[121,3817+33]..[121,3817+38])
                              Pexp_ident "bytes" (asmcomp/power/arch.ml[121,3817+33]..[121,3817+38])
                        ]
                    <case>
                      pattern (asmcomp/power/arch.ml[122,3856+4]..[122,3856+15])
                        Ppat_construct "Ipoll_far" (asmcomp/power/arch.ml[122,3856+4]..[122,3856+13])
                        Some
                          []
                          pattern (asmcomp/power/arch.ml[122,3856+14]..[122,3856+15])
                            Ppat_any
                      expression (asmcomp/power/arch.ml[123,3875+6]..[123,3875+28])
                        Pexp_apply
                        expression (asmcomp/power/arch.ml[123,3875+6]..[123,3875+13])
                          Pexp_ident "fprintf" (asmcomp/power/arch.ml[123,3875+6]..[123,3875+13])
                        [
                          <arg>
                          Nolabel
                            expression (asmcomp/power/arch.ml[123,3875+14]..[123,3875+17])
                              Pexp_ident "ppf" (asmcomp/power/arch.ml[123,3875+14]..[123,3875+17])
                          <arg>
                          Nolabel
                            expression (asmcomp/power/arch.ml[123,3875+18]..[123,3875+28])
                              Pexp_constant PConst_string("poll_far",(asmcomp/power/arch.ml[123,3875+19]..[123,3875+27]),None)
                        ]
                  ]
    ]
  structure_item (asmcomp/power/arch.ml[127,3946+0]..[129,4019+13])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/power/arch.ml[127,3946+4]..[127,3946+21])
          Ppat_var "operation_is_pure" (asmcomp/power/arch.ml[127,3946+4]..[127,3946+21])
        expression (asmcomp/power/arch.ml[127,3946+24]..[129,4019+13])
          Pexp_function
          [
            <case>
              pattern (asmcomp/power/arch.ml[128,3979+4]..[128,3979+30])
                Ppat_or
                pattern (asmcomp/power/arch.ml[128,3979+4]..[128,3979+16])
                  Ppat_construct "Ialloc_far" (asmcomp/power/arch.ml[128,3979+4]..[128,3979+14])
                  Some
                    []
                    pattern (asmcomp/power/arch.ml[128,3979+15]..[128,3979+16])
                      Ppat_any
                pattern (asmcomp/power/arch.ml[128,3979+19]..[128,3979+30])
                  Ppat_construct "Ipoll_far" (asmcomp/power/arch.ml[128,3979+19]..[128,3979+28])
                  Some
                    []
                    pattern (asmcomp/power/arch.ml[128,3979+29]..[128,3979+30])
                      Ppat_any
              expression (asmcomp/power/arch.ml[128,3979+34]..[128,3979+39])
                Pexp_construct "false" (asmcomp/power/arch.ml[128,3979+34]..[128,3979+39])
                None
            <case>
              pattern (asmcomp/power/arch.ml[129,4019+4]..[129,4019+5])
                Ppat_any
              expression (asmcomp/power/arch.ml[129,4019+9]..[129,4019+13])
                Pexp_construct "true" (asmcomp/power/arch.ml[129,4019+9]..[129,4019+13])
                None
          ]
    ]
  structure_item (asmcomp/power/arch.ml[133,4076+0]..[135,4150+14])
    Pstr_value Nonrec
    [
      <def>
        pattern (asmcomp/power/arch.ml[133,4076+4]..[133,4076+23])
          Ppat_var "operation_can_raise" (asmcomp/power/arch.ml[133,4076+4]..[133,4076+23])
        expression (asmcomp/power/arch.ml[133,4076+26]..[135,4150+14])
          Pexp_function
          [
            <case>
              pattern (asmcomp/power/arch.ml[134,4111+4]..[134,4111+30])
                Ppat_or
                pattern (asmcomp/power/arch.ml[134,4111+4]..[134,4111+16])
                  Ppat_construct "Ialloc_far" (asmcomp/power/arch.ml[134,4111+4]..[134,4111+14])
                  Some
                    []
                    pattern (asmcomp/power/arch.ml[134,4111+15]..[134,4111+16])
                      Ppat_any
                pattern (asmcomp/power/arch.ml[134,4111+19]..[134,4111+30])
                  Ppat_construct "Ipoll_far" (asmcomp/power/arch.ml[134,4111+19]..[134,4111+28])
                  Some
                    []
                    pattern (asmcomp/power/arch.ml[134,4111+29]..[134,4111+30])
                      Ppat_any
              expression (asmcomp/power/arch.ml[134,4111+34]..[134,4111+38])
                Pexp_construct "true" (asmcomp/power/arch.ml[134,4111+34]..[134,4111+38])
                None
            <case>
              pattern (asmcomp/power/arch.ml[135,4150+4]..[135,4150+5])
                Ppat_any
              expression (asmcomp/power/arch.ml[135,4150+9]..[135,4150+14])
                Pexp_construct "false" (asmcomp/power/arch.ml[135,4150+9]..[135,4150+14])
                None
          ]
    ]
]

