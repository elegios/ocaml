[
  structure_item (lex/compact.ml[18,1112+0]..[18,1112+11])
    Pstr_open Fresh
    module_expr (lex/compact.ml[18,1112+5]..[18,1112+11])
      Pmod_ident "Lexgen" (lex/compact.ml[18,1112+5]..[18,1112+11])
  structure_item (lex/compact.ml[21,1156+0]..[21,1156+25])
    Pstr_value Nonrec
    [
      <def>
        pattern (lex/compact.ml[21,1156+4]..[21,1156+8])
          Ppat_var "code" (lex/compact.ml[21,1156+4]..[21,1156+8])
        expression (lex/compact.ml[21,1156+11]..[21,1156+25])
          Pexp_apply
          expression (lex/compact.ml[21,1156+11]..[21,1156+23])
            Pexp_ident "Table.create" (lex/compact.ml[21,1156+11]..[21,1156+23])
          [
            <arg>
            Nolabel
              expression (lex/compact.ml[21,1156+24]..[21,1156+25])
                Pexp_constant PConst_int (0,None)
          ]
    ]
  structure_item (lex/compact.ml[25,1251+0]..[25,1251+34])
    Pstr_value Nonrec
    [
      <def>
        pattern (lex/compact.ml[25,1251+4]..[25,1251+12])
          Ppat_var "emit_int" (lex/compact.ml[25,1251+4]..[25,1251+12])
        expression (lex/compact.ml[25,1251+13]..[25,1251+34]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lex/compact.ml[25,1251+13]..[25,1251+14])
            Ppat_var "i" (lex/compact.ml[25,1251+13]..[25,1251+14])
          expression (lex/compact.ml[25,1251+17]..[25,1251+34])
            Pexp_apply
            expression (lex/compact.ml[25,1251+17]..[25,1251+27])
              Pexp_ident "Table.emit" (lex/compact.ml[25,1251+17]..[25,1251+27])
            [
              <arg>
              Nolabel
                expression (lex/compact.ml[25,1251+28]..[25,1251+32])
                  Pexp_ident "code" (lex/compact.ml[25,1251+28]..[25,1251+32])
              <arg>
              Nolabel
                expression (lex/compact.ml[25,1251+33]..[25,1251+34])
                  Pexp_ident "i" (lex/compact.ml[25,1251+33]..[25,1251+34])
            ]
    ]
  structure_item (lex/compact.ml[27,1287+0]..[29,1354+35])
    Pstr_value Nonrec
    [
      <def>
        pattern (lex/compact.ml[27,1287+4]..[27,1287+11])
          Ppat_var "ins_mem" (lex/compact.ml[27,1287+4]..[27,1287+11])
        expression (lex/compact.ml[27,1287+12]..[29,1354+35]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lex/compact.ml[27,1287+12]..[27,1287+13])
            Ppat_var "i" (lex/compact.ml[27,1287+12]..[27,1287+13])
          expression (lex/compact.ml[27,1287+14]..[29,1354+35]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (lex/compact.ml[27,1287+14]..[27,1287+15])
              Ppat_var "c" (lex/compact.ml[27,1287+14]..[27,1287+15])
            expression (lex/compact.ml[27,1287+19]..[29,1354+35])
              Pexp_match
              expression (lex/compact.ml[27,1287+25]..[27,1287+26])
                Pexp_ident "i" (lex/compact.ml[27,1287+25]..[27,1287+26])
              [
                <case>
                  pattern (lex/compact.ml[28,1319+4]..[28,1319+19])
                    Ppat_construct "Copy" (lex/compact.ml[28,1319+4]..[28,1319+8])
                    Some
                      []
                      pattern (lex/compact.ml[28,1319+9]..[28,1319+19])
                        Ppat_tuple
                        [
                          pattern (lex/compact.ml[28,1319+10]..[28,1319+13])
                            Ppat_var "dst" (lex/compact.ml[28,1319+10]..[28,1319+13])
                          pattern (lex/compact.ml[28,1319+15]..[28,1319+18])
                            Ppat_var "src" (lex/compact.ml[28,1319+15]..[28,1319+18])
                        ]
                  expression (lex/compact.ml[28,1319+23]..[28,1319+34])
                    Pexp_construct "::" (lex/compact.ml[28,1319+26]..[28,1319+28])
                    Some
                      expression (lex/compact.ml[28,1319+23]..[28,1319+34]) ghost
                        Pexp_tuple
                        [
                          expression (lex/compact.ml[28,1319+23]..[28,1319+26])
                            Pexp_ident "dst" (lex/compact.ml[28,1319+23]..[28,1319+26])
                          expression (lex/compact.ml[28,1319+28]..[28,1319+34])
                            Pexp_construct "::" (lex/compact.ml[28,1319+31]..[28,1319+33])
                            Some
                              expression (lex/compact.ml[28,1319+28]..[28,1319+34]) ghost
                                Pexp_tuple
                                [
                                  expression (lex/compact.ml[28,1319+28]..[28,1319+31])
                                    Pexp_ident "src" (lex/compact.ml[28,1319+28]..[28,1319+31])
                                  expression (lex/compact.ml[28,1319+33]..[28,1319+34])
                                    Pexp_ident "c" (lex/compact.ml[28,1319+33]..[28,1319+34])
                                ]
                        ]
                <case>
                  pattern (lex/compact.ml[29,1354+4]..[29,1354+11])
                    Ppat_construct "Set" (lex/compact.ml[29,1354+4]..[29,1354+7])
                    Some
                      []
                      pattern (lex/compact.ml[29,1354+8]..[29,1354+11])
                        Ppat_var "dst" (lex/compact.ml[29,1354+8]..[29,1354+11])
                  expression (lex/compact.ml[29,1354+23]..[29,1354+35])
                    Pexp_construct "::" (lex/compact.ml[29,1354+26]..[29,1354+28])
                    Some
                      expression (lex/compact.ml[29,1354+23]..[29,1354+35]) ghost
                        Pexp_tuple
                        [
                          expression (lex/compact.ml[29,1354+23]..[29,1354+26])
                            Pexp_ident "dst" (lex/compact.ml[29,1354+23]..[29,1354+26])
                          expression (lex/compact.ml[29,1354+28]..[29,1354+35])
                            Pexp_construct "::" (lex/compact.ml[29,1354+32]..[29,1354+34])
                            Some
                              expression (lex/compact.ml[29,1354+28]..[29,1354+35]) ghost
                                Pexp_tuple
                                [
                                  expression (lex/compact.ml[29,1354+28]..[29,1354+32])
                                    Pexp_constant PConst_int (0xff,None)
                                  expression (lex/compact.ml[29,1354+34]..[29,1354+35])
                                    Pexp_ident "c" (lex/compact.ml[29,1354+34]..[29,1354+35])
                                ]
                        ]
              ]
    ]
  structure_item (lex/compact.ml[32,1392+0]..[34,1460+37])
    Pstr_value Nonrec
    [
      <def>
        pattern (lex/compact.ml[32,1392+4]..[32,1392+11])
          Ppat_var "ins_tag" (lex/compact.ml[32,1392+4]..[32,1392+11])
        expression (lex/compact.ml[32,1392+12]..[34,1460+37]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lex/compact.ml[32,1392+12]..[32,1392+13])
            Ppat_var "i" (lex/compact.ml[32,1392+12]..[32,1392+13])
          expression (lex/compact.ml[32,1392+14]..[34,1460+37]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (lex/compact.ml[32,1392+14]..[32,1392+15])
              Ppat_var "c" (lex/compact.ml[32,1392+14]..[32,1392+15])
            expression (lex/compact.ml[32,1392+18]..[34,1460+37])
              Pexp_match
              expression (lex/compact.ml[32,1392+24]..[32,1392+25])
                Pexp_ident "i" (lex/compact.ml[32,1392+24]..[32,1392+25])
              [
                <case>
                  pattern (lex/compact.ml[33,1423+4]..[33,1423+21])
                    Ppat_construct "SetTag" (lex/compact.ml[33,1423+4]..[33,1423+10])
                    Some
                      []
                      pattern (lex/compact.ml[33,1423+11]..[33,1423+21])
                        Ppat_tuple
                        [
                          pattern (lex/compact.ml[33,1423+12]..[33,1423+15])
                            Ppat_var "dst" (lex/compact.ml[33,1423+12]..[33,1423+15])
                          pattern (lex/compact.ml[33,1423+17]..[33,1423+20])
                            Ppat_var "src" (lex/compact.ml[33,1423+17]..[33,1423+20])
                        ]
                  expression (lex/compact.ml[33,1423+25]..[33,1423+36])
                    Pexp_construct "::" (lex/compact.ml[33,1423+28]..[33,1423+30])
                    Some
                      expression (lex/compact.ml[33,1423+25]..[33,1423+36]) ghost
                        Pexp_tuple
                        [
                          expression (lex/compact.ml[33,1423+25]..[33,1423+28])
                            Pexp_ident "dst" (lex/compact.ml[33,1423+25]..[33,1423+28])
                          expression (lex/compact.ml[33,1423+30]..[33,1423+36])
                            Pexp_construct "::" (lex/compact.ml[33,1423+33]..[33,1423+35])
                            Some
                              expression (lex/compact.ml[33,1423+30]..[33,1423+36]) ghost
                                Pexp_tuple
                                [
                                  expression (lex/compact.ml[33,1423+30]..[33,1423+33])
                                    Pexp_ident "src" (lex/compact.ml[33,1423+30]..[33,1423+33])
                                  expression (lex/compact.ml[33,1423+35]..[33,1423+36])
                                    Pexp_ident "c" (lex/compact.ml[33,1423+35]..[33,1423+36])
                                ]
                        ]
                <case>
                  pattern (lex/compact.ml[34,1460+4]..[34,1460+16])
                    Ppat_construct "EraseTag" (lex/compact.ml[34,1460+4]..[34,1460+12])
                    Some
                      []
                      pattern (lex/compact.ml[34,1460+13]..[34,1460+16])
                        Ppat_var "dst" (lex/compact.ml[34,1460+13]..[34,1460+16])
                  expression (lex/compact.ml[34,1460+25]..[34,1460+37])
                    Pexp_construct "::" (lex/compact.ml[34,1460+28]..[34,1460+30])
                    Some
                      expression (lex/compact.ml[34,1460+25]..[34,1460+37]) ghost
                        Pexp_tuple
                        [
                          expression (lex/compact.ml[34,1460+25]..[34,1460+28])
                            Pexp_ident "dst" (lex/compact.ml[34,1460+25]..[34,1460+28])
                          expression (lex/compact.ml[34,1460+30]..[34,1460+37])
                            Pexp_construct "::" (lex/compact.ml[34,1460+34]..[34,1460+36])
                            Some
                              expression (lex/compact.ml[34,1460+30]..[34,1460+37]) ghost
                                Pexp_tuple
                                [
                                  expression (lex/compact.ml[34,1460+30]..[34,1460+34])
                                    Pexp_constant PConst_int (0xff,None)
                                  expression (lex/compact.ml[34,1460+36]..[34,1460+37])
                                    Pexp_ident "c" (lex/compact.ml[34,1460+36]..[34,1460+37])
                                ]
                        ]
              ]
    ]
  structure_item (lex/compact.ml[37,1500+0]..[41,1593+3])
    Pstr_value Nonrec
    [
      <def>
        pattern (lex/compact.ml[37,1500+4]..[37,1500+16])
          Ppat_var "do_emit_code" (lex/compact.ml[37,1500+4]..[37,1500+16])
        expression (lex/compact.ml[37,1500+17]..[41,1593+3]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lex/compact.ml[37,1500+17]..[37,1500+18])
            Ppat_var "c" (lex/compact.ml[37,1500+17]..[37,1500+18])
          expression (lex/compact.ml[38,1521+2]..[41,1593+3])
            Pexp_let Nonrec
            [
              <def>
                pattern (lex/compact.ml[38,1521+6]..[38,1521+7])
                  Ppat_var "r" (lex/compact.ml[38,1521+6]..[38,1521+7])
                expression (lex/compact.ml[38,1521+10]..[38,1521+25])
                  Pexp_apply
                  expression (lex/compact.ml[38,1521+10]..[38,1521+20])
                    Pexp_ident "Table.size" (lex/compact.ml[38,1521+10]..[38,1521+20])
                  [
                    <arg>
                    Nolabel
                      expression (lex/compact.ml[38,1521+21]..[38,1521+25])
                        Pexp_ident "code" (lex/compact.ml[38,1521+21]..[38,1521+25])
                  ]
            ]
            expression (lex/compact.ml[39,1550+2]..[41,1593+3])
              Pexp_sequence
              expression (lex/compact.ml[39,1550+2]..[39,1550+22])
                Pexp_apply
                expression (lex/compact.ml[39,1550+2]..[39,1550+11])
                  Pexp_ident "List.iter" (lex/compact.ml[39,1550+2]..[39,1550+11])
                [
                  <arg>
                  Nolabel
                    expression (lex/compact.ml[39,1550+12]..[39,1550+20])
                      Pexp_ident "emit_int" (lex/compact.ml[39,1550+12]..[39,1550+20])
                  <arg>
                  Nolabel
                    expression (lex/compact.ml[39,1550+21]..[39,1550+22])
                      Pexp_ident "c" (lex/compact.ml[39,1550+21]..[39,1550+22])
                ]
              expression (lex/compact.ml[40,1575+2]..[41,1593+3])
                Pexp_sequence
                expression (lex/compact.ml[40,1575+2]..[40,1575+15])
                  Pexp_apply
                  expression (lex/compact.ml[40,1575+2]..[40,1575+10])
                    Pexp_ident "emit_int" (lex/compact.ml[40,1575+2]..[40,1575+10])
                  [
                    <arg>
                    Nolabel
                      expression (lex/compact.ml[40,1575+11]..[40,1575+15])
                        Pexp_constant PConst_int (0xff,None)
                  ]
                expression (lex/compact.ml[41,1593+2]..[41,1593+3])
                  Pexp_ident "r" (lex/compact.ml[41,1593+2]..[41,1593+3])
    ]
  structure_item (lex/compact.ml[43,1598+0]..[43,1598+31])
    Pstr_value Nonrec
    [
      <def>
        pattern (lex/compact.ml[43,1598+4]..[43,1598+10])
          Ppat_var "memory" (lex/compact.ml[43,1598+4]..[43,1598+10])
        expression (lex/compact.ml[43,1598+13]..[43,1598+31])
          Pexp_apply
          expression (lex/compact.ml[43,1598+13]..[43,1598+27])
            Pexp_ident "Hashtbl.create" (lex/compact.ml[43,1598+13]..[43,1598+27])
          [
            <arg>
            Nolabel
              expression (lex/compact.ml[43,1598+28]..[43,1598+31])
                Pexp_constant PConst_int (101,None)
          ]
    ]
  structure_item (lex/compact.ml[45,1631+0]..[50,1766+7])
    Pstr_value Nonrec
    [
      <def>
        pattern (lex/compact.ml[45,1631+4]..[45,1631+17])
          Ppat_var "mem_emit_code" (lex/compact.ml[45,1631+4]..[45,1631+17])
        expression (lex/compact.ml[45,1631+18]..[50,1766+7]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lex/compact.ml[45,1631+18]..[45,1631+19])
            Ppat_var "c" (lex/compact.ml[45,1631+18]..[45,1631+19])
          expression (lex/compact.ml[46,1653+2]..[50,1766+7])
            Pexp_try
            expression (lex/compact.ml[46,1653+6]..[46,1653+27])
              Pexp_apply
              expression (lex/compact.ml[46,1653+6]..[46,1653+18])
                Pexp_ident "Hashtbl.find" (lex/compact.ml[46,1653+6]..[46,1653+18])
              [
                <arg>
                Nolabel
                  expression (lex/compact.ml[46,1653+19]..[46,1653+25])
                    Pexp_ident "memory" (lex/compact.ml[46,1653+19]..[46,1653+25])
                <arg>
                Nolabel
                  expression (lex/compact.ml[46,1653+26]..[46,1653+27])
                    Pexp_ident "c" (lex/compact.ml[46,1653+26]..[46,1653+27])
              ]
            [
              <case>
                pattern (lex/compact.ml[47,1686+4]..[47,1686+13])
                  Ppat_construct "Not_found" (lex/compact.ml[47,1686+4]..[47,1686+13])
                  None
                expression (lex/compact.ml[48,1703+6]..[50,1766+7])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (lex/compact.ml[48,1703+10]..[48,1703+11])
                        Ppat_var "r" (lex/compact.ml[48,1703+10]..[48,1703+11])
                      expression (lex/compact.ml[48,1703+14]..[48,1703+28])
                        Pexp_apply
                        expression (lex/compact.ml[48,1703+14]..[48,1703+26])
                          Pexp_ident "do_emit_code" (lex/compact.ml[48,1703+14]..[48,1703+26])
                        [
                          <arg>
                          Nolabel
                            expression (lex/compact.ml[48,1703+27]..[48,1703+28])
                              Pexp_ident "c" (lex/compact.ml[48,1703+27]..[48,1703+28])
                        ]
                  ]
                  expression (lex/compact.ml[49,1735+6]..[50,1766+7])
                    Pexp_sequence
                    expression (lex/compact.ml[49,1735+6]..[49,1735+28])
                      Pexp_apply
                      expression (lex/compact.ml[49,1735+6]..[49,1735+17])
                        Pexp_ident "Hashtbl.add" (lex/compact.ml[49,1735+6]..[49,1735+17])
                      [
                        <arg>
                        Nolabel
                          expression (lex/compact.ml[49,1735+18]..[49,1735+24])
                            Pexp_ident "memory" (lex/compact.ml[49,1735+18]..[49,1735+24])
                        <arg>
                        Nolabel
                          expression (lex/compact.ml[49,1735+25]..[49,1735+26])
                            Pexp_ident "c" (lex/compact.ml[49,1735+25]..[49,1735+26])
                        <arg>
                        Nolabel
                          expression (lex/compact.ml[49,1735+27]..[49,1735+28])
                            Pexp_ident "r" (lex/compact.ml[49,1735+27]..[49,1735+28])
                      ]
                    expression (lex/compact.ml[50,1766+6]..[50,1766+7])
                      Pexp_ident "r" (lex/compact.ml[50,1766+6]..[50,1766+7])
            ]
    ]
  structure_item (lex/compact.ml[53,1830+0]..[53,1830+24])
    Pstr_value Nonrec
    [
      <def>
        pattern (lex/compact.ml[53,1830+4]..[53,1830+5])
          Ppat_any
        expression (lex/compact.ml[53,1830+8]..[53,1830+24])
          Pexp_apply
          expression (lex/compact.ml[53,1830+8]..[53,1830+21])
            Pexp_ident "mem_emit_code" (lex/compact.ml[53,1830+8]..[53,1830+21])
          [
            <arg>
            Nolabel
              expression (lex/compact.ml[53,1830+22]..[53,1830+24])
                Pexp_construct "[]" (lex/compact.ml[53,1830+22]..[53,1830+24])
                None
          ]
    ]
  structure_item (lex/compact.ml[55,1856+0]..[56,1923+66])
    Pstr_value Nonrec
    [
      <def>
        pattern (lex/compact.ml[55,1856+4]..[55,1856+17])
          Ppat_var "emit_tag_code" (lex/compact.ml[55,1856+4]..[55,1856+17])
        expression (lex/compact.ml[55,1856+18]..[55,1856+66]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lex/compact.ml[55,1856+18]..[55,1856+19])
            Ppat_var "c" (lex/compact.ml[55,1856+18]..[55,1856+19])
          expression (lex/compact.ml[55,1856+22]..[55,1856+66])
            Pexp_apply
            expression (lex/compact.ml[55,1856+22]..[55,1856+35])
              Pexp_ident "mem_emit_code" (lex/compact.ml[55,1856+22]..[55,1856+35])
            [
              <arg>
              Nolabel
                expression (lex/compact.ml[55,1856+36]..[55,1856+66])
                  Pexp_apply
                  expression (lex/compact.ml[55,1856+37]..[55,1856+52])
                    Pexp_ident "List.fold_right" (lex/compact.ml[55,1856+37]..[55,1856+52])
                  [
                    <arg>
                    Nolabel
                      expression (lex/compact.ml[55,1856+53]..[55,1856+60])
                        Pexp_ident "ins_tag" (lex/compact.ml[55,1856+53]..[55,1856+60])
                    <arg>
                    Nolabel
                      expression (lex/compact.ml[55,1856+61]..[55,1856+62])
                        Pexp_ident "c" (lex/compact.ml[55,1856+61]..[55,1856+62])
                    <arg>
                    Nolabel
                      expression (lex/compact.ml[55,1856+63]..[55,1856+65])
                        Pexp_construct "[]" (lex/compact.ml[55,1856+63]..[55,1856+65])
                        None
                  ]
            ]
      <def>
        pattern (lex/compact.ml[56,1923+4]..[56,1923+17])
          Ppat_var "emit_mem_code" (lex/compact.ml[56,1923+4]..[56,1923+17])
        expression (lex/compact.ml[56,1923+18]..[56,1923+66]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lex/compact.ml[56,1923+18]..[56,1923+19])
            Ppat_var "c" (lex/compact.ml[56,1923+18]..[56,1923+19])
          expression (lex/compact.ml[56,1923+22]..[56,1923+66])
            Pexp_apply
            expression (lex/compact.ml[56,1923+22]..[56,1923+35])
              Pexp_ident "mem_emit_code" (lex/compact.ml[56,1923+22]..[56,1923+35])
            [
              <arg>
              Nolabel
                expression (lex/compact.ml[56,1923+36]..[56,1923+66])
                  Pexp_apply
                  expression (lex/compact.ml[56,1923+37]..[56,1923+52])
                    Pexp_ident "List.fold_right" (lex/compact.ml[56,1923+37]..[56,1923+52])
                  [
                    <arg>
                    Nolabel
                      expression (lex/compact.ml[56,1923+53]..[56,1923+60])
                        Pexp_ident "ins_mem" (lex/compact.ml[56,1923+53]..[56,1923+60])
                    <arg>
                    Nolabel
                      expression (lex/compact.ml[56,1923+61]..[56,1923+62])
                        Pexp_ident "c" (lex/compact.ml[56,1923+61]..[56,1923+62])
                    <arg>
                    Nolabel
                      expression (lex/compact.ml[56,1923+63]..[56,1923+65])
                        Pexp_construct "[]" (lex/compact.ml[56,1923+63]..[56,1923+65])
                        None
                  ]
            ]
    ]
  structure_item (lex/compact.ml[65,2198+0]..[79,2610+12])
    Pstr_value Nonrec
    [
      <def>
        pattern (lex/compact.ml[65,2198+4]..[65,2198+21])
          Ppat_var "most_frequent_elt" (lex/compact.ml[65,2198+4]..[65,2198+21])
        expression (lex/compact.ml[65,2198+22]..[79,2610+12]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lex/compact.ml[65,2198+22]..[65,2198+23])
            Ppat_var "v" (lex/compact.ml[65,2198+22]..[65,2198+23])
          expression (lex/compact.ml[66,2224+2]..[79,2610+12])
            Pexp_let Nonrec
            [
              <def>
                pattern (lex/compact.ml[66,2224+6]..[66,2224+17])
                  Ppat_var "frequencies" (lex/compact.ml[66,2224+6]..[66,2224+17])
                expression (lex/compact.ml[66,2224+20]..[66,2224+37])
                  Pexp_apply
                  expression (lex/compact.ml[66,2224+20]..[66,2224+34])
                    Pexp_ident "Hashtbl.create" (lex/compact.ml[66,2224+20]..[66,2224+34])
                  [
                    <arg>
                    Nolabel
                      expression (lex/compact.ml[66,2224+35]..[66,2224+37])
                        Pexp_constant PConst_int (17,None)
                  ]
            ]
            expression (lex/compact.ml[67,2265+2]..[79,2610+12])
              Pexp_let Nonrec
              [
                <def>
                  pattern (lex/compact.ml[67,2265+6]..[67,2265+14])
                    Ppat_var "max_freq" (lex/compact.ml[67,2265+6]..[67,2265+14])
                  expression (lex/compact.ml[67,2265+17]..[67,2265+22])
                    Pexp_apply
                    expression (lex/compact.ml[67,2265+17]..[67,2265+20])
                      Pexp_ident "ref" (lex/compact.ml[67,2265+17]..[67,2265+20])
                    [
                      <arg>
                      Nolabel
                        expression (lex/compact.ml[67,2265+21]..[67,2265+22])
                          Pexp_constant PConst_int (0,None)
                    ]
              ]
              expression (lex/compact.ml[68,2291+2]..[79,2610+12])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (lex/compact.ml[68,2291+6]..[68,2291+15])
                      Ppat_var "most_freq" (lex/compact.ml[68,2291+6]..[68,2291+15])
                    expression (lex/compact.ml[68,2291+18]..[68,2291+29])
                      Pexp_apply
                      expression (lex/compact.ml[68,2291+18]..[68,2291+21])
                        Pexp_ident "ref" (lex/compact.ml[68,2291+18]..[68,2291+21])
                      [
                        <arg>
                        Nolabel
                          expression (lex/compact.ml[68,2291+22]..[68,2291+29])
                            Pexp_apply
                            expression (lex/compact.ml[68,2291+23]..[68,2291+28]) ghost
                              Pexp_ident "Array.get" (lex/compact.ml[68,2291+23]..[68,2291+28]) ghost
                            [
                              <arg>
                              Nolabel
                                expression (lex/compact.ml[68,2291+23]..[68,2291+24])
                                  Pexp_ident "v" (lex/compact.ml[68,2291+23]..[68,2291+24])
                              <arg>
                              Nolabel
                                expression (lex/compact.ml[68,2291+26]..[68,2291+27])
                                  Pexp_constant PConst_int (0,None)
                            ]
                      ]
                ]
                expression (lex/compact.ml[69,2324+2]..[79,2610+12])
                  Pexp_sequence
                  expression (lex/compact.ml[69,2324+2]..[78,2602+6])
                    Pexp_for Up
                    pattern (lex/compact.ml[69,2324+6]..[69,2324+7])
                      Ppat_var "i" (lex/compact.ml[69,2324+6]..[69,2324+7])
                    expression (lex/compact.ml[69,2324+10]..[69,2324+11])
                      Pexp_constant PConst_int (0,None)
                    expression (lex/compact.ml[69,2324+15]..[69,2324+33])
                      Pexp_apply
                      expression (lex/compact.ml[69,2324+30]..[69,2324+31])
                        Pexp_ident "-" (lex/compact.ml[69,2324+30]..[69,2324+31])
                      [
                        <arg>
                        Nolabel
                          expression (lex/compact.ml[69,2324+15]..[69,2324+29])
                            Pexp_apply
                            expression (lex/compact.ml[69,2324+15]..[69,2324+27])
                              Pexp_ident "Array.length" (lex/compact.ml[69,2324+15]..[69,2324+27])
                            [
                              <arg>
                              Nolabel
                                expression (lex/compact.ml[69,2324+28]..[69,2324+29])
                                  Pexp_ident "v" (lex/compact.ml[69,2324+28]..[69,2324+29])
                            ]
                        <arg>
                        Nolabel
                          expression (lex/compact.ml[69,2324+32]..[69,2324+33])
                            Pexp_constant PConst_int (1,None)
                      ]
                    expression (lex/compact.ml[70,2361+4]..[77,2534+67])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (lex/compact.ml[70,2361+8]..[70,2361+9])
                            Ppat_var "e" (lex/compact.ml[70,2361+8]..[70,2361+9])
                          expression (lex/compact.ml[70,2361+12]..[70,2361+17])
                            Pexp_apply
                            expression (lex/compact.ml[70,2361+12]..[70,2361+17]) ghost
                              Pexp_ident "Array.get" (lex/compact.ml[70,2361+12]..[70,2361+17]) ghost
                            [
                              <arg>
                              Nolabel
                                expression (lex/compact.ml[70,2361+12]..[70,2361+13])
                                  Pexp_ident "v" (lex/compact.ml[70,2361+12]..[70,2361+13])
                              <arg>
                              Nolabel
                                expression (lex/compact.ml[70,2361+15]..[70,2361+16])
                                  Pexp_ident "i" (lex/compact.ml[70,2361+15]..[70,2361+16])
                            ]
                      ]
                      expression (lex/compact.ml[71,2382+4]..[77,2534+67])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lex/compact.ml[71,2382+8]..[71,2382+9])
                              Ppat_var "r" (lex/compact.ml[71,2382+8]..[71,2382+9])
                            expression (lex/compact.ml[72,2394+6]..[75,2463+55])
                              Pexp_try
                              expression (lex/compact.ml[73,2404+8]..[73,2404+34])
                                Pexp_apply
                                expression (lex/compact.ml[73,2404+8]..[73,2404+20])
                                  Pexp_ident "Hashtbl.find" (lex/compact.ml[73,2404+8]..[73,2404+20])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lex/compact.ml[73,2404+21]..[73,2404+32])
                                      Pexp_ident "frequencies" (lex/compact.ml[73,2404+21]..[73,2404+32])
                                  <arg>
                                  Nolabel
                                    expression (lex/compact.ml[73,2404+33]..[73,2404+34])
                                      Pexp_ident "e" (lex/compact.ml[73,2404+33]..[73,2404+34])
                                ]
                              [
                                <case>
                                  pattern (lex/compact.ml[74,2439+11]..[74,2439+20])
                                    Ppat_construct "Not_found" (lex/compact.ml[74,2439+11]..[74,2439+20])
                                    None
                                  expression (lex/compact.ml[75,2463+8]..[75,2463+55])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lex/compact.ml[75,2463+12]..[75,2463+13])
                                          Ppat_var "r" (lex/compact.ml[75,2463+12]..[75,2463+13])
                                        expression (lex/compact.ml[75,2463+16]..[75,2463+21])
                                          Pexp_apply
                                          expression (lex/compact.ml[75,2463+16]..[75,2463+19])
                                            Pexp_ident "ref" (lex/compact.ml[75,2463+16]..[75,2463+19])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lex/compact.ml[75,2463+20]..[75,2463+21])
                                                Pexp_constant PConst_int (1,None)
                                          ]
                                    ]
                                    expression (lex/compact.ml[75,2463+25]..[75,2463+55])
                                      Pexp_sequence
                                      expression (lex/compact.ml[75,2463+25]..[75,2463+52])
                                        Pexp_apply
                                        expression (lex/compact.ml[75,2463+25]..[75,2463+36])
                                          Pexp_ident "Hashtbl.add" (lex/compact.ml[75,2463+25]..[75,2463+36])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lex/compact.ml[75,2463+37]..[75,2463+48])
                                              Pexp_ident "frequencies" (lex/compact.ml[75,2463+37]..[75,2463+48])
                                          <arg>
                                          Nolabel
                                            expression (lex/compact.ml[75,2463+49]..[75,2463+50])
                                              Pexp_ident "e" (lex/compact.ml[75,2463+49]..[75,2463+50])
                                          <arg>
                                          Nolabel
                                            expression (lex/compact.ml[75,2463+51]..[75,2463+52])
                                              Pexp_ident "r" (lex/compact.ml[75,2463+51]..[75,2463+52])
                                        ]
                                      expression (lex/compact.ml[75,2463+54]..[75,2463+55])
                                        Pexp_ident "r" (lex/compact.ml[75,2463+54]..[75,2463+55])
                              ]
                        ]
                        expression (lex/compact.ml[76,2522+4]..[77,2534+67])
                          Pexp_sequence
                          expression (lex/compact.ml[76,2522+4]..[76,2522+10])
                            Pexp_apply
                            expression (lex/compact.ml[76,2522+4]..[76,2522+8])
                              Pexp_ident "incr" (lex/compact.ml[76,2522+4]..[76,2522+8])
                            [
                              <arg>
                              Nolabel
                                expression (lex/compact.ml[76,2522+9]..[76,2522+10])
                                  Pexp_ident "r" (lex/compact.ml[76,2522+9]..[76,2522+10])
                            ]
                          expression (lex/compact.ml[77,2534+4]..[77,2534+67])
                            Pexp_ifthenelse
                            expression (lex/compact.ml[77,2534+7]..[77,2534+21])
                              Pexp_apply
                              expression (lex/compact.ml[77,2534+10]..[77,2534+11])
                                Pexp_ident ">" (lex/compact.ml[77,2534+10]..[77,2534+11])
                              [
                                <arg>
                                Nolabel
                                  expression (lex/compact.ml[77,2534+7]..[77,2534+9])
                                    Pexp_apply
                                    expression (lex/compact.ml[77,2534+7]..[77,2534+8])
                                      Pexp_ident "!" (lex/compact.ml[77,2534+7]..[77,2534+8])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lex/compact.ml[77,2534+8]..[77,2534+9])
                                          Pexp_ident "r" (lex/compact.ml[77,2534+8]..[77,2534+9])
                                    ]
                                <arg>
                                Nolabel
                                  expression (lex/compact.ml[77,2534+12]..[77,2534+21])
                                    Pexp_apply
                                    expression (lex/compact.ml[77,2534+12]..[77,2534+13])
                                      Pexp_ident "!" (lex/compact.ml[77,2534+12]..[77,2534+13])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lex/compact.ml[77,2534+13]..[77,2534+21])
                                          Pexp_ident "max_freq" (lex/compact.ml[77,2534+13]..[77,2534+21])
                                    ]
                              ]
                            expression (lex/compact.ml[77,2534+27]..[77,2534+67])
                              Pexp_sequence
                              expression (lex/compact.ml[77,2534+33]..[77,2534+47])
                                Pexp_apply
                                expression (lex/compact.ml[77,2534+42]..[77,2534+44])
                                  Pexp_ident ":=" (lex/compact.ml[77,2534+42]..[77,2534+44])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lex/compact.ml[77,2534+33]..[77,2534+41])
                                      Pexp_ident "max_freq" (lex/compact.ml[77,2534+33]..[77,2534+41])
                                  <arg>
                                  Nolabel
                                    expression (lex/compact.ml[77,2534+45]..[77,2534+47])
                                      Pexp_apply
                                      expression (lex/compact.ml[77,2534+45]..[77,2534+46])
                                        Pexp_ident "!" (lex/compact.ml[77,2534+45]..[77,2534+46])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lex/compact.ml[77,2534+46]..[77,2534+47])
                                            Pexp_ident "r" (lex/compact.ml[77,2534+46]..[77,2534+47])
                                      ]
                                ]
                              expression (lex/compact.ml[77,2534+49]..[77,2534+63])
                                Pexp_apply
                                expression (lex/compact.ml[77,2534+59]..[77,2534+61])
                                  Pexp_ident ":=" (lex/compact.ml[77,2534+59]..[77,2534+61])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lex/compact.ml[77,2534+49]..[77,2534+58])
                                      Pexp_ident "most_freq" (lex/compact.ml[77,2534+49]..[77,2534+58])
                                  <arg>
                                  Nolabel
                                    expression (lex/compact.ml[77,2534+62]..[77,2534+63])
                                      Pexp_ident "e" (lex/compact.ml[77,2534+62]..[77,2534+63])
                                ]
                            None
                  expression (lex/compact.ml[79,2610+2]..[79,2610+12])
                    Pexp_apply
                    expression (lex/compact.ml[79,2610+2]..[79,2610+3])
                      Pexp_ident "!" (lex/compact.ml[79,2610+2]..[79,2610+3])
                    [
                      <arg>
                      Nolabel
                        expression (lex/compact.ml[79,2610+3]..[79,2610+12])
                          Pexp_ident "most_freq" (lex/compact.ml[79,2610+3]..[79,2610+12])
                    ]
    ]
  structure_item (lex/compact.ml[83,2697+0]..[89,2892+10])
    Pstr_value Nonrec
    [
      <def>
        pattern (lex/compact.ml[83,2697+4]..[83,2697+24])
          Ppat_var "non_default_elements" (lex/compact.ml[83,2697+4]..[83,2697+24])
        expression (lex/compact.ml[83,2697+25]..[89,2892+10]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lex/compact.ml[83,2697+25]..[83,2697+28])
            Ppat_var "def" (lex/compact.ml[83,2697+25]..[83,2697+28])
          expression (lex/compact.ml[83,2697+29]..[89,2892+10]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (lex/compact.ml[83,2697+29]..[83,2697+30])
              Ppat_var "v" (lex/compact.ml[83,2697+29]..[83,2697+30])
            expression (lex/compact.ml[84,2730+2]..[89,2892+10])
              Pexp_let Rec
              [
                <def>
                  pattern (lex/compact.ml[84,2730+10]..[84,2730+16])
                    Ppat_var "nondef" (lex/compact.ml[84,2730+10]..[84,2730+16])
                  expression (lex/compact.ml[84,2730+17]..[88,2881+7]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (lex/compact.ml[84,2730+17]..[84,2730+18])
                      Ppat_var "i" (lex/compact.ml[84,2730+17]..[84,2730+18])
                    expression (lex/compact.ml[85,2751+4]..[88,2881+7])
                      Pexp_ifthenelse
                      expression (lex/compact.ml[85,2751+7]..[85,2751+26])
                        Pexp_apply
                        expression (lex/compact.ml[85,2751+9]..[85,2751+11])
                          Pexp_ident ">=" (lex/compact.ml[85,2751+9]..[85,2751+11])
                        [
                          <arg>
                          Nolabel
                            expression (lex/compact.ml[85,2751+7]..[85,2751+8])
                              Pexp_ident "i" (lex/compact.ml[85,2751+7]..[85,2751+8])
                          <arg>
                          Nolabel
                            expression (lex/compact.ml[85,2751+12]..[85,2751+26])
                              Pexp_apply
                              expression (lex/compact.ml[85,2751+12]..[85,2751+24])
                                Pexp_ident "Array.length" (lex/compact.ml[85,2751+12]..[85,2751+24])
                              [
                                <arg>
                                Nolabel
                                  expression (lex/compact.ml[85,2751+25]..[85,2751+26])
                                    Pexp_ident "v" (lex/compact.ml[85,2751+25]..[85,2751+26])
                              ]
                        ]
                      expression (lex/compact.ml[85,2751+32]..[85,2751+34])
                        Pexp_construct "[]" (lex/compact.ml[85,2751+32]..[85,2751+34])
                        None
                      Some
                        expression (lex/compact.ml[85,2751+40]..[88,2881+7])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lex/compact.ml[86,2797+10]..[86,2797+11])
                                Ppat_var "e" (lex/compact.ml[86,2797+10]..[86,2797+11])
                              expression (lex/compact.ml[86,2797+14]..[86,2797+19])
                                Pexp_apply
                                expression (lex/compact.ml[86,2797+14]..[86,2797+19]) ghost
                                  Pexp_ident "Array.get" (lex/compact.ml[86,2797+14]..[86,2797+19]) ghost
                                [
                                  <arg>
                                  Nolabel
                                    expression (lex/compact.ml[86,2797+14]..[86,2797+15])
                                      Pexp_ident "v" (lex/compact.ml[86,2797+14]..[86,2797+15])
                                  <arg>
                                  Nolabel
                                    expression (lex/compact.ml[86,2797+17]..[86,2797+18])
                                      Pexp_ident "i" (lex/compact.ml[86,2797+17]..[86,2797+18])
                                ]
                          ]
                          expression (lex/compact.ml[87,2820+6]..[87,2820+60])
                            Pexp_ifthenelse
                            expression (lex/compact.ml[87,2820+9]..[87,2820+16])
                              Pexp_apply
                              expression (lex/compact.ml[87,2820+11]..[87,2820+12])
                                Pexp_ident "=" (lex/compact.ml[87,2820+11]..[87,2820+12])
                              [
                                <arg>
                                Nolabel
                                  expression (lex/compact.ml[87,2820+9]..[87,2820+10])
                                    Pexp_ident "e" (lex/compact.ml[87,2820+9]..[87,2820+10])
                                <arg>
                                Nolabel
                                  expression (lex/compact.ml[87,2820+13]..[87,2820+16])
                                    Pexp_ident "def" (lex/compact.ml[87,2820+13]..[87,2820+16])
                              ]
                            expression (lex/compact.ml[87,2820+22]..[87,2820+33])
                              Pexp_apply
                              expression (lex/compact.ml[87,2820+22]..[87,2820+28])
                                Pexp_ident "nondef" (lex/compact.ml[87,2820+22]..[87,2820+28])
                              [
                                <arg>
                                Nolabel
                                  expression (lex/compact.ml[87,2820+28]..[87,2820+33])
                                    Pexp_apply
                                    expression (lex/compact.ml[87,2820+30]..[87,2820+31])
                                      Pexp_ident "+" (lex/compact.ml[87,2820+30]..[87,2820+31])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lex/compact.ml[87,2820+29]..[87,2820+30])
                                          Pexp_ident "i" (lex/compact.ml[87,2820+29]..[87,2820+30])
                                      <arg>
                                      Nolabel
                                        expression (lex/compact.ml[87,2820+31]..[87,2820+32])
                                          Pexp_constant PConst_int (1,None)
                                    ]
                              ]
                            Some
                              expression (lex/compact.ml[87,2820+39]..[87,2820+60])
                                Pexp_construct "::" (lex/compact.ml[87,2820+46]..[87,2820+48])
                                Some
                                  expression (lex/compact.ml[87,2820+39]..[87,2820+60]) ghost
                                    Pexp_tuple
                                    [
                                      expression (lex/compact.ml[87,2820+39]..[87,2820+45])
                                        Pexp_tuple
                                        [
                                          expression (lex/compact.ml[87,2820+40]..[87,2820+41])
                                            Pexp_ident "i" (lex/compact.ml[87,2820+40]..[87,2820+41])
                                          expression (lex/compact.ml[87,2820+43]..[87,2820+44])
                                            Pexp_ident "e" (lex/compact.ml[87,2820+43]..[87,2820+44])
                                        ]
                                      expression (lex/compact.ml[87,2820+49]..[87,2820+60])
                                        Pexp_apply
                                        expression (lex/compact.ml[87,2820+49]..[87,2820+55])
                                          Pexp_ident "nondef" (lex/compact.ml[87,2820+49]..[87,2820+55])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lex/compact.ml[87,2820+55]..[87,2820+60])
                                              Pexp_apply
                                              expression (lex/compact.ml[87,2820+57]..[87,2820+58])
                                                Pexp_ident "+" (lex/compact.ml[87,2820+57]..[87,2820+58])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lex/compact.ml[87,2820+56]..[87,2820+57])
                                                    Pexp_ident "i" (lex/compact.ml[87,2820+56]..[87,2820+57])
                                                <arg>
                                                Nolabel
                                                  expression (lex/compact.ml[87,2820+58]..[87,2820+59])
                                                    Pexp_constant PConst_int (1,None)
                                              ]
                                        ]
                                    ]
              ]
              expression (lex/compact.ml[89,2892+2]..[89,2892+10])
                Pexp_apply
                expression (lex/compact.ml[89,2892+2]..[89,2892+8])
                  Pexp_ident "nondef" (lex/compact.ml[89,2892+2]..[89,2892+8])
                [
                  <arg>
                  Nolabel
                    expression (lex/compact.ml[89,2892+9]..[89,2892+10])
                      Pexp_constant PConst_int (0,None)
                ]
    ]
  structure_item (lex/compact.ml[92,2905+0]..[95,2986+31])
    Pstr_type Rec
    [
      type_declaration "t_compact" (lex/compact.ml[92,2905+5]..[92,2905+14]) (lex/compact.ml[92,2905+0]..[95,2986+31])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (lex/compact.ml[93,2922+2]..[93,2922+31])
                Mutable
                "c_trans" (lex/compact.ml[93,2922+10]..[93,2922+17])                core_type (lex/compact.ml[93,2922+20]..[93,2922+29])
                  Ptyp_constr "array" (lex/compact.ml[93,2922+24]..[93,2922+29])
                  [
                    core_type (lex/compact.ml[93,2922+20]..[93,2922+23])
                      Ptyp_constr "int" (lex/compact.ml[93,2922+20]..[93,2922+23])
                      []
                  ]
              (lex/compact.ml[94,2954+2]..[94,2954+31])
                Mutable
                "c_check" (lex/compact.ml[94,2954+10]..[94,2954+17])                core_type (lex/compact.ml[94,2954+20]..[94,2954+29])
                  Ptyp_constr "array" (lex/compact.ml[94,2954+24]..[94,2954+29])
                  [
                    core_type (lex/compact.ml[94,2954+20]..[94,2954+23])
                      Ptyp_constr "int" (lex/compact.ml[94,2954+20]..[94,2954+23])
                      []
                  ]
              (lex/compact.ml[95,2986+2]..[95,2986+29])
                Mutable
                "c_last_used" (lex/compact.ml[95,2986+10]..[95,2986+21])                core_type (lex/compact.ml[95,2986+24]..[95,2986+27])
                  Ptyp_constr "int" (lex/compact.ml[95,2986+24]..[95,2986+27])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (lex/compact.ml[97,3019+0]..[100,3114+23])
    Pstr_value Nonrec
    [
      <def>
        pattern (lex/compact.ml[97,3019+4]..[97,3019+18])
          Ppat_var "create_compact" (lex/compact.ml[97,3019+4]..[97,3019+18])
        expression (lex/compact.ml[97,3019+19]..[100,3114+23]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lex/compact.ml[97,3019+19]..[97,3019+21])
            Ppat_construct "()" (lex/compact.ml[97,3019+19]..[97,3019+21])
            None
          expression (lex/compact.ml[98,3043+2]..[100,3114+23])
            Pexp_record
            [
              "c_trans" (lex/compact.ml[98,3043+4]..[98,3043+11])
                expression (lex/compact.ml[98,3043+14]..[98,3043+31])
                  Pexp_apply
                  expression (lex/compact.ml[98,3043+14]..[98,3043+24])
                    Pexp_ident "Array.make" (lex/compact.ml[98,3043+14]..[98,3043+24])
                  [
                    <arg>
                    Nolabel
                      expression (lex/compact.ml[98,3043+25]..[98,3043+29])
                        Pexp_constant PConst_int (1024,None)
                    <arg>
                    Nolabel
                      expression (lex/compact.ml[98,3043+30]..[98,3043+31])
                        Pexp_constant PConst_int (0,None)
                  ]
              "c_check" (lex/compact.ml[99,3077+4]..[99,3077+11])
                expression (lex/compact.ml[99,3077+14]..[99,3077+34])
                  Pexp_apply
                  expression (lex/compact.ml[99,3077+14]..[99,3077+24])
                    Pexp_ident "Array.make" (lex/compact.ml[99,3077+14]..[99,3077+24])
                  [
                    <arg>
                    Nolabel
                      expression (lex/compact.ml[99,3077+25]..[99,3077+29])
                        Pexp_constant PConst_int (1024,None)
                    <arg>
                    Nolabel
                      expression (lex/compact.ml[99,3077+30]..[99,3077+34])
                        Pexp_constant PConst_int (-1,None)
                  ]
              "c_last_used" (lex/compact.ml[100,3114+4]..[100,3114+15])
                expression (lex/compact.ml[100,3114+18]..[100,3114+19])
                  Pexp_constant PConst_int (0,None)
            ]
            None
    ]
  structure_item (lex/compact.ml[102,3139+0]..[105,3234+20])
    Pstr_value Nonrec
    [
      <def>
        pattern (lex/compact.ml[102,3139+4]..[102,3139+17])
          Ppat_var "reset_compact" (lex/compact.ml[102,3139+4]..[102,3139+17])
        expression (lex/compact.ml[102,3139+18]..[105,3234+20]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lex/compact.ml[102,3139+18]..[102,3139+19])
            Ppat_var "c" (lex/compact.ml[102,3139+18]..[102,3139+19])
          expression (lex/compact.ml[103,3161+2]..[105,3234+20])
            Pexp_sequence
            expression (lex/compact.ml[103,3161+2]..[103,3161+32])
              Pexp_setfield
              expression (lex/compact.ml[103,3161+2]..[103,3161+3])
                Pexp_ident "c" (lex/compact.ml[103,3161+2]..[103,3161+3])
              "c_trans" (lex/compact.ml[103,3161+4]..[103,3161+11])
              expression (lex/compact.ml[103,3161+15]..[103,3161+32])
                Pexp_apply
                expression (lex/compact.ml[103,3161+15]..[103,3161+25])
                  Pexp_ident "Array.make" (lex/compact.ml[103,3161+15]..[103,3161+25])
                [
                  <arg>
                  Nolabel
                    expression (lex/compact.ml[103,3161+26]..[103,3161+30])
                      Pexp_constant PConst_int (1024,None)
                  <arg>
                  Nolabel
                    expression (lex/compact.ml[103,3161+31]..[103,3161+32])
                      Pexp_constant PConst_int (0,None)
                ]
            expression (lex/compact.ml[104,3196+2]..[105,3234+20])
              Pexp_sequence
              expression (lex/compact.ml[104,3196+2]..[104,3196+35])
                Pexp_setfield
                expression (lex/compact.ml[104,3196+2]..[104,3196+3])
                  Pexp_ident "c" (lex/compact.ml[104,3196+2]..[104,3196+3])
                "c_check" (lex/compact.ml[104,3196+4]..[104,3196+11])
                expression (lex/compact.ml[104,3196+15]..[104,3196+35])
                  Pexp_apply
                  expression (lex/compact.ml[104,3196+15]..[104,3196+25])
                    Pexp_ident "Array.make" (lex/compact.ml[104,3196+15]..[104,3196+25])
                  [
                    <arg>
                    Nolabel
                      expression (lex/compact.ml[104,3196+26]..[104,3196+30])
                        Pexp_constant PConst_int (1024,None)
                    <arg>
                    Nolabel
                      expression (lex/compact.ml[104,3196+31]..[104,3196+35])
                        Pexp_constant PConst_int (-1,None)
                  ]
              expression (lex/compact.ml[105,3234+2]..[105,3234+20])
                Pexp_setfield
                expression (lex/compact.ml[105,3234+2]..[105,3234+3])
                  Pexp_ident "c" (lex/compact.ml[105,3234+2]..[105,3234+3])
                "c_last_used" (lex/compact.ml[105,3234+4]..[105,3234+15])
                expression (lex/compact.ml[105,3234+19]..[105,3234+20])
                  Pexp_constant PConst_int (0,None)
    ]
  structure_item (lex/compact.ml[108,3328+0]..[109,3358+29])
    Pstr_value Nonrec
    [
      <def>
        pattern (lex/compact.ml[108,3328+4]..[108,3328+9])
          Ppat_var "trans" (lex/compact.ml[108,3328+4]..[108,3328+9])
        expression (lex/compact.ml[108,3328+12]..[108,3328+29])
          Pexp_apply
          expression (lex/compact.ml[108,3328+12]..[108,3328+26])
            Pexp_ident "create_compact" (lex/compact.ml[108,3328+12]..[108,3328+26])
          [
            <arg>
            Nolabel
              expression (lex/compact.ml[108,3328+27]..[108,3328+29])
                Pexp_construct "()" (lex/compact.ml[108,3328+27]..[108,3328+29])
                None
          ]
      <def>
        pattern (lex/compact.ml[109,3358+4]..[109,3358+9])
          Ppat_var "moves" (lex/compact.ml[109,3358+4]..[109,3358+9])
        expression (lex/compact.ml[109,3358+12]..[109,3358+29])
          Pexp_apply
          expression (lex/compact.ml[109,3358+12]..[109,3358+26])
            Pexp_ident "create_compact" (lex/compact.ml[109,3358+12]..[109,3358+26])
          [
            <arg>
            Nolabel
              expression (lex/compact.ml[109,3358+27]..[109,3358+29])
                Pexp_construct "()" (lex/compact.ml[109,3358+27]..[109,3358+29])
                None
          ]
    ]
  structure_item (lex/compact.ml[112,3390+0]..[119,3631+50])
    Pstr_value Nonrec
    [
      <def>
        pattern (lex/compact.ml[112,3390+4]..[112,3390+16])
          Ppat_var "grow_compact" (lex/compact.ml[112,3390+4]..[112,3390+16])
        expression (lex/compact.ml[112,3390+17]..[119,3631+50]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lex/compact.ml[112,3390+17]..[112,3390+18])
            Ppat_var "c" (lex/compact.ml[112,3390+17]..[112,3390+18])
          expression (lex/compact.ml[113,3411+2]..[119,3631+50])
            Pexp_let Nonrec
            [
              <def>
                pattern (lex/compact.ml[113,3411+6]..[113,3411+15])
                  Ppat_var "old_trans" (lex/compact.ml[113,3411+6]..[113,3411+15])
                expression (lex/compact.ml[113,3411+18]..[113,3411+27])
                  Pexp_field
                  expression (lex/compact.ml[113,3411+18]..[113,3411+19])
                    Pexp_ident "c" (lex/compact.ml[113,3411+18]..[113,3411+19])
                  "c_trans" (lex/compact.ml[113,3411+20]..[113,3411+27])
              <def>
                pattern (lex/compact.ml[114,3439+6]..[114,3439+15])
                  Ppat_var "old_check" (lex/compact.ml[114,3439+6]..[114,3439+15])
                expression (lex/compact.ml[114,3439+18]..[114,3439+27])
                  Pexp_field
                  expression (lex/compact.ml[114,3439+18]..[114,3439+19])
                    Pexp_ident "c" (lex/compact.ml[114,3439+18]..[114,3439+19])
                  "c_check" (lex/compact.ml[114,3439+20]..[114,3439+27])
            ]
            expression (lex/compact.ml[115,3470+2]..[119,3631+50])
              Pexp_let Nonrec
              [
                <def>
                  pattern (lex/compact.ml[115,3470+6]..[115,3470+7])
                    Ppat_var "n" (lex/compact.ml[115,3470+6]..[115,3470+7])
                  expression (lex/compact.ml[115,3470+10]..[115,3470+32])
                    Pexp_apply
                    expression (lex/compact.ml[115,3470+10]..[115,3470+22])
                      Pexp_ident "Array.length" (lex/compact.ml[115,3470+10]..[115,3470+22])
                    [
                      <arg>
                      Nolabel
                        expression (lex/compact.ml[115,3470+23]..[115,3470+32])
                          Pexp_ident "old_trans" (lex/compact.ml[115,3470+23]..[115,3470+32])
                    ]
              ]
              expression (lex/compact.ml[116,3506+2]..[119,3631+50])
                Pexp_sequence
                expression (lex/compact.ml[116,3506+2]..[116,3506+33])
                  Pexp_setfield
                  expression (lex/compact.ml[116,3506+2]..[116,3506+3])
                    Pexp_ident "c" (lex/compact.ml[116,3506+2]..[116,3506+3])
                  "c_trans" (lex/compact.ml[116,3506+4]..[116,3506+11])
                  expression (lex/compact.ml[116,3506+15]..[116,3506+33])
                    Pexp_apply
                    expression (lex/compact.ml[116,3506+15]..[116,3506+25])
                      Pexp_ident "Array.make" (lex/compact.ml[116,3506+15]..[116,3506+25])
                    [
                      <arg>
                      Nolabel
                        expression (lex/compact.ml[116,3506+26]..[116,3506+31])
                          Pexp_apply
                          expression (lex/compact.ml[116,3506+28]..[116,3506+29])
                            Pexp_ident "*" (lex/compact.ml[116,3506+28]..[116,3506+29])
                          [
                            <arg>
                            Nolabel
                              expression (lex/compact.ml[116,3506+27]..[116,3506+28])
                                Pexp_constant PConst_int (2,None)
                            <arg>
                            Nolabel
                              expression (lex/compact.ml[116,3506+29]..[116,3506+30])
                                Pexp_ident "n" (lex/compact.ml[116,3506+29]..[116,3506+30])
                          ]
                      <arg>
                      Nolabel
                        expression (lex/compact.ml[116,3506+32]..[116,3506+33])
                          Pexp_constant PConst_int (0,None)
                    ]
                expression (lex/compact.ml[117,3541+2]..[119,3631+50])
                  Pexp_sequence
                  expression (lex/compact.ml[117,3541+2]..[117,3541+50])
                    Pexp_apply
                    expression (lex/compact.ml[117,3541+2]..[117,3541+12])
                      Pexp_ident "Array.blit" (lex/compact.ml[117,3541+2]..[117,3541+12])
                    [
                      <arg>
                      Nolabel
                        expression (lex/compact.ml[117,3541+13]..[117,3541+22])
                          Pexp_ident "old_trans" (lex/compact.ml[117,3541+13]..[117,3541+22])
                      <arg>
                      Nolabel
                        expression (lex/compact.ml[117,3541+23]..[117,3541+24])
                          Pexp_constant PConst_int (0,None)
                      <arg>
                      Nolabel
                        expression (lex/compact.ml[117,3541+25]..[117,3541+34])
                          Pexp_field
                          expression (lex/compact.ml[117,3541+25]..[117,3541+26])
                            Pexp_ident "c" (lex/compact.ml[117,3541+25]..[117,3541+26])
                          "c_trans" (lex/compact.ml[117,3541+27]..[117,3541+34])
                      <arg>
                      Nolabel
                        expression (lex/compact.ml[117,3541+35]..[117,3541+36])
                          Pexp_constant PConst_int (0,None)
                      <arg>
                      Nolabel
                        expression (lex/compact.ml[117,3541+37]..[117,3541+50])
                          Pexp_field
                          expression (lex/compact.ml[117,3541+37]..[117,3541+38])
                            Pexp_ident "c" (lex/compact.ml[117,3541+37]..[117,3541+38])
                          "c_last_used" (lex/compact.ml[117,3541+39]..[117,3541+50])
                    ]
                  expression (lex/compact.ml[118,3593+2]..[119,3631+50])
                    Pexp_sequence
                    expression (lex/compact.ml[118,3593+2]..[118,3593+36])
                      Pexp_setfield
                      expression (lex/compact.ml[118,3593+2]..[118,3593+3])
                        Pexp_ident "c" (lex/compact.ml[118,3593+2]..[118,3593+3])
                      "c_check" (lex/compact.ml[118,3593+4]..[118,3593+11])
                      expression (lex/compact.ml[118,3593+15]..[118,3593+36])
                        Pexp_apply
                        expression (lex/compact.ml[118,3593+15]..[118,3593+25])
                          Pexp_ident "Array.make" (lex/compact.ml[118,3593+15]..[118,3593+25])
                        [
                          <arg>
                          Nolabel
                            expression (lex/compact.ml[118,3593+26]..[118,3593+31])
                              Pexp_apply
                              expression (lex/compact.ml[118,3593+28]..[118,3593+29])
                                Pexp_ident "*" (lex/compact.ml[118,3593+28]..[118,3593+29])
                              [
                                <arg>
                                Nolabel
                                  expression (lex/compact.ml[118,3593+27]..[118,3593+28])
                                    Pexp_constant PConst_int (2,None)
                                <arg>
                                Nolabel
                                  expression (lex/compact.ml[118,3593+29]..[118,3593+30])
                                    Pexp_ident "n" (lex/compact.ml[118,3593+29]..[118,3593+30])
                              ]
                          <arg>
                          Nolabel
                            expression (lex/compact.ml[118,3593+32]..[118,3593+36])
                              Pexp_constant PConst_int (-1,None)
                        ]
                    expression (lex/compact.ml[119,3631+2]..[119,3631+50])
                      Pexp_apply
                      expression (lex/compact.ml[119,3631+2]..[119,3631+12])
                        Pexp_ident "Array.blit" (lex/compact.ml[119,3631+2]..[119,3631+12])
                      [
                        <arg>
                        Nolabel
                          expression (lex/compact.ml[119,3631+13]..[119,3631+22])
                            Pexp_ident "old_check" (lex/compact.ml[119,3631+13]..[119,3631+22])
                        <arg>
                        Nolabel
                          expression (lex/compact.ml[119,3631+23]..[119,3631+24])
                            Pexp_constant PConst_int (0,None)
                        <arg>
                        Nolabel
                          expression (lex/compact.ml[119,3631+25]..[119,3631+34])
                            Pexp_field
                            expression (lex/compact.ml[119,3631+25]..[119,3631+26])
                              Pexp_ident "c" (lex/compact.ml[119,3631+25]..[119,3631+26])
                            "c_check" (lex/compact.ml[119,3631+27]..[119,3631+34])
                        <arg>
                        Nolabel
                          expression (lex/compact.ml[119,3631+35]..[119,3631+36])
                            Pexp_constant PConst_int (0,None)
                        <arg>
                        Nolabel
                          expression (lex/compact.ml[119,3631+37]..[119,3631+50])
                            Pexp_field
                            expression (lex/compact.ml[119,3631+37]..[119,3631+38])
                              Pexp_ident "c" (lex/compact.ml[119,3631+37]..[119,3631+38])
                            "c_last_used" (lex/compact.ml[119,3631+39]..[119,3631+50])
                      ]
    ]
  structure_item (lex/compact.ml[121,3683+0]..[145,4379+17])
    Pstr_value Nonrec
    [
      <def>
        pattern (lex/compact.ml[121,3683+4]..[121,3683+11])
          Ppat_var "do_pack" (lex/compact.ml[121,3683+4]..[121,3683+11])
        expression (lex/compact.ml[121,3683+12]..[145,4379+17]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lex/compact.ml[121,3683+12]..[121,3683+21])
            Ppat_var "state_num" (lex/compact.ml[121,3683+12]..[121,3683+21])
          expression (lex/compact.ml[121,3683+22]..[145,4379+17]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (lex/compact.ml[121,3683+22]..[121,3683+26])
              Ppat_var "orig" (lex/compact.ml[121,3683+22]..[121,3683+26])
            expression (lex/compact.ml[121,3683+27]..[145,4379+17]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (lex/compact.ml[121,3683+27]..[121,3683+34])
                Ppat_var "compact" (lex/compact.ml[121,3683+27]..[121,3683+34])
              expression (lex/compact.ml[122,3720+2]..[145,4379+17])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (lex/compact.ml[122,3720+6]..[122,3720+13])
                      Ppat_var "default" (lex/compact.ml[122,3720+6]..[122,3720+13])
                    expression (lex/compact.ml[122,3720+16]..[122,3720+38])
                      Pexp_apply
                      expression (lex/compact.ml[122,3720+16]..[122,3720+33])
                        Pexp_ident "most_frequent_elt" (lex/compact.ml[122,3720+16]..[122,3720+33])
                      [
                        <arg>
                        Nolabel
                          expression (lex/compact.ml[122,3720+34]..[122,3720+38])
                            Pexp_ident "orig" (lex/compact.ml[122,3720+34]..[122,3720+38])
                      ]
                ]
                expression (lex/compact.ml[123,3762+2]..[145,4379+17])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (lex/compact.ml[123,3762+6]..[123,3762+12])
                        Ppat_var "nondef" (lex/compact.ml[123,3762+6]..[123,3762+12])
                      expression (lex/compact.ml[123,3762+15]..[123,3762+48])
                        Pexp_apply
                        expression (lex/compact.ml[123,3762+15]..[123,3762+35])
                          Pexp_ident "non_default_elements" (lex/compact.ml[123,3762+15]..[123,3762+35])
                        [
                          <arg>
                          Nolabel
                            expression (lex/compact.ml[123,3762+36]..[123,3762+43])
                              Pexp_ident "default" (lex/compact.ml[123,3762+36]..[123,3762+43])
                          <arg>
                          Nolabel
                            expression (lex/compact.ml[123,3762+44]..[123,3762+48])
                              Pexp_ident "orig" (lex/compact.ml[123,3762+44]..[123,3762+48])
                        ]
                  ]
                  expression (lex/compact.ml[124,3814+2]..[145,4379+17])
                    Pexp_let Rec
                    [
                      <def>
                        pattern (lex/compact.ml[124,3814+10]..[124,3814+19])
                          Ppat_var "pack_from" (lex/compact.ml[124,3814+10]..[124,3814+19])
                        expression (lex/compact.ml[124,3814+20]..[136,4111+19]) ghost
                          Pexp_fun
                          Nolabel
                          None
                          pattern (lex/compact.ml[124,3814+20]..[124,3814+21])
                            Ppat_var "b" (lex/compact.ml[124,3814+20]..[124,3814+21])
                          expression (lex/compact.ml[125,3838+4]..[136,4111+19])
                            Pexp_sequence
                            expression (lex/compact.ml[125,3838+4]..[129,3927+8])
                              Pexp_while
                              expression (lex/compact.ml[126,3848+6]..[126,3848+44])
                                Pexp_apply
                                expression (lex/compact.ml[126,3848+14]..[126,3848+15])
                                  Pexp_ident ">" (lex/compact.ml[126,3848+14]..[126,3848+15])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lex/compact.ml[126,3848+6]..[126,3848+13])
                                      Pexp_apply
                                      expression (lex/compact.ml[126,3848+8]..[126,3848+9])
                                        Pexp_ident "+" (lex/compact.ml[126,3848+8]..[126,3848+9])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lex/compact.ml[126,3848+6]..[126,3848+7])
                                            Pexp_ident "b" (lex/compact.ml[126,3848+6]..[126,3848+7])
                                        <arg>
                                        Nolabel
                                          expression (lex/compact.ml[126,3848+10]..[126,3848+13])
                                            Pexp_constant PConst_int (257,None)
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (lex/compact.ml[126,3848+16]..[126,3848+44])
                                      Pexp_apply
                                      expression (lex/compact.ml[126,3848+16]..[126,3848+28])
                                        Pexp_ident "Array.length" (lex/compact.ml[126,3848+16]..[126,3848+28])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lex/compact.ml[126,3848+29]..[126,3848+44])
                                            Pexp_field
                                            expression (lex/compact.ml[126,3848+29]..[126,3848+36])
                                              Pexp_ident "compact" (lex/compact.ml[126,3848+29]..[126,3848+36])
                                            "c_trans" (lex/compact.ml[126,3848+37]..[126,3848+44])
                                      ]
                                ]
                              expression (lex/compact.ml[128,3900+6]..[128,3900+26])
                                Pexp_apply
                                expression (lex/compact.ml[128,3900+6]..[128,3900+18])
                                  Pexp_ident "grow_compact" (lex/compact.ml[128,3900+6]..[128,3900+18])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lex/compact.ml[128,3900+19]..[128,3900+26])
                                      Pexp_ident "compact" (lex/compact.ml[128,3900+19]..[128,3900+26])
                                ]
                            expression (lex/compact.ml[130,3937+4]..[136,4111+19])
                              Pexp_let Rec
                              [
                                <def>
                                  pattern (lex/compact.ml[130,3937+12]..[130,3937+20])
                                    Ppat_var "try_pack" (lex/compact.ml[130,3937+12]..[130,3937+20])
                                  expression (lex/compact.ml[130,3937+23]..[135,4079+28])
                                    Pexp_function
                                    [
                                      <case>
                                        pattern (lex/compact.ml[131,3969+6]..[131,3969+8])
                                          Ppat_construct "[]" (lex/compact.ml[131,3969+6]..[131,3969+8])
                                          None
                                        expression (lex/compact.ml[131,3969+12]..[131,3969+13])
                                          Pexp_ident "b" (lex/compact.ml[131,3969+12]..[131,3969+13])
                                      <case>
                                        pattern (lex/compact.ml[132,3983+6]..[132,3983+22])
                                          Ppat_construct "::" (lex/compact.ml[132,3983+16]..[132,3983+18])
                                          Some
                                            []
                                            pattern (lex/compact.ml[132,3983+6]..[132,3983+22]) ghost
                                              Ppat_tuple
                                              [
                                                pattern (lex/compact.ml[132,3983+6]..[132,3983+15])
                                                  Ppat_tuple
                                                  [
                                                    pattern (lex/compact.ml[132,3983+7]..[132,3983+10])
                                                      Ppat_var "pos" (lex/compact.ml[132,3983+7]..[132,3983+10])
                                                    pattern (lex/compact.ml[132,3983+12]..[132,3983+14])
                                                      Ppat_var "_v" (lex/compact.ml[132,3983+12]..[132,3983+14])
                                                  ]
                                                pattern (lex/compact.ml[132,3983+19]..[132,3983+22])
                                                  Ppat_var "rem" (lex/compact.ml[132,3983+19]..[132,3983+22])
                                              ]
                                        expression (lex/compact.ml[133,4009+8]..[135,4079+28])
                                          Pexp_ifthenelse
                                          expression (lex/compact.ml[133,4009+11]..[133,4009+41])
                                            Pexp_apply
                                            expression (lex/compact.ml[133,4009+37]..[133,4009+38])
                                              Pexp_ident "=" (lex/compact.ml[133,4009+37]..[133,4009+38])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lex/compact.ml[133,4009+11]..[133,4009+36])
                                                  Pexp_apply
                                                  expression (lex/compact.ml[133,4009+11]..[133,4009+36]) ghost
                                                    Pexp_ident "Array.get" (lex/compact.ml[133,4009+11]..[133,4009+36]) ghost
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (lex/compact.ml[133,4009+11]..[133,4009+26])
                                                        Pexp_field
                                                        expression (lex/compact.ml[133,4009+11]..[133,4009+18])
                                                          Pexp_ident "compact" (lex/compact.ml[133,4009+11]..[133,4009+18])
                                                        "c_check" (lex/compact.ml[133,4009+19]..[133,4009+26])
                                                    <arg>
                                                    Nolabel
                                                      expression (lex/compact.ml[133,4009+28]..[133,4009+35])
                                                        Pexp_apply
                                                        expression (lex/compact.ml[133,4009+30]..[133,4009+31])
                                                          Pexp_ident "+" (lex/compact.ml[133,4009+30]..[133,4009+31])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (lex/compact.ml[133,4009+28]..[133,4009+29])
                                                              Pexp_ident "b" (lex/compact.ml[133,4009+28]..[133,4009+29])
                                                          <arg>
                                                          Nolabel
                                                            expression (lex/compact.ml[133,4009+32]..[133,4009+35])
                                                              Pexp_ident "pos" (lex/compact.ml[133,4009+32]..[133,4009+35])
                                                        ]
                                                  ]
                                              <arg>
                                              Nolabel
                                                expression (lex/compact.ml[133,4009+39]..[133,4009+41])
                                                  Pexp_constant PConst_int (-1,None)
                                            ]
                                          expression (lex/compact.ml[134,4056+10]..[134,4056+22])
                                            Pexp_apply
                                            expression (lex/compact.ml[134,4056+10]..[134,4056+18])
                                              Pexp_ident "try_pack" (lex/compact.ml[134,4056+10]..[134,4056+18])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lex/compact.ml[134,4056+19]..[134,4056+22])
                                                  Pexp_ident "rem" (lex/compact.ml[134,4056+19]..[134,4056+22])
                                            ]
                                          Some
                                            expression (lex/compact.ml[135,4079+13]..[135,4079+28])
                                              Pexp_apply
                                              expression (lex/compact.ml[135,4079+13]..[135,4079+22])
                                                Pexp_ident "pack_from" (lex/compact.ml[135,4079+13]..[135,4079+22])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lex/compact.ml[135,4079+23]..[135,4079+28])
                                                    Pexp_apply
                                                    expression (lex/compact.ml[135,4079+25]..[135,4079+26])
                                                      Pexp_ident "+" (lex/compact.ml[135,4079+25]..[135,4079+26])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (lex/compact.ml[135,4079+24]..[135,4079+25])
                                                          Pexp_ident "b" (lex/compact.ml[135,4079+24]..[135,4079+25])
                                                      <arg>
                                                      Nolabel
                                                        expression (lex/compact.ml[135,4079+26]..[135,4079+27])
                                                          Pexp_constant PConst_int (1,None)
                                                    ]
                                              ]
                                    ]
                              ]
                              expression (lex/compact.ml[136,4111+4]..[136,4111+19])
                                Pexp_apply
                                expression (lex/compact.ml[136,4111+4]..[136,4111+12])
                                  Pexp_ident "try_pack" (lex/compact.ml[136,4111+4]..[136,4111+12])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lex/compact.ml[136,4111+13]..[136,4111+19])
                                      Pexp_ident "nondef" (lex/compact.ml[136,4111+13]..[136,4111+19])
                                ]
                    ]
                    expression (lex/compact.ml[137,4134+2]..[145,4379+17])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (lex/compact.ml[137,4134+6]..[137,4134+10])
                            Ppat_var "base" (lex/compact.ml[137,4134+6]..[137,4134+10])
                          expression (lex/compact.ml[137,4134+13]..[137,4134+24])
                            Pexp_apply
                            expression (lex/compact.ml[137,4134+13]..[137,4134+22])
                              Pexp_ident "pack_from" (lex/compact.ml[137,4134+13]..[137,4134+22])
                            [
                              <arg>
                              Nolabel
                                expression (lex/compact.ml[137,4134+23]..[137,4134+24])
                                  Pexp_constant PConst_int (0,None)
                            ]
                      ]
                      expression (lex/compact.ml[138,4162+2]..[145,4379+17])
                        Pexp_sequence
                        expression (lex/compact.ml[138,4162+2]..[142,4285+10])
                          Pexp_apply
                          expression (lex/compact.ml[138,4162+2]..[138,4162+11])
                            Pexp_ident "List.iter" (lex/compact.ml[138,4162+2]..[138,4162+11])
                          [
                            <arg>
                            Nolabel
                              expression (lex/compact.ml[139,4174+4]..[141,4236+48])
                                Pexp_fun
                                Nolabel
                                None
                                pattern (lex/compact.ml[139,4174+9]..[139,4174+17])
                                  Ppat_tuple
                                  [
                                    pattern (lex/compact.ml[139,4174+10]..[139,4174+13])
                                      Ppat_var "pos" (lex/compact.ml[139,4174+10]..[139,4174+13])
                                    pattern (lex/compact.ml[139,4174+15]..[139,4174+16])
                                      Ppat_var "v" (lex/compact.ml[139,4174+15]..[139,4174+16])
                                  ]
                                expression (lex/compact.ml[140,4195+6]..[141,4236+47])
                                  Pexp_sequence
                                  expression (lex/compact.ml[140,4195+6]..[140,4195+39])
                                    Pexp_apply
                                    expression (lex/compact.ml[140,4195+6]..[140,4195+39]) ghost
                                      Pexp_ident "Array.set" (lex/compact.ml[140,4195+6]..[140,4195+39]) ghost
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lex/compact.ml[140,4195+6]..[140,4195+21])
                                          Pexp_field
                                          expression (lex/compact.ml[140,4195+6]..[140,4195+13])
                                            Pexp_ident "compact" (lex/compact.ml[140,4195+6]..[140,4195+13])
                                          "c_trans" (lex/compact.ml[140,4195+14]..[140,4195+21])
                                      <arg>
                                      Nolabel
                                        expression (lex/compact.ml[140,4195+23]..[140,4195+33])
                                          Pexp_apply
                                          expression (lex/compact.ml[140,4195+28]..[140,4195+29])
                                            Pexp_ident "+" (lex/compact.ml[140,4195+28]..[140,4195+29])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lex/compact.ml[140,4195+23]..[140,4195+27])
                                                Pexp_ident "base" (lex/compact.ml[140,4195+23]..[140,4195+27])
                                            <arg>
                                            Nolabel
                                              expression (lex/compact.ml[140,4195+30]..[140,4195+33])
                                                Pexp_ident "pos" (lex/compact.ml[140,4195+30]..[140,4195+33])
                                          ]
                                      <arg>
                                      Nolabel
                                        expression (lex/compact.ml[140,4195+38]..[140,4195+39])
                                          Pexp_ident "v" (lex/compact.ml[140,4195+38]..[140,4195+39])
                                    ]
                                  expression (lex/compact.ml[141,4236+6]..[141,4236+47])
                                    Pexp_apply
                                    expression (lex/compact.ml[141,4236+6]..[141,4236+47]) ghost
                                      Pexp_ident "Array.set" (lex/compact.ml[141,4236+6]..[141,4236+47]) ghost
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lex/compact.ml[141,4236+6]..[141,4236+21])
                                          Pexp_field
                                          expression (lex/compact.ml[141,4236+6]..[141,4236+13])
                                            Pexp_ident "compact" (lex/compact.ml[141,4236+6]..[141,4236+13])
                                          "c_check" (lex/compact.ml[141,4236+14]..[141,4236+21])
                                      <arg>
                                      Nolabel
                                        expression (lex/compact.ml[141,4236+23]..[141,4236+33])
                                          Pexp_apply
                                          expression (lex/compact.ml[141,4236+28]..[141,4236+29])
                                            Pexp_ident "+" (lex/compact.ml[141,4236+28]..[141,4236+29])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lex/compact.ml[141,4236+23]..[141,4236+27])
                                                Pexp_ident "base" (lex/compact.ml[141,4236+23]..[141,4236+27])
                                            <arg>
                                            Nolabel
                                              expression (lex/compact.ml[141,4236+30]..[141,4236+33])
                                                Pexp_ident "pos" (lex/compact.ml[141,4236+30]..[141,4236+33])
                                          ]
                                      <arg>
                                      Nolabel
                                        expression (lex/compact.ml[141,4236+38]..[141,4236+47])
                                          Pexp_ident "state_num" (lex/compact.ml[141,4236+38]..[141,4236+47])
                                    ]
                            <arg>
                            Nolabel
                              expression (lex/compact.ml[142,4285+4]..[142,4285+10])
                                Pexp_ident "nondef" (lex/compact.ml[142,4285+4]..[142,4285+10])
                          ]
                        expression (lex/compact.ml[143,4297+2]..[145,4379+17])
                          Pexp_sequence
                          expression (lex/compact.ml[143,4297+2]..[144,4340+37])
                            Pexp_ifthenelse
                            expression (lex/compact.ml[143,4297+5]..[143,4297+37])
                              Pexp_apply
                              expression (lex/compact.ml[143,4297+16]..[143,4297+17])
                                Pexp_ident ">" (lex/compact.ml[143,4297+16]..[143,4297+17])
                              [
                                <arg>
                                Nolabel
                                  expression (lex/compact.ml[143,4297+5]..[143,4297+15])
                                    Pexp_apply
                                    expression (lex/compact.ml[143,4297+10]..[143,4297+11])
                                      Pexp_ident "+" (lex/compact.ml[143,4297+10]..[143,4297+11])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lex/compact.ml[143,4297+5]..[143,4297+9])
                                          Pexp_ident "base" (lex/compact.ml[143,4297+5]..[143,4297+9])
                                      <arg>
                                      Nolabel
                                        expression (lex/compact.ml[143,4297+12]..[143,4297+15])
                                          Pexp_constant PConst_int (257,None)
                                    ]
                                <arg>
                                Nolabel
                                  expression (lex/compact.ml[143,4297+18]..[143,4297+37])
                                    Pexp_field
                                    expression (lex/compact.ml[143,4297+18]..[143,4297+25])
                                      Pexp_ident "compact" (lex/compact.ml[143,4297+18]..[143,4297+25])
                                    "c_last_used" (lex/compact.ml[143,4297+26]..[143,4297+37])
                              ]
                            expression (lex/compact.ml[144,4340+4]..[144,4340+37])
                              Pexp_setfield
                              expression (lex/compact.ml[144,4340+4]..[144,4340+11])
                                Pexp_ident "compact" (lex/compact.ml[144,4340+4]..[144,4340+11])
                              "c_last_used" (lex/compact.ml[144,4340+12]..[144,4340+23])
                              expression (lex/compact.ml[144,4340+27]..[144,4340+37])
                                Pexp_apply
                                expression (lex/compact.ml[144,4340+32]..[144,4340+33])
                                  Pexp_ident "+" (lex/compact.ml[144,4340+32]..[144,4340+33])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lex/compact.ml[144,4340+27]..[144,4340+31])
                                      Pexp_ident "base" (lex/compact.ml[144,4340+27]..[144,4340+31])
                                  <arg>
                                  Nolabel
                                    expression (lex/compact.ml[144,4340+34]..[144,4340+37])
                                      Pexp_constant PConst_int (257,None)
                                ]
                            None
                          expression (lex/compact.ml[145,4379+2]..[145,4379+17])
                            Pexp_tuple
                            [
                              expression (lex/compact.ml[145,4379+3]..[145,4379+7])
                                Pexp_ident "base" (lex/compact.ml[145,4379+3]..[145,4379+7])
                              expression (lex/compact.ml[145,4379+9]..[145,4379+16])
                                Pexp_ident "default" (lex/compact.ml[145,4379+9]..[145,4379+16])
                            ]
    ]
  structure_item (lex/compact.ml[147,4398+0]..[157,4760+20])
    Pstr_value Nonrec
    [
      <def>
        pattern (lex/compact.ml[147,4398+4]..[147,4398+14])
          Ppat_var "pack_moves" (lex/compact.ml[147,4398+4]..[147,4398+14])
        expression (lex/compact.ml[147,4398+15]..[157,4760+20]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lex/compact.ml[147,4398+15]..[147,4398+24])
            Ppat_var "state_num" (lex/compact.ml[147,4398+15]..[147,4398+24])
          expression (lex/compact.ml[147,4398+25]..[157,4760+20]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (lex/compact.ml[147,4398+25]..[147,4398+31])
              Ppat_var "move_t" (lex/compact.ml[147,4398+25]..[147,4398+31])
            expression (lex/compact.ml[148,4432+2]..[157,4760+20])
              Pexp_let Nonrec
              [
                <def>
                  pattern (lex/compact.ml[148,4432+6]..[148,4432+12])
                    Ppat_var "move_v" (lex/compact.ml[148,4432+6]..[148,4432+12])
                  expression (lex/compact.ml[148,4432+15]..[148,4432+31])
                    Pexp_apply
                    expression (lex/compact.ml[148,4432+15]..[148,4432+25])
                      Pexp_ident "Array.make" (lex/compact.ml[148,4432+15]..[148,4432+25])
                    [
                      <arg>
                      Nolabel
                        expression (lex/compact.ml[148,4432+26]..[148,4432+29])
                          Pexp_constant PConst_int (257,None)
                      <arg>
                      Nolabel
                        expression (lex/compact.ml[148,4432+30]..[148,4432+31])
                          Pexp_constant PConst_int (0,None)
                    ]
                <def>
                  pattern (lex/compact.ml[149,4464+6]..[149,4464+12])
                    Ppat_var "move_m" (lex/compact.ml[149,4464+6]..[149,4464+12])
                  expression (lex/compact.ml[149,4464+15]..[149,4464+31])
                    Pexp_apply
                    expression (lex/compact.ml[149,4464+15]..[149,4464+25])
                      Pexp_ident "Array.make" (lex/compact.ml[149,4464+15]..[149,4464+25])
                    [
                      <arg>
                      Nolabel
                        expression (lex/compact.ml[149,4464+26]..[149,4464+29])
                          Pexp_constant PConst_int (257,None)
                      <arg>
                      Nolabel
                        expression (lex/compact.ml[149,4464+30]..[149,4464+31])
                          Pexp_constant PConst_int (0,None)
                    ]
              ]
              expression (lex/compact.ml[150,4499+2]..[157,4760+20])
                Pexp_sequence
                expression (lex/compact.ml[150,4499+2]..[154,4652+6])
                  Pexp_for Up
                  pattern (lex/compact.ml[150,4499+6]..[150,4499+7])
                    Ppat_var "i" (lex/compact.ml[150,4499+6]..[150,4499+7])
                  expression (lex/compact.ml[150,4499+10]..[150,4499+11])
                    Pexp_constant PConst_int (0,None)
                  expression (lex/compact.ml[150,4499+15]..[150,4499+18])
                    Pexp_constant PConst_int (256,None)
                  expression (lex/compact.ml[151,4521+4]..[153,4618+33])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (lex/compact.ml[151,4521+8]..[151,4521+13])
                          Ppat_tuple
                          [
                            pattern (lex/compact.ml[151,4521+8]..[151,4521+11])
                              Ppat_var "act" (lex/compact.ml[151,4521+8]..[151,4521+11])
                            pattern (lex/compact.ml[151,4521+12]..[151,4521+13])
                              Ppat_var "c" (lex/compact.ml[151,4521+12]..[151,4521+13])
                          ]
                        expression (lex/compact.ml[151,4521+16]..[151,4521+26])
                          Pexp_apply
                          expression (lex/compact.ml[151,4521+16]..[151,4521+26]) ghost
                            Pexp_ident "Array.get" (lex/compact.ml[151,4521+16]..[151,4521+26]) ghost
                          [
                            <arg>
                            Nolabel
                              expression (lex/compact.ml[151,4521+16]..[151,4521+22])
                                Pexp_ident "move_t" (lex/compact.ml[151,4521+16]..[151,4521+22])
                            <arg>
                            Nolabel
                              expression (lex/compact.ml[151,4521+24]..[151,4521+25])
                                Pexp_ident "i" (lex/compact.ml[151,4521+24]..[151,4521+25])
                          ]
                    ]
                    expression (lex/compact.ml[152,4551+4]..[153,4618+33])
                      Pexp_sequence
                      expression (lex/compact.ml[152,4551+4]..[152,4551+64])
                        Pexp_apply
                        expression (lex/compact.ml[152,4551+4]..[152,4551+64]) ghost
                          Pexp_ident "Array.set" (lex/compact.ml[152,4551+4]..[152,4551+64]) ghost
                        [
                          <arg>
                          Nolabel
                            expression (lex/compact.ml[152,4551+4]..[152,4551+10])
                              Pexp_ident "move_v" (lex/compact.ml[152,4551+4]..[152,4551+10])
                          <arg>
                          Nolabel
                            expression (lex/compact.ml[152,4551+12]..[152,4551+13])
                              Pexp_ident "i" (lex/compact.ml[152,4551+12]..[152,4551+13])
                          <arg>
                          Nolabel
                            expression (lex/compact.ml[152,4551+18]..[152,4551+64])
                              Pexp_match
                              expression (lex/compact.ml[152,4551+25]..[152,4551+28])
                                Pexp_ident "act" (lex/compact.ml[152,4551+25]..[152,4551+28])
                              [
                                <case>
                                  pattern (lex/compact.ml[152,4551+34]..[152,4551+43])
                                    Ppat_construct "Backtrack" (lex/compact.ml[152,4551+34]..[152,4551+43])
                                    None
                                  expression (lex/compact.ml[152,4551+47]..[152,4551+49])
                                    Pexp_constant PConst_int (-1,None)
                                <case>
                                  pattern (lex/compact.ml[152,4551+52]..[152,4551+58])
                                    Ppat_construct "Goto" (lex/compact.ml[152,4551+52]..[152,4551+56])
                                    Some
                                      []
                                      pattern (lex/compact.ml[152,4551+57]..[152,4551+58])
                                        Ppat_var "n" (lex/compact.ml[152,4551+57]..[152,4551+58])
                                  expression (lex/compact.ml[152,4551+62]..[152,4551+63])
                                    Pexp_ident "n" (lex/compact.ml[152,4551+62]..[152,4551+63])
                              ]
                        ]
                      expression (lex/compact.ml[153,4618+4]..[153,4618+33])
                        Pexp_apply
                        expression (lex/compact.ml[153,4618+4]..[153,4618+33]) ghost
                          Pexp_ident "Array.set" (lex/compact.ml[153,4618+4]..[153,4618+33]) ghost
                        [
                          <arg>
                          Nolabel
                            expression (lex/compact.ml[153,4618+4]..[153,4618+10])
                              Pexp_ident "move_m" (lex/compact.ml[153,4618+4]..[153,4618+10])
                          <arg>
                          Nolabel
                            expression (lex/compact.ml[153,4618+12]..[153,4618+13])
                              Pexp_ident "i" (lex/compact.ml[153,4618+12]..[153,4618+13])
                          <arg>
                          Nolabel
                            expression (lex/compact.ml[153,4618+18]..[153,4618+33])
                              Pexp_apply
                              expression (lex/compact.ml[153,4618+18]..[153,4618+31])
                                Pexp_ident "emit_mem_code" (lex/compact.ml[153,4618+18]..[153,4618+31])
                              [
                                <arg>
                                Nolabel
                                  expression (lex/compact.ml[153,4618+32]..[153,4618+33])
                                    Pexp_ident "c" (lex/compact.ml[153,4618+32]..[153,4618+33])
                              ]
                        ]
                expression (lex/compact.ml[155,4661+2]..[157,4760+20])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (lex/compact.ml[155,4661+6]..[155,4661+14])
                        Ppat_var "pk_trans" (lex/compact.ml[155,4661+6]..[155,4661+14])
                      expression (lex/compact.ml[155,4661+17]..[155,4661+47])
                        Pexp_apply
                        expression (lex/compact.ml[155,4661+17]..[155,4661+24])
                          Pexp_ident "do_pack" (lex/compact.ml[155,4661+17]..[155,4661+24])
                        [
                          <arg>
                          Nolabel
                            expression (lex/compact.ml[155,4661+25]..[155,4661+34])
                              Pexp_ident "state_num" (lex/compact.ml[155,4661+25]..[155,4661+34])
                          <arg>
                          Nolabel
                            expression (lex/compact.ml[155,4661+35]..[155,4661+41])
                              Pexp_ident "move_v" (lex/compact.ml[155,4661+35]..[155,4661+41])
                          <arg>
                          Nolabel
                            expression (lex/compact.ml[155,4661+42]..[155,4661+47])
                              Pexp_ident "trans" (lex/compact.ml[155,4661+42]..[155,4661+47])
                        ]
                    <def>
                      pattern (lex/compact.ml[156,4709+6]..[156,4709+14])
                        Ppat_var "pk_moves" (lex/compact.ml[156,4709+6]..[156,4709+14])
                      expression (lex/compact.ml[156,4709+17]..[156,4709+47])
                        Pexp_apply
                        expression (lex/compact.ml[156,4709+17]..[156,4709+24])
                          Pexp_ident "do_pack" (lex/compact.ml[156,4709+17]..[156,4709+24])
                        [
                          <arg>
                          Nolabel
                            expression (lex/compact.ml[156,4709+25]..[156,4709+34])
                              Pexp_ident "state_num" (lex/compact.ml[156,4709+25]..[156,4709+34])
                          <arg>
                          Nolabel
                            expression (lex/compact.ml[156,4709+35]..[156,4709+41])
                              Pexp_ident "move_m" (lex/compact.ml[156,4709+35]..[156,4709+41])
                          <arg>
                          Nolabel
                            expression (lex/compact.ml[156,4709+42]..[156,4709+47])
                              Pexp_ident "moves" (lex/compact.ml[156,4709+42]..[156,4709+47])
                        ]
                  ]
                  expression (lex/compact.ml[157,4760+2]..[157,4760+20])
                    Pexp_tuple
                    [
                      expression (lex/compact.ml[157,4760+2]..[157,4760+10])
                        Pexp_ident "pk_trans" (lex/compact.ml[157,4760+2]..[157,4760+10])
                      expression (lex/compact.ml[157,4760+12]..[157,4760+20])
                        Pexp_ident "pk_moves" (lex/compact.ml[157,4760+12]..[157,4760+20])
                    ]
    ]
  structure_item (lex/compact.ml[162,4807+0]..[176,5553+25])
    Pstr_type Rec
    [
      type_declaration "lex_tables" (lex/compact.ml[162,4807+5]..[162,4807+15]) (lex/compact.ml[162,4807+0]..[176,5553+25])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (lex/compact.ml[163,4825+4]..[163,4825+24])
                Immutable
                "tbl_base" (lex/compact.ml[163,4825+4]..[163,4825+12])                core_type (lex/compact.ml[163,4825+14]..[163,4825+23])
                  Ptyp_constr "array" (lex/compact.ml[163,4825+18]..[163,4825+23])
                  [
                    core_type (lex/compact.ml[163,4825+14]..[163,4825+17])
                      Ptyp_constr "int" (lex/compact.ml[163,4825+14]..[163,4825+17])
                      []
                  ]
              (lex/compact.ml[164,4888+4]..[164,4888+27])
                Immutable
                "tbl_backtrk" (lex/compact.ml[164,4888+4]..[164,4888+15])                core_type (lex/compact.ml[164,4888+17]..[164,4888+26])
                  Ptyp_constr "array" (lex/compact.ml[164,4888+21]..[164,4888+26])
                  [
                    core_type (lex/compact.ml[164,4888+17]..[164,4888+20])
                      Ptyp_constr "int" (lex/compact.ml[164,4888+17]..[164,4888+20])
                      []
                  ]
              (lex/compact.ml[165,4958+4]..[165,4958+27])
                Immutable
                "tbl_default" (lex/compact.ml[165,4958+4]..[165,4958+15])                core_type (lex/compact.ml[165,4958+17]..[165,4958+26])
                  Ptyp_constr "array" (lex/compact.ml[165,4958+21]..[165,4958+26])
                  [
                    core_type (lex/compact.ml[165,4958+17]..[165,4958+20])
                      Ptyp_constr "int" (lex/compact.ml[165,4958+17]..[165,4958+20])
                      []
                  ]
              (lex/compact.ml[166,5024+4]..[166,5024+25])
                Immutable
                "tbl_trans" (lex/compact.ml[166,5024+4]..[166,5024+13])                core_type (lex/compact.ml[166,5024+15]..[166,5024+24])
                  Ptyp_constr "array" (lex/compact.ml[166,5024+19]..[166,5024+24])
                  [
                    core_type (lex/compact.ml[166,5024+15]..[166,5024+18])
                      Ptyp_constr "int" (lex/compact.ml[166,5024+15]..[166,5024+18])
                      []
                  ]
              (lex/compact.ml[167,5095+4]..[167,5095+25])
                Immutable
                "tbl_check" (lex/compact.ml[167,5095+4]..[167,5095+13])                core_type (lex/compact.ml[167,5095+15]..[167,5095+24])
                  Ptyp_constr "array" (lex/compact.ml[167,5095+19]..[167,5095+24])
                  [
                    core_type (lex/compact.ml[167,5095+15]..[167,5095+18])
                      Ptyp_constr "int" (lex/compact.ml[167,5095+15]..[167,5095+18])
                      []
                  ]
              (lex/compact.ml[169,5229+4]..[169,5229+30])
                Immutable
                "tbl_base_code" (lex/compact.ml[169,5229+4]..[169,5229+17])                core_type (lex/compact.ml[169,5229+20]..[169,5229+29])
                  Ptyp_constr "array" (lex/compact.ml[169,5229+24]..[169,5229+29])
                  [
                    core_type (lex/compact.ml[169,5229+20]..[169,5229+23])
                      Ptyp_constr "int" (lex/compact.ml[169,5229+20]..[169,5229+23])
                      []
                  ]
              (lex/compact.ml[170,5302+4]..[170,5302+33])
                Immutable
                "tbl_backtrk_code" (lex/compact.ml[170,5302+4]..[170,5302+20])                core_type (lex/compact.ml[170,5302+23]..[170,5302+32])
                  Ptyp_constr "array" (lex/compact.ml[170,5302+27]..[170,5302+32])
                  [
                    core_type (lex/compact.ml[170,5302+23]..[170,5302+26])
                      Ptyp_constr "int" (lex/compact.ml[170,5302+23]..[170,5302+26])
                      []
                  ]
              (lex/compact.ml[172,5432+4]..[172,5432+33])
                Immutable
                "tbl_default_code" (lex/compact.ml[172,5432+4]..[172,5432+20])                core_type (lex/compact.ml[172,5432+23]..[172,5432+32])
                  Ptyp_constr "array" (lex/compact.ml[172,5432+27]..[172,5432+32])
                  [
                    core_type (lex/compact.ml[172,5432+23]..[172,5432+26])
                      Ptyp_constr "int" (lex/compact.ml[172,5432+23]..[172,5432+26])
                      []
                  ]
              (lex/compact.ml[173,5466+4]..[173,5466+31])
                Immutable
                "tbl_trans_code" (lex/compact.ml[173,5466+4]..[173,5466+18])                core_type (lex/compact.ml[173,5466+21]..[173,5466+30])
                  Ptyp_constr "array" (lex/compact.ml[173,5466+25]..[173,5466+30])
                  [
                    core_type (lex/compact.ml[173,5466+21]..[173,5466+24])
                      Ptyp_constr "int" (lex/compact.ml[173,5466+21]..[173,5466+24])
                      []
                  ]
              (lex/compact.ml[174,5498+4]..[174,5498+31])
                Immutable
                "tbl_check_code" (lex/compact.ml[174,5498+4]..[174,5498+18])                core_type (lex/compact.ml[174,5498+21]..[174,5498+30])
                  Ptyp_constr "array" (lex/compact.ml[174,5498+25]..[174,5498+30])
                  [
                    core_type (lex/compact.ml[174,5498+21]..[174,5498+24])
                      Ptyp_constr "int" (lex/compact.ml[174,5498+21]..[174,5498+24])
                      []
                  ]
              (lex/compact.ml[176,5553+4]..[176,5553+24])
                Immutable
                "tbl_code" (lex/compact.ml[176,5553+4]..[176,5553+12])                core_type (lex/compact.ml[176,5553+14]..[176,5553+23])
                  Ptyp_constr "array" (lex/compact.ml[176,5553+18]..[176,5553+23])
                  [
                    core_type (lex/compact.ml[176,5553+14]..[176,5553+17])
                      Ptyp_constr "int" (lex/compact.ml[176,5553+14]..[176,5553+17])
                      []
                  ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (lex/compact.ml[179,5581+0]..[232,7494+8])
    Pstr_value Nonrec
    [
      <def>
        pattern (lex/compact.ml[179,5581+4]..[179,5581+18])
          Ppat_var "compact_tables" (lex/compact.ml[179,5581+4]..[179,5581+18])
        expression (lex/compact.ml[179,5581+19]..[232,7494+8]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lex/compact.ml[179,5581+19]..[179,5581+26])
            Ppat_var "state_v" (lex/compact.ml[179,5581+19]..[179,5581+26])
          expression (lex/compact.ml[180,5610+2]..[232,7494+8])
            Pexp_let Nonrec
            [
              <def>
                pattern (lex/compact.ml[180,5610+6]..[180,5610+7])
                  Ppat_var "n" (lex/compact.ml[180,5610+6]..[180,5610+7])
                expression (lex/compact.ml[180,5610+10]..[180,5610+30])
                  Pexp_apply
                  expression (lex/compact.ml[180,5610+10]..[180,5610+22])
                    Pexp_ident "Array.length" (lex/compact.ml[180,5610+10]..[180,5610+22])
                  [
                    <arg>
                    Nolabel
                      expression (lex/compact.ml[180,5610+23]..[180,5610+30])
                        Pexp_ident "state_v" (lex/compact.ml[180,5610+23]..[180,5610+30])
                  ]
            ]
            expression (lex/compact.ml[181,5644+2]..[232,7494+8])
              Pexp_let Nonrec
              [
                <def>
                  pattern (lex/compact.ml[181,5644+6]..[181,5644+10])
                    Ppat_var "base" (lex/compact.ml[181,5644+6]..[181,5644+10])
                  expression (lex/compact.ml[181,5644+13]..[181,5644+27])
                    Pexp_apply
                    expression (lex/compact.ml[181,5644+13]..[181,5644+23])
                      Pexp_ident "Array.make" (lex/compact.ml[181,5644+13]..[181,5644+23])
                    [
                      <arg>
                      Nolabel
                        expression (lex/compact.ml[181,5644+24]..[181,5644+25])
                          Pexp_ident "n" (lex/compact.ml[181,5644+24]..[181,5644+25])
                      <arg>
                      Nolabel
                        expression (lex/compact.ml[181,5644+26]..[181,5644+27])
                          Pexp_constant PConst_int (0,None)
                    ]
                <def>
                  pattern (lex/compact.ml[182,5672+6]..[182,5672+13])
                    Ppat_var "backtrk" (lex/compact.ml[182,5672+6]..[182,5672+13])
                  expression (lex/compact.ml[182,5672+16]..[182,5672+33])
                    Pexp_apply
                    expression (lex/compact.ml[182,5672+16]..[182,5672+26])
                      Pexp_ident "Array.make" (lex/compact.ml[182,5672+16]..[182,5672+26])
                    [
                      <arg>
                      Nolabel
                        expression (lex/compact.ml[182,5672+27]..[182,5672+28])
                          Pexp_ident "n" (lex/compact.ml[182,5672+27]..[182,5672+28])
                      <arg>
                      Nolabel
                        expression (lex/compact.ml[182,5672+29]..[182,5672+33])
                          Pexp_constant PConst_int (-1,None)
                    ]
                <def>
                  pattern (lex/compact.ml[183,5706+6]..[183,5706+13])
                    Ppat_var "default" (lex/compact.ml[183,5706+6]..[183,5706+13])
                  expression (lex/compact.ml[183,5706+16]..[183,5706+30])
                    Pexp_apply
                    expression (lex/compact.ml[183,5706+16]..[183,5706+26])
                      Pexp_ident "Array.make" (lex/compact.ml[183,5706+16]..[183,5706+26])
                    [
                      <arg>
                      Nolabel
                        expression (lex/compact.ml[183,5706+27]..[183,5706+28])
                          Pexp_ident "n" (lex/compact.ml[183,5706+27]..[183,5706+28])
                      <arg>
                      Nolabel
                        expression (lex/compact.ml[183,5706+29]..[183,5706+30])
                          Pexp_constant PConst_int (0,None)
                    ]
                <def>
                  pattern (lex/compact.ml[184,5737+6]..[184,5737+15])
                    Ppat_var "base_code" (lex/compact.ml[184,5737+6]..[184,5737+15])
                  expression (lex/compact.ml[184,5737+18]..[184,5737+32])
                    Pexp_apply
                    expression (lex/compact.ml[184,5737+18]..[184,5737+28])
                      Pexp_ident "Array.make" (lex/compact.ml[184,5737+18]..[184,5737+28])
                    [
                      <arg>
                      Nolabel
                        expression (lex/compact.ml[184,5737+29]..[184,5737+30])
                          Pexp_ident "n" (lex/compact.ml[184,5737+29]..[184,5737+30])
                      <arg>
                      Nolabel
                        expression (lex/compact.ml[184,5737+31]..[184,5737+32])
                          Pexp_constant PConst_int (0,None)
                    ]
                <def>
                  pattern (lex/compact.ml[185,5770+6]..[185,5770+18])
                    Ppat_var "backtrk_code" (lex/compact.ml[185,5770+6]..[185,5770+18])
                  expression (lex/compact.ml[185,5770+21]..[185,5770+35])
                    Pexp_apply
                    expression (lex/compact.ml[185,5770+21]..[185,5770+31])
                      Pexp_ident "Array.make" (lex/compact.ml[185,5770+21]..[185,5770+31])
                    [
                      <arg>
                      Nolabel
                        expression (lex/compact.ml[185,5770+32]..[185,5770+33])
                          Pexp_ident "n" (lex/compact.ml[185,5770+32]..[185,5770+33])
                      <arg>
                      Nolabel
                        expression (lex/compact.ml[185,5770+34]..[185,5770+35])
                          Pexp_constant PConst_int (0,None)
                    ]
                <def>
                  pattern (lex/compact.ml[186,5806+6]..[186,5806+18])
                    Ppat_var "default_code" (lex/compact.ml[186,5806+6]..[186,5806+18])
                  expression (lex/compact.ml[186,5806+21]..[186,5806+35])
                    Pexp_apply
                    expression (lex/compact.ml[186,5806+21]..[186,5806+31])
                      Pexp_ident "Array.make" (lex/compact.ml[186,5806+21]..[186,5806+31])
                    [
                      <arg>
                      Nolabel
                        expression (lex/compact.ml[186,5806+32]..[186,5806+33])
                          Pexp_ident "n" (lex/compact.ml[186,5806+32]..[186,5806+33])
                      <arg>
                      Nolabel
                        expression (lex/compact.ml[186,5806+34]..[186,5806+35])
                          Pexp_constant PConst_int (0,None)
                    ]
              ]
              expression (lex/compact.ml[187,5845+2]..[232,7494+8])
                Pexp_sequence
                expression (lex/compact.ml[187,5845+2]..[202,6386+6])
                  Pexp_for Up
                  pattern (lex/compact.ml[187,5845+6]..[187,5845+7])
                    Ppat_var "i" (lex/compact.ml[187,5845+6]..[187,5845+7])
                  expression (lex/compact.ml[187,5845+10]..[187,5845+11])
                    Pexp_constant PConst_int (0,None)
                  expression (lex/compact.ml[187,5845+15]..[187,5845+20])
                    Pexp_apply
                    expression (lex/compact.ml[187,5845+17]..[187,5845+18])
                      Pexp_ident "-" (lex/compact.ml[187,5845+17]..[187,5845+18])
                    [
                      <arg>
                      Nolabel
                        expression (lex/compact.ml[187,5845+15]..[187,5845+16])
                          Pexp_ident "n" (lex/compact.ml[187,5845+15]..[187,5845+16])
                      <arg>
                      Nolabel
                        expression (lex/compact.ml[187,5845+19]..[187,5845+20])
                          Pexp_constant PConst_int (1,None)
                    ]
                  expression (lex/compact.ml[188,5869+4]..[201,6322+63])
                    Pexp_match
                    expression (lex/compact.ml[188,5869+10]..[188,5869+21])
                      Pexp_apply
                      expression (lex/compact.ml[188,5869+10]..[188,5869+21]) ghost
                        Pexp_ident "Array.get" (lex/compact.ml[188,5869+10]..[188,5869+21]) ghost
                      [
                        <arg>
                        Nolabel
                          expression (lex/compact.ml[188,5869+10]..[188,5869+17])
                            Pexp_ident "state_v" (lex/compact.ml[188,5869+10]..[188,5869+17])
                        <arg>
                        Nolabel
                          expression (lex/compact.ml[188,5869+19]..[188,5869+20])
                            Pexp_ident "i" (lex/compact.ml[188,5869+19]..[188,5869+20])
                      ]
                    [
                      <case>
                        pattern (lex/compact.ml[189,5896+6]..[189,5896+19])
                          Ppat_construct "Perform" (lex/compact.ml[189,5896+6]..[189,5896+13])
                          Some
                            []
                            pattern (lex/compact.ml[189,5896+14]..[189,5896+19])
                              Ppat_tuple
                              [
                                pattern (lex/compact.ml[189,5896+15]..[189,5896+16])
                                  Ppat_var "n" (lex/compact.ml[189,5896+15]..[189,5896+16])
                                pattern (lex/compact.ml[189,5896+17]..[189,5896+18])
                                  Ppat_var "c" (lex/compact.ml[189,5896+17]..[189,5896+18])
                              ]
                        expression (lex/compact.ml[190,5919+8]..[191,5948+40])
                          Pexp_sequence
                          expression (lex/compact.ml[190,5919+8]..[190,5919+26])
                            Pexp_apply
                            expression (lex/compact.ml[190,5919+8]..[190,5919+26]) ghost
                              Pexp_ident "Array.set" (lex/compact.ml[190,5919+8]..[190,5919+26]) ghost
                            [
                              <arg>
                              Nolabel
                                expression (lex/compact.ml[190,5919+8]..[190,5919+12])
                                  Pexp_ident "base" (lex/compact.ml[190,5919+8]..[190,5919+12])
                              <arg>
                              Nolabel
                                expression (lex/compact.ml[190,5919+14]..[190,5919+15])
                                  Pexp_ident "i" (lex/compact.ml[190,5919+14]..[190,5919+15])
                              <arg>
                              Nolabel
                                expression (lex/compact.ml[190,5919+20]..[190,5919+26])
                                  Pexp_apply
                                  expression (lex/compact.ml[190,5919+20]..[190,5919+21])
                                    Pexp_ident "~-" (lex/compact.ml[190,5919+20]..[190,5919+21])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lex/compact.ml[190,5919+21]..[190,5919+26])
                                        Pexp_apply
                                        expression (lex/compact.ml[190,5919+23]..[190,5919+24])
                                          Pexp_ident "+" (lex/compact.ml[190,5919+23]..[190,5919+24])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lex/compact.ml[190,5919+22]..[190,5919+23])
                                              Pexp_ident "n" (lex/compact.ml[190,5919+22]..[190,5919+23])
                                          <arg>
                                          Nolabel
                                            expression (lex/compact.ml[190,5919+24]..[190,5919+25])
                                              Pexp_constant PConst_int (1,None)
                                        ]
                                  ]
                            ]
                          expression (lex/compact.ml[191,5948+8]..[191,5948+40])
                            Pexp_apply
                            expression (lex/compact.ml[191,5948+8]..[191,5948+40]) ghost
                              Pexp_ident "Array.set" (lex/compact.ml[191,5948+8]..[191,5948+40]) ghost
                            [
                              <arg>
                              Nolabel
                                expression (lex/compact.ml[191,5948+8]..[191,5948+17])
                                  Pexp_ident "base_code" (lex/compact.ml[191,5948+8]..[191,5948+17])
                              <arg>
                              Nolabel
                                expression (lex/compact.ml[191,5948+19]..[191,5948+20])
                                  Pexp_ident "i" (lex/compact.ml[191,5948+19]..[191,5948+20])
                              <arg>
                              Nolabel
                                expression (lex/compact.ml[191,5948+25]..[191,5948+40])
                                  Pexp_apply
                                  expression (lex/compact.ml[191,5948+25]..[191,5948+38])
                                    Pexp_ident "emit_tag_code" (lex/compact.ml[191,5948+25]..[191,5948+38])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lex/compact.ml[191,5948+39]..[191,5948+40])
                                        Pexp_ident "c" (lex/compact.ml[191,5948+39]..[191,5948+40])
                                  ]
                            ]
                      <case>
                        pattern (lex/compact.ml[192,5989+6]..[192,5989+24])
                          Ppat_construct "Shift" (lex/compact.ml[192,5989+6]..[192,5989+11])
                          Some
                            []
                            pattern (lex/compact.ml[192,5989+11]..[192,5989+24])
                              Ppat_tuple
                              [
                                pattern (lex/compact.ml[192,5989+12]..[192,5989+17])
                                  Ppat_var "trans" (lex/compact.ml[192,5989+12]..[192,5989+17])
                                pattern (lex/compact.ml[192,5989+19]..[192,5989+23])
                                  Ppat_var "move" (lex/compact.ml[192,5989+19]..[192,5989+23])
                              ]
                        expression (lex/compact.ml[193,6017+8]..[201,6322+63])
                          Pexp_sequence
                          expression (lex/compact.ml[193,6017+8]..[198,6183+11])
                            Pexp_match
                            expression (lex/compact.ml[193,6017+20]..[193,6017+25])
                              Pexp_ident "trans" (lex/compact.ml[193,6017+20]..[193,6017+25])
                            [
                              <case>
                                pattern (lex/compact.ml[194,6048+10]..[194,6048+21])
                                  Ppat_construct "No_remember" (lex/compact.ml[194,6048+10]..[194,6048+21])
                                  None
                                expression (lex/compact.ml[194,6048+25]..[194,6048+27])
                                  Pexp_construct "()" (lex/compact.ml[194,6048+25]..[194,6048+27])
                                  None
                              <case>
                                pattern (lex/compact.ml[195,6076+10]..[195,6076+24])
                                  Ppat_construct "Remember" (lex/compact.ml[195,6076+10]..[195,6076+18])
                                  Some
                                    []
                                    pattern (lex/compact.ml[195,6076+19]..[195,6076+24])
                                      Ppat_tuple
                                      [
                                        pattern (lex/compact.ml[195,6076+20]..[195,6076+21])
                                          Ppat_var "n" (lex/compact.ml[195,6076+20]..[195,6076+21])
                                        pattern (lex/compact.ml[195,6076+22]..[195,6076+23])
                                          Ppat_var "c" (lex/compact.ml[195,6076+22]..[195,6076+23])
                                      ]
                                expression (lex/compact.ml[196,6104+12]..[197,6135+47])
                                  Pexp_sequence
                                  expression (lex/compact.ml[196,6104+12]..[196,6104+28])
                                    Pexp_apply
                                    expression (lex/compact.ml[196,6104+12]..[196,6104+28]) ghost
                                      Pexp_ident "Array.set" (lex/compact.ml[196,6104+12]..[196,6104+28]) ghost
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lex/compact.ml[196,6104+12]..[196,6104+19])
                                          Pexp_ident "backtrk" (lex/compact.ml[196,6104+12]..[196,6104+19])
                                      <arg>
                                      Nolabel
                                        expression (lex/compact.ml[196,6104+21]..[196,6104+22])
                                          Pexp_ident "i" (lex/compact.ml[196,6104+21]..[196,6104+22])
                                      <arg>
                                      Nolabel
                                        expression (lex/compact.ml[196,6104+27]..[196,6104+28])
                                          Pexp_ident "n" (lex/compact.ml[196,6104+27]..[196,6104+28])
                                    ]
                                  expression (lex/compact.ml[197,6135+12]..[197,6135+47])
                                    Pexp_apply
                                    expression (lex/compact.ml[197,6135+12]..[197,6135+47]) ghost
                                      Pexp_ident "Array.set" (lex/compact.ml[197,6135+12]..[197,6135+47]) ghost
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lex/compact.ml[197,6135+12]..[197,6135+24])
                                          Pexp_ident "backtrk_code" (lex/compact.ml[197,6135+12]..[197,6135+24])
                                      <arg>
                                      Nolabel
                                        expression (lex/compact.ml[197,6135+26]..[197,6135+27])
                                          Pexp_ident "i" (lex/compact.ml[197,6135+26]..[197,6135+27])
                                      <arg>
                                      Nolabel
                                        expression (lex/compact.ml[197,6135+32]..[197,6135+47])
                                          Pexp_apply
                                          expression (lex/compact.ml[197,6135+32]..[197,6135+45])
                                            Pexp_ident "emit_tag_code" (lex/compact.ml[197,6135+32]..[197,6135+45])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lex/compact.ml[197,6135+46]..[197,6135+47])
                                                Pexp_ident "c" (lex/compact.ml[197,6135+46]..[197,6135+47])
                                          ]
                                    ]
                            ]
                          expression (lex/compact.ml[199,6196+8]..[201,6322+63])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lex/compact.ml[199,6196+12]..[199,6196+48])
                                  Ppat_tuple
                                  [
                                    pattern (lex/compact.ml[199,6196+12]..[199,6196+30])
                                      Ppat_tuple
                                      [
                                        pattern (lex/compact.ml[199,6196+13]..[199,6196+20])
                                          Ppat_var "b_trans" (lex/compact.ml[199,6196+13]..[199,6196+20])
                                        pattern (lex/compact.ml[199,6196+22]..[199,6196+29])
                                          Ppat_var "d_trans" (lex/compact.ml[199,6196+22]..[199,6196+29])
                                      ]
                                    pattern (lex/compact.ml[199,6196+31]..[199,6196+48])
                                      Ppat_tuple
                                      [
                                        pattern (lex/compact.ml[199,6196+32]..[199,6196+39])
                                          Ppat_var "b_moves" (lex/compact.ml[199,6196+32]..[199,6196+39])
                                        pattern (lex/compact.ml[199,6196+40]..[199,6196+47])
                                          Ppat_var "d_moves" (lex/compact.ml[199,6196+40]..[199,6196+47])
                                      ]
                                  ]
                                expression (lex/compact.ml[199,6196+51]..[199,6196+68])
                                  Pexp_apply
                                  expression (lex/compact.ml[199,6196+51]..[199,6196+61])
                                    Pexp_ident "pack_moves" (lex/compact.ml[199,6196+51]..[199,6196+61])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lex/compact.ml[199,6196+62]..[199,6196+63])
                                        Pexp_ident "i" (lex/compact.ml[199,6196+62]..[199,6196+63])
                                    <arg>
                                    Nolabel
                                      expression (lex/compact.ml[199,6196+64]..[199,6196+68])
                                        Pexp_ident "move" (lex/compact.ml[199,6196+64]..[199,6196+68])
                                  ]
                            ]
                            expression (lex/compact.ml[200,6268+8]..[201,6322+63])
                              Pexp_sequence
                              expression (lex/compact.ml[200,6268+8]..[200,6268+27])
                                Pexp_apply
                                expression (lex/compact.ml[200,6268+8]..[200,6268+27]) ghost
                                  Pexp_ident "Array.set" (lex/compact.ml[200,6268+8]..[200,6268+27]) ghost
                                [
                                  <arg>
                                  Nolabel
                                    expression (lex/compact.ml[200,6268+8]..[200,6268+12])
                                      Pexp_ident "base" (lex/compact.ml[200,6268+8]..[200,6268+12])
                                  <arg>
                                  Nolabel
                                    expression (lex/compact.ml[200,6268+14]..[200,6268+15])
                                      Pexp_ident "i" (lex/compact.ml[200,6268+14]..[200,6268+15])
                                  <arg>
                                  Nolabel
                                    expression (lex/compact.ml[200,6268+20]..[200,6268+27])
                                      Pexp_ident "b_trans" (lex/compact.ml[200,6268+20]..[200,6268+27])
                                ]
                              expression (lex/compact.ml[200,6268+29]..[201,6322+63])
                                Pexp_sequence
                                expression (lex/compact.ml[200,6268+29]..[200,6268+51])
                                  Pexp_apply
                                  expression (lex/compact.ml[200,6268+29]..[200,6268+51]) ghost
                                    Pexp_ident "Array.set" (lex/compact.ml[200,6268+29]..[200,6268+51]) ghost
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lex/compact.ml[200,6268+29]..[200,6268+36])
                                        Pexp_ident "default" (lex/compact.ml[200,6268+29]..[200,6268+36])
                                    <arg>
                                    Nolabel
                                      expression (lex/compact.ml[200,6268+38]..[200,6268+39])
                                        Pexp_ident "i" (lex/compact.ml[200,6268+38]..[200,6268+39])
                                    <arg>
                                    Nolabel
                                      expression (lex/compact.ml[200,6268+44]..[200,6268+51])
                                        Pexp_ident "d_trans" (lex/compact.ml[200,6268+44]..[200,6268+51])
                                  ]
                                expression (lex/compact.ml[201,6322+8]..[201,6322+63])
                                  Pexp_sequence
                                  expression (lex/compact.ml[201,6322+8]..[201,6322+32])
                                    Pexp_apply
                                    expression (lex/compact.ml[201,6322+8]..[201,6322+32]) ghost
                                      Pexp_ident "Array.set" (lex/compact.ml[201,6322+8]..[201,6322+32]) ghost
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lex/compact.ml[201,6322+8]..[201,6322+17])
                                          Pexp_ident "base_code" (lex/compact.ml[201,6322+8]..[201,6322+17])
                                      <arg>
                                      Nolabel
                                        expression (lex/compact.ml[201,6322+19]..[201,6322+20])
                                          Pexp_ident "i" (lex/compact.ml[201,6322+19]..[201,6322+20])
                                      <arg>
                                      Nolabel
                                        expression (lex/compact.ml[201,6322+25]..[201,6322+32])
                                          Pexp_ident "b_moves" (lex/compact.ml[201,6322+25]..[201,6322+32])
                                    ]
                                  expression (lex/compact.ml[201,6322+34]..[201,6322+61])
                                    Pexp_apply
                                    expression (lex/compact.ml[201,6322+34]..[201,6322+61]) ghost
                                      Pexp_ident "Array.set" (lex/compact.ml[201,6322+34]..[201,6322+61]) ghost
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lex/compact.ml[201,6322+34]..[201,6322+46])
                                          Pexp_ident "default_code" (lex/compact.ml[201,6322+34]..[201,6322+46])
                                      <arg>
                                      Nolabel
                                        expression (lex/compact.ml[201,6322+48]..[201,6322+49])
                                          Pexp_ident "i" (lex/compact.ml[201,6322+48]..[201,6322+49])
                                      <arg>
                                      Nolabel
                                        expression (lex/compact.ml[201,6322+54]..[201,6322+61])
                                          Pexp_ident "d_moves" (lex/compact.ml[201,6322+54]..[201,6322+61])
                                    ]
                    ]
                expression (lex/compact.ml[203,6394+2]..[232,7494+8])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (lex/compact.ml[203,6394+6]..[203,6394+10])
                        Ppat_var "code" (lex/compact.ml[203,6394+6]..[203,6394+10])
                      expression (lex/compact.ml[203,6394+13]..[203,6394+28])
                        Pexp_apply
                        expression (lex/compact.ml[203,6394+13]..[203,6394+23])
                          Pexp_ident "Table.trim" (lex/compact.ml[203,6394+13]..[203,6394+23])
                        [
                          <arg>
                          Nolabel
                            expression (lex/compact.ml[203,6394+24]..[203,6394+28])
                              Pexp_ident "code" (lex/compact.ml[203,6394+24]..[203,6394+28])
                        ]
                  ]
                  expression (lex/compact.ml[204,6426+2]..[232,7494+8])
                    Pexp_let Nonrec
                    [
                      <def>
                        pattern (lex/compact.ml[204,6426+6]..[204,6426+12])
                          Ppat_var "tables" (lex/compact.ml[204,6426+6]..[204,6426+12])
                        expression (lex/compact.ml[205,6441+4]..[228,7416+24])
                          Pexp_ifthenelse
                          expression (lex/compact.ml[205,6441+7]..[205,6441+28])
                            Pexp_apply
                            expression (lex/compact.ml[205,6441+25]..[205,6441+26])
                              Pexp_ident ">" (lex/compact.ml[205,6441+25]..[205,6441+26])
                            [
                              <arg>
                              Nolabel
                                expression (lex/compact.ml[205,6441+7]..[205,6441+24])
                                  Pexp_apply
                                  expression (lex/compact.ml[205,6441+7]..[205,6441+19])
                                    Pexp_ident "Array.length" (lex/compact.ml[205,6441+7]..[205,6441+19])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lex/compact.ml[205,6441+20]..[205,6441+24])
                                        Pexp_ident "code" (lex/compact.ml[205,6441+20]..[205,6441+24])
                                  ]
                              <arg>
                              Nolabel
                                expression (lex/compact.ml[205,6441+27]..[205,6441+28])
                                  Pexp_constant PConst_int (1,None)
                            ]
                          expression (lex/compact.ml[206,6475+6]..[216,6950+24])
                            Pexp_record
                            [
                              "tbl_base" (lex/compact.ml[206,6475+8]..[206,6475+16])
                                expression (lex/compact.ml[206,6475+19]..[206,6475+23])
                                  Pexp_ident "base" (lex/compact.ml[206,6475+19]..[206,6475+23])
                              "tbl_backtrk" (lex/compact.ml[207,6500+8]..[207,6500+19])
                                expression (lex/compact.ml[207,6500+22]..[207,6500+29])
                                  Pexp_ident "backtrk" (lex/compact.ml[207,6500+22]..[207,6500+29])
                              "tbl_default" (lex/compact.ml[208,6531+8]..[208,6531+19])
                                expression (lex/compact.ml[208,6531+22]..[208,6531+29])
                                  Pexp_ident "default" (lex/compact.ml[208,6531+22]..[208,6531+29])
                              "tbl_trans" (lex/compact.ml[209,6562+8]..[209,6562+17])
                                expression (lex/compact.ml[209,6562+20]..[209,6562+63])
                                  Pexp_apply
                                  expression (lex/compact.ml[209,6562+20]..[209,6562+29])
                                    Pexp_ident "Array.sub" (lex/compact.ml[209,6562+20]..[209,6562+29])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lex/compact.ml[209,6562+30]..[209,6562+43])
                                        Pexp_field
                                        expression (lex/compact.ml[209,6562+30]..[209,6562+35])
                                          Pexp_ident "trans" (lex/compact.ml[209,6562+30]..[209,6562+35])
                                        "c_trans" (lex/compact.ml[209,6562+36]..[209,6562+43])
                                    <arg>
                                    Nolabel
                                      expression (lex/compact.ml[209,6562+44]..[209,6562+45])
                                        Pexp_constant PConst_int (0,None)
                                    <arg>
                                    Nolabel
                                      expression (lex/compact.ml[209,6562+46]..[209,6562+63])
                                        Pexp_field
                                        expression (lex/compact.ml[209,6562+46]..[209,6562+51])
                                          Pexp_ident "trans" (lex/compact.ml[209,6562+46]..[209,6562+51])
                                        "c_last_used" (lex/compact.ml[209,6562+52]..[209,6562+63])
                                  ]
                              "tbl_check" (lex/compact.ml[210,6627+8]..[210,6627+17])
                                expression (lex/compact.ml[210,6627+20]..[210,6627+63])
                                  Pexp_apply
                                  expression (lex/compact.ml[210,6627+20]..[210,6627+29])
                                    Pexp_ident "Array.sub" (lex/compact.ml[210,6627+20]..[210,6627+29])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lex/compact.ml[210,6627+30]..[210,6627+43])
                                        Pexp_field
                                        expression (lex/compact.ml[210,6627+30]..[210,6627+35])
                                          Pexp_ident "trans" (lex/compact.ml[210,6627+30]..[210,6627+35])
                                        "c_check" (lex/compact.ml[210,6627+36]..[210,6627+43])
                                    <arg>
                                    Nolabel
                                      expression (lex/compact.ml[210,6627+44]..[210,6627+45])
                                        Pexp_constant PConst_int (0,None)
                                    <arg>
                                    Nolabel
                                      expression (lex/compact.ml[210,6627+46]..[210,6627+63])
                                        Pexp_field
                                        expression (lex/compact.ml[210,6627+46]..[210,6627+51])
                                          Pexp_ident "trans" (lex/compact.ml[210,6627+46]..[210,6627+51])
                                        "c_last_used" (lex/compact.ml[210,6627+52]..[210,6627+63])
                                  ]
                              "tbl_base_code" (lex/compact.ml[211,6692+8]..[211,6692+21])
                                expression (lex/compact.ml[211,6692+24]..[211,6692+33])
                                  Pexp_ident "base_code" (lex/compact.ml[211,6692+24]..[211,6692+33])
                              "tbl_backtrk_code" (lex/compact.ml[212,6728+8]..[212,6728+24])
                                expression (lex/compact.ml[212,6728+27]..[212,6728+39])
                                  Pexp_ident "backtrk_code" (lex/compact.ml[212,6728+27]..[212,6728+39])
                              "tbl_default_code" (lex/compact.ml[213,6769+8]..[213,6769+24])
                                expression (lex/compact.ml[213,6769+27]..[213,6769+39])
                                  Pexp_ident "default_code" (lex/compact.ml[213,6769+27]..[213,6769+39])
                              "tbl_trans_code" (lex/compact.ml[214,6810+8]..[214,6810+22])
                                expression (lex/compact.ml[214,6810+25]..[214,6810+68])
                                  Pexp_apply
                                  expression (lex/compact.ml[214,6810+25]..[214,6810+34])
                                    Pexp_ident "Array.sub" (lex/compact.ml[214,6810+25]..[214,6810+34])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lex/compact.ml[214,6810+35]..[214,6810+48])
                                        Pexp_field
                                        expression (lex/compact.ml[214,6810+35]..[214,6810+40])
                                          Pexp_ident "moves" (lex/compact.ml[214,6810+35]..[214,6810+40])
                                        "c_trans" (lex/compact.ml[214,6810+41]..[214,6810+48])
                                    <arg>
                                    Nolabel
                                      expression (lex/compact.ml[214,6810+49]..[214,6810+50])
                                        Pexp_constant PConst_int (0,None)
                                    <arg>
                                    Nolabel
                                      expression (lex/compact.ml[214,6810+51]..[214,6810+68])
                                        Pexp_field
                                        expression (lex/compact.ml[214,6810+51]..[214,6810+56])
                                          Pexp_ident "moves" (lex/compact.ml[214,6810+51]..[214,6810+56])
                                        "c_last_used" (lex/compact.ml[214,6810+57]..[214,6810+68])
                                  ]
                              "tbl_check_code" (lex/compact.ml[215,6880+8]..[215,6880+22])
                                expression (lex/compact.ml[215,6880+25]..[215,6880+68])
                                  Pexp_apply
                                  expression (lex/compact.ml[215,6880+25]..[215,6880+34])
                                    Pexp_ident "Array.sub" (lex/compact.ml[215,6880+25]..[215,6880+34])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lex/compact.ml[215,6880+35]..[215,6880+48])
                                        Pexp_field
                                        expression (lex/compact.ml[215,6880+35]..[215,6880+40])
                                          Pexp_ident "moves" (lex/compact.ml[215,6880+35]..[215,6880+40])
                                        "c_check" (lex/compact.ml[215,6880+41]..[215,6880+48])
                                    <arg>
                                    Nolabel
                                      expression (lex/compact.ml[215,6880+49]..[215,6880+50])
                                        Pexp_constant PConst_int (0,None)
                                    <arg>
                                    Nolabel
                                      expression (lex/compact.ml[215,6880+51]..[215,6880+68])
                                        Pexp_field
                                        expression (lex/compact.ml[215,6880+51]..[215,6880+56])
                                          Pexp_ident "moves" (lex/compact.ml[215,6880+51]..[215,6880+56])
                                        "c_last_used" (lex/compact.ml[215,6880+57]..[215,6880+68])
                                  ]
                              "tbl_code" (lex/compact.ml[216,6950+8]..[216,6950+16])
                                expression (lex/compact.ml[216,6950+19]..[216,6950+23])
                                  Pexp_ident "code" (lex/compact.ml[216,6950+19]..[216,6950+23])
                            ]
                            None
                          Some
                            expression (lex/compact.ml[218,7039+7]..[228,7416+24])
                              Pexp_record
                              [
                                "tbl_base" (lex/compact.ml[218,7039+9]..[218,7039+17])
                                  expression (lex/compact.ml[218,7039+20]..[218,7039+24])
                                    Pexp_ident "base" (lex/compact.ml[218,7039+20]..[218,7039+24])
                                "tbl_backtrk" (lex/compact.ml[219,7065+8]..[219,7065+19])
                                  expression (lex/compact.ml[219,7065+22]..[219,7065+29])
                                    Pexp_ident "backtrk" (lex/compact.ml[219,7065+22]..[219,7065+29])
                                "tbl_default" (lex/compact.ml[220,7096+8]..[220,7096+19])
                                  expression (lex/compact.ml[220,7096+22]..[220,7096+29])
                                    Pexp_ident "default" (lex/compact.ml[220,7096+22]..[220,7096+29])
                                "tbl_trans" (lex/compact.ml[221,7127+8]..[221,7127+17])
                                  expression (lex/compact.ml[221,7127+20]..[221,7127+63])
                                    Pexp_apply
                                    expression (lex/compact.ml[221,7127+20]..[221,7127+29])
                                      Pexp_ident "Array.sub" (lex/compact.ml[221,7127+20]..[221,7127+29])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lex/compact.ml[221,7127+30]..[221,7127+43])
                                          Pexp_field
                                          expression (lex/compact.ml[221,7127+30]..[221,7127+35])
                                            Pexp_ident "trans" (lex/compact.ml[221,7127+30]..[221,7127+35])
                                          "c_trans" (lex/compact.ml[221,7127+36]..[221,7127+43])
                                      <arg>
                                      Nolabel
                                        expression (lex/compact.ml[221,7127+44]..[221,7127+45])
                                          Pexp_constant PConst_int (0,None)
                                      <arg>
                                      Nolabel
                                        expression (lex/compact.ml[221,7127+46]..[221,7127+63])
                                          Pexp_field
                                          expression (lex/compact.ml[221,7127+46]..[221,7127+51])
                                            Pexp_ident "trans" (lex/compact.ml[221,7127+46]..[221,7127+51])
                                          "c_last_used" (lex/compact.ml[221,7127+52]..[221,7127+63])
                                    ]
                                "tbl_check" (lex/compact.ml[222,7192+8]..[222,7192+17])
                                  expression (lex/compact.ml[222,7192+20]..[222,7192+63])
                                    Pexp_apply
                                    expression (lex/compact.ml[222,7192+20]..[222,7192+29])
                                      Pexp_ident "Array.sub" (lex/compact.ml[222,7192+20]..[222,7192+29])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lex/compact.ml[222,7192+30]..[222,7192+43])
                                          Pexp_field
                                          expression (lex/compact.ml[222,7192+30]..[222,7192+35])
                                            Pexp_ident "trans" (lex/compact.ml[222,7192+30]..[222,7192+35])
                                          "c_check" (lex/compact.ml[222,7192+36]..[222,7192+43])
                                      <arg>
                                      Nolabel
                                        expression (lex/compact.ml[222,7192+44]..[222,7192+45])
                                          Pexp_constant PConst_int (0,None)
                                      <arg>
                                      Nolabel
                                        expression (lex/compact.ml[222,7192+46]..[222,7192+63])
                                          Pexp_field
                                          expression (lex/compact.ml[222,7192+46]..[222,7192+51])
                                            Pexp_ident "trans" (lex/compact.ml[222,7192+46]..[222,7192+51])
                                          "c_last_used" (lex/compact.ml[222,7192+52]..[222,7192+63])
                                    ]
                                "tbl_base_code" (lex/compact.ml[223,7257+8]..[223,7257+21])
                                  expression (lex/compact.ml[223,7257+24]..[223,7257+28])
                                    Pexp_array
                                    []
                                "tbl_backtrk_code" (lex/compact.ml[224,7288+8]..[224,7288+24])
                                  expression (lex/compact.ml[224,7288+27]..[224,7288+31])
                                    Pexp_array
                                    []
                                "tbl_default_code" (lex/compact.ml[225,7321+8]..[225,7321+24])
                                  expression (lex/compact.ml[225,7321+27]..[225,7321+31])
                                    Pexp_array
                                    []
                                "tbl_trans_code" (lex/compact.ml[226,7354+8]..[226,7354+22])
                                  expression (lex/compact.ml[226,7354+25]..[226,7354+29])
                                    Pexp_array
                                    []
                                "tbl_check_code" (lex/compact.ml[227,7385+8]..[227,7385+22])
                                  expression (lex/compact.ml[227,7385+25]..[227,7385+29])
                                    Pexp_array
                                    []
                                "tbl_code" (lex/compact.ml[228,7416+8]..[228,7416+16])
                                  expression (lex/compact.ml[228,7416+19]..[228,7416+23])
                                    Pexp_array
                                    []
                              ]
                              None
                    ]
                    expression (lex/compact.ml[230,7446+2]..[232,7494+8])
                      Pexp_sequence
                      expression (lex/compact.ml[230,7446+2]..[230,7446+21])
                        Pexp_apply
                        expression (lex/compact.ml[230,7446+2]..[230,7446+15])
                          Pexp_ident "reset_compact" (lex/compact.ml[230,7446+2]..[230,7446+15])
                        [
                          <arg>
                          Nolabel
                            expression (lex/compact.ml[230,7446+16]..[230,7446+21])
                              Pexp_ident "trans" (lex/compact.ml[230,7446+16]..[230,7446+21])
                        ]
                      expression (lex/compact.ml[231,7470+2]..[232,7494+8])
                        Pexp_sequence
                        expression (lex/compact.ml[231,7470+2]..[231,7470+21])
                          Pexp_apply
                          expression (lex/compact.ml[231,7470+2]..[231,7470+15])
                            Pexp_ident "reset_compact" (lex/compact.ml[231,7470+2]..[231,7470+15])
                          [
                            <arg>
                            Nolabel
                              expression (lex/compact.ml[231,7470+16]..[231,7470+21])
                                Pexp_ident "moves" (lex/compact.ml[231,7470+16]..[231,7470+21])
                          ]
                        expression (lex/compact.ml[232,7494+2]..[232,7494+8])
                          Pexp_ident "tables" (lex/compact.ml[232,7494+2]..[232,7494+8])
    ]
]

